<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lucia</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lupeipei.github.io/"/>
  <updated>2021-12-31T09:39:16.904Z</updated>
  <id>http://lupeipei.github.io/</id>
  
  <author>
    <name>Lucia</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>autocmd</title>
    <link href="http://lupeipei.github.io/posts/vimscript-learning-on-autocmd/"/>
    <id>http://lupeipei.github.io/posts/vimscript-learning-on-autocmd/</id>
    <published>2021-12-31T09:31:55.000Z</published>
    <updated>2021-12-31T09:39:16.904Z</updated>
    
    <content type="html"><![CDATA[<p>autocmd 用于配置当某个确定事件发生时, 要执行的命令.</p><p>借用书中的例子, 看一下 autocmd 的基本结构:</p><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="meta">:autocmd BufWritePre,BufRead *.html :normal</span> gg=G</span><br><span class="line"><span class="code">         ^                   ^      ^</span></span><br><span class="line"><span class="code">         |                   |      |</span></span><br><span class="line"><span class="code">         |                   |      需要执行的命令</span></span><br><span class="line"><span class="code">         |                   |</span></span><br><span class="line"><span class="code">         |                   模式, 用来过滤事件</span></span><br><span class="line"><span class="code">         |</span></span><br><span class="line"><span class="code">         监听的事件</span></span><br></pre></td></tr></table></figure><p>这里 BufWritePre, BufRead 都是需要监听的事件, *.html 是需要过滤的模式, 整个命令的含义就是, 当开始写入 html 类型文件或者编辑 html 类型文件之前, 自动执行<code>:normal gg=G</code>, 也就是缩进代码.</p><p>[此处, BufWritePre 指的是开始将整个 Buffer 写入文件 , BufRead 指的是读文件后, 开始编辑. ]</p><p>通过<code>:h autocmd-events</code> 可以查看所有可以绑定 Autocommands 的事件列表.</p><p>其中, 最常用的 Event 是 FileType.</p><p>比如:</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">:<span class="keyword">autocmd</span> FileType javascript <span class="keyword">nnoremap</span> <span class="symbol">&lt;buffer&gt;</span> <span class="symbol">&lt;LocalLeader&gt;</span><span class="keyword">c</span> I//<span class="symbol">&lt;esc&gt;</span></span><br></pre></td></tr></table></figure><p>当打开一个javascript (.js)文件时, 执行<code>nnoremap &lt;buffer&gt; &lt;LocalLeader&gt;c I//&lt;esc&gt;</code>, 也就是按 <code>&lt;LocalLeader&gt;c</code>  会添加注释.</p><p>这里提一个简单的应用.</p><p>Vim中编辑 json 文件的时候, 默认是没有格式化的, 如何实现打开JSON文件时, 自动格式化内容, 方便阅读?</p><p>这里说一下我的做法.</p><p>安装 jq, 附上链接<a href="https://stedolan.github.io/jq/download/">download</a></p><p>修改 <code>.vimrc </code>, 添加:</p><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">autocmd <span class="keyword">BufRead </span>*.<span class="keyword">json </span>%!<span class="keyword">jq </span><span class="string">&#x27;.&#x27;</span></span><br></pre></td></tr></table></figure><p>source 后, 打开 json 格式文件时, 可以看到已经格式化了.</p><p>autocmd 有一个兄弟 augroup. 可以把相近的 autocmd 放在一个group 中:</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">augroup</span> testgroup</span><br><span class="line">  autocmd!</span><br><span class="line">  <span class="keyword">autocmd</span> BufWrite * :<span class="keyword">echom</span> <span class="string">&quot;Cats&quot;</span></span><br><span class="line"><span class="keyword">augroup</span> END</span><br></pre></td></tr></table></figure><p>这里使用<code>autocmd!</code>  来清理之前的 autocmd 设置.</p><p>augroup 的作用, 是用来避免重复定义 autocmd. 官网文档给到的解释是:</p><blockquote><p>This prevents having the autocommands defined twice (e.g., after sourcing the .vimrc file again).</p></blockquote><p>书中使用了一个 BufWrite + echom 的例子来说明使用 augroup 可以避免的问题, 同文档提到的一致, 这里就不细说了.</p><p>附上一个小小的tips. 如果你有执行 augroup 的例子, 会发现 messages 有些多,  想要清理的话, 可以使用<code>:messages clear</code></p><p>OK, 本章结束.</p><p>Bye 2021.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;autocmd 用于配置当某个确定事件发生时, 要执行的命令.&lt;/p&gt;
&lt;p&gt;借用书中的例子, 看一下 autocmd 的基本结构:&lt;/p&gt;
&lt;figure class=&quot;highlight asciidoc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pr
      
    
    </summary>
    
      <category term="VimScript 学习笔记" scheme="http://lupeipei.github.io/categories/VimScript-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Vim" scheme="http://lupeipei.github.io/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>hexo 主题魔改记录</title>
    <link href="http://lupeipei.github.io/posts/custom-hexo-next-theme/"/>
    <id>http://lupeipei.github.io/posts/custom-hexo-next-theme/</id>
    <published>2021-12-28T13:32:58.000Z</published>
    <updated>2021-12-28T13:39:12.493Z</updated>
    
    <content type="html"><![CDATA[<p>自己折腾了下 Hexo 的 next 主题. 给 post 添加了字段 type. 为了避免下次崩了的时候, 我会对着自己写的代码一脸懵逼, 简单记录下……</p><span id="more"></span><p>本文基于 hexo-theme-next version 5.</p><h4 id="首页分页"><a href="#首页分页" class="headerlink" title="首页分页"></a>首页分页</h4><p>预期效果: 在首页不显示 post 中 type 为 book 的文章</p><p>思路: 修改首页的分页, 过滤掉 type 为 book 的文章.</p><p>具体实现:</p><p>参考 <a href="https://github.com/hexojs/hexo-generator-index">hexo-generator-index</a> ,  在 next 的 scripts 下, 添加文件 customIndexPagination.js, 内容如下:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> pagination = <span class="built_in">require</span>(<span class="string">&#x27;hexo-pagination&#x27;</span>);</span><br><span class="line"></span><br><span class="line">hexo.extend.generator.register(<span class="string">&#x27;customIndexPagination&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">locals</span>)</span>&#123;</span><br><span class="line">  locals.posts.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">post</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//  set post default type as post, 设置默认值</span></span><br><span class="line">    <span class="keyword">if</span> (post.type == <span class="literal">undefined</span>) &#123;</span><br><span class="line">      post.type = <span class="string">&quot;post&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> config = <span class="built_in">this</span>.config;</span><br><span class="line">  <span class="keyword">const</span> posts = locals.posts.sort(config.index_generator.order_by);</span><br><span class="line">  <span class="comment">// filter posts with type == &quot;post&quot;, 过滤</span></span><br><span class="line">  <span class="keyword">const</span> postsWithoutbook = posts.find(&#123; <span class="string">&quot;type&quot;</span>: <span class="string">&quot;post&quot;</span> &#125;)</span><br><span class="line"></span><br><span class="line">  posts.data.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> (b.sticky || <span class="number">0</span>) - (a.sticky || <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> paginationDir = config.pagination_dir || <span class="string">&#x27;page&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> path = config.index_generator.path || <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> pagination(path, postsWithoutbook, &#123;</span><br><span class="line">    <span class="attr">perPage</span>: config.index_generator.per_page,</span><br><span class="line">    <span class="attr">layout</span>: [<span class="string">&#x27;index&#x27;</span>, <span class="string">&#x27;archive&#x27;</span>],</span><br><span class="line">    <span class="attr">format</span>: paginationDir + <span class="string">&#x27;/%d/&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="attr">__index</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="分类排序"><a href="#分类排序" class="headerlink" title="分类排序"></a>分类排序</h4><p>预期效果: 同一个 category 中, 所有 type 为 book 的 post 按照指定字段排序后再分页.这里按照 ranked 字段来排序 posts.</p><p>思路: 找到 page下对应的category, 按照 ranked 字段排序后, 调用 slice 实现分页.</p><p>具体实现:</p><p>next version 5 的模板用的是swig 语法, <a href="https://github.com/paularmstrong/swig">swig</a>已经多年不维护, 这个用起来还是折腾的.很多ES6语法不支持. 等后续有时间再折腾, 目前凑合用用swig….</p><p>修改 layout/category.swig, 在 Section部分, 添加如下代码:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;section id=&quot;posts&quot; class=&quot;posts-collapse&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;collection-title&quot;&gt;</span><br><span class="line">    &lt;h2 &gt;&#123;&#123; page.category &#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">...........</span><br><span class="line"></span><br><span class="line">  &#123;% set current = page.current %&#125;</span><br><span class="line">  &#123;% set pre = current - 1 %&#125;</span><br><span class="line">  &#123;% set perPage = config.per_page %&#125;</span><br><span class="line">  &#123;% set category = site.categories.findOne(&#123; &quot;name&quot;: page.category &#125;) %&#125;</span><br><span class="line">  &#123;% set posts = category.posts.sort(&#x27;ranked&#x27;) %&#125;</span><br><span class="line">  &#123;% set bookPost = posts.find(&#123; type: &#x27;book&#x27; &#125;) %&#125;</span><br><span class="line">  &#123;% set hasBookPost = bookPost.length &gt; 0 %&#125;</span><br><span class="line">  &#123;% if hasBookPost %&#125;</span><br><span class="line">    &#123;% set posts = posts.slice(perPage * pre, perPage * current) %&#125;</span><br><span class="line">  &#123;% else %&#125;</span><br><span class="line">    &#123;% set posts = page.posts %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">  &#123;% for post in posts %&#125;</span><br><span class="line">    &#123;&#123; post_template.render(post) &#125;&#125;</span><br><span class="line">  &#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">  ..........</span><br></pre></td></tr></table></figure><p>逻辑很简单, 主要调用 slice 来得到当前分页中的posts.</p><p>其中 site.categories 调用了findOne来查找当前页面的category, 参考的是 <a href="https://hexojs.github.io/warehouse/index.html">warehouse</a>.</p><p>OK.</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://github.com/hexojs/hexo-pagination">hexo-pagination</a></p><p><a href="https://github.com/hexojs/hexo-generator-index">hexo-generator-index</a></p><p><a href="https://hexojs.github.io/warehouse/index.html">warehouse</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自己折腾了下 Hexo 的 next 主题. 给 post 添加了字段 type. 为了避免下次崩了的时候, 我会对着自己写的代码一脸懵逼, 简单记录下……&lt;/p&gt;
    
    </summary>
    
      <category term="CS" scheme="http://lupeipei.github.io/categories/CS/"/>
    
    
      <category term="Hexo" scheme="http://lupeipei.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Buffer-Local</title>
    <link href="http://lupeipei.github.io/posts/vimscript-learning-on-buffer-local/"/>
    <id>http://lupeipei.github.io/posts/vimscript-learning-on-buffer-local/</id>
    <published>2021-12-28T01:34:51.000Z</published>
    <updated>2021-12-28T08:07:12.470Z</updated>
    
    <content type="html"><![CDATA[<p>这一章的内容结合了前面学到的知识.</p><p>Buffer-Local, 顾名思义, 基于 Buffer,  只针对当前 Buffer 有效.</p><p>前面遇到的 mappings, options , abbreviations, 当需要只对当前 Buffer 生效时, 命令分别是什么呢?</p><p>来逐个说明下.</p><ul><li><p>mappings</p><p>打开任意文件, 在命令行模式下, 输入:</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">:<span class="keyword">nnoremap</span> <span class="symbol">&lt;buffer&gt;</span> <span class="symbol">&lt;Leader&gt;</span><span class="keyword">x</span> dd</span><br></pre></td></tr></table></figure><p>normal 模式下, 按<code>&lt;Leader&gt;x</code>, 等同于dd, 删除当前行.</p><p>此时, 另开一个文件, 执行同样的操作, 按<code>&lt;Leader&gt;x</code> , 没有变化.</p><p>Buffer-Local mappings 跟通用的 mappings 不一样的地方, 就是多了一个<code>&lt;buffer&gt;</code>, 也很好记.</p><p>需要稍稍注意的是, 当 buffer 与<code>&lt;Leader&gt;</code> 结合时, 建议使用 <code>&lt;LocalLeader&gt;</code> 来代替 <code>&lt;Leader&gt;</code>, 这样避免覆盖了他人的 <code>&lt;leader&gt;</code> mapping.</p><p>上面的例子建议改成:</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">:<span class="keyword">nnoremap</span> <span class="symbol">&lt;buffer&gt;</span> <span class="symbol">&lt;LocalLeader&gt;</span><span class="keyword">x</span> dd</span><br></pre></td></tr></table></figure><p>再看个例子:</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">:<span class="keyword">nnoremap</span> <span class="symbol">&lt;buffer&gt;</span> Q <span class="keyword">x</span></span><br><span class="line">:<span class="keyword">nnoremap</span>          Q dd</span><br></pre></td></tr></table></figure><p>normal 模式下, 按 Q, 发现执行的操作等同 x. 第二个 mapping 配置无效.</p><p>Buffer-Local mappings 会覆盖对应的通用的 mappings 配置.这点同 set options 不大一样, 待会会提到.</p></li><li><p>set options</p><p>基于 Buffer-Local 的设置, 用命令 <code>setlocal</code>.</p><p> 打开任意文件, 在命令行模式下, 输入:</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">:<span class="keyword">set</span> <span class="keyword">number</span></span><br><span class="line">:<span class="keyword">setlocal</span> nonumber</span><br></pre></td></tr></table></figure><p>会发现行号已经消失.</p><p>需要注意的是, 如果 setlocal option 后, 又 set 了同一个 option, 则 setlocal 所做的改变会被覆盖.</p><p>比如:</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">:<span class="keyword">setlocal</span> nonumber</span><br><span class="line">:<span class="keyword">set</span> <span class="keyword">number</span></span><br><span class="line">:<span class="keyword">setlocal</span> <span class="keyword">number</span>?</span><br></pre></td></tr></table></figure><p>此时输出的结果是 number.</p></li><li><p>abbreviations</p><p>同 mappings, Buffer-Local abbreviations 也只需要在<code>abbrev</code> 后, 添加一个<code>&lt;buffer&gt;</code>, 看个例子:</p><p>在当前打开的文件下, 命令行模式输入:</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">:<span class="keyword">iabbrev</span> <span class="symbol">&lt;buffer&gt;</span> <span class="built_in">log</span> logger.<span class="keyword">debug</span></span><br></pre></td></tr></table></figure><p>切换到 insert 模式, 输入log, 会替换成 logger.debug.</p><p>此时, 更换另一个文件, 再次在 insert 模式下, 输入log, 发现没有变化.</p><p>同 mappings 一样, Buffer-Local abbreviations 会覆盖通用的 abbreviations.</p><p>刚刚设置的文件中, 命令行模式输入:</p><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">:iabbrev <span class="keyword">log</span> logger.<span class="keyword">info</span></span><br></pre></td></tr></table></figure><p>切换到 insert 模式, 输入log, 替换的仍然是 Buffer-local 设置的 logger.debug.</p></li></ul><p>OK. Buffer-Local 基本缕完, 下一章来点不一样的.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这一章的内容结合了前面学到的知识.&lt;/p&gt;
&lt;p&gt;Buffer-Local, 顾名思义, 基于 Buffer,  只针对当前 Buffer 有效.&lt;/p&gt;
&lt;p&gt;前面遇到的 mappings, options , abbreviations, 当需要只对当前 Buffer 
      
    
    </summary>
    
      <category term="VimScript 学习笔记" scheme="http://lupeipei.github.io/categories/VimScript-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Vim" scheme="http://lupeipei.github.io/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>Abbreviations</title>
    <link href="http://lupeipei.github.io/posts/vimscript-learning-on-abbrev/"/>
    <id>http://lupeipei.github.io/posts/vimscript-learning-on-abbrev/</id>
    <published>2021-12-23T14:01:41.000Z</published>
    <updated>2021-12-23T14:05:29.705Z</updated>
    
    <content type="html"><![CDATA[<p>Vim 的 Abbreviations 特性, 同 mappings 有些相似, 但是主要用于插入, 替换.</p><p>这里按照原书的思路简单说一下应用.</p><p>先来看个例子.</p><p>在命令行模式下, 输入:</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">:<span class="keyword">iabbrev</span> ned end</span><br></pre></td></tr></table></figure><p>然后在insert 模式下, 输入 ned 后回车或者退出insert 模式, 会发现 ned 已经变成了 end. [多嘴一句: 为什么是insert 模式下呢? 因为iabbrev 前面有个i….]</p><p>这个功能可以很方便纠正一些拼写错误.</p><p>鉴于我常常容易打出 ned, 所以我把这个 iabbrev 放在了 <code>.vimrc</code> 中. 哈哈.</p><p>不过需要注意的是, 用 abbreviation 替换的, 不可以是关键字 keyword, 包括所有的 ASCII 字符, 下划线(_)等.</p><p>可以通过<code>:h isfname</code> 来查看 Vim 中的所有关键字.</p><p>为了省去大伙看文档懵逼的时间, 作者在文中贴心地给了一个简单的记忆方法: 用 abbreviation 来替换的, 不可以是单个字母, 数字或者下划线.</p><p>说到这里, 你大概会猜, 支持扩展缩略的插件, 比如 <a href="https://github.com/mattn/emmet-vim">mattn/emmet-vim</a> 应该是 Abbreviations 的一个典型应用吧.</p><p>我当时就是这么想的, 屁颠屁颠跑去看 <a href="https://github.com/mattn/emmet-vim">mattn/emmet-vim</a> 的源代码想验证下猜想, 结果发现没有 iabbrev 的身影, 取而代之的是 substitute() 函数.🤪 [核心代码都是autoload目录下, 如果你也好奇的话….]</p><p>切回 Abbreviations.</p><p>如果想要清除刚刚的缩写设置, 可以使用:</p><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="symbol">:iunabbrev</span> ned</span><br></pre></td></tr></table></figure><p>如果想要清除所有的缩写设置, 可以使用:</p><figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line"><span class="symbol">:abclear</span></span><br></pre></td></tr></table></figure><p>其中, <code>ab</code> 是 <code>abbrev</code> 的缩写形式….</p><p>上面 ned 那个例子里, 用mapping 也可以实现一样的功能.</p><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="symbol">:inoremap</span> ned <span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>那为什么不用 mapping呢?</p><p>因为 mappings 不会考虑需要替换的字符的上下文情况.[Mappings don’t take into account what characters come before or after the map]</p><p>作者在书中给了个例子. 但是这个例子很奇怪, inoremap 无效.</p><p>所以, 我来整了个简单点的.</p><p>在命令行模式下, 输入:</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">:<span class="keyword">inoremap</span> <span class="built_in">log</span> logger.<span class="keyword">debug</span></span><br></pre></td></tr></table></figure><p>在 insert 模式下, 输入 log, log会自动更换成 logger.debug, 但是当你输入 blog 时, 发现也被自动替换成了blogger.debug.</p><p>这显然不是我们想要的.</p><p>换成 <code>iabbrev</code> 就可以避免这个坑.</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">:<span class="keyword">iunmap</span> <span class="built_in">log</span></span><br><span class="line">:<span class="keyword">iabbrev</span> <span class="built_in">log</span> logger.<span class="keyword">debug</span></span><br></pre></td></tr></table></figure><p>此处用 <code>iunmap</code> 来清除刚刚设置的mapping.</p><p>这时在 insert 模式下, 输入 blog, 发现不会被替换了.</p><p>Bravo~</p><p>OK, Abbreviations 可以告一段落. 自己试着写几个 abbrev 来帮助更正拼写吧😄️</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Vim 的 Abbreviations 特性, 同 mappings 有些相似, 但是主要用于插入, 替换.&lt;/p&gt;
&lt;p&gt;这里按照原书的思路简单说一下应用.&lt;/p&gt;
&lt;p&gt;先来看个例子.&lt;/p&gt;
&lt;p&gt;在命令行模式下, 输入:&lt;/p&gt;
&lt;figure class=&quot;hig
      
    
    </summary>
    
      <category term="VimScript 学习笔记" scheme="http://lupeipei.github.io/categories/VimScript-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Vim" scheme="http://lupeipei.github.io/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>editing your vimrc</title>
    <link href="http://lupeipei.github.io/posts/vimscript-learning-on-edit-your-vimrc/"/>
    <id>http://lupeipei.github.io/posts/vimscript-learning-on-edit-your-vimrc/</id>
    <published>2021-12-22T12:46:36.000Z</published>
    <updated>2021-12-23T08:17:28.375Z</updated>
    
    <content type="html"><![CDATA[<p>这一章结合前面所学的, 实现了两个功能: edit and source your vimrc.</p><p>当你编辑文件时, 如果想要修改 <code>.vimrc</code> 文件, 并使刚刚修改的配置生效, 有什么快捷的方式?</p><p>作者给了如下解决方法.</p><p>编辑<code>.vimrc</code>, 添加如下代码:</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;Leader&gt;</span>ev :<span class="keyword">vsplit</span> $MYVIMRC<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;Leader&gt;</span><span class="keyword">sv</span> :<span class="keyword">source</span> $MYVIMRC<span class="symbol">&lt;CR&gt;</span></span><br></pre></td></tr></table></figure><p>其中, MYVIMRC 是Vim 提供的环境变量, 指的是 <code>.vimrc</code> 文件的位置, 可通过<code>:echo $MYVIMRC</code> 查看 MYVIMRC 的值.</p><p>这里提供了两个 mappings, 按<code>&lt;Leader&gt;ev</code> , 会打开一个新的split, 编辑  <code>.vimrc</code>  文件. 按<code>&lt;Leader&gt;sv</code> , source   <code>.vimrc</code>文件 .</p><p>不得不说, 真的超方便.</p><p>有了范例, 我也倒腾了一个编辑 <code>.tmux.conf</code> 的mapping.</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;Leader&gt;</span>et :<span class="keyword">vsplit</span> $HOME/.tmux.<span class="keyword">conf</span><span class="symbol">&lt;CR&gt;</span></span><br></pre></td></tr></table></figure><p>按<code>&lt;Leader&gt;et</code> , 编辑  <code>.tmux.conf</code>  文件.</p><p>同样也可以来个source:</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;Leader&gt;</span><span class="keyword">st</span> :!tmux <span class="keyword">source</span>-<span class="keyword">file</span> $HOME/.tmux.<span class="keyword">conf</span><span class="symbol">&lt;CR&gt;</span></span><br></pre></td></tr></table></figure><p> 但是通常需要 source  <code>.tmux.conf</code> 的场合, 也多是在 tmux 中, 直接快捷键 <code>Crtl-b + r</code> 就可以了.所以  source <code>.tmux.conf</code> 的这个 mapping 也可以不配置.</p><p>OK,  本章结束, 你也来配置个玩一玩吧^_^</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这一章结合前面所学的, 实现了两个功能: edit and source your vimrc.&lt;/p&gt;
&lt;p&gt;当你编辑文件时, 如果想要修改 &lt;code&gt;.vimrc&lt;/code&gt; 文件, 并使刚刚修改的配置生效, 有什么快捷的方式?&lt;/p&gt;
&lt;p&gt;作者给了如下解决方法.
      
    
    </summary>
    
      <category term="VimScript 学习笔记" scheme="http://lupeipei.github.io/categories/VimScript-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Vim" scheme="http://lupeipei.github.io/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>Leaders</title>
    <link href="http://lupeipei.github.io/posts/vimscript-learning-on-leaders/"/>
    <id>http://lupeipei.github.io/posts/vimscript-learning-on-leaders/</id>
    <published>2021-12-21T13:10:12.000Z</published>
    <updated>2021-12-22T01:50:33.186Z</updated>
    
    <content type="html"><![CDATA[<p>来到了常见的 Leader.</p><p>初学时, 我简单地把 Leader 理解成一个 namespace, 好比 tmux 的 <code>Ctrl+b</code>. 现在看, 也没有偏差太多.</p><p>你可以把 Leader 看成是 Vim 内置的 prefix key.</p><p>Leader 的值存在 mapleader 变量中, 如果 mapleader 未初始化或者值为空, 则默认为 反斜杠 <code>\</code> .</p><p>这里注意: mapleader 是一个 variable, 不是一个 option, 使用 <code>:set mapleader?</code> 会报错的.</p><p>相应的, 如果想要修改 Leader 键, 可以通过给 mapleader 赋值来实现.</p><p>编辑<code>.vimrc</code>, 添加如下代码:</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> mapleader=<span class="string">&quot;-&quot;</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;Leader&gt;</span>d dd</span><br></pre></td></tr></table></figure><p>保存退出, source 后, 打开文件, 在 Normal 模式下, 按 <code>-d</code>, 等同于执行 <code>dd</code>. 即删除当前行. 此时 <code>&lt;Leader&gt;</code> 已变成了<code>-</code> 了, 如果按<code>\d</code> , 会发现无效.</p><p>mapleader 还有一个小兄弟, 叫 maplocalleader,  在 Vim中用特殊的字符串 <code>&lt;LocalLeader&gt;</code> 来表示.</p><p>同样, 可以通过赋值 maplocalleader 来设置   <code>&lt;LocalLeader&gt;</code>  :</p><figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">:<span class="keyword">let</span> <span class="attr">maplocalleader</span> = <span class="string">&quot;\\&quot;</span></span><br></pre></td></tr></table></figure><p>那  <code>&lt;LocalLeader&gt;</code>  是用来干嘛的呢?</p><p>作者在书中提到  <code>&lt;LocalLeader&gt;</code>  用来作为特定文件类型中的前置键.</p><blockquote><p>This is meant to be a prefix for mappings that only take effect for certain types of files, like Python files or HTML files.</p></blockquote><p>这个同官方文档中给出的, 稍稍有些区别.</p><p>Vim 官方文档提到的是 <code>&lt;LocalLeader&gt;</code>  用于只针对当前 buffer 有效的mappings.</p><blockquote><p><code>&lt;LocalLeader&gt;</code>  is to be used for mappings which are local to a buffer.  Example:<br>:map <buffer> <code>&lt;LocalLeader&gt;</code>A  oanother line<Esc></p></blockquote><p>但是文档中也提到了:</p><blockquote><p>In a global plugin <code>&lt;Leader&gt;</code> should be used and in a filetype plugin <code>&lt;LocalLeader&gt;</code>.</p></blockquote><p>全局插件使用 <code>&lt;Leader&gt;</code>  , 特定文件类型的插件, 使用 <code>&lt;LocalLeader&gt;</code>  .[有关Plugin, 后面会单独再介绍]</p><p>当然, 平日里我基本用不到<code>&lt;LocalLeader&gt;</code> , 这里就不折腾了.</p><p>可以查看官方文档了解更多.</p><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="symbol">:h</span> mapleader</span><br><span class="line"><span class="symbol">:h</span> maplocalleader</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;来到了常见的 Leader.&lt;/p&gt;
&lt;p&gt;初学时, 我简单地把 Leader 理解成一个 namespace, 好比 tmux 的 &lt;code&gt;Ctrl+b&lt;/code&gt;. 现在看, 也没有偏差太多.&lt;/p&gt;
&lt;p&gt;你可以把 Leader 看成是 Vim 内置的 pref
      
    
    </summary>
    
      <category term="VimScript 学习笔记" scheme="http://lupeipei.github.io/categories/VimScript-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Vim" scheme="http://lupeipei.github.io/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>mapping</title>
    <link href="http://lupeipei.github.io/posts/vimscript-learning-on-mapping/"/>
    <id>http://lupeipei.github.io/posts/vimscript-learning-on-mapping/</id>
    <published>2021-12-15T10:37:10.000Z</published>
    <updated>2021-12-22T01:50:28.768Z</updated>
    
    <content type="html"><![CDATA[<p>mapping  顾名思义, <code>map a b</code>, 当我执行 a 操作时, 它会做 b 操作会做的事.</p><p>看个例子, 在 Vim 命令行中, 输入:</p><figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">:<span class="keyword">map</span> <span class="string">\</span> dd</span><br></pre></td></tr></table></figure><p>表示, 在 normal 模式下, 按下<code>\</code>, 就会删除当前光标所在的行.</p><p>mapping的设置, 跟模式有关系.</p><p><code>map</code>: normal mode 下的 mapping, 只在 normal 模式下有效.</p><p><code>nmap</code> : normal mode 下的 mapping, 只在 normal 模式下有效.</p><p><code>vmap</code> : visual mode 下的 mapping, 只在 visual 模式下有效.</p><p><code>imap</code> : insert mode 下的 mapping, 只在 insert 模式下有效.</p><p>map 有一个大坑, 叫做 Recursion, 书中给了一个例子, 比如:</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">:<span class="keyword">nmap</span> dd O<span class="symbol">&lt;esc&gt;</span>jddk</span><br></pre></td></tr></table></figure><p>normal 模式下, 按下dd, 等同于执行了<code>O&lt;esc&gt;jddk</code> , 而 <code>O&lt;esc&gt;jddk</code> 也有 <code>dd</code>, Vim 就会再次 mapping, 如此无穷尽….</p><p>解决方法是使用<code>noremap</code>,  nonrecursive mapping. 修改上面那个命令:</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">:<span class="keyword">nnoremap</span> dd O<span class="symbol">&lt;esc&gt;</span>jddk</span><br></pre></td></tr></table></figure><p>这样就正常了. 鉴于 noremap 能避雷,  作者给到的意见时, <strong>Always</strong> using  noremap instead of map. </p><p>再看个例子:</p><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="symbol">:nnoremap</span> &lt;C-s&gt;  <span class="symbol">:suspend&lt;CR&gt;</span></span><br></pre></td></tr></table></figure><p>上述命令表示, normal 模式下, 按住 Ctrl + s, 就等同于在命令行输入了<code>:suspend</code> 然后回车 ,这里  <code>&lt;CR&gt;</code> 表示Enter回车键.</p><p>都说到<code>&lt;CR&gt;</code> , 不妨来看看 VimScript 中 的 一些常用的 keycodes :</p><figure class="highlight bnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">&lt;Esc&gt;</span> : 代表 Esc 键</span><br><span class="line"><span class="attribute">&lt;C-&#123;key&#125;&gt;</span> : Ctrl + 任意键, 通常是字母键</span><br><span class="line"><span class="attribute">&lt;S-&#123;key&#125;&gt;</span> : Shift + 任意键, 通常是字母键</span><br><span class="line"><span class="attribute">&lt;CR&gt;</span> : Enter键,也可以用<span class="attribute">&lt;Enter&gt;</span>, <span class="attribute">&lt;Return&gt;</span> 来表示</span><br><span class="line"><span class="attribute">&lt;Space&gt;</span> : 空格键</span><br><span class="line"><span class="attribute">&lt;Leader&gt;</span> : Leader 键</span><br><span class="line"><span class="attribute">&lt;Left&gt;</span> : 左移方向键, 类似有<span class="attribute">&lt;Right&gt;</span>, <span class="attribute">&lt;Up&gt;</span>, <span class="attribute">&lt;Down&gt;</span></span><br></pre></td></tr></table></figure><p>那么, 如何知道 VimScript 中所有 key 的特殊标记? 用万能的<code>:help</code>  就好了, 命令行输入:</p><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="symbol">:h</span> key-notation</span><br></pre></td></tr></table></figure><p>可以查看所有的 key-notation.</p><p>我还记得刚入门时, 有时候看到别人的 vimrc 文件中, 有些 keycode 是全部小写的, 比如 <code>&lt;cr&gt;</code>, <code>&lt;esc&gt;</code>, 当时觉得, 有的人大写, 有的人小写, 哪种才是规范的呢? 直到看了文档, 才知道官方是首字母大写, 也算解了我的一个小困惑.</p><p>Vim 中有个特殊的 mapping, <code>&lt;Nop&gt;</code>, 表示什么也不做. 比如:</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">:<span class="keyword">inoremap</span> <span class="symbol">&lt;Esc&gt;</span> <span class="symbol">&lt;Nop&gt;</span></span><br></pre></td></tr></table></figure><p>Insert 模式下, 按下 Esc 键, 什么也没有做. [慎用!!!]</p><p>现在, 我们可以用学到的知识来写个简单的禁止使用上下左右键的功能:</p><p>在 <code>.vimrc</code> 文件中, 添加如下代码:</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="comment">&quot; disable up, down, leaf, right</span></span><br><span class="line"><span class="comment">&quot; normal mode</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;Up&gt;</span> <span class="symbol">&lt;Nop&gt;</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;Down&gt;</span> <span class="symbol">&lt;Nop&gt;</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;Left&gt;</span> <span class="symbol">&lt;Nop&gt;</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;Right&gt;</span> <span class="symbol">&lt;Nop&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; visual mode</span></span><br><span class="line"><span class="keyword">vnoremap</span> <span class="symbol">&lt;Up&gt;</span> <span class="symbol">&lt;Nop&gt;</span></span><br><span class="line"><span class="keyword">vnoremap</span> <span class="symbol">&lt;Down&gt;</span> <span class="symbol">&lt;Nop&gt;</span></span><br><span class="line"><span class="keyword">vnoremap</span> <span class="symbol">&lt;Left&gt;</span> <span class="symbol">&lt;Nop&gt;</span></span><br><span class="line"><span class="keyword">vnoremap</span> <span class="symbol">&lt;Right&gt;</span> <span class="symbol">&lt;Nop&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; insert mode</span></span><br><span class="line"><span class="keyword">inoremap</span> <span class="symbol">&lt;Up&gt;</span> <span class="symbol">&lt;Nop&gt;</span></span><br><span class="line"><span class="keyword">inoremap</span> <span class="symbol">&lt;Down&gt;</span> <span class="symbol">&lt;Nop&gt;</span></span><br><span class="line"><span class="keyword">inoremap</span> <span class="symbol">&lt;Left&gt;</span> <span class="symbol">&lt;Nop&gt;</span></span><br><span class="line"><span class="keyword">inoremap</span> <span class="symbol">&lt;Right&gt;</span> <span class="symbol">&lt;Nop&gt;</span></span><br></pre></td></tr></table></figure><p>这样就只能用 hjkl 了.</p><p>好了, 除了 Operator-Pending Mappings 外, 基本算是缕清了, 整点好吃的, 犒劳下自己吧.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;mapping  顾名思义, &lt;code&gt;map a b&lt;/code&gt;, 当我执行 a 操作时, 它会做 b 操作会做的事.&lt;/p&gt;
&lt;p&gt;看个例子, 在 Vim 命令行中, 输入:&lt;/p&gt;
&lt;figure class=&quot;highlight livescript&quot;&gt;&lt;tab
      
    
    </summary>
    
      <category term="VimScript 学习笔记" scheme="http://lupeipei.github.io/categories/VimScript-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Vim" scheme="http://lupeipei.github.io/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>set option</title>
    <link href="http://lupeipei.github.io/posts/vimscript-learning-on-set-option/"/>
    <id>http://lupeipei.github.io/posts/vimscript-learning-on-set-option/</id>
    <published>2021-12-15T10:36:51.000Z</published>
    <updated>2021-12-22T01:50:17.426Z</updated>
    
    <content type="html"><![CDATA[<p>新手基本都会在大佬们的.vimrc 文件中看到不少 set option. </p><p>我们可以把 option 看作是 built-in configuration.</p><p>option 可以是布尔值, 类似开关, <code>set &#123;option&#125;</code>, <code>set no&#123;option&#125;</code>, 也可以赋值 <code>set &#123;option&#125;= &#123;value&#125;</code>. 以 number 为例:</p><p>在 Vim 命令行中, 输入:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 输出 number 的当前值</span></span><br><span class="line">:set number?</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加行号显示</span> </span><br><span class="line">:set number</span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭行号显示, 通用模式no&#123;option&#125;</span></span><br><span class="line">:set nonumber</span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换</span></span><br><span class="line">:set number!</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重置成默认值</span></span><br><span class="line">:set number&amp;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重置所有的 option 为系统默认值</span></span><br><span class="line">:set all&amp;</span><br></pre></td></tr></table></figure><p>这里简单提一下, 比较常用的 path. </p><p>在 Vim 命令行中, 输入当前Path:</p><figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">:<span class="built_in">set</span> <span class="built_in">path</span>?</span><br></pre></td></tr></table></figure><p>输出结果:</p><p><code> path=.,/usr/include,,</code></p><p>其中:</p><ul><li><p>. 指的是当前打开文件所在的目录.</p></li><li><p>/usr/include 是 C Libraries 头文件目录</p></li><li><p>, 指得是当前目录</p></li></ul><p>建议将经常访问的目录添加到 path, 比如:</p><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">:<span class="keyword">set</span> path+=app/<span class="keyword">models</span>/</span><br></pre></td></tr></table></figure><p>这样就用<code>find</code> 就顺手多了.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;新手基本都会在大佬们的.vimrc 文件中看到不少 set option. &lt;/p&gt;
&lt;p&gt;我们可以把 option 看作是 built-in configuration.&lt;/p&gt;
&lt;p&gt;option 可以是布尔值, 类似开关, &lt;code&gt;set &amp;#123;option
      
    
    </summary>
    
      <category term="VimScript 学习笔记" scheme="http://lupeipei.github.io/categories/VimScript-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Vim" scheme="http://lupeipei.github.io/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>echo vs echom</title>
    <link href="http://lupeipei.github.io/posts/vimscript-learning-on-echo/"/>
    <id>http://lupeipei.github.io/posts/vimscript-learning-on-echo/</id>
    <published>2021-12-15T10:32:36.000Z</published>
    <updated>2021-12-22T02:27:20.426Z</updated>
    
    <content type="html"><![CDATA[<p>echo 和 echom 都用于输出, 但是 echom 输入的内容, 会被保存在 messages 中.</p><p>在 Vim 命令行中, 输入:</p><figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line"><span class="symbol">:echo</span> <span class="string">&quot;hello, world through echo&quot;</span></span><br><span class="line"><span class="symbol">:echom</span> <span class="string">&quot;hello, world through echom&quot;</span></span><br><span class="line"><span class="symbol">:messages</span></span><br></pre></td></tr></table></figure><p>可以在 messages 中看到 echom 输出的内容.</p><p>我之前会觉得 echo 没啥用, 直到看到 Max Cantor 的一个分享视频 <a href="https://www.youtube.com/watch?v=XA2WjJbmmoM&list=WL">How to Do 90% of What Plugins Do (With Just Vim)</a> , 他当时尝试用  <code>:echo expand(&#39;%&#39;)</code> 输出当前文件的相对路径, 看到结果的那一刻,  Max 情不自禁 yes了一下, 那个开心啊, 多像跑通代码的我们, 一下子让我记住了expand(“%”), 也对echo 有了印象……..</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;echo 和 echom 都用于输出, 但是 echom 输入的内容, 会被保存在 messages 中.&lt;/p&gt;
&lt;p&gt;在 Vim 命令行中, 输入:&lt;/p&gt;
&lt;figure class=&quot;highlight clojure&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;
      
    
    </summary>
    
      <category term="VimScript 学习笔记" scheme="http://lupeipei.github.io/categories/VimScript-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Vim" scheme="http://lupeipei.github.io/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>前言</title>
    <link href="http://lupeipei.github.io/posts/vimscript-learning-preface/"/>
    <id>http://lupeipei.github.io/posts/vimscript-learning-preface/</id>
    <published>2021-12-15T10:26:07.000Z</published>
    <updated>2021-12-22T01:50:23.869Z</updated>
    
    <content type="html"><![CDATA[<p>这里是刷 <a href="https://github.com/sjl">Steve Losh</a>的  <a href="https://learnvimscriptthehardway.stevelosh.com/">Learn Vimscript the Hard Way </a> 的笔记系列.</p><p>写之前特意查了下, 已经有网友将本书翻译成了中文, 但主页已经打不开, 倒是在看云上保留了原来的译文, 如果想阅读中文版本, 这里附上<a href="https://www.kancloud.cn/kancloud/learn-vimscript-the-hard-way/49321">链接</a>.</p><p>当然, 个人非常推荐阅读原文, 50多篇, 每篇篇幅都比较短, 阅读过程中, 作者还会偶尔来点调皮话, 整点哲理鸡汤啥的, 叫人读着读着就笑了, 哈哈…..</p><p>总之, 阅读原版是一件很开心的事情, 不要让自己错过.&gt;^.^&lt;</p><p>鉴于我自己也是一个Vim 新手, 所以我多是以我个人的理解去对书中的内容做一些整理, 偶尔加点新东西, 同时尽量顺着原作者的写作风格, 力求简明清晰说人话, 篇幅适中易阅读, 达到入门 VimScript 的目标.</p><p>本文适合有 Vim 使用经验(至少 Vim 使用一两个月) 的新手围观.</p><p>原书基于Vim 7.3,  本系列基于 Vim 8.2. 某些内容会与原文稍有差异.</p><p>开始吧.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这里是刷 &lt;a href=&quot;https://github.com/sjl&quot;&gt;Steve Losh&lt;/a&gt;的  &lt;a href=&quot;https://learnvimscriptthehardway.stevelosh.com/&quot;&gt;Learn Vimscript the Hard
      
    
    </summary>
    
      <category term="VimScript 学习笔记" scheme="http://lupeipei.github.io/categories/VimScript-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Vim" scheme="http://lupeipei.github.io/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>读 《Man&#39;s Search For Meaning》</title>
    <link href="http://lupeipei.github.io/posts/notes-of-man-s-search-for-meaning/"/>
    <id>http://lupeipei.github.io/posts/notes-of-man-s-search-for-meaning/</id>
    <published>2021-12-09T06:56:15.000Z</published>
    <updated>2021-12-12T02:18:52.634Z</updated>
    
    <content type="html"><![CDATA[<p>拖了近半年, 趁着休假, 整理了下.</p><span id="more"></span><p>整本书篇幅很短, 分两部分.</p><p>第一部分 Experiences in a concertration Camp 讲述了作者本人在集中营的那段经历.</p><p>第二部分 Logotherapy in a Nutshell,  作者简单介绍了他创立的心理治疗理论 logotherapy, logo 在希腊语中指 meaning. 该理论也基于他本人在集中营的那段经历.</p><p>我一直觉得只要人活着, 某些经历是无法遗忘的, 更何况是被囚禁在集中营. 你以为时间会帮你淡忘, 你选择不再记起, 但它们是你过去的一部分, 这是不争的事实, 看似忘却, 但其实从未离开. 书中也提到那些从集中营走出来的人, 大部分都有着或多或少的后遗症, 而作者作为亲历者之一,  选择将苦难化作了养分, 通过创作去疗愈心理创伤. 一定意义上, 感觉更像是自救, 而整个过程, 却也治愈了其他人.</p><p>切合了古语, 自渡者渡人.</p><p>那整本书, 作者想要表达的是什么呢?</p><p>在书的前言部分, 基本点出了整本书他想要表达的观点.</p><blockquote><p>Life is not primarily a quest for pleasure, or a quest for power, but a quest for meaning.</p><p>Viktor Frankl saw three possible sources for meaning:</p><ul><li>in work</li><li>in love</li><li>in courage during difficult times</li></ul></blockquote><p>作者认为, 人生不是追逐名利与欢愉, 而是追求意义. 而意义有三个可能的来源, 工作, 爱, 困境中的勇气.</p><p>作者为什么会认为追求 meaning 很重要?</p><blockquote><p>因为它会支撑着一个人走过那些煎熬的日子, 而不是在困境中, 选择通过结束生命, 来结束痛苦.</p><p>书中多次引用了尼采 Nietzsche 的话: <strong>He who has a Why to live for can bear almost any How.</strong></p><p>meaning 就是那个 Why.</p></blockquote><p>但是人是多样的, 对于每个人来说, 人生的意义自然也千差万别.</p><p>甚至, 是否应该去追求人生的意义 , 也完全是个人的选择.</p><p>值得一提的是, 作者并没有去歌颂苦难, 而是强调在无法避免的苦难中, 赋予人生以意义, 找到支撑人活下去的信念, 改变态度, 转移焦点, 人才能在苦难中更好地生存下去.</p><p>同时, 他也强调, 不要把人生的目标放在成功和幸福上, 它们只是 meaningful life 中的 by-product:</p><blockquote><p>Don’t aim at success—the more you aim at it and make it a target, the more you are going to miss it. For success, like happiness, cannot be pursued; it must ensue, and it only does so as the unintended side-effect of one’s dedication to a cause greater than oneself or as the by-product of one’s surrender to a person other than oneself. Happiness must happen, and the same holds for success: you have to let it happen by not caring about it. <strong>I want you to listen to what your conscience commands you to do and go on to carry it out to the best of your knowledge.</strong> Then you will live to see that in the long run—in the long run, I say!—success will follow you precisely because you had forgotten to think of it.</p></blockquote><p>这倒让我想到 John Roberts 在他那篇很出彩的演讲 I wish you bad luck 里面提到的:</p><blockquote><p>…..And <strong>one important clue to living a good life is to not to try to live the good life</strong>. The best way to lose the values that are central to who you are is frankly <strong>not to think about them at all</strong>.</p></blockquote><p>刻意追求的反而得不到.</p><p>大抵真正重要的东西, 莫不如此.</p><p>这样想, 人生某种程度上是公平的.</p><p>Seeing the message in your misfortunes and benefit from them.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;拖了近半年, 趁着休假, 整理了下.&lt;/p&gt;
    
    </summary>
    
      <category term="Reading" scheme="http://lupeipei.github.io/categories/Reading/"/>
    
    
      <category term="Reading" scheme="http://lupeipei.github.io/tags/Reading/"/>
    
  </entry>
  
  <entry>
    <title>新手入坑Vim</title>
    <link href="http://lupeipei.github.io/posts/vim-tips-and-tricks/"/>
    <id>http://lupeipei.github.io/posts/vim-tips-and-tricks/</id>
    <published>2021-12-07T08:37:32.000Z</published>
    <updated>2021-12-07T08:45:21.293Z</updated>
    
    <content type="html"><![CDATA[<p>本文对 Vim 新手有一些帮助, 高手请忽略.</p><span id="more"></span> <p>之前一直使用 Atom 搭配 Vim 模式来工作, 前段时间彻底跟  Atom 拜拜, 重新配置了 Vim,用了一段时间, 渐渐习惯. 这里记录下使用过程中的一些感受和小技巧, 方便新手快速入坑.</p><p>本文基于 Vim 8.2.</p><h4 id="配置vimrc"><a href="#配置vimrc" class="headerlink" title="配置vimrc"></a>配置vimrc</h4><p>大部分新手一上来多是刷大牛们的<code>.vimrc</code>配置, 然后直接用, 把vim配置得非常 Modern, 我初来也是, 甚至连里面很多配置的语法都不大懂, 一上来什么都不管, 一顿瞎操作, 能用就行. 只能说 Copy + Paste 懒人模式害人不浅啊. 后面慢慢摸出感觉, 砍掉了很多插件, 只留下自己看得懂, 常用到的.</p><p>建议新手只配置一些简单的,  后面有需要再慢慢添加, 多看文档, 确保你知道安装的插件是用来做什么的.</p><p>一些常用插件:</p><ul><li><p><a href="https://github.com/tpope/vim-commentary">tpope/vim-commentary</a></p></li><li><p><a href="https://github.com/tpope/vim-surround">tpope/vim-surround</a></p></li><li><p><a href="https://github.com/preservim/nerdtree">preservim/nerdtree</a></p></li><li><p><a href="https://github.com/mattn/emmet-vim">mattn/emmet-vim</a></p></li></ul><p>主题系列, 推荐 <a href="https://github.com/vim-airline/vim-airline">vim-airline/vim-airline</a> 搭配 <a href="https://github.com/vim-airline/vim-airline-themes">vim-airline/vim-airline-themes</a></p><p>有关语言的插件, Github 自行搜索 vim-[language], 比如 vim-ruby, vim-go…..</p><h4 id="一些指令操作与技巧"><a href="#一些指令操作与技巧" class="headerlink" title="一些指令操作与技巧"></a>一些指令操作与技巧</h4><p>基本操作, 光标移动hjkl之类, 这里就略过了.简单提一些其他的操作指令.</p><p>保存并退出Vim:</p><blockquote><p>除了<code>:wq</code>, 还可以 ZZ (shift+z 两次) </p></blockquote><p>返回 Normal mode :</p><blockquote><p>除了常见的 <code>esc</code>, <code>Ctrl-[</code>, <code>Ctrl-c</code> 也可以.</p></blockquote><p>打开文件:</p><blockquote><p>最简单的是: <code>vim .</code>  打开当前目录, 或者 <code>vim file</code> 打开文件.</p><p>Vim 命令本身可以接受参数, 比如 <code>+&#123;cmd&#125;</code> 或者 <code>-c &#123;cmd&#125;</code> , 打开文件并执行相应命令.</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim +&#123;cmd&#125; file</span><br><span class="line">vim -c &#123;cmd&#125; file</span><br></pre></td></tr></table></figure><p>这里的cmd 指的是在命令行模式下的命令, 比如打开文件 <code>text.txt</code> 并跳转到第10行:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim +10 text.txt</span><br><span class="line">vim -c 10 text.txt</span><br></pre></td></tr></table></figure><p>命令行模式下打开文件:</p><p>推荐用<code>:e xxx </code>,   同时结合 <a href="https://github.com/preservim/nerdtree">preservim/nerdtree</a> , 可以打开文件<code>:e file </code>, 也可以打开目录<code>:e folder </code>, 基本满足需求.</p></blockquote><p>无插件下查找文件:</p><blockquote><p>使用自带的 <code>find</code>, 记得搭配 set path , 设置好需要查找的目录, 同时巧用Tab 键补全. 比如:</p><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">:<span class="keyword">set</span> path+=app/<span class="keyword">models</span>/</span><br><span class="line">:find <span class="comment">tes&lt;Tab&gt;</span></span><br></pre></td></tr></table></figure></blockquote><p>搜索与替换:</p><blockquote><p>搜索: </p><p>在当前文件中搜索, 使用自带的<code>/content</code>,   <code>? content</code> </p><p>全文搜索, 建议用插件吧, 推荐 <a href="https://github.com/eugen0329/vim-esearch">eugen0329/vim-esearch</a>, 我自己用起来目前觉得够用,顺手.如果非要用自带的<code>:vim </code> 或者 <code>:grep</code> 可能导致弃坑…..</p><p>替换:</p><ul><li><code>:s/pattern/replace/g</code> - 全局替换当前行所有匹配.</li><li><code>:%s/pattern/replace/g</code> - 全局替换当前文件所有匹配.</li><li><code>:%s//replace/g</code> - 全局替换当前文件最后一次搜索结果.</li></ul></blockquote><p>撤销与反撤销</p><blockquote><p>u 撤销(Undo), 如果需要撤销刚刚的撤销操作 (Redo), 使用 <code>Ctrl-r</code></p></blockquote><p>Tab 创建与切换:</p><blockquote><p><code>:tabnew file</code> : 在新的 tab 中打开文件</p><p>打开文件时, 开多个tabs, 可以用:<code>vim -p file1 file2</code></p><p>跳转到 下一个 tab 用 <code>gt</code>, 前一个 tab 用 <code>gT</code></p></blockquote><p>窗口拆分与切换:</p><blockquote><p>Ctrl-w + n: 拆分窗口, 新增窗口</p><p>Ctrl-w + s:  将当前窗口分成水平窗口</p><p>Ctrl-w  + v: 将当前窗口分成竖直窗口</p><p>Ctrl-w + q /  c :  退出/关闭 当前窗口</p><p>Ctrl-w + h/j/k/l:  窗口左右上下切换</p></blockquote><p>Buffer切换:</p><blockquote><p><code>:bn</code> 切换到下一个buffer</p><p><code>:bp</code>切换到前一个buffer</p><p><code>:bd</code>  删除当前buffer, 可以<code>:bd + &#123;BufferNumber&#125;</code>, 删除指定 bufferNumber 的Buffer.</p><p>命令行使用<code>:ls</code> 列出buffer 列表, 如何去对应的Buffer?</p><p><code>:buffer + &#123;BufferNumber&#125;</code>  或者按键 bufferNumber  + <code>Ctrl-^</code>, 去指定 bufferNumber的Buffer.</p><p> <code>Ctrl-^</code> 也可以用来返回前一个编辑的buffer.</p></blockquote><p>Vim 和 终端切换:</p><blockquote><p>挂起Vim的三种方法:</p><ul><li><code>:suspend</code> </li><li><code>:stop</code>  </li><li>Ctrl-z</li></ul><p>终端输入: fg&lt;cr&gt; 返回到Vim. (&lt;cr&gt; 指 Enter键)</p></blockquote><p>执行命令:</p><blockquote><p><code>:!cmd</code>  其中 cmd 为 shell 命令.</p><p>对文件的操作, 可以考虑安装 <a href="https://github.com/tpope/vim-eunuch">tpope/vim-eunuch</a> 试试.[vim-eunuch 偶尔会让人抓狂..]</p></blockquote><p>屏幕刷新恢复:</p><blockquote><p>如果一顿操作后, 整个屏幕黑了(sooner or later….), 使用 <code>Ctrl+l</code>  或者命令 <code>:redraw</code>,  甚至强制刷新 <code>:redraw!</code>  回到现实. </p></blockquote><p>vim 文档阅读:</p><blockquote><p><code>:h(elp) &#123;content&#125;</code>  {content} 为需要搜索的内容.</p><p>比如 <code>:h i_CTRL-P</code> 查看 Insert 模式下 Ctrl-P 做什么. 如果查看Normal 模式下Ctrl-P 做什么, 用 <code>:h CTRL-P</code> </p><p>阅读文档时, 如何跳转?</p><p><code>Ctrl-]</code> 跳转到光标对应的文档</p><p><code>Ctrl-o</code> 返回上一个位置</p></blockquote><h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><p>Enjoy.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文对 Vim 新手有一些帮助, 高手请忽略.&lt;/p&gt;
    
    </summary>
    
      <category term="CS" scheme="http://lupeipei.github.io/categories/CS/"/>
    
    
      <category term="Vim" scheme="http://lupeipei.github.io/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>读《一间只属于自己的房间》</title>
    <link href="http://lupeipei.github.io/posts/notes-of-a-room-of-ones-own/"/>
    <id>http://lupeipei.github.io/posts/notes-of-a-room-of-ones-own/</id>
    <published>2021-10-15T09:32:16.000Z</published>
    <updated>2021-10-15T09:35:55.949Z</updated>
    
    <content type="html"><![CDATA[<p>将近一个世纪前的作品.</p><span id="more"></span><p>读完这本书后, 去了解了作者伍尔夫的生平, 不得不感叹, 真的是名奇女子.</p><p>书中的某些建议, 放在今天, 依然非常中肯.</p><blockquote><p>一个女人如果要写小说，那么她必须拥有两样东西，一样是金钱，另一样是一间自己的房间。</p><p>我希望，大家无论通过什么方法，都能挣到足够的钱，去旅行，去闲着，去思考世界的过去和未来，去看书做梦，去街角闲逛，让思绪的钓线深深沉入街流之中。</p><p>我想说的很简单、很平淡：没有什么比做自己更重要。</p></blockquote><p>看有些书评, 说这本书是女权运动和女性主义理论史上最具影响力的著作之一. 本人读书少, 读女性方面的书更少, 只觉得这本书确实很值得女性去阅读.</p><p>毕竟现实不会因为你是女性而区别对待.</p><p>现实就是, 你没有臂膀可以依靠，只能自己前进.</p><p>如同书中所说的, 人与人的关系, 不仅仅是男人和女人之间的关系，也是人和真实世界的关系.</p><p>细想一下, 如果伍尔夫生前没有显赫的家世, 没有遇到理解她, 尊重她的丈夫伦纳德, 她大概率也不会有一间可以上锁的房间, 有充足的时间去思考, 去写作, 继而成为享有声誉的现代主义作家.</p><p>艺术可能不那么需要钱, 但一定需要闲.</p><p>她是幸运的.</p><p>玩偶之家的故事不会在她身上上演.</p><p>但她也是不幸的, 童年的阴影伴随了她的一生.</p><p>除了一些对女性的建议, 书中作者对于写作的一些观点也有些新颖, 我从来没去想过, 文字会出卖写作者.</p><p>文字是写作者表达自我的一种方式.</p><p>好的文字里, 没有取悦, 没有讨好, 没有说教, 没有憎恨, 没有抗议.</p><p>好的文字, 需要写作者内心平静.</p><p>这样看来, 金钱和房间, 在某种程度上, 为写作者的内心平静提供了物质基础.</p><p>其实不管女性是否写作, 物质基础都很重要. 拥有自己的房间, 意味着你能有属于自己独立的时间和空间, 而独处, 不管对于男性还是女性, 都是重要的精神养分.</p><p>写到这里,  我内心的OS只有一个: 好好赚钱啊💰️.</p><p>另一个稍微意外的地方与书无关, 是被伍尔夫的容貌稍稍惊艳到.</p><p>真正一枚明明可以靠颜值, 偏偏要靠才华的女子.</p><p>记得看伍尔夫的生平往事时, 有的文章提到了伦纳德第一次见到伍尔夫的场景, 当时的她, 身穿一袭白裙、手持阳伞, 初见她的这位少年, 平静的心不禁掀起了波澜, 这才有了后来的不离不弃, 相伴余生.</p><p>附上一张20岁的伍尔夫:</p><p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images336.jpg"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;将近一个世纪前的作品.&lt;/p&gt;
    
    </summary>
    
      <category term="Reading" scheme="http://lupeipei.github.io/categories/Reading/"/>
    
    
      <category term="Reading" scheme="http://lupeipei.github.io/tags/Reading/"/>
    
  </entry>
  
  <entry>
    <title>读《重来3》</title>
    <link href="http://lupeipei.github.io/posts/notes-of-it-does-not-have-to-be-crazy-at-work/"/>
    <id>http://lupeipei.github.io/posts/notes-of-it-does-not-have-to-be-crazy-at-work/</id>
    <published>2021-09-07T06:56:02.000Z</published>
    <updated>2021-09-07T06:57:27.821Z</updated>
    
    <content type="html"><![CDATA[<p>《重来3》中文版部分内容摘选.</p><span id="more"></span><p>长期的疲惫不是荣誉勋章，而是愚蠢的标志。</p><h4 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h4><p>我快忙疯了(it’s crazy at work)</p><blockquote><p>对许多人来说，“快忙疯了”已经成了他们的日常。可是，为何要这么疯狂？</p><p>主要原因有二：</p><ul><li>一是工作时间被各种或真实或虚拟的东西干扰，被切割得七零八碎；</li><li>二是不惜任何代价追求成长，这种不健康的执念促使人们设下不切实际的期望，把他们压迫得疲惫不堪。</li></ul><p>超长的工作时间里面, 大部分时间都被浪费了.</p><p>解决方案不是多花时间，而是少扯淡；是减少浪费，而不是增加投入。</p><p>在Basecamp,  我们不要不惜代价的成长，不要徒劳无功的忙碌。我们不设被好胜心驱使的目标，不跟同类型的公司攀比。我们不把自己逼到火烧眉毛的境地。</p><p>总体上来说，<strong>我们是冷静的——这是刻意的选择</strong>，也是亲身践行的结果。</p></blockquote><p>你的公司是个产品</p><blockquote><p>一切始于这个概念：你的公司是个产品。</p><p>你做出来的东西叫作产品（或服务），但它是经由你的公司做出来的。正是因为这个原因，你的公司应该是你最棒的产品。</p><p>本书的一切观点都围绕着这个主题延展开来。就像产品需要不断改良一样，公司也需要迭代才能不断进步。如果你想把一个产品做得更好，就必须不断地测试、修改、迭代。做公司也是一样。</p><p>做项目的时候，我们会<strong>集中工作6周</strong>，接下来的两周就脱离固定的时间表，“自由散漫”地工作，给自己减减压。</p></blockquote><h4 id="抑制你的野心"><a href="#抑制你的野心" class="headerlink" title="抑制你的野心"></a>抑制你的野心</h4><p>拒演“拼命工作”的苦情戏</p><blockquote><p>你并不会因为牺牲了一切而变得更有价值。</p><p>生命远不只是连轴转和忙到极限，人类的体验远比这辽阔、丰富得多。</p><p>充实地好好干上一天活儿，日复一日，这就足够了。</p><p>你可以拥有个人爱好，你可以好好照顾自己的身体，你可以坐下来好好读本书，你可以跟另一半一起看一部傻乎乎的电影，你可以抽出时间来做一顿像样的饭菜，你可以出门去散个长长的步。你可以时不时地，敢于做一个彻底的普通人。</p></blockquote><p>做个快乐的和平主义者</p><blockquote><p>我们为和平而来，我们没有建造帝国的野心，我们没想着要统治某个行业、某个市场。我们希望人人都能活得好好的，我们也有自己想追求的东西，但犯不着去抢夺别人的。</p><p>我们为顾客提供满意的服务，他们也给我们带来满意的回报，这才是真正重要的事。</p><p>在Basecamp，没有你追我赶，没有兔子要逮，只有因干出了最漂亮的活儿而得到的深深的满足感。衡量的标准就是我们自己的幸福感，以及顾客的购买量。</p><p>成为市场中的诸多选择之一，是一种美德——因为你的存在，顾客多了一个实实在在的选择。</p></blockquote><p>我们的目标是：没有目标</p><blockquote><p>我们当然懂，<strong>我们明白商业世界的运作规律——我们只是不在乎它</strong>。我们不介意在桌上留下点钱，也没必要把柠檬里的每一滴汁水都挤干榨净，反正最后的那几滴果汁总是酸涩的。</p><p>让我们直面真相吧：目标是个虚假的东西。几乎所有的目标都是为了设定而设定的。</p><p><strong>让公司生存下去，好好服务顾客，或者成为一个能让员工开开心心来上班的地方。这些目标不太容易量化，但并不等于它们不重要。</strong></p></blockquote><p>别总想着改变世界</p><blockquote><p>踏踏实实地干出漂亮活儿，跟顾客、员工和现实世界打交道时做到公平正直，给跟你打交道的人留下一个深刻的印象，少操心改变世界的事儿.</p></blockquote><p>边走边摸索</p><blockquote><p>长期计划会让人产生一种虚假的安全感。</p><p>要想把舵掌稳，那就在前行中及时做出微调，一千次也不怕，这肯定比一上来就猛打几次舵轮强得多。</p><p>每隔6周，我们会决定下一步要做什么，这就是我们唯一的计划。</p><p><strong>关于决策，你能掌握的最佳信息是在执行的时候获得的</strong>。我们等待这样的时刻来做出明智的决定。</p></blockquote><p>舒适环境有什么错？</p><blockquote><p>待在自己的舒适区里，是保持冷静的必要条件。[这段很非主流].</p><p><strong>对我们来说，见效的往往不是向外突破，而是潜心向内，去深挖，留在那个能带来最大收益的兔子洞里。</strong></p><p>在绝大多数情况下，如果某样东西令你感到不舒服，那正是因为它不对劲。如果你渐渐习惯于压抑一切不舒服的感受，你必将失去自己，也将失去你的道德准则。[有些类似心理学上的, 重视你的负面感觉, 它们在告诉你一些重要的信息]</p></blockquote><h4 id="捍卫你的时间"><a href="#捍卫你的时间" class="headerlink" title="捍卫你的时间"></a>捍卫你的时间</h4><p>40小时足矣</p><blockquote><p>每周工作40小时就足够了。足够你干出优质的活儿，足够你保持竞争力，足够你把重要的事情做完。</p><p>如果按照每周40小时的步调，<strong>你想做的事情做不完，那么你需要锻炼自己的选择能力</strong>，把真正该做的事情挑选出来，而不是延长工作时间。</p></blockquote><p>保护主义</p><blockquote><p>在Basecamp，<strong>我们把保护员工的时间和注意力视作最重要的责任。</strong></p><p>时间和注意力最好是大笔大笔地花出去，而不是换成零钱或硬币，散碎地用——把大块时间用在高价值的、缜密的工作上。</p></blockquote><p>高质量的1小时</p><blockquote><p><strong>仔细审视一下自己的时间。</strong>如果你的时间都是零碎的小段，是谁，或什么原因把它切分成了这样？是其他人在干扰你，还是你在干扰自己？你能做出哪些改变？</p><p>问问自己：上次你能把完全不受干扰的3个甚至4个小时留给自己和工作，是什么时候？</p></blockquote><p>高效比高产更重要</p><blockquote><p>高产指的是把时间全部占上——把时间表填到不能更满，然后尽你所能，做得越多越好。</p><p>而高效指的是<strong>找出更多未被侵占的时间，留给工作之外的其他事</strong>——留给休闲放松，留给家人和朋友，或者留出时间，什么也不干。</p><p><strong>利用时间的一个妙招就是，不做不值得做的事。</strong></p></blockquote><p>比别人更努力，就能出类拔萃？</p><blockquote><p>职业道德指的是做一个<strong>本质上的好人</strong>：<strong>值得他人信赖，是令人愉快的工作伙伴</strong>。</p><p>良好的职业道德指的<strong>不是随叫随到</strong>，而是<strong>说到做到、踏踏实实地做好每一天的事</strong>。</p><p><strong>把“比别人更努力”的念头从脑子里清除出去吧。</strong></p><p><strong>别再把职业道德跟超长的工作时间画等号</strong>。它既不能帮你领先一步，也不能帮你冷静下来。</p></blockquote><p>俄罗斯方块</p><blockquote><p><strong>不共享日程表.</strong></p><p>在Basecamp，要想看到别人的日程表，你得跟人家直接协商，这可是个漫长的谈判过程，不是唾手可得的便利。</p><p>如果你对自己的大多数时间都掌控不了，那你就不可能冷静下来。你会经常感到压力，觉得自己安心做事的能力被人夺走了。</p><p>当某人把时间从你手中夺走的时候，就相当于毁掉了你“踏踏实实地工作了一天”的成就感啊。真正取得进展才会让人感到由衷的满足。</p></blockquote><p>即时回复</p><blockquote><p>对即时回复的期待犹如一根导火索，引发了太多的险情。</p><p>在绝大多数情况下，对即时回复的期待都是毫无道理的。</p><p><strong>几乎所有的事情都可以等。几乎所有的事情都应该等。</strong></p></blockquote><p>错失良机恐惧症</p><blockquote><p>一边儿去吧。错过了有什么大不了的！在绝大多数时间里，绝大多数人就是会错过绝大多数事情啊。在Basecamp，我们倡导人们坦然面对它。别再担忧错失机缘了，淡定些！</p><p>有了淡定的心态，你就会关掉源源不断的信息流，关掉聊天工具，把各种干扰拒之门外，安安心心地把你该做的事做好。</p><p>我们希望员工能体验到那种静谧的、笃定的、因专注而生的快乐。</p></blockquote><h4 id="培养企业文化"><a href="#培养企业文化" class="headerlink" title="培养企业文化"></a>培养企业文化</h4><p>我们不是一家人</p><blockquote><p><strong>有的公司喜欢宣扬“我们都是一家人”。不，你们不是。</strong></p><p><strong>最优秀的企业不是家庭。它们是家庭的后盾，是家庭的同盟军。</strong>它们提供健康的，能让人找到成就感的工作环境，让员工能在合理的时间合上笔记本电脑，去做最好的丈夫、妻子、父母、手足和孩子。</p></blockquote><p>榜样的力量</p><blockquote><p>一个树立了自我牺牲的榜样的领导者，必定也会要求他人自我牺牲。[严于律己的, 往往很难宽以待人]</p><p>工作狂是一种传染病。</p></blockquote><p>信任犹如电池</p><blockquote><p>还有一个我们经常谈论的概念叫作信任电池。当员工刚进公司时，这个电池的电量是50%。此后，你每跟他打一次交道，你们之间的这节信任电池就要么充电，要么耗电，具体取决于你是否能兑现承诺的事。</p><p>信任电池的电量是过往一切互动结果的总和。</p><p><strong>信任电池的电量太低，正是工作中人际冲突的症结所在。</strong></p><p>要想在工作中拥有良好的人际关系，那就得<strong>用心经营</strong>。唯有当你坦诚地面对关系的真实现状，你的努力才会见效。<strong>最糟糕的做法就是假装你们之间的别扭感不重要</strong>，假装工作上的事都是“对事不对人”。这简直是愚蠢无知！事都是人做的啊，情绪必定会影响工作。</p></blockquote><p>低处的果子未必摘得到</p><blockquote><p><strong>当你距离果子越远的时候，它看起来才越低。等你走近一些，你会发现它长得比你想象中高。</strong></p><p>我们想当然地认为它很容易摘，只是因为此前我们从没尝试过。</p><p><strong>请尊重你从没做过的事。提醒自己，他人的工作没有那么简单。</strong></p></blockquote><p>简历不重要</p><blockquote><p>把关注重点放在<strong>候选人的人品和工作能力</strong>上，免得聘用一个想象出来的虚像。</p><p>渴望干出漂亮活儿的优秀人才常常来自你最预料不到的地方，而且他们看上去跟你想象中的完全不一样。<strong>你只需把重点放在他们的人品和工作能力上，这是唯一能找到他们的方法。</strong></p></blockquote><p>不必理会人才争夺战</p><blockquote><p>人才是不值得争夺的，它不是一种数量有限的稀缺资源——你要么拥有，要么就失去。</p><p>我们发现，<strong>培养人才、发掘他们未被开发的潜力，远比找到一个已经处于巅峰的人刺激得多</strong>。</p><p>当年我们雇用这些最出色的员工，并不是因为他们那时的模样，而是因为他们日后会长成的样子。</p></blockquote><p>不做薪酬谈判</p><blockquote><p>在Basecamp，我们不再做工资或加薪谈判。只要级别相同、角色相同，就拿一样的薪水，同工同酬。</p><p>我们的目标是，<strong>无论什么岗位，要让公司里的每一个人拿到的薪水都能位列市场的前10%。</strong></p><p>一定的离职率是好事，但工资不该成为绝大多数人离开的主要原因。</p><p><strong>与军心稳定的团队一起工作，幸福感会源源不断地涌现，公司也会持续高产。</strong></p></blockquote><p>图书馆守则</p><blockquote><p>用图书馆守则作为办公室的行为准则，你只需要做几个简单的设置，改变思维方式，<strong>尊重他人的时间、注意力和专心致志的工作时段</strong>，这就足够了。</p></blockquote><p>拒绝假“度假”</p><blockquote><p>度假的全部目的就是离开。</p><p><strong>雇主没有权力侵占任何人的夜晚、周末或假期，那是人家的生活时间。</strong>真正的危机事件可以例外，但那种事一年最多只能有一两次。</p></blockquote><h4 id="剖析工作流程"><a href="#剖析工作流程" class="headerlink" title="剖析工作流程"></a>剖析工作流程</h4><p>逼死人的截止日期</p><blockquote><p>大多数截止日期简直能逼死人。项目需求不断膨胀，工作越堆越多，可那个不现实的日期却岿然不动。这不叫工作，这是遭罪啊。</p><p>项目可以灵活缩减，这一点极为重要。<strong>这是因为几乎所有需要花6个月完成的事情，其实都能换个形式，在6周之内完成。</strong> 关键就在于<strong>你要知道哪些可以砍掉，何时该叫停，何时该向前走</strong>。</p><p>界限即自由。</p></blockquote><p>新常态</p><blockquote><p>起先，它看上去有点不顺眼。比如某个行为你并不喜欢，但容忍了。然后，某个人也这样做了，但你没注意或没去管。接下来，人们开始接二连三地这样做，因为没人出来阻止。</p><p>此时已经太晚了，它已经变成一种文化，一种新常态。</p><p><strong>如果你不希望组织文化里野草蔓生，那就要小心它的种子。</strong></p></blockquote><p>坏习惯会打败好意愿</p><blockquote><p>积习难改.</p><p>你必须不断自问：你今天的工作状态，是你今后10年、20年、30年想持续下去的吗？如果不是，现在就做出改变，不要等“以后”。</p><p>良好的意愿活不到“以后”。</p></blockquote><p>承诺比共识更重要</p><blockquote><p><strong>在企业中，唯一可持续的办法就是必须有人最后拍板。</strong></p><p>管事的人必须做出最终决断，即便其他人更喜欢另一个方案。</p><p><strong>好决策需要的不是共识，而是承诺。</strong></p><p>在践行“我不同意，但我会配合你”的原则时，尤为重要的是，公司需要把最后的决策向参与的每一个人解释清楚。只有“决策—执行”是不够的，应该是“决策—解释—执行”。</p></blockquote><p>完成比完美更重要</p><blockquote><p>你没法在每件事情上都力争完美。<strong>知道何时该接纳“足够好”，你才有机会在关键时刻来临之时绽放出真正的光彩。</strong></p><p>与其把无限精力投入每个细节，我们会<strong>花大量精力甄选</strong>：哪些是真正重要的事，哪些还算重要，哪些一点儿都不重要。<strong>甄选环节最需要高质量地完成。</strong></p></blockquote><p>逐渐聚焦</p><blockquote><p>工作中时不时会有激动人心的新想法冒出来, 要抗拒它们的诱惑简直是不可能的。可是，<strong>如果你真想往前走，就必须学会聚焦。</strong>[我真的是容易分心啊]</p><p>6周一个项目原则.  头一两周用来澄清未知，验证假设。在这个阶段，概念碰触到了现实，如果它合理，就会站得住脚，如果不合理，就会碎裂掉。</p><p>一旦最初的探索期过去，<strong>每一周都应该离“完成”的目标更近一步，而不是更远一点。</strong>下定决心把任务完成，一点点把想法实现，之后你肯定有机会折返的——但前提是你得真的把这事做完。</p></blockquote><p>“无为”又何妨？</p><blockquote><p>有时候，你必须挑战一些显而易见的道理。有时候，你必须明白，投入了时间未必一定会带来收益。“无为”可能是最艰难的选择，但同时也是最强有力的选择。</p></blockquote><p>最糟实践</p><blockquote><p>每个成熟的行业里都充斥着铺天盖地的“最佳实践”。</p><p>然而，这里头有太多不仅仅是扯淡，而且还很可能是你能做的最糟的事。</p><p>找到最适合自己的方法，做下去就行了。创造属于自己的经验和行为模式，至于这些做法对别人来说算不算最佳实践？管它呢。</p></blockquote><p>多一事不如少一事</p><blockquote><p>想要完成更多事？唯一的办法就是<strong>少干点</strong>。</p><p><strong>说“不”是收回时间的唯一方式。</strong></p><p>别给自己排上12件任务，然后把它们的次序摆弄来摆弄去，企图找到一个效率最高的排列组合；你也用不着设定计时器，闹铃一响就赶紧换下一件事做。把12件事删掉7件，你就有时间做余下的5件了。这不叫时间管理，这叫任务精简。其他的一切秘诀都是忽悠人的。</p><p>最徒劳的莫过于高效地做完全没必要做的事。</p></blockquote><p>魔力数字3</p><blockquote><p>Basecamp的几乎所有产品都是由3个人组成的团队完成的。</p><p>我们不会投入更多人手来解决问题，而是<strong>把问题精简到能被3人小组承担并完成的程度</strong>。</p><p>3令你诚实。它用正确的方式笼住你的野心。它会要求你权衡、折中。最为重要的是，3能减少沟通中的误会，增进协作效率。</p></blockquote><p>“不”的价值</p><blockquote><p>知道自己该对什么说“不”，胜过知道该对什么说“是”。你要明白“不”的价值。</p></blockquote><h4 id="深入思考业务"><a href="#深入思考业务" class="headerlink" title="深入思考业务"></a>深入思考业务</h4><p>冒险不等于鲁莽</p><blockquote><p>冒险不等于鲁莽，<strong>你并不会因为把自己或公司置于毫无必要的险境而变得更加勇敢。</strong>聪明的赌局是，万一局面跟你设想的不一样，你还可以翻盘重玩一遍。</p></blockquote><p>季节轮转</p><blockquote><p>你用相同的方式、相同的步调，做着相同的事情，时间一长，<strong>单调的感觉就会反噬</strong>。[要学会体察自己的感受, 学会保护自己不被单调反噬]</p><p><strong>用工作时长、任务难度，甚至专门的福利来强调季节更替的感觉吧</strong>，想些办法来打破一成不变的单调感受。</p></blockquote><p>利润才是硬道理</p><blockquote><p>我们一直有意识地控制着发展的步伐，不要一下迈得太大。</p><p>我们一直严密关注着成本，并且绝对不做可能会导致公司出现赤字的事情。</p><p>利润意味着你有思考的时间，有探索的空间。它意味着你可以掌控自己的命运和时间表。</p></blockquote><p>故意放弃 [这个真的很独特]</p><blockquote><p><strong>不敢失去的客户是最糟的客户。</strong></p><p>今天，Basecamp软件的价格是每月99美元，一视同仁。[牛逼啊, 极少有公司敢这么做]</p><p>按人数收费的问题在于，它会把你最大的客户变成最好的客户。<strong>如果你没有全然的控制力，金钱就会产生影响</strong>。而这也决定了你要把时间花在谁身上。一旦金钱流动起来，你不可能避开这些压力，<strong>唯一的办法就是把水龙头关上。</strong></p><p>成为一家冷静的公司，关键就在于想清楚你是谁、你想服务谁、你想对谁说“不”，并由此做出决策。</p></blockquote><p>发布，然后学习</p><blockquote><p>如果你想知道自己的产品究竟怎样，那你就得把它发布出去。</p><p>尽你的最大努力去做，相信你的作品，然后发布出去，你就能得到实实在在的答案了。</p><p>真实的市场，那里是你唯一能寻获真相的地方。</p><p>你会从真正需要你的产品的真实用户那里，得到真实的看法与答案，并以此为基础做迭代、改进，发布，然后学习。</p></blockquote><p>别做承诺</p><blockquote><p>从Basecamp初创时起，我们就很不愿意做出产品改进的承诺。<strong>我们向来希望客户能根据现在买到的正在使用的版本来判断产品的好坏</strong>，而不是某个“有可能会”在日后推出的、想象出来的版本。</p><p>承诺就像债务一样，会堆积起来，还会产生利息。</p></blockquote><p>掌控变化</p><blockquote><p>人们不喜欢的是被迫改变——在一个并非由他们主动选择的时间点上，发生了他们并未主动要求的改变。</p><p>当一个新产品突然被甩到他们面前时，你眼中的“全新升级版”，在他们看来很可能变成“什么破玩意儿”。[哈哈]</p><p>我们花了很长时间，绕了很多弯路，才领悟到这个关于销售的核心真理：<strong>把新产品卖给新客户，让老客户留着他们原有的东西</strong>。这就是保持安宁和冷静的方法。</p><p>履行原有的约定，维持老产品运转，这些不是没有成本的。但这就是拥有光辉历史的代价，这就是成功的代价——你取得了相当大的成功，以至于客户在你做出最新的产品之前就已经喜欢你了。</p></blockquote><p>创业容易守业难</p><blockquote><p>越往前走，越艰难，最容易的就是第一天。这就是关于创业的暗黑小秘密。</p><p>如果你明白未来可能是什么样子的，你就能在头脑中演练，在风雨袭来之前做足准备。关键就是你设下了什么样的期望。[自证预言吗?]</p></blockquote><p>美好的旧时光</p><blockquote><p>如果“美好的旧时光”那么美好，我们就尽最大努力留在那个阶段，维持一个可持续的、可管理的规模。我们依然会增长，但要缓慢，并且可以掌控。我们要留在美好的时光里——而且不需要那个“旧”字。</p><p><strong>在顺境中收窄</strong>，这是一家冷静的、赢利的独立公司的奢侈。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《重来3》中文版部分内容摘选.&lt;/p&gt;
    
    </summary>
    
      <category term="Reading" scheme="http://lupeipei.github.io/categories/Reading/"/>
    
    
      <category term="Reading" scheme="http://lupeipei.github.io/tags/Reading/"/>
    
  </entry>
  
  <entry>
    <title>读《重来2》</title>
    <link href="http://lupeipei.github.io/posts/notes-of-remote-office-not-required/"/>
    <id>http://lupeipei.github.io/posts/notes-of-remote-office-not-required/</id>
    <published>2021-09-07T06:38:29.000Z</published>
    <updated>2021-09-07T06:41:32.303Z</updated>
    
    <content type="html"><![CDATA[<p>《重来2》中文版部分内容摘选.</p><span id="more"></span><p>作者在书的最后调侃了一句: 献给所有正堵在路上的朋友们。</p><p>哈哈.</p><h4 id="远程工作的时代已经到来"><a href="#远程工作的时代已经到来" class="headerlink" title="远程工作的时代已经到来"></a>远程工作的时代已经到来</h4><p>为何办公室无法办公</p><blockquote><p>有意义的工作，创意工作，需要人静心深思的工作，重要的工作……干这类活儿的时候，你得需要一段不受打扰的时间才能进入状态。</p><p>实际上，能安静地一个人待着，使自己的思绪不被打扰，这正是远程工作最大的好处之一。</p></blockquote><p>别再把人生耗费在通勤路上</p><blockquote><p>假设你每天要在交通拥堵的时段开30分钟车去上班，再加上走到车边和走进办公室的15分钟，那么每天来回需要1.5小时，一周就是7.5小时，考虑到假日和休假，每年你花在路上的时间大约有300~400个小时。400小时，刚好就是我们开发出Basecamp（我们最畅销的一款产品）的时间。</p><p>想象一下，如果每年多出400个小时，你能做到什么。通勤不仅会危害你的健康、人际关系和环境，它还会影响你的事业。</p></blockquote><p>逃离朝九晚五</p><blockquote><p>分布式员工团队（distributed workforce）带来了一个巨大的转变：人们的工作方式从“同步”协作变成了无须同步的协作。</p><p><strong>真正重要的是把工作做好，而不是死守着上下班时间。</strong></p></blockquote><p>何必都挤在大城市</p><blockquote><p>我们预测，<strong>在接下来的20年，奢侈的特权就是“离开大城市”。</strong>不是住在郊区、依然被紧紧束缚的那种，而是想去哪儿落脚，就去哪儿。</p></blockquote><p>新时代的奢侈</p><blockquote><p>新时代的奢侈就是摆脱“日后再享受生活”的思维桎梏，现在就去做你热爱的事，跟工作并行。何必要把时间浪费在那种“等我退休了，生活该有多美好”的白日梦上？</p><p>把工作跟退休之间划一道界限，这其实是相当武断的。你的人生无须再遵循这样的规则。<strong>你可以把这两样混合在一起，既有趣，又有钱挣</strong>——设计一种更好的、能把工作变得有趣的生活方式，因为<strong>工作不是这辈子唯一的事儿</strong>。</p><p><strong>新时代的奢侈，就是自由度和时间的奢侈。</strong>一旦你尝过这种滋味，豪华办公室或名厨也没法把你拉回来。</p></blockquote><p>不是钱的事(It’s not about money)</p><blockquote><p>远程工作是为了提升生活质量。</p><p>最适合远程办公的脑力工作，比如写作、编程、设计、客户支持（先列举这几样），跟残酷的利润大战都没什么关系（制造业就属于这种）。</p></blockquote><p>不必非此即彼</p><blockquote><p>积极地接纳远程工作的概念，并不意味着从此你就不能有办公室了，只不过办公室不再是必需品。</p></blockquote><p>有得有失</p><blockquote><p>远程工作有这么多好处，人很容易得意忘形：自由，时间，金钱，要什么有什么，一切都唾手可得。淡定点儿，兄弟。在这个世界上，极少有什么事是百利而无一害的。</p><p>有些时候，面对面交流的效果依然是最好的。</p><p>面对全新的工作架构，你需要拿出更强的定力和毅力才能跟上工作进度，坚持下去。</p></blockquote><h4 id="反对远程工作的理由"><a href="#反对远程工作的理由" class="headerlink" title="反对远程工作的理由"></a>反对远程工作的理由</h4><p>唯有同处一室，奇迹才会发生</p><blockquote><p>物以稀为贵。面对面交流的机会变成“配给制”之后，它们的重要性提升了，变成了偶尔才能享受的盛宴，变成了需要细细品味、用心对待的事。</p></blockquote><p>要是不盯着，我怎么知道他们在干活？</p><blockquote><p>对远程工作的绝大多数担忧都源自缺乏信任。</p><p><strong>底线是，你不应该雇用你不信任的人，或是为不信任你的人工作。</strong></p></blockquote><p>家里的干扰太多了</p><blockquote><p><strong>只要工作本身令人兴奋，又有成就感，绝大多数人是主动想要工作的。</strong></p><p>请记住，干扰的头号劲敌就是有趣又有意义的工作。</p><p>当我们发觉自己会定期地分心，不想工作的时候，或许这就是个信号，说明这项工作没有经过仔细筹划，或是这项任务单调无趣，再或者，我们参与的整个项目压根儿就没有意义。</p></blockquote><p>我现在就要答案！</p><blockquote><p>首先，你需要认识到，并不是每个问题都需要立即得到解答。没有什么能比拿着一个无须立即得到答案的问题去打扰别人更傲慢的行为了。</p><p>放开手，别抓狂，等到对方准备好协助你的时候，回答自然就会朝你走来——这里面几乎蕴含着一种禅意。</p></blockquote><h4 id="远程工作中如何协作"><a href="#远程工作中如何协作" class="headerlink" title="远程工作中如何协作"></a>远程工作中如何协作</h4><p>规划出重叠时间</p><blockquote><p>想要顺利地进行远程工作，你需要做好安排，让自己的工作时间与同事的工作时间有所重叠。</p><p>在37signals，我们发现，4个小时的重叠时间就正合适，既能避免信息延迟，也能让大家产生同在一个团队的感觉。</p></blockquote><p>把工作进展秀出来</p><blockquote><p>在37signals，我们制定了一项制度：大家每周交流一次，主题是：“这周你做了什么？” 每个人都进来说说自己上周做了什么，下周打算做什么。</p><p>我们都会本能地产生不想让团队失望的想法，所以，当你把承诺摆在眼前的时候，它会变得更有约束力。</p><p>工作有进展是件快乐的事儿，最好拿出来跟同事们分享。</p></blockquote><p>工作成果是最根本的衡量标准</p><blockquote><p>雇用远程工作的员工有一些不为公众所知悉的好处，其中之一就是<strong>工作本身成了绩效的衡量标准</strong>。</p><p>只看重工作成果的时候，公司里谁尽心尽力，谁没有，你一眼就能看出来。</p></blockquote><p>慎用 M&amp;Ms (meetings &amp; Managers)</p><blockquote><p>事实是，离会议和管理者越远，完成的工作就越多。</p><p>管理也像会议一样，应当少而精。</p></blockquote><h4 id="当心副作用"><a href="#当心副作用" class="headerlink" title="当心副作用"></a>当心副作用</h4><p>可别宅出病来(Cabin fever)</p><blockquote><p>我们天生就不适合彻底的独居。</p><p>人是有可能宅出病来的。</p></blockquote><p>拿得起，放得下(check-in, check-out)</p><blockquote><p><strong>如果你没能好好地把握生活与工作的平衡，远程工作的自由就会变成奴役。</strong></p><p>我们认为，在绝大多数情况下，工作就像一场马拉松。每个人都找到适合自己的步调是最重要的。</p><p>有个办法可以帮助员工制定健康的界限：鼓励他们在一天工作结束后，这样问问自己，“这一天我好好工作了吗？”</p><p>如果你能迅速地答出“是的”，你就可以心满意足地停下来了——就算某项工作没有全部完成，你已经取得了重要的进展。</p></blockquote><p>把工作环境弄舒服点儿</p><blockquote><p>如果你真打算长期在家踏踏实实工作的话，你需要运用一点人体工程学的知识，把基础设施弄舒服点儿。</p><p>这意味着你需要一张合适的桌子，（高度可调？）一把舒服的椅子，（符合人体工程学？）一个大小刚好合适的屏幕。（27英寸高清！）这些东西貌似都挺贵，可是，如果你不想腰肌劳损、牺牲视力或其他方面的健康，这些都是值得的。[站着办公]</p></blockquote><p>当心你的腰围</p><blockquote><p>如果一天的工作中没有起来动动的理由，那就主动寻找机会。</p><p>比如，与其在工作台前吃午餐，不如走路去咖啡店或三明治小店。带上小狗，长长地遛它一段儿路。趁休息的时候在跑步机上跑跑。</p></blockquote><p>与客户一起工作</p><blockquote><p>远程办公文化的37signals, 如何获取客户?</p><p>没有秘诀。但小窍门倒是有几个.</p><ul><li><p>在销售阶段，要让潜在客户很早就知道你们不在同一个地方</p><blockquote><p>信任需要在一开始的时候就建立起来。</p></blockquote></li><li><p>在客户开口索要你的背景资料之前，就主动给他们</p><blockquote><p>一上来就要让客户知道，你没什么可隐瞒的。在早期，建立信任是最难的事。</p></blockquote></li><li><p>经常把工作进度拿给他们看</p><blockquote><p>客户都会焦虑，而这是减轻焦虑的最好方法。</p></blockquote></li><li><p>让客户很容易就能找到你</p><blockquote><p>既然你们没法面对面，那你最好迅速地回电话、邮件、即时消息等等。</p></blockquote></li><li><p>要让客户参与进来，及时掌握工作进度</p><blockquote><p>要让客户感觉到，这也是他们的项目。</p><p>当他们感到自己也是项目一份子的时候，焦虑和恐惧感就会被兴奋和期待所取代。</p></blockquote></li></ul></blockquote><p>税收，会计，法律条文</p><blockquote><p>劳工法就像一张复杂的网，可别把自己给绕进去了。</p><p>如果你是远程工作的员工，希望为外国公司工作，操作方法也是这样的。<strong>成立一个个人公司，每月把你的“薪水”开发票。在绝大多数国家里，成立个人公司都很容易，办一些简单的发票手续，税务也都不复杂。</strong></p></blockquote><h4 id="寻找并留住最优秀的人才"><a href="#寻找并留住最优秀的人才" class="headerlink" title="寻找并留住最优秀的人才"></a>寻找并留住最优秀的人才</h4><p>世界很大</p><blockquote><p>世界从未像现在这样小，市场也从未像现在这般开放。不要当个文化或地域上的隐士。</p></blockquote><p>生活总在继续</p><blockquote><p>在公司待了很久的老员工最适合远程工作。</p><p>请记住，在人生最为持久的幸福来源中，和卓越的人共事、做出卓越的业绩正是其中之一。把它牢牢地把握住吧。</p></blockquote><p>无须故意刁难</p><blockquote><p>你们交流的主要方式就是通过工作本身。如果活儿的质量不够好，员工一上手你就能看得出来。</p><p>真正算数的是工作质量。</p></blockquote><p>繁荣发展的代价</p><blockquote><p>“同工同酬”这个口号听起来貌似有些陈旧，可它有道理。<strong>如果由于地域原因，你接受了他们把你视作“二等员工”的做法，那么你相当于为其他的糟糕待遇打开了大门。</strong></p></blockquote><p>笔头功夫要过硬</p><blockquote><p>想要做一个优秀的远程员工，笔头功夫一定要过硬。</p><p>如果你是公司老板或管理者，最好从最初选人时就把好这一关。</p><p>真正重要的第一个“过滤器”就是自荐信，应聘者会在这篇文章中解释自己为什么适合这家公司。</p><p><strong>你需要多读，多读，再多读。仔细揣摩好作家是怎么写的。首先要关注的是清晰的表达，风格是其次的。</strong></p></blockquote><p>试做项目</p><blockquote><p>我们发现，判断工作质量的最好方法，就是在正式雇用员工、给他们分配许多工作之前，先让他们试做一点。就算是“试用”吧。</p><p>在我们的试用期中，员工需要完成一个耗时一到两周的小项目。</p><p>无论试做的项目是什么，一定要有实际意义。创造一个能解决问题的新东西。</p></blockquote><h4 id="管理远程员工"><a href="#管理远程员工" class="headerlink" title="管理远程员工"></a>管理远程员工</h4><p>什么时机最合适？</p><blockquote><p>如果你的公司已经发展得相当稳固了，你可以随时引入远程办公方式。这事不会太简单，<strong>但许多值得做的事情做起来都不简单。</strong>它需要承诺、自律，最重要的是，<strong>它需要一份“此事必成”的坚定信念</strong>。</p></blockquote><p>开源软件的启示</p><blockquote><p>程序员编写开源软件，一般都是因为热爱这件事，不是为了钱。钱往往会相伴而来，但它极少是动力来源。</p></blockquote><p>一对一沟通</p><blockquote><p>在37signals，我们的日程表稍有些不太规则，但我们会尽力做到每隔几个月至少跟每位远程员工通个电话。理想状态下，我们会每个月都打，但隔两三个月也挺好。</p><p>我们把这种定期的检查沟通称为“一对一”</p></blockquote><p>移除路障</p><blockquote><p>第一步就是授权，让每个人都有自主做决定的权力。</p><p>身为管理者，你必须接受一个事实：人们会犯错，但他们都不是故意的，而这些错误正是学习和成长的代价。</p><p>其次，你必须保证员工能够接触到他们所需的一切东西。</p></blockquote><p>要当心的是过劳，而不是偷懒</p><blockquote><p>能够走得长远的最佳员工，是那些懂得可持续工作的人。<strong>不要太多，也不要太少，恰好就是最好</strong>。</p><p><strong>平均每周工作40小时就刚好。</strong></p></blockquote><h4 id="远程人的生活"><a href="#远程人的生活" class="headerlink" title="远程人的生活"></a>远程人的生活</h4><p>找到自己的作息规律</p><blockquote><p>我们会谈谈如何运用不同的科技手段来工作和休闲.</p><p>着装区分.</p><p>另一个窍门是把一天分成几个时段：阅读最新资讯、协作、专心工作。</p><p>你还可以运用家里的房间来实现状态切换。把工作全部留在工作间里。在客厅或卧室里绝对不看工作邮件，不要“再做一点工作”。</p></blockquote><p>工作电脑 &amp; 休闲电脑</p><blockquote><p>在理想情况下，工作和休闲之间的那条灰色分界线都很难看见，使用同一台电脑进行工作和休闲的话，就更不可能了。</p><p><strong>一个更有效、更人性化的方法就是使用两台电脑，把工作和休闲彻底区分开。</strong></p><p>家里备上两到三台电脑实在花不了多少钱，所以你也不必再找借口。</p></blockquote><p>保持强劲动力</p><blockquote><p>在脑力工作中，动力就像是燃料。</p><p>想要激发出员工的动力，<strong>唯一靠得住的办法就是鼓励他们从事自己喜欢的、在乎的事情，而且跟他们喜欢的、在乎的人一起做事</strong>。此外没有捷径可走。</p><p>在37signals，工作满三年的员工如果想要放长假，我们会让他们休假一个月。</p><p>对于健康的人生和健康的公司来说，动力都是一个极为关键的因素。你一定要重视它。</p></blockquote><p>流浪的自由</p><blockquote><p>流浪式的生活比你想象中便宜。</p><p>如果你不需要背负房贷、车贷、有线电视费，以及其他现代生活的必备设施，省下来的钱一般都足够旅行和安顿生活的了。</p></blockquote><p>场景随心换</p><blockquote><p>让团队远程工作的一个好处就是，<strong>他们有机会随心所欲地更换工作场景</strong>。</p><p><strong>太规律的生活会抹杀创意。</strong>每天在同一时间醒来，乘坐同样的交通工具，走同样的路线，进入同样的办公室，在同样的桌前坐下，如此这般，日复一日，对产生灵感实在没有好处。</p></blockquote><p>家庭时间</p><blockquote><p>顾家型的人很可能更加适合远程工作，因为他们已经习惯跟家人互动了。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《重来2》中文版部分内容摘选.&lt;/p&gt;
    
    </summary>
    
      <category term="Reading" scheme="http://lupeipei.github.io/categories/Reading/"/>
    
    
      <category term="Reading" scheme="http://lupeipei.github.io/tags/Reading/"/>
    
  </entry>
  
  <entry>
    <title>读《重来1》</title>
    <link href="http://lupeipei.github.io/posts/notes-of-rework/"/>
    <id>http://lupeipei.github.io/posts/notes-of-rework/</id>
    <published>2021-09-07T06:35:06.000Z</published>
    <updated>2021-09-07T06:37:01.238Z</updated>
    
    <content type="html"><![CDATA[<p>《重来1》中文版部分内容摘选.</p><span id="more"></span><p>今天，任何人都可以创业，过去无法企及的工具如今触手可得。</p><p>你完全可以在依靠正职工作带来的现金流养活自己的同时，去创立自己的事业。</p><p>是时候重头来过了。</p><h4 id="卸负"><a href="#卸负" class="headerlink" title="卸负"></a>卸负</h4><p>从错误中学习</p><blockquote><p>一种普遍的错误认知是：人要从错误中吸取经验教训。</p><p>你到底能从错误中学到什么？你能学到的只是不再重蹈覆辙，但这有什么意义呢？你还是不知道下一步该做什么。</p><p>相比之下，你更应该从成功中汲取养分。成功才是真正靠得住的教材。做成一件事后，你会知道这条路行得通——然后你就会再次这么做，而下一次，你也许还会做得更棒。</p></blockquote><p>有关计划</p><blockquote><p>现在就决定你这周要做什么，不必去管全年的计划。</p><p>无计划地工作看上去挺悬，但是盲目遵循不切实际的计划，后果则更可怕。</p></blockquote><p>小公司与大公司</p><blockquote><p>小公司并不只是一块跳板。小公司本身就是一个伟大的目标。</p><p>只要所运营的公司能够持续发展、保持盈利，不管规模大小，都是值得骄傲的。</p></blockquote><p>工作狂</p><blockquote><p>工作狂的行为不但没有必要，而且愚蠢至极。</p><p>这种工作状态经不起时间的考验。</p><p>如果你只是为工作而工作，那么你就会丧失判断力。你的价值观和决策方式都是扭曲的。你没有能力去判断哪些工作值得做、哪些工作该放弃，最后搞得自己筋疲力尽，而一个筋疲力尽的人是无法作出明智的决定的。</p><p>工作狂不是英雄。他们没有力挽狂澜，不过是浪费时间而已。真正的英雄早已想出办法、搞定一切，然后回家了。</p></blockquote><p>创始人</p><blockquote><p>每个创立了自己事业的人都是创始人。</p><p>你所需要的只是一个创意，加一点点自信，以及一点勇气，就可以启程了。</p></blockquote><h4 id="行动篇"><a href="#行动篇" class="headerlink" title="行动篇"></a>行动篇</h4><p>什么样的产品值得做?</p><blockquote><p>只要冲着有价值的方向去努力，要让你的客户说：“这个东西让我的生活变得更美好了。”</p><p>最简单直接的办法就是做你自己想用的东西。</p><p>这种“解决自己实际问题”的方法最大的优势就在于能让你爱上自己的产品。你十分了解其中存在的问题以及其价值所在。除此之外别无他途。毕竟你（很有可能）会为这件事奋斗很多年，甚至付出余生，所以，最好还是做自己真正关心的东西。</p></blockquote><p>做点什么</p><blockquote><p>在你的人生中真正有意义的是你做了什么，而不是你想过什么、说过什么或者计划过什么。</p><p>最重要的事情就是起而行之。</p><p>真正的问题, 不是创意, 而是执行的好坏.</p></blockquote><p>“没时间”</p><blockquote><p>只要你善加利用，时间总是有的，你也根本无须辞职去做什么事情，白天好好上你的班，晚上再来干你自己的私人项目就好了。</p><p>当你拥有某种极强烈的渴望时，你就能挤出时间来——不管你身上是否还背负着其他责任。</p></blockquote><p>立场明确</p><blockquote><p>起步之后，你必须一直牢记自己到底为什么要做这件事。</p><p>你必须心怀信念，要有主心骨，要了解自己到底是为什么而奋斗，并且要让世人明白你的信念。</p><p>如果我们的产品不适合于每一个人，没有关系，我们愿意为了那些更加深爱我们产品的客户而放弃另一部分客户。这就是我们的立场。</p><p><strong>坚守某种信念并不仅仅是把它写下来。不但要相信它，还要让它成为你的生活方式。</strong></p></blockquote><p>不筹资</p><blockquote><p>事实上，不管你创办的是什么类型的企业，都要尽可能少花别人的钱。[个人生活中也是, 少花别人的钱, 更有掌控感], 理由如下:</p><ul><li>失去控制权: 花别人的钱就得听人家的</li><li>“套现离场”的想法会压倒“创建优秀公司”的梦想。</li><li>用别人的钱容易上瘾</li><li>融资都不是好买卖</li><li>筹钱极其费神</li></ul></blockquote><p>再谈需求</p><blockquote><p>节俭不是罪过。当我们推出第一个产品时，是非常节省的。我们没有自己的办公室，得和其他公司共用办公空间。我们没有一堆服务器，只有一台。我们没有做广告，只是通过网上经验分享来传播。我们没有雇专人来回复客户邮件，公司的创始人亲自答复客户邮件。一切都运作良好。</p><p>伟大的公司基本上都起于微末。你的也一样。</p></blockquote><p>不能只是创业</p><blockquote><p>无法通往盈利之路的事业不能称为事业，只是嗜好。</p><p>创业之初不要有任何依赖思想。</p><p>真正的事业永远与现实的问题息息相关，比如说账单和员工薪水。</p><p>真正的事业从创始的第一天开始就要求你去操心如何盈利的问题。</p><p>真正的事业拒绝创业者用“没关系，创业嘛！”这样的借口去掩盖深层次的问题。</p></blockquote><p>破釜沉舟</p><blockquote><p>你需要的是承诺策略，而不是退出策略。</p><p>如果你的整个策略都是建立在逃跑的基础上，那么你一开始就不会走得太远。</p><p>当你怀着被收购的想法去创业时，你强调的重点就是错误的。你关注的是谁会来收购你，而不是如何让客户喜欢上你。为这种事情去操心简直就是大错特错。</p></blockquote><p>轻装上阵</p><blockquote><p>一定要轻装上阵。</p><p>你始终保持轻装上阵，就能快速作出改变。</p></blockquote><h4 id="进阶篇"><a href="#进阶篇" class="headerlink" title="进阶篇"></a>进阶篇</h4><p>条件受限是好事</p><blockquote><p>有限的资源能激发你在现有条件下完成任务的能力。没有一点浪费的空间，一切都需要你发挥最大的创造力。</p><p>因此, 在你高唱“始终不够”的悲观论调之前，请试试看自己利用现有的资源能走多远。</p></blockquote><p>从核心出发</p><blockquote><p>当你开始着手做一件事情时，总有一些力量将你拉向不同的方向。这当中包括你能做的、你想做的以及你必须做的事情。<strong>你应该从必须做的事情开始下手</strong>，即从核心出发。</p><p>寻找中心的方法就是问自己：“如果把这样东西去掉了，我还做得成买卖吗？”</p><p>当你发现事业的中心时，你就会恍然大悟，然后<strong>你应该把所有的精力都集中在这个中心上</strong>，把它做得越强越好。这是你未来成功的基础。</p></blockquote><p>不要过早关注细节</p><blockquote><p>你只有在真正开始后，才能认清到底哪些细节才是最重要的。</p><p>不要操之过急。</p><p>先把基础打牢，再去操心其他的事情。</p></blockquote><p>决定就是进步</p><blockquote><p>只要有足够的动力和士气，就要趁热打铁，积极决策，果断推进，现在就把事情做出来。</p><p>如果当时的决定不合适，以后还可以改。[但是有些决定要慎重, 错误的成本太TM高了]</p></blockquote><p>当好博物馆长</p><blockquote><p>真正成就一个伟大博物馆的，是那些不在墙上展出的物品。</p><p>要做一个称职的博物馆长，坚守真正重要的东西。把其他东西拿下来，直到留下最重要的作品。</p></blockquote><p>关注不变因素</p><blockquote><p>你的事业的核心应该建立在不变的基础之上。你应该投资那些人们现在需要并且10年后仍然需要的事物。</p><p>[play long term game with long term people]</p></blockquote><p>副产品</p><blockquote><p>当你去做某件事时，总会同时做出其他的东西来。你不会只做一样东西。副产品无处不在。一个善于观察、富于创意的商业头脑能够注意到这些副产品，并从中挖掘出商机。</p><p>对于创办公司和开发软件这项实际工作来说，从中获取的经验就是副产品。</p><p>你现在正在阅读的这本书，也是一个副产品。[哈哈]</p></blockquote><p>立马上线</p><blockquote><p>一旦你的产品实现了基本的功能，就要迅速把它亮出来。</p><p>不要误解，这种做法不是偷工减料。你要做的仍然是件很棒的东西。这个做法只是告诉你，最有效的成功方法就是不断尝试。不要再臆测到底会发生什么事了，到现实中去寻找答案吧。</p></blockquote><h4 id="效率篇"><a href="#效率篇" class="headerlink" title="效率篇"></a>效率篇</h4><p>拿出凿子开始实干</p><blockquote><p>要尽一切可能去掉那些抽象的东西。</p><p>如果你一定要说明某事，那就务实一点。不要描述它长什么样子，直接画出来；不要解释它的声音如何，直接哼出来。</p></blockquote><p>退出的理由</p><blockquote><p>当你埋头干你自己认为应该干的事情时,  你得问问自己为什么要做这件事。是为谁做的？谁会从中受益？任务背后的动机是什么？了解了答案就有助于你理解这个工作本身的意义。</p><p><strong>无论何时，你都要问自己：“有没有更简单的办法？”</strong></p><p>开始一项工作之前, 问问自己:</p><ul><li>有其他更值得做的事情吗？有什么事情会因为你手头上的工作而被耽搁了？</li><li>这样做值吗？你现在正在做的事情是否真的值得去做？</li></ul></blockquote><p>打岔是效率的敌人</p><blockquote><p>长时间的单独工作能使你达到最高效率。</p><p>很多小事情看上去无害, 但是这些事情在腐蚀你的生产力.</p><p>你的生活被各种干扰包围着，只有你自己才能去发起反击。</p></blockquote><p>刚刚好就是真的好</p><blockquote><p><strong>我们总能用简单平常的方法去解决问题。</strong></p><p>柔道讲究的就是以小搏大，不论何时，只要遇到障碍，争取找出一个类似柔道的解决方法。</p><p>当找到合适的解决办法后，就用它了。</p><p>以后你随时都可以把“刚刚好”变成“特别棒”。</p></blockquote><p>速战速决</p><blockquote><p>如果你目前所做的工作无法给你的事业带来动力，那可不是太好。</p><p>积累动力的方法就是完成一项任务，然后紧接着去完成下一项任务。</p><p>没人愿意被困在一个看不到尽头的任务中。把人困在长达9个月并且毫无成就的项目中，等于是拿钝刀子杀人，迟早会耗尽你全部精力。</p><p>有些东西拖得越久，越难完成。</p><p>激情来自于做出东西来让人使用。</p><p>如果实在躲不掉周期很长的项目，那就试着每周抽出一天时间来（每两周抽出一天也可以）<strong>为阶段性的小胜利来庆祝一下</strong>，制造一点儿激情。</p></blockquote><p>预估的都是垃圾</p><blockquote><p>把大项目分解成小任务。越小的任务越容易预计。你可能还是会犯错，但错得肯定不会像预测大项目那么离谱。</p><p>不断地把你的计时范围拆分成小块，<strong>把一个长达12周的项目重整成12个耗时1周的小项目</strong>。不要妄自揣测某个任务大概需要30个小时以上的时间来完成，直接把它砍成几个大约6～10小时的小任务。然后一步一个脚印地努力前进。</p></blockquote><p>更小的待办清单</p><blockquote><p>长篇任务清单会将你带上愧疚之旅。</p><p>我们有一个更好的办法。把长串的清单分解成一堆小任务列表。</p><p>在此我们对事务的优先级别也有个小小的建议：不要按照序号或标签来排序。</p><p>把看起来最重要的事情放在清单的上端。然后把第二重要的事情放在清单中挨着上端的位置。这样一来，你就能够按照事情的轻重缓急来进行排序，这样就足够了。</p></blockquote><p>决策宜小不宜大</p><blockquote><p>我们应该尽量选择作一些能够被有效替换的小决策。</p><p>易于实现的目标就是最好的目标。</p><p>做小决策意味着一个人深信想要实现远大的目标，最好的办法就是从一件一件做好眼前的小事开始。</p></blockquote><h4 id="对手篇"><a href="#对手篇" class="headerlink" title="对手篇"></a>对手篇</h4><p>拒绝照搬</p><blockquote><p>简单复制扼杀了深层的理解——而理解才能激发成长。</p><p>原创者为其作品付出的很多努力是外人看不到的。这些都隐藏在表面之下。盲从者是不知其所以然的。复制只是表面上完成了任务，但是这样做无法触及事物的本质，产生不了深层理解，也成就不了未来决策的基础。</p><p>你可以受别人影响，但不要去剽窃。</p></blockquote><p>产品去商品化</p><blockquote><p><strong>让你自己成为你的产品或服务的一部分。</strong></p><p>将你独一无二的想法注入你的产品中，让它与众不同。把它变成一件别人做不到的东西。</p><p>竞争者们是无法复制你的产品中的独特性的。</p></blockquote><p>给竞争力做减法</p><blockquote><p>解决最简单的问题.</p><p>把目光放到你自己身上来吧。你自己本身的变化比外界的变化更为重要。当你把时间浪费在关注他人身上时，就没有时间去自我提高了。</p><p>你得制定自己的游戏规则，而不是仅仅去做一件稍微好一点的产品。</p></blockquote><h4 id="进化篇"><a href="#进化篇" class="headerlink" title="进化篇"></a>进化篇</h4><p>对客户说”不”</p><blockquote><p>坦然些，如果你不愿意迎合某个客户的需求，只要彬彬有礼地解释清楚就可以了。当你花时间解释自己的想法后，人们的谅解能力通常会超出你的想象。你甚至可能会让他们赞同并追随你的思路。</p><p>这样做的目标是确保你的产品就是你自己的产品，你是自己产品最忠实的粉丝。</p></blockquote><p>不攀客户高枝</p><blockquote><p>小巧、简单、满足基本需要，这就是永恒之道。</p><p>为高端客户研发出的新功能也许能满足一批用户，但也可能让我们失去那些还没有入门的用户。吓跑新客户比失去老客户更糟。</p><p>要确保你的产品让新客户容易上手。[所以Basecamp后面统一收费, 与使用规模无关]</p></blockquote><p>便利就好</p><blockquote><p>长于某些功能的产品，远远看上去肯定不是那么面面俱到。这没什么，毕竟你的目标是与它建立长期关系，而不是“一夜情”。</p></blockquote><p>不用逐字记录需求</p><blockquote><p>你的客户就是你的记事本，他们会反复提醒你，会展示给你哪些事情是真正需要去考虑的。</p></blockquote><h4 id="推广篇"><a href="#推广篇" class="headerlink" title="推广篇"></a>推广篇</h4><p>甘于低微</p><blockquote><p>现在的你籍籍无名，这是件好事。籍籍无名就是一个绝佳的状态，你要庆幸自己目前还身在暗处。</p><p>要充分利用这段时间，这时犯再大的错也没人知晓。</p><p>要保持低调，你可以利用这段时间继续调整你的策略，解决纠结的问题、测试各种创意、尝试新事物。</p><p>要牢牢记住，一旦你把事业做大、深入人心之后，就不可避免地要走稳健路线。当你成为传奇人物，你就必须保持预见性、建立相容性，你将变得更为保守、更难去冒险。这就是僵化的起点、变革的终点。</p></blockquote><p>培养自己的拥趸(dun)</p><blockquote><p>说些什么、写点儿什么、开个博客、整个微博、制作视频——总之，想尽一切办法。大方地分享有价值的信息，你就会慢慢建立起忠实的观众群体。</p></blockquote><p>普及知识, 赢得竞争</p><blockquote><p>绝大多数公司都在关注销售或服务，但是从未想过传授知识。</p><p>传授客户知识是专属于你的绝佳制胜机会。</p></blockquote><p>效仿大厨</p><blockquote><p>向大厨学习吧。他们烹饪美食，所以他们就写了美食书籍。你该做什么呢？你的“秘诀”是什么？你能向世人传授什么实用的、有教育意义的、有进步意义的知识呢？</p></blockquote><p>转到幕后看看</p><blockquote><p>只要表达得当，哪怕是最无聊的工作也能变得生动有趣。</p><p>让人们走入幕后，能改善你和他们之间的关系。他们会感到与你亲近起来，将你视为一个常人，而不是一个面目模糊的公司。他们将在你的产品中看到你在后台淌下的汗水和付出的努力。他们会对你的工作产生更深刻的理解和更诚挚的感激。</p></blockquote><p>没人喜欢塑料花</p><blockquote><p>不要害怕让人看到你的缺点。不完美才真实，真实才能激起人们的共鸣。</p><p>你大可直言不讳，畅谈那些别人不愿意讨论的东西。直面你的弱点，向人们展示你最近的工作状况，即使你还没完全搞定它。</p></blockquote><p>媒体</p><blockquote><p>做些有意义的事情，要与众不同，确保引人注目，不被遗忘，这样才能达到最大的影响力。</p><p>别惦记大牌媒体</p></blockquote><p>效法药贩子</p><blockquote><p>要效法药贩子，把你的产品包装成完美的、令人上瘾的、“不能错过”的灵丹，让人浅尝之后都忍不住要拿着真金白银回来向你购买。</p><p>你必须得花点工夫，把产品做成小份儿试用装，还得为它准备一份易于阅读理解的产品说明书。这样一来，人们不用花一分钱或浪费太多时间，就能试用你的产品。</p><p>只要你有东西可卖，就不要怕给人一点点让其试用。要对自己的产品抱有信心。你应该知道人们会回来购买更多，如果你连这样的信心都没有，只能说明你的产品做得不够好。</p></blockquote><p>一夜成名只是传说</p><blockquote><p>把一夜成名的迷梦换成一步一个脚印的成长行动吧。</p><p>道路很艰难，但你必须充满耐心。你得用功去做，在遇到伯乐之前，你得努力很长时间。</p><p>今天就开始培养你的观众，开始聚集那些对你有兴趣的人，然后一直保持下去。</p></blockquote><h4 id="招聘篇"><a href="#招聘篇" class="headerlink" title="招聘篇"></a>招聘篇</h4><p>不要提前招人, 放慢招聘脚步.</p><p>亲历亲为</p><blockquote><p>在你亲自尝试做这份工作之前，永远不要雇人去做。</p><p>只有这样，你才能了解这项工作的本质。</p><p>有时候你可能觉得力有不逮，甚至可能觉得筋疲力尽。这很正常。你可以通过招人来摆脱这种感受，也可以通过学习正确的处理方法来解决问题。先试着学习吧。在最初的运营中付出的所有努力，都会变成无数倍的管理智慧，最终回报给你。</p></blockquote><p>放弃牛人</p><blockquote><p>放弃那些你并不需要的牛人，即使你觉得这是个人才。</p><p>牛与不牛没有任何意义，不需要就是不需要。</p></blockquote><p>无关的多年经验</p><blockquote><p>真正重要的是他们到底做得有多好。</p></blockquote><p>常规教育不值一提</p><blockquote><p>马克·吐温: 我从来不把我自己受过的正规学校教育等同于我的受教育程度。</p></blockquote><p>人人都得干活</p><blockquote><p>在一个小团队里，你需要的是干活的人，而不是监工。</p><p>这就意味着你在招聘中要避免招到监工型的人物，这些人喜欢对别人谆谆教导。</p></blockquote><p>聘用独当一面的经理人</p><blockquote><p>独当一面的经理人有自己的目标，并能够坚定地执行这些目标。</p><p>你需要那种能够变图纸为实物、并能实干到底的人。</p><p>怎样才能找到这样的人才？</p><p>方法就是看他们的背景。他们在做其他工作时都有自己独特的基调，他们自己运营过业务，也亲自做过某些项目。</p></blockquote><p>招聘笔杆子</p><blockquote><p>如果你准备在一堆人中挑出一个人来做某份工作，那就挑文章写得最好的那个。</p><p>一个优秀的写手，其优点并不仅仅在于写作。文法清晰代表思路明晰。优秀的写手都懂得如何与人沟通。</p></blockquote><p>高手遍布世界各地</p><blockquote><p>地理上的距离不重要，不管距离多远，你都可以把最好的人才引入你的团队。</p></blockquote><p>试用期必不可少</p><blockquote><p>面试的作用毕竟有限，有些人看起来很专业，但做起事来却很雷人。</p><p>最好的评估办法就是看他们的实际工作情况。</p><p>把他们安排到一个小项目中，哪怕是只有20～40个小时的项目也好。你从中能观察到他们如何决策，你能发现他们如何提问，你能通过他们的实际行动而非口头承诺来对他们进行判断。</p><p>翻看作品、阅读简历、约见面试，那是一回事；实际和人搭档干活，那又是另一回事。</p></blockquote><h4 id="救灾篇"><a href="#救灾篇" class="headerlink" title="救灾篇"></a>救灾篇</h4><p>主动掌控负面新闻</p><blockquote><p>一旦出了事故，就会有人出来爆料。但如果是由你亲自来说，结果会好得多。</p><p>如果你够坦荡，够诚实，够公开，危机应变速度够快，人们就会更加尊重你。不要把头缩回去，也不要苦苦压制坏消息，应该让你的顾客尽可能地拥有知情权。</p></blockquote><p>速度改变一切</p><blockquote><p>在客户服务这一领域，最重要的事情就是快速响应。</p></blockquote><p>如何道歉</p><blockquote><p>一句真诚的道歉，是要承担责任的。</p><p>道歉时要详细解释发生的一切，要说明你将采取什么措施来防止这样的事情再次发生。道歉就是要找到一个办法去纠正错误。</p><p>那么最好的道歉方式是什么呢？</p><p>没有神奇妙方，任何设计好的答案都会显得俗气、虚伪。</p><p>你得在就事论事的基础上进行道歉。</p><p>在道歉时，脑子里必须记住的第一条原则就是：<strong>如果换做是你，你会是什么感觉？如果有人对你说这些话，你会相信他们吗？</strong></p></blockquote><p>让每个人都上前线</p><blockquote><p>团队中的每一个人都应该直接与客户联系——也许不需要每天如此，但是至少每年得联系几次。</p></blockquote><h4 id="文化篇"><a href="#文化篇" class="headerlink" title="文化篇"></a>文化篇</h4><p>文化不是由谁创造的</p><blockquote><p>你创造不了企业文化，企业文化是自然生成的。</p><p>企业文化是一贯行为的副产品。</p><p>不要过多担心企业文化的事情，不要去强求，你无法给企业安装一种文化。企业文化就像上好的苏格兰威士忌一样，你得给它时间去酝酿。</p></blockquote><p>员工不是13岁</p><blockquote><p>他们不会真正一直工作8小时。人们需要开开小差，这有助于打破整日的枯燥单调。花一点点时间上上YouTube或Facebook不会失去什么。</p><p>对员工的不信任才是最大的开销。</p></blockquote><p>发出你的心声</p><blockquote><p>做真实的你没有什么不好。诚实方为明智之举。你给人家留下的第一印象就是你的言论——为什么要以谎言开局呢？不要害怕做自己。</p><p>写东西的时候，不要觉得这是写给天下所有人看的，<strong>只要想着一个人，就为这个人而写</strong>。</p></blockquote><p>慎用越快越好</p><blockquote><p>当你事事要求别人“越快越好”时，你就是在表示每件事都是优先级别最高的，如果每件事都是急事，那就没有急事了。</p><p>慎用你的紧急命令，留到真正有急事时再说，也就是在那种如果无动于衷就会引起直接的巨大反应情况发生时再说。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《重来1》中文版部分内容摘选.&lt;/p&gt;
    
    </summary>
    
      <category term="Reading" scheme="http://lupeipei.github.io/categories/Reading/"/>
    
    
      <category term="Reading" scheme="http://lupeipei.github.io/tags/Reading/"/>
    
  </entry>
  
  <entry>
    <title>读《重来》三部曲</title>
    <link href="http://lupeipei.github.io/posts/notes-of-rework-series/"/>
    <id>http://lupeipei.github.io/posts/notes-of-rework-series/</id>
    <published>2021-09-07T06:20:04.000Z</published>
    <updated>2021-09-08T00:51:14.401Z</updated>
    
    <content type="html"><![CDATA[<p>相见恨晚系列.</p><span id="more"></span><p>刷完《重来1》, 没刹住车, 连着把2, 3也刷完了.</p><p>整体感觉还是最喜欢《重来1》.</p><p>《重来1》里面的很多建议对于普通人来说, 实在是很友好.</p><p>我也终于知道大胡子有些文章里面提到的观点和方法论, 出处原来是在这里.</p><p>不过他也早就声明自己是二手知识贩卖商. 姜太公钓鱼, 愿者上钩. 无可厚非.</p><p>莫怪他人割韭菜, 要怪自己没脑子.</p><p>阅读的过程中, 想起一件小事.</p><p>有一年的 RubyConf China, 不记得是不是17年了, 当时主持人现场连线, 请了<a href="https://en.wikipedia.org/wiki/David_Heinemeier_Hansson">David Heinemeier Hansson</a> 来远程分享, 但是直播时间很短, DHH打了个招呼后, 没说几句, 就下线了, 因为他要去赛车 .</p><p>当时第一感觉是, 这个人好没礼貌啊, 这么多人等着听他分享, 他怎么这么任性.</p><p>现在看来, 他这样的选择无可厚非.</p><p>每个人都有支配自己时间的自由, 我猜对他而言, 赛车带来的乐趣远胜过业内略显枯燥的分享​​.</p><p>再说, 他们本就不是按常规出牌的人.</p><p>说回这三本书.</p><p>《重来1》 可以有一个更接地气的名字, 叫做写给普通人的创业建议.</p><p>《重来2》的英文原版书名是《Remote: Office Not Required》, 所以整本书基本都是围绕远程办公展开.</p><p>《重来3》中有部分的观点跟《重来1》重合了, 比如即时回复, 企业文化, 一周40小时工作制, 但是一点也不影响阅读体验, 反而觉得很受用[我是这么觉得的…..]. 人都是健忘的, 重要的事情, 值得多说一遍. 所以当你读完《重来1》中不攀客户高枝的那一节, 也就明白了为什么后来 Basecamp 的产品统一收费, 而不是按照使用人数来收费. 当你读完《重来1》中有关工作狂的那一节, 也就理解了为什么《重来3》中花大篇篇幅提醒你要捍卫自己的时间, 当你读完《重来1》中立马上线的那一节, 也就认同了《重来3》中为何强调先发布，然后学习.</p><p>你的处事原则决定了你的决策考量, 决策考量决定最后你的行为.</p><p>写这篇笔记时, 我简单摘选了三本书的部分篇幅. 我想大概也是得益于此, 我能试着把三本书中散落的点串起来看, 整体感觉清晰了很多.</p><p>这里一并附上摘录的笔记:</p><p><a href="https://luciaca.cn/2021/09/07/notes-of-rework/">重来1章节摘选</a></p><p><a href="https://luciaca.cn/2021/09/07/notes-of-remote-office-not-required/">重来2章节摘选</a></p><p><a href="https://luciaca.cn/2021/09/07/notes-of-it-does-not-have-to-be-crazy-at-work/">重来3章节摘选</a></p><p>Hope you  enjoy it.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;相见恨晚系列.&lt;/p&gt;
    
    </summary>
    
      <category term="Reading" scheme="http://lupeipei.github.io/categories/Reading/"/>
    
    
      <category term="Reading" scheme="http://lupeipei.github.io/tags/Reading/"/>
    
  </entry>
  
  <entry>
    <title>读《感谢自己的不完美》</title>
    <link href="http://lupeipei.github.io/posts/notes-of-be-grateful-for-your-imperfection/"/>
    <id>http://lupeipei.github.io/posts/notes-of-be-grateful-for-your-imperfection/</id>
    <published>2021-09-04T03:01:40.000Z</published>
    <updated>2021-09-04T03:03:06.347Z</updated>
    
    <content type="html"><![CDATA[<p>感觉书名有些拖累了书的内容.</p><span id="more"></span><p>按照自己的偏好, 简单整合了下书中的要点.</p><h4 id="有关坏习惯"><a href="#有关坏习惯" class="headerlink" title="有关坏习惯"></a>有关坏习惯</h4><blockquote><p>恶习<strong>代表着你内心的需要</strong>，你只有理解它并接受它，它才能得到最有效的改造。</p><p>每一个人做任何事情最终都是为了满足自己的一些深层需要，<strong>每一个负面的、损害性的行为背后都有一个正面的动机。</strong>如果认真聆听我们内心的声音，你会发现，生命中每一部分都是你的朋友，都是为了帮助你更好地生活。</p><p>改变恶习最关键的一点是: <strong>不和恶习较劲，接受恶习</strong>。</p><p>每一个旧习惯对应着的神经回路是无法消失的，只能靠新习惯打造更强大的新神经回路，用新的神经回路去战胜旧的神经回路。[在长满荒草的地方, 种上庄稼]</p></blockquote><h4 id="负面情绪与心理痛苦"><a href="#负面情绪与心理痛苦" class="headerlink" title="负面情绪与心理痛苦"></a>负面情绪与心理痛苦</h4><blockquote><p>心灵注定要在创伤中前行。</p><p><strong>每一种心理的痛苦都是有意义的</strong>。我们可以有无数种方法降低痛苦、逃避痛苦，但真正解决问题的方法只有一种:<strong>直面痛苦，认识痛苦的意义，领悟到问题的来源，并由此成长</strong>。</p><p>常见的”负面情绪”:</p><ul><li><p>焦虑</p><p>摈弃那种不惜一切代价抵制焦虑的信念。</p></li><li><p>悲伤</p><p>当你悲伤时，你最值得做的就是和悲伤融为一体。</p></li><li><p>愤怒</p><p>愤怒首先是一个信号，它告诉你<strong>有人过分地侵入了你的空间，过分地控制了你。</strong></p><p>侵入你空间的那个人，<strong>无论其理由是多么美好，你都应当捍卫自己</strong>。</p></li><li><p>内疚</p><p>内疚的产生，源自付出与接受的失衡。</p><p>内疚的产生，其实是在提醒你，你该补偿对方了。</p><p>我们要懂得这一点，懂得<strong>觉察自己的内疚，然后及时作出补偿</strong>。</p><p>同样，当对方产生内疚时，我们也要<strong>给对方机会，让对方完成TA的补偿</strong>。</p></li><li><p>恐惧</p><p>许多恐惧所传递的信息是极具价值的。</p><p>我们越恐惧一件事情，那件事情背后隐藏着的信息可能就越重要。</p></li></ul><p>认识”负面情绪”:</p><p>任何真切而纯粹的情绪、感受和体验都是大自然的馈赠。</p><p>任何情绪、感受和体验都是天然产生的，它们都在告诉我们一些信息，在指引我们走向好的成长之路。</p><p>任何一种真切的情绪, 都有其独特的价值. 你要做的并不是抵制, 压抑这些情绪, 而是学会正确的处理它们, 感受它们, 明白什么让你焦虑/悲伤/愤怒/内疚/恐惧,  尊重自己的感觉。</p></blockquote><h4 id="挫折商-AQ-Adversity-Quotient"><a href="#挫折商-AQ-Adversity-Quotient" class="headerlink" title="挫折商(AQ: Adversity Quotient)"></a>挫折商(AQ: Adversity Quotient)</h4><blockquote><p>定义: 一个人化解并超越挫折的能力。</p><p>可以从四个方面衡量一个人的AQ:</p><ul><li><p>控制 (Control)</p><p>即你在多大程度上能控制局势。</p><p>高AQ者的控制感高，低AQ者的控制感低。</p><p>即便面临重大的挫折，高控制感的人仍然相信自己能控制局势。</p></li><li><p>归因(Ownership)</p><p>挫折发生了，我们要分析挫折发生的原因，这就是归因。</p><p>高AQ的人首先会<strong>主动承担责任，无论什么情况下都倾向于认为自己应该为挫折负责</strong>。同时，他们会进行积极归因，即相信自己一定能改善局面。</p></li><li><p>延伸(Reach)</p><p>即你会不会自动将一个挫折的恶果延伸到其他方面。</p><p>高AQ的人很少泛化，<strong>他们将挫折的恶果控制在特定范围</strong>。不让它对自己的其他方面产生任何影响。他们知道，一个挫折事件只是一个挫折事件。</p></li><li><p>忍耐 (Endurance)</p><p>耐力是衡量AQ的最重要尺度。</p><p>高AQ者之所以有较高的耐力，只是因为即便面临着再大的困难，高AQ者也总能看到积极因素，他们深信自己能渡过难关，能掌控局势，目前的忍耐只是黎明前的黑暗。他们的耐力是<strong>基于希望和乐观主义</strong>之上的。</p><p>典型的例子如爱迪生.</p></li></ul></blockquote><h4 id="镜子"><a href="#镜子" class="headerlink" title="镜子"></a>镜子</h4><blockquote><p>任何一个你在乎的关系，其实都是一面心灵的镜子，可以照出你内心的秘密来。</p><p>把关系当作一面镜子，一面帮助你认识自己并重新整理自己的镜子。</p><p>在关系的镜子前审视自己，理解自己，并引导自己走向好的转变。</p><p>假若你渴望理解自己, 改变自己，那么重要的不是抱怨别人希望别人为自己改变，而是反省自己，“我为什么会变成这样子?”  “我把TA当成了谁?”  “这和我以前有什么相像的地方?”</p></blockquote><h4 id="人格自由"><a href="#人格自由" class="headerlink" title="人格自由"></a>人格自由</h4><blockquote><p>人格的自由是我们的独立之本、健康之泉，也是我们创造力的基石。</p><p>追求人格的自由，结束已经发生的事实对我们心灵的羁绊只有一条途径: 接受已经发生的事实，承认它已不可改变。</p><p>因为否认自己经历的任何事情，就是在否认自己人格的一部分。否认自己的一部分，就会或轻或重地导致人格的分裂。并且，被否认的那一部分，绝对不会因此而消失，它只是被你压抑进潜意识而已，仍然在对你发挥影响。更糟糕的是，当它们发挥作用时，因为是来自潜意识，你的意识对它们一无所知，于是你对它丧失了控制能力。</p></blockquote><h4 id="拥有你的”瓦尔登湖”"><a href="#拥有你的”瓦尔登湖”" class="headerlink" title="拥有你的”瓦尔登湖”"></a>拥有你的”瓦尔登湖”</h4><blockquote><p>每个人都需要一个他自己的“瓦尔登湖”。</p><p>你可以有一些简化的选择，譬如: 每天写一段简短的心情日记; 每天给自己留出半个小时的绝对独处时间; 每年有一个星期的旅游，去海边、湖边或河边，看清水流动，那时仿佛你的心灵也被净化了……</p><p>这些简单的仪式, 让你和尘世的喧嚣暂时保持一段距离，它可以让你的心灵出现不可思议的成长，同时又保证你不与现实脱节。</p><p>在选择你的“瓦尔登湖”时，你不妨将它的时间、空间和方式固定下来，这样它就<strong>发展成了一个清晰的仪式</strong>，可以让你很方便地<strong>比较过去与现在的差异</strong>，从而清晰地<strong>意识到你心灵的成长</strong>。</p></blockquote><h4 id="Tips"><a href="#Tips" class="headerlink" title="Tips:"></a>Tips:</h4><ul><li>不要积累太多的未完成的事情。每个未完成的事情都会吞噬你部分心理能量，无论这个事情多么不起眼。</li><li>只有当你缺乏理解的时候，才有掌控的必要。如果你已经把事情看得很清楚，自然就不需要掌控了。</li><li>在人生的转折性时刻，做一些象征性的事情，以纪念这些时刻，同时提示自己，你已进入新的人生阶段。</li><li>让感觉在自己身上酣畅淋漓地流动。</li></ul><h4 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h4><p>心灵的事，要慢慢来。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;感觉书名有些拖累了书的内容.&lt;/p&gt;
    
    </summary>
    
      <category term="Reading" scheme="http://lupeipei.github.io/categories/Reading/"/>
    
    
      <category term="Reading" scheme="http://lupeipei.github.io/tags/Reading/"/>
    
  </entry>
  
  <entry>
    <title>读《秋园》</title>
    <link href="http://lupeipei.github.io/posts/notes-of-qiu-yuan/"/>
    <id>http://lupeipei.github.io/posts/notes-of-qiu-yuan/</id>
    <published>2021-09-02T10:20:22.000Z</published>
    <updated>2021-09-04T12:15:05.560Z</updated>
    
    <content type="html"><![CDATA[<p>讲述一个女人的一生.</p><span id="more"></span><p>篇幅很短, 看了自序, 觉得很舒服, 顺着刷完, 整个过程像是一位老奶奶, 不紧不慢地跟你说着过往.</p><p>故事中的秋园生于1914年, 89岁逝世. 一生经历了中国的几次大变革. 少年丧父, 中年丧偶, 晚年丧子, 严格来说, 晚年丧子后, 她曾一度走到自杀的边缘, 又一次经历了丧夫之痛. 最终从异乡回到故地, 终老故土.</p><p>不知为何, 刷的过程中, 想起了我的外婆.</p><p>外婆已过世多年.</p><p>外婆也有着苦难的一生.</p><p>年轻时, 外公极为心疼外婆, 从不让她下地劳作, 可惜外公走得早, 正值壮年, 意外身故, 丢下外婆和他们年幼的五个孩子. 外婆一生辛苦劳作, 努力拉扯五个小孩成家立业, 终生未再婚.</p><p>小时候去外婆家, 常常看到她伏着身子, 编草垫, 一直到很晚很晚, 头顶上方, 挂着一盏昏黄的灯.</p><p>印象中, 外婆不看电视, 不打牌消遣, 唯一的社交, 是去找一些老朋友, 串串门, 拉拉家常, 做祷告, 做礼拜.</p><p>外婆还有赶夜路的习惯.</p><p>儿时的我, 曾跟她一起赶过路. 大半夜, 走过一条条小道, 灯火极少, 时而有狗吠声, 鞋子与地面轻微地摩擦着. 头顶的满天星, 亮亮的, 照着路.</p><p>母亲说外婆一生很苦.</p><p>但外婆从来没说过自己苦.</p><p>外婆说, 再苦的日子里, 她也没有求过人, 总有办法扛过.</p><p>她常说, 人活着要争气.</p><p>她一生想要证明自己有用, 能独自撑得住整个家, 晚年时, 不愿拖累子女, 一人独居, 自己劳作, 照顾自己.</p><p>外婆的身上, 有着同秋园相似的那股韧性.</p><p>应该说, 秋园身上的那股韧性, 可以在中国很多女性身上看到.</p><p>她们来过, 承受着生活的捶打, 最后离开, 轻浅得像未曾来过一般.</p><p>她们看似渺小却不脆弱, 用尽力气, 不被生活揉碎.</p><p>这样的她们, 教人敬佩.</p><p>似花儿一般, 迎风摇曳, 静静绽放, 静静凋谢.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;讲述一个女人的一生.&lt;/p&gt;
    
    </summary>
    
      <category term="Reading" scheme="http://lupeipei.github.io/categories/Reading/"/>
    
    
      <category term="Reading" scheme="http://lupeipei.github.io/tags/Reading/"/>
    
  </entry>
  
  <entry>
    <title>Mac中使用Automator批量转换HEIC文件</title>
    <link href="http://lupeipei.github.io/posts/using-automator-to-convert-heic-in-macos/"/>
    <id>http://lupeipei.github.io/posts/using-automator-to-convert-heic-in-macos/</id>
    <published>2021-08-29T04:45:15.000Z</published>
    <updated>2021-08-29T07:27:14.804Z</updated>
    
    <content type="html"><![CDATA[<p>PicGo不支持HEIC文件, 每次上传照片到图床时, 都要先转换成JPG. 参考 <a href="https://mackeeper.com/blog/convert-heic-to-jpg-on-mac/">3 Ways to Convert HEIC Files to JPGs Format on a Mac</a> 尝试了下 Mac 的Automator功能, 非常方便, 记录下.</p><span id="more"></span><h4 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h4><p>环境: macOS Big Sur 11.3.1</p><p>Applications 中找到 Automator, 打开 Automator, 选择 Quick Action.</p><p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images20210829120241.png"></p><p>在打开的界面中, Workflow receives current 选择 Image Files.</p><p>然后左侧边栏选择 Library &gt; Photos &gt; Change  type of Images. 将 <strong>Change  type of Images</strong> 拖拽到 灰色区域创建Workflow.</p><p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images20210829120416.png"></p><p>拖拽中会弹窗让你选择是否确认添加. 确认即可.</p><p>随后选择目标格式, 比如 JPEG, 同时在 Copy Finder Items 中选择转换格式后的图片生成位置, 这里我选择了Desktop, 它也提供了替换源图片的选项.</p><p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images20210829121628.png"></p><p>然后选择 File &gt; Export - 命名你的Workflow 即可.</p><p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images20210829121412.png"></p><p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images20210829121828.png"></p><p>保存后,  因为选择保存地址在Desktop, 所以去Desktop 双击打开刚刚保存的 workflow, 安装.</p><p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images20210829122054.png"></p><p>安装后, 选中需要转换格式的图片, 选择 Services &gt; HEIC TO JPEG 即可.</p><p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images20210829122502.png"></p><p>OK, 搞定.</p><p>另外, 如果不想要这个Workflow了, 可以在 <strong>System Preferences &gt; Extensions &gt; Finder</strong> 中找到它, 移除即可.</p><p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images20210829124049.png"></p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://mackeeper.com/blog/convert-heic-to-jpg-on-mac/">3 Ways to Convert HEIC Files to JPGs Format on a Mac</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;PicGo不支持HEIC文件, 每次上传照片到图床时, 都要先转换成JPG. 参考 &lt;a href=&quot;https://mackeeper.com/blog/convert-heic-to-jpg-on-mac/&quot;&gt;3 Ways to Convert HEIC Files to JPGs Format on a Mac&lt;/a&gt; 尝试了下 Mac 的Automator功能, 非常方便, 记录下.&lt;/p&gt;
    
    </summary>
    
      <category term="CS" scheme="http://lupeipei.github.io/categories/CS/"/>
    
    
      <category term="Mac" scheme="http://lupeipei.github.io/tags/Mac/"/>
    
  </entry>
  
</feed>
