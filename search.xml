<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Rails异步处理之sidekiq</title>
    <url>/posts/Asynchronous-processes-about-sidekiq-in-rails/</url>
    <content><![CDATA[<p>对sidekiq多点了解。</p>
<span id="more"></span>

<h4 id="异步处理是什么"><a href="#异步处理是什么" class="headerlink" title="异步处理是什么"></a>异步处理是什么</h4><p>google到的结果：</p>
<blockquote>
<p>Asynchronous refers to processes that do not depend on each other’s outcome, and can therefore occur on different threads simultaneously. It enables various workflow processes to run at the same time. you are simply running the workflow in the background of the calling application.</p>
</blockquote>
<p>简单来说，就是多个进程不依赖于各自的输出结果，可以同时出现在不同的线程中，这种方式使得不同的工作流进程可以同步进行。</p>
<p>在Rails中，可以理解成，当用户送出操作后，Rails 不会立即执行该任务，而是交由另一个进程(process)在背景下进行处理。</p>
<h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><p>当任务要执行很久的时候，例如汇出大笔数据、汇入大笔数据等，这时如果不进行异步处理，可能会：</p>
<ul>
<li>导致用户体验不佳，浏览器卡住，需要等服务器完成任务才有回应</li>
</ul>
<ul>
<li>影响服务器效能，用户可能等不及又重新刷，导致任务重头执行，而一个HTTP Request 如果长时间执行，会让 Rails 服务器无法服务其他用户</li>
</ul>
<h4 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h4><p>有两个gem可用：<a href="https://github.com/tobi/delayed_job">delayed_job</a>， <a href="https://github.com/mperham/sidekiq">Sidekiq</a>。</p>
<p>这里说说sidekiq的用法。</p>
<p>以一个简单的数据导入为例来说明下如何使用。</p>
<ul>
<li><p>安装Redis</p>
<p>sidekiq需要使用Redis来存储所有的job和操作数据，运行：<code>brew install redis</code></p>
<p>新开一个terminal窗口，执行<code>redis-server /usr/local/etc/redis.conf</code>,默认情况下，Sidekiq 会在本地通过端口6379尝试连接Redis。</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcly1fq1vk2qsn9j30u908a0t8.jpg"></p>
</li>
<li><p>安装sidekiq</p>
<p>在gemfile中添加:</p>
<pre><code>gem &#39;sidekiq&#39;
</code></pre>
<p>执行<code>bundle</code></p>
</li>
<li><p>添加配置</p>
<p>编辑<code>config/environments/development.rb</code>，<code>config/environments/production.rb</code>, 添加：</p>
<pre><code>config.active_job.queue_adapter = :sidekiq
</code></pre>
<p>告知Rails 要用 sidekiq 来做异步处理。</p>
<p>新建文件<code>config/sidekiq.yml</code>, 添加如下内容：</p>
<pre><code class="Iml">:queues:
  - default
</code></pre>
<p>重启服务器。</p>
</li>
<li><p>新建一个异步处理任务ImportWorkerJob</p>
<pre><code>rails g job import_worker
</code></pre>
<p>编辑<code>app/jobs/import_worker_job.rb</code>，修改perform部分:</p>
<pre><code class="ruby">def perform(import_id)
  import = Import.find(import_id)
  ## do something, eg. import.file!
end
</code></pre>
</li>
<li><p>如何调用？</p>
<p>对于需要异步处理的job，使用<code>ImportWorkerJob.perform_later(@import.id)</code>即可。</p>
</li>
</ul>
<h4 id="Redis与memcache"><a href="#Redis与memcache" class="headerlink" title="Redis与memcache"></a>Redis与memcache</h4><p>说到Redis，很容易想到memcache，看看他俩的区别。</p>
<p>一直以为他俩特别像，都是用来做缓存的。但是Google了下发现，相对而言，Redis能做的更多，表现也更好。</p>
<p>memcache小巧，允许你存储key/value这样的一堆堆键值，且对value的字符有限制【up to 1M】。重启memcache， 数据全部清空。Redis可以当作cache来用，memcache能做的，它都能做，但对value字符的限制扩展到了512M。重启redis后，默认情况下，数据并不清空，当然，如果你需要它像memcache一样清空，也没问题。它还具有像其他数据库一样的特性，比如集群等。可以在终端运行：<code>redis-cli info</code> 来一览Redis。</p>
<p>好像我目前都是把redis当缓存服务器来使用的……</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://docs.oracle.com/cd/E24705_01/doc.91/e24264/sync_async_processing.htm#EOTWK00192">Understanding Synchronous and Asynchronous Processing</a></p>
<p><a href="https://stackoverflow.com/questions/10558465/memcached-vs-redis">Memcached vs. Redis?</a></p>
<p><a href="http://www.mikeperham.com/2017/04/20/monitoring-redis/">Monitoring Redis</a></p>
<p>强烈推荐<a href="https://github.com/mperham">Mike Perham</a>「maintainer of Sidekiq」 的<a href="https://www.mikeperham.com/">个人blog</a>， 干货很多，里面对于sidekiq和Redis也有详细的讲解。</p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
      </tags>
  </entry>
  <entry>
    <title>ROR技能树：批量生成测试数据</title>
    <url>/posts/Build-fake-data-for-Rail/</url>
    <content><![CDATA[<p>使用 seeds 和 rake task 生成测试数据。</p>
<span id="more"></span>

<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>使用ROR进行网站开发时，不可避免地需要生成测试数据，常用的方法有两种：</p>
<ul>
<li>使用seed.rb</li>
<li>使用rake task</li>
</ul>
<p>下面以 Job这个model为例，看看如何用seed，rake task来批量生成测试数据，并对比两者之间的优劣。</p>
<p>Job所含字段：</p>
<pre><code>string   &quot;title&quot;
text     &quot;description&quot;
datetime &quot;created_at&quot;,                    
datetime &quot;updated_at&quot;,                    
integer  &quot;wage_upper_bound&quot;
integer  &quot;wage_lower_bound&quot;
string   &quot;contact_email&quot;
boolean  &quot;is_hidden
</code></pre>
<hr>
<h3 id="测试数据生成"><a href="#测试数据生成" class="headerlink" title="测试数据生成"></a>测试数据生成</h3><h4 id="Seeds-rb"><a href="#Seeds-rb" class="headerlink" title="Seeds.rb"></a>Seeds.rb</h4><p>在seeds.rb中，将不同的字段放在Array中，然后循环调用这些Array，生成测试数据。</p>
<p>比如下面这种， 将Job的<code>title</code>， <code>description</code> 放在数组jobs_info中，然后循环赋值，具体步骤如下：</p>
<p>1、将如下代码贴到<code>seed.rb</code>文档中（为增加可读性，此处jobs_info仅放了3个种子）：</p>
<pre><code class="Ruby">jobs_info = [[&quot;Web Application Developer&quot;,&quot;Creates, maintains and implements web-based application systems. Resolves issues and recommends enhancements, when necessary. Has knowledge of HTML, Java and related concepts. Relies on knowledge and professional discretion to plan and accomplish goals. Usually reports to a department head. Significant ingenuity and flexibility is expected. May require a bachelor’s degree in a related area and at least 2-4 years of relevant experience.&quot;
],[ &quot;Android Developer&quot;,&quot;Designs and builds applications for the Android platform. Works with outside data sources and API’s. Fixes bugs and improves application performance. Collaborates with cross-functional teams to determine and launch new features. Should have knowledge of core web technologies (HTML5, CSS3, JavaScript). Requires a bachelor’s degree in area of specialty and 2 years of relevant experience.&quot;
],[&quot;iOS Developer&quot;,&quot;Designs and builds applications for the iOS platform. Works with outside data sources and API’s. Fixes bugs and improves application performance. Collaborates with cross-functional teams to determine and launch new features. Should have knowledge of core web technologies (HTML5, CSS3, JavaScript). Requires a bachelor’s degree in area of specialty and 2 years of relevant experience.&quot;
]]

create_jobs = 10.times to |i|
    job_test=jobs_info[rand(0..2)]
    Job.create!([title: job_test[0],description: job_test[1], wage_upper_bound: rand(50..99)*100,wage_lower_bound: rand(10..49)*100, is_hidden:&quot;false&quot;)
end


create_jobs = 10.times to |i|
    job_test=jobs_info[rand(0..2)]
    Job.create!([title: job_test[0],description: job_test[1], wage_upper_bound: rand(50..99)*100,wage_lower_bound: rand(10..49)*100, is_hidden:&quot;true&quot;)
end
</code></pre>
<p>2、终端运行:</p>
<pre><code>rake db:migrate
rake db:seed
</code></pre>
<p>3、重启服务器<code>rails s</code></p>
<p>大功告成！</p>
<h4 id="rake-task"><a href="#rake-task" class="headerlink" title="rake task"></a>rake task</h4><p>这里我们需要用到强大的faker。点击，看<a href="https://github.com/stympy/faker">faker</a>文档的具体说明。</p>
<p>此外，类似的gem还有<a href="https://github.com/sevenwire/forgery/tree/master">forgery</a> , <a href="https://github.com/tomharris/random_data">random_data</a>。</p>
<p>1、在gemfile中添加faker</p>
<pre><code>gem &#39;faker&#39;
</code></pre>
<p>终端<code>bundle install</code></p>
<p>2、建立一个rake task，这里我们建立一个faker_jobs的任务，终端运行：</p>
<pre><code>rails g task dev fake_jobs
</code></pre>
<p>生成lib/tasks/dev.rake文件，内容如下：</p>
<pre><code class="Ruby">namespace :dev do
  desc &quot;TODO&quot;
  task fake_jobs: :environment do
  end
 end
</code></pre>
<p>3、根据Job的字段，添加相应的Faker数据。比如下面这样：</p>
<pre><code class="Ruby">namespace :dev do
  desc &quot;TODO&quot;
  task fake_jobs: :environment do
    Job.delete_all

    Jobs = []

    100.times do |i|
      Jobs &lt;&lt; Job.create!(:title =&gt; Faker::Job.title,
                          :description =&gt; Faker::Job.key_skill,
                          :wage_upper_bound =&gt; Faker::Number.between(10000,30000),
                          :wage_lower_bound =&gt; Faker::Number.between(1000,10000),
                          :contact_email =&gt; Faker::Internet.email,
                          :is_hidden =&gt; [true, false].sample,
                          :created_at =&gt; Time.now - rand(10).days - rand(24).hours)
  end
 end
end
</code></pre>
<p>4、终端运行：<code>rake dev:fake_orders</code></p>
<p>5、重启服务器<code>rails s</code> , 搞定！</p>
<h3 id="优劣对比"><a href="#优劣对比" class="headerlink" title="优劣对比"></a>优劣对比</h3><p>两者有何不同？哪个更优？</p>
<p>【以下纯属个人理解，有不正确之处，非常欢迎指正】</p>
<p>从个人的使用来看，根据不同的需要去使用相应的方式来生成。</p>
<ul>
<li>seeds：种子方式的好处是，你已经将model的一个或多个字段的取值固定，这样每次生成的都是固定范围的，特别当model中含有一一对应的变量时，比如你做一个商店网站，商品和商品图片是对应的，用faker来随机生成，那简直就是灾难，只能通过seeds。但seeds不好的地方也很明显，你得先把这些字段的取值放进去，不管是通过copy的方式还是手敲（应该没人手敲吧？：P），如果仅仅是用来做测试，这样就有点废了。</li>
<li>rake task：优点是代码清爽，简单直接；缺点在于Faker/random_data／forgery的随机生成，会无视各个字段之间的关系。如果字段之间存在一定的关联，那你用这些gem的后果不是清爽，而是很酸爽。</li>
</ul>
<p>相比seeds，个人其实更喜欢用rake task，毕竟这些数据只是用来测试，而且大部分字段之间并没有很直接的逻辑关系，当然也因为<code>less code less bug</code> （捂脸）。</p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
      </tags>
  </entry>
  <entry>
    <title>伊丽莎白语录</title>
    <url>/posts/Elizabeth-quotations/</url>
    <content><![CDATA[<p>我怕鬼片</p>
<p>我怕没实体的鬼片</p>
<p>我看鬼片一般都捂着眼睛的……</p>
<span id="more"></span>

<p>跟你说果酒啊</p>
<p>可能有些人，就注定胖吧</p>
<p>看来能熬夜是成为老大的必要条件之一啊</p>
<p>欲拒还迎</p>
<p>那你也去啃个西瓜吧</p>
<p>我喜欢英国电影，因为英伦腔听着很好听</p>
<p>喜欢昆汀的电影，因为他的电影经常有大段对白比较话痨</p>
<p>《告白》你觉得恐怖，《杀死比尔》你又觉得正常</p>
<p>我突然想到《热血高校》，我很喜欢的漫改电影</p>
<p>月牙儿说了啊，不能让人卷铺盖睡大街</p>
<p>游泳馆两边都有拿大叉子的工作人员</p>
<p>抓紧，你就十分钟了</p>
<p>广撒网</p>
<p>取一瓢饮</p>
<p>like what</p>
<p>今天是GOT日啊</p>
<p>我很喜欢《银魂》动漫~</p>
<p>同时开两个坑……基本会两个都填不了</p>
<p>恩，我最爱的水果之一，柚子</p>
<p>喜欢薯片，蕃茄味的薯片</p>
<p>嗑瓜子重要的是节奏，一气呵成</p>
<p>我喜欢奶制品</p>
<p>什么鬼</p>
<p>Mr.rainbow</p>
<p>放心，就算我看了那些还是会比你快</p>
<p>你要是有真迹，他肯定不会</p>
<p>我是麦霸</p>
<p>用户表示体验不佳啊</p>
<p>嘿嘿，你猜我在哪儿</p>
<p>我最高纪录3min</p>
<p>1.0版本的有眼泪</p>
<p>还好，不怎么疼了</p>
<p>我神经比较大条</p>
<p>我可能实时比较敏感，但很快就忘了……</p>
<p>明天还要工作！</p>
<p>你工作很不饱和啊</p>
<p>大概就是记在小本本上以后去实现吧</p>
<p>那不是我一个人喝的</p>
<p>我有999， 可斩感冒</p>
<p>night might</p>
<hr>
<p>Happy birthday，伊丽莎白</p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>Life</tag>
      </tags>
  </entry>
  <entry>
    <title>Ruby学习笔记</title>
    <url>/posts/Introduction-to-Ruby/</url>
    <content><![CDATA[<h4 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h4><p>刷了codecademy的ruby基础，简单做了笔记。</p>
<span id="more"></span> 

<p>记住两句话：</p>
<p>**Almost Everything in Ruby is an Object. **[except block]</p>
<p><strong>Every operation in Ruby is  a method call.</strong></p>
<h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><h5 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h5><ul>
<li>data Types: Numbers, Strings, Booleans</li>
<li>Puts and print:<ul>
<li>Print 输出不换行</li>
<li>puts 输出换行</li>
</ul>
</li>
<li>Comments in Ruby<ul>
<li>Single-line : use # sign for comment in Ruby</li>
<li>Multi-line :<pre><code>=begin
略
=end
</code></pre>
</li>
</ul>
</li>
</ul>
<ul>
<li>getting input<ul>
<li><code>gets.chomp</code>:<pre><code>variable_name = gets.chomp
</code></pre>
<code>gets</code> is the ruby method that gets input from the user. When getting input, Ruby automatically adds a blank line (or newline) after each bit of input.<code>chomp</code> removes that extra line.</li>
</ul>
</li>
</ul>
<h5 id="Control-Flow-in-Ruby"><a href="#Control-Flow-in-Ruby" class="headerlink" title="Control Flow in Ruby"></a>Control Flow in Ruby</h5><ul>
<li>If … elsif…else…end</li>
<li>Unless : use control flow to check if something is false.</li>
<li>Comparators operators, like ==,!=,&lt;, &gt;and so on.</li>
<li>Logical operators: and(&amp;&amp;), or(||) , not(!)</li>
<li>As a general rule, Ruby methods that end with ? evaluate to the boolean values true or false. For example , .include?method</li>
</ul>
<p>​       字符替换方法：<code>.gsub!</code>,（global substitution） 通常method后面加上！的表示对这个变量本身做修改，如果没有！，则是复制了该变量，在复制的变量上做了更改。</p>
<h5 id="Loops-amp-Iterators"><a href="#Loops-amp-Iterators" class="headerlink" title="Loops &amp; Iterators"></a>Loops &amp; Iterators</h5><ul>
<li>while ,until, for</li>
<li>for中，当有三个.时，比如for num in 1…10， 循环9次，不包括10，当有两个.时，比如for num in 1..10，循环10次，包括10</li>
<li>break退出循环，例如：<br>  ```Ruby<pre><code>i = 20
loop do
  i -= 1
  print &quot;#&#123;i&#125;&quot;
  break if i &lt;= 0
end
```
</code></pre>
</li>
<li>Next! 用于跳过一些步骤，例如：<br>  ```Ruby<pre><code>for i in 1..5
    next if i % 2 == 0
    print i
end
```
</code></pre>
</li>
<li>.each iterator</li>
<li>.times iterator</li>
</ul>
<h5 id="Data-Structure-Array-and-Hashes"><a href="#Data-Structure-Array-and-Hashes" class="headerlink" title="Data Structure: Array and Hashes"></a>Data Structure: Array and Hashes</h5><ul>
<li><p>Array: index from 0</p>
</li>
<li><p>Hashes: sort of like JavaScript objects or Python dictionaries, is a collection of key-value pairs</p>
<pre><code>hash = &#123;
  key1 =&gt; value1,
  key2 =&gt; value2,
  key3 =&gt; value3
&#125;
</code></pre>
<ul>
<li><p>Hash.new 会新建一个空的hash，类似于生成了一个空的{}</p>
</li>
<li><p>可以给一个hash附上默认值，但是hash仍是空的表,当你访问一个不存在的key时，会返回这个默认值。例如：</p>
<pre><code>h = hash.new(&quot;nothing&quot;)
puts h
# &#123;&#125;
puts h[&quot;kitty&quot;]
# nothing
</code></pre>
</li>
<li><p>遍历hash，使用.each：</p>
<pre><code class="Ruby">pets = &#123;

  &quot;dog&quot; =&gt; 12

  &quot;cat&quot; =&gt; 12

  &quot;mouse&quot; =&gt; 3

&#125;

pets.each &#123;|pet, age| puts &quot;#&#123;pet&#125; : #&#123;age&#125;&quot;&#125;
</code></pre>
</li>
</ul>
</li>
</ul>
<h5 id="Methods-and-Sorting"><a href="#Methods-and-Sorting" class="headerlink" title="Methods and Sorting"></a>Methods and Sorting</h5><ul>
<li><p>method</p>
<ul>
<li>当不清楚需要传递的参数有多少个的时候，用*， 即splat arguments。如: name可以是一个string，也可以是一组字符串数组<pre><code>```Ruby
def friend(*name)
    puts &quot;my friend(s) &quot; + name
end
```
</code></pre>
</li>
</ul>
</li>
<li><p>sort</p>
<ul>
<li>.sort!, 也可以自定义排序,默认是升序，例如：<pre><code>```Ruby
books.sort! do |firstbook, secondbook|
    firstbook &lt;=&gt; secondbook
end
```
</code></pre>
&lt;=&gt;是比较符号，例如：a&lt;=&gt;b，如果a &gt; b, 1 ; a == b ,0 ; a &lt; b, -1.</li>
</ul>
</li>
</ul>
<h5 id="hashes-and-Symbols"><a href="#hashes-and-Symbols" class="headerlink" title="hashes and Symbols"></a>hashes and Symbols</h5><ul>
<li><p>symbol : a ruby symbol is like a sort of name,but it is not a string.</p>
</li>
<li><p>Symbol vs string : while there can be multiple different strings that all have the same value, there’s only one copy of any particular symbol at a given time.</p>
</li>
<li><p>Symbol 总是以:开始，以字母或_为首字符。</p>
</li>
<li><p>Symbol 大量出现在hash keys 或者referencing method names中, symbol作为hash keys的优势：</p>
<ul>
<li>不可更改：They’re immutable, meaning they can’t be changed once they’re created;</li>
<li>节省内存：Only one copy of any symbol exists at a given time, so they save memory;</li>
<li>快于字符：Symbol-as-keys are faster than strings-as-keys because of the above two reasons.</li>
</ul>
</li>
<li><p>symbol 与string可以相互转化：<code>.to_s</code> and <code>.to_sym</code> or <code>.intern</code></p>
</li>
<li><p>用<code>.select</code>来对hash进行筛选。如：</p>
<pre><code>```Ruby
grades = &#123;
  alice: 100,
  bob: 92,
  chris: 95,
  dave: 97
&#125;

grades.select &#123;|name, grade| grade &gt; 97&#125;
# ==&gt; &#123;:alice =&gt; 100&#125;

grades.select &#123;|k,v| k == :chris&#125;
# ==&gt; &#123;:chris =&gt; 95&#125;
```
</code></pre>
</li>
<li><p><code>.each_key</code> ,<code>.each_value</code> , 可以单独访问hash的key 和value</p>
</li>
</ul>
<h5 id="The-Zen-of-Ruby"><a href="#The-Zen-of-Ruby" class="headerlink" title="The Zen of Ruby"></a>The Zen of Ruby</h5><ul>
<li><p>simple, productive</p>
</li>
<li><p>a simpler ‘if’ :  such as expression if boolean</p>
</li>
<li><p>One-line Unless :  such as expression unless boolean</p>
</li>
<li><p>Ternary : boolean ? Do this if true: do this if false. For example: puts 3&lt;4?”3 is smaller than 4”: “3 is bigger than 4”</p>
</li>
<li><p>the case statement:</p>
<pre><code>case language
  when &quot;JS&quot; then puts &quot;Websites&quot;
  when &quot;Python&quot; then puts &quot;Science&quot;
  when &quot;Ruby&quot; then puts &quot;Web apps&quot;
  else puts &quot;I don&#39;t know&quot;
end
</code></pre>
</li>
<li><p>conditional assignment: ||=</p>
</li>
<li><p>return in ruby: 在ruby中，如果没有指明return，它的methods会默认return最后一个有值的表达式。</p>
</li>
<li><p><strong>only false and nil are false value in Ruby</strong>.</p>
</li>
<li><p><code>.upto</code>,<code>.downto</code> methods. for example:</p>
<pre><code>```Ruby
&quot;L&quot;.upto(&quot;P&quot;) &#123;|word| puts word&#125;
# L
# M
# N
# O
# P
```
</code></pre>
</li>
<li><p><code>.respond_to? : takes a symbol</code> and return true if an object can receive that method and false otherwise.</p>
<pre><code>[1,2,3].respond_to?(:push)
# true 这里因为数组是有push这个method的，所以是true

[1,2,3].respond_to?(:to_sym)
# false to_sym不能针对整个数组进行操作，所以是false
</code></pre>
</li>
<li><p><code>.push</code> or <code>&lt;&lt; :</code> add an element to the end of a array / string</p>
</li>
</ul>
<h5 id="Blocks-Procs-and-Lambdas"><a href="#Blocks-Procs-and-Lambdas" class="headerlink" title="Blocks, Procs, and Lambdas"></a>Blocks, Procs, and Lambdas</h5><ul>
<li><p>Blocks : it is not a object. this is one of the very few exceptions to the “everything is an object” rule in Ruby.</p>
<ul>
<li><p>block can be combined with methods like <code>.each</code> and <code>.times</code> to execute an instruction for each element in a collection (like a hash or array).</p>
<pre><code class="Ruby">5.times &#123;puts &quot;I&#39;m a block!&quot;&#125;
</code></pre>
</li>
<li><p><code>.collect</code> can also use to take a block:<br><code>.collect</code> returns a copy of my_nums, but doesn’t change (or mutate) the original my_numsarray. use <code>.collect!</code>  to change the array.</p>
<pre><code>```Ruby
my_nums = [1,2,3]
my_nums.collect &#123; |num| num**2 &#125;
my_nums
# ==&gt; [1,2,3]
my_nums.collect! &#123; |num| num**2 &#125;
my_nums
# ==&gt; [1,4,9]
```
</code></pre>
</li>
<li><p><code>yield</code> , methods accept blocks using the yieldkeyword.  for example:</p>
<pre><code>```Ruby
def yield_name(name)
  puts &quot;In the method! Let&#39;s yield.&quot;
  yield(&quot;Kim&quot;)
  puts &quot;In between the yields!&quot;
  yield(name)
  puts &quot;Block complete! Back in the method.&quot;
end

yield_name(&quot;Eric&quot;) &#123; |n| puts &quot;My name is #&#123;n&#125;.&quot; &#125;
```

输出结果：
In the method! Let&#39;s yield.
My name is Kim.
In between the yields!
My name is Eric.
Block complete! Back in the method.
</code></pre>
</li>
<li><p>定义一个double函数，使用yield + block 的方式(不在函数里面定义，而是用block的方式去定义)</p>
<pre><code>```Ruby
def double(number)
    yield(number)
end

double(2)&#123;|n| n*2&#125;
```
</code></pre>
</li>
</ul>
</li>
<li><p>Proc : “saved” block. Procs are great for keeping your code DRY, which stands for Don’t Repeat Yourself.  </p>
<ul>
<li>just call <code>Proc.new</code> and pass in the block you want to save. e.x.<pre><code>cube = Proc.new &#123;|x| x**3&#125;
</code></pre>
</li>
<li>Usage:<pre><code>[1,2,3].collect!(&amp;cube)
[4,5,6].map!(&amp;cube)
</code></pre>
<strong>The &amp; is used to convert the cubeproc into a block.</strong></li>
<li>why Procs?<ul>
<li>是个对象：Procs are full-fledged objects, so they have all the powers and abilities of objects. (Blocks do not.)</li>
<li>反复使用：Unlike blocks, procs can be called over and over without rewriting them.</li>
</ul>
</li>
<li><code>.call </code>可以直接call procs .<pre><code>```Ruby
test = Proc.new &#123;puts &quot;hello&quot;&#125;
test.call
# ==&gt; hello
```
</code></pre>
</li>
<li>Symbol, meet proc<pre><code>```Ruby
string = [&quot;1&quot;,&quot;2&quot;,&quot;3&quot;]
nums = strings.map(&amp;:to_i)
# ==&gt; [1,2,3]
# By mapping &amp;:to_i over every element of strings, we turned each string into an integer
```
</code></pre>
</li>
</ul>
</li>
<li><p>Lambda</p>
<ul>
<li>Syntax :<pre><code>lambda &#123;|param| block &#125;
</code></pre>
</li>
<li>Lambda VS Proc (super similar)<ul>
<li><strong>a lambda checks the number of arguments passed to it, while a proc does no</strong>t. This means that a lambda will throw an error if you pass it the wrong number of arguments, whereas a proc will ignore unexpected arguments and assign nil to any that are missing.</li>
<li>when a lambda returns, it passes control back to the calling method; when a proc returns, it does so immediately, without going back to the calling method.**</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="Object-Oriented-Programming"><a href="#Object-Oriented-Programming" class="headerlink" title="Object-Oriented Programming"></a>Object-Oriented Programming</h5><ul>
<li><p>class : a way of organizing and producing objects with similar attributes and methods.</p>
<ul>
<li><p>@var : an instance variable, means the var is attached to the instance of the  class.</p>
</li>
<li><p>Scope : The scope of a variable is the context in which it’s visible to the program.</p>
</li>
<li><p>@@var : an class variable, belongs to the class itself.</p>
</li>
<li><p>$var : global variable</p>
</li>
<li><p>Inheritance Syntax :</p>
<pre><code>```Ruby
class DerivedClass &lt; BaseClass
    # some stuff
end
```
</code></pre>
</li>
<li><p>Override: 在子对象中定义了与父对象一样的方法时，会自动覆盖掉父对象的方法</p>
</li>
<li><p>super， 当需要在子对象调用被覆盖的父对象方法时，用super，例如：</p>
<pre><code>```Ruby
class Creature
  def fight
    return &quot;Punch to the chops!&quot;
  end
end

class Dragon &lt; Creature
    def fight
        puts  &quot;Instead of breathing fire...&quot;
        super
    end
end
```
</code></pre>
</li>
<li><p><strong>只能继承一个父类 ：Only One！</strong></p>
</li>
<li><p>attr_reader, attr_writer: you can read and update a particular variable. or just use attr_accessor to make a variable readable and writeable in one fell swoop.</p>
<pre><code>```Ruby
class Person
  attr_reader :name
  attr_accessor :job

  def initialize(name, job)
    @name = name
    @job = job
  end
end
```
</code></pre>
</li>
</ul>
</li>
<li><p>Module: being very much like classes, but modules can’t create instances and can’t have subclasses. <strong>They’re just used to store things!</strong></p>
<ul>
<li>Ruby constants are written in ALL_CAPS and are separated with underscores if there’s more than one word.</li>
<li>One of the main purposes of modules is to separate methods and constants into named spaces. This is called (conveniently enough) namespacing</li>
<li>include mixes a module’s methods in at the instance level (allowing instances of a particular class to use the methods)</li>
<li>extend  mixes a module’s methods at the class level.</li>
</ul>
</li>
</ul>
<p> 不论class还是module，命名都是以大写字母开头，纯字母构成，没有数字和下横线_</p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>Postgres could not connect to server</title>
    <url>/posts/Postgres-could-not-connect-to-server/</url>
    <content><![CDATA[<p>踩坑 Postgres 记录。</p>
<span id="more"></span> 

<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>开发时，在Rails根目录下，运行<code>rake db:create</code>,  报错：</p>
<pre><code>could not connect to server: No such file or directory
    Is the server running locally and accepting
    connections on Unix domain socket &quot;/tmp/.s.PGSQL.5432&quot;?
</code></pre>
<p>终端输入：<code>psql</code>, 报同样的错。</p>
<p>开发环境： PostgreSQL 10.0 ， Rails 5.1.4， Ruby 2.3.6， MacOS Sierra 10.12.3</p>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>在stack overflow上， <a href="https://stackoverflow.com/questions/13410686/postgres-could-not-connect-to-server">Postgres could not connect to server</a>中给出了这样的解答：</p>
<p>终端运行：</p>
<pre><code>rm /usr/local/var/postgres/postmaster.pid
</code></pre>
<p>原因是：👇</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fq0vpknxz0j30k204xt98.jpg"></p>
<p>可惜，我运行后出现报错：</p>
<pre><code>rm: /usr/local/var/postgres/postmaster.pid: No such file or directory
</code></pre>
<p>后面的<a href="https://stackoverflow.com/users/1701175/freepender">FreePender</a> 给出了另一个解释，提到这类问题可能是版本升级导致, 并给出了解答。</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fq0vvxd6itj30kw0al76b.jpg"></p>
<p>运行：</p>
<pre><code>postgres -D /usr/local/var/postgres
</code></pre>
<p>找到原因了，是版本不兼容问题：</p>
<pre><code>The data directory was initialized by PostgreSQL version 9.6, which is not compatible with this version 10.0.
</code></pre>
<p>运行：</p>
<pre><code>rm -rf /usr/local/var/postgres &amp;&amp; initdb /usr/local/var/postgres -E utf8
</code></pre>
<p>重新<code>bundle</code>, 终端运行：</p>
<pre><code>rake db:create
</code></pre>
<p>Perfect!! 完美解决！</p>
<p>Thanks to <a href="https://stackoverflow.com/users/1701175/freepender">FreePender</a>  for this solution.</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://stackoverflow.com/questions/13410686/postgres-could-not-connect-to-server">Postgres could not connect to server</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
        <tag>PostgreSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>TDD with RSpec出错集之单元测试篇</title>
    <url>/posts/TDD-with-RSpec-errors-recording/</url>
    <content><![CDATA[<p>TDD 学习笔记。</p>
<span id="more"></span> 

<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>刷完了Edx上关于TDD，BDD的课程，也看了《Everyday rails testing with RSpec》, 于是迫不及待想给自己的网站<a href="https://www.togetherisbetter.cn/">Together</a>也加上RSpec部分，好比刚从师傅那学了几招的小徒弟，立马想找个人试试身手，这中间自然也是免不了各种坑的，一一记录， 避免二次入坑。</p>
<p>PS ： FactoryGirl官方GitHub库已经改名为FactoryBot，实作的时候，请小心敲键盘……</p>
<h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><ul>
<li><p><strong>ArgumentError: Factory not registered</strong></p>
<p>运行测试文件时，终端报出这样的错误：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fkq88je5s0j30sd04xmyd.jpg"></p>
<p><strong>怎么破？</strong></p>
<p>在<code>spec/spec_helper.rb</code>文件中，加入如下：</p>
<pre><code class="Ruby">RSpec.configure do |config|
  config.include FactoryBot::Syntax::Methods
  .....
+  config.before do
+    FactoryBot.find_definitions
+  end
end
</code></pre>
</li>
<li><p><strong>FactoryBot::DuplicateDefinitionError: Factory already registered: event</strong></p>
<p>运行测试文件时，终端报出这样的错误：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fkq8u4t8xfj30qg07wdh6.jpg"></p>
<p><strong>怎么破？</strong></p>
<p>在<code>spec/spec_helper.rb</code>文件中，加入如下：</p>
<pre><code class="Ruby">RSpec.configure do |config|
  config.include FactoryBot::Syntax::Methods
  .....
  config.before do
+   FactoryBot.factories.clear
    FactoryBot.find_definitions
  end
end
</code></pre>
</li>
<li><p><strong>Please set Qiniu’s access_key and secret_key before authorize any tokens</strong></p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fkqrce6o1ij30pc052wfp.jpg"></p>
<p>终端运行<code>rspec spec/controllers/events_controller_spec.rb</code>, 为了测试events controller部分，用FactoryBot创建了event，这里有必要说一下，我的event model中有logo部分，而用户上传的logo图片我是用七牛来存储的。抛出异常，查看七牛官方<a href="https://github.com/qiniu/ruby-sdk/blob/master/spec/qiniu/auth_spec.rb">GitHub spec部分</a>，找到了这个：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fkqrjx0s05j30px0jcq67.jpg"></p>
<p>我擦，看完了<code>spec/qiniu/tokens/auth_spec.rb</code>，除了懵逼外，我不知道怎么走下一步，转念想想我这里并不要测试七牛这块啊，我只想测试controller中的method是不是调用了，so what should I do? bypass it。</p>
<p>修改<code>app/uploads/</code>下所有的uploader文档，比如avatar_uploader.rb,  修改storage设置：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fkqsdym52jj30c302hq2y.jpg"><br><strong>除了生产环境，开发和测试请一律使用file存储！</strong></p>
<p>再次测试， 一线飘绿，OK！</p>
</li>
<li><p><strong>NoMethodError: Undefined method ‘sign_in’</strong></p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fkqtb87yhqj30p903saah.jpg"></p>
<p><strong>怎么破？</strong></p>
<p>google后，在stack overflow上找到了解答。</p>
<p>修改<code>spec/support/rails_helper.rb</code>文件，在<code>RSpec.configure do |config| </code>部分添加<code>config.include Devise::TestHelpers, type: :controller</code> :</p>
<pre><code class="Ruby">RSpec.configure do |config|
  ......
+ config.include Devise::TestHelpers, type: :controller
  ......
end
</code></pre>
<p>再次测试, pass!  </p>
</li>
<li><p>如果你的model中有图片部分，比如event model中有个event logo，而你用factoryBot生成数据时，是这样的：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fkr1glxjegj30ki065q3s.jpg"></p>
<p>同时，你在测试案例中要用到build(:event)，那么，先要恭喜你，新坑正在等在你。</p>
<p>我在做controller的create method测试时，一直报错：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fkr1lop75jj30o704bgm8.jpg"></p>
<p>设置断点后，找到了是eventlogo没有赋值成功：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fkr1p9w8bgj30u207egna.jpg"></p>
<p>Google后，你会发现stack overflow上已经有人问过类似的了，但是各执一词，让人有些摸不着头脑，有说用fixture_file_upload的，呃，fixture VS FactoryBot， 我们更爱后者。那<strong>怎么破</strong>？</p>
<p>看<strong>carrierwave</strong>的GitHub文档找到<a href="https://github.com/carrierwaveuploader/carrierwave/wiki/How-to:-Use-test-factories">Use test factories</a>部分:</p>
<p>重点来了：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fkr233qjewj30k90g6di4.jpg"></p>
<p>原来我用的那种格式，是用于create的，如果用build，只存在内存中，则需要换成<code>Rack::Test::UploadedFile.new</code>的样式。</p>
<p>修改<code>spec/factories/events.rb</code>文件，将原eventlogo注释掉：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fkr2j2fr38j30ky06kgmq.jpg"></p>
</li>
</ul>
<p>   终端再次运行：<code>rspec spec/controllers/events_controller_spec.rb</code>, OK !</p>
<h4 id="The-End"><a href="#The-End" class="headerlink" title="The End"></a>The End</h4><pre><code> 按照TDD「Test driven development」的理论，应该测试先行, 像下图酱样子：
</code></pre>
<p>  <img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fkr2b72qhfj30s60djt92.jpg"></p>
<p>  无奈我已经做好了整个网站，决定不按套路出牌，后期加入TDD，来测测前期代码的稳定性 , 在测了一部分功能后，深有感触，测试果然是很有必要的：P。</p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>RSpec</tag>
      </tags>
  </entry>
  <entry>
    <title>TDD with RSpec出错集之Integration测试篇</title>
    <url>/posts/TDD-with-RSpec-integration-test/</url>
    <content><![CDATA[<p>TDD 学习笔记。</p>
<span id="more"></span> 

<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>本场测试的star是 Capybara。</p>
<p>考虑到自己写的method还是挺多的，就没有一一integration test了。</p>
<p>实作了简单的首页测试，用户注册，用户登录，用户退出。</p>
<p>记录下遇到的问题，顺带加入了debug的部分。</p>
<h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><ul>
<li><strong>Capybara::ElementNotFound: Unable to find visible link or button “ 登出”</strong></li>
</ul>
<p>做登录，登出的测试时，终端报出如下错误：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fkrwabt60oj30mn0783z9.jpg"></p>
<p>报错显示页面找不到“ 登出”这个link 或者button，对应的测试文件长这样：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fkrwac5bn8j30en0f440o.jpg"></p>
<p><strong>怎么破？</strong></p>
<p>第一想法就是查看一下用户登录后，点击”Hi!, #{user.username}”，页面这时候是长啥样，是不是真的没有“ 登出”这个link 或者button。</p>
<p>怎么做呢？好办，加入<code>save_and_open_page</code>, 注释掉报错的代码，像这样👇：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fkrwhk5kaqj30ds0g176e.jpg"></p>
<p>终端再次运行案例，得到这样的一串网址：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fkrwkc51ljj30ny05z758.jpg"></p>
<p>终端输入：<code>open tmp/capybara/capybara-201710230848216776109515.html</code>, 浏览器便会打开这个网址了。</p>
<p>我的是这样子：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fkrwltsrhcj30oe0hi40b.jpg"></p>
<p><strong>有登出呢！</strong>为什么显示Unable to find visible link or button ？那只能说明这不是一个link or button？Google后，发现在stackoverflow上有个非常相似的案例：<a href="https://stackoverflow.com/questions/11269724/how-to-use-capybara-in-rspec-to-click-on-a-dropdown-option">How to use capybara in rspec to click on a dropdown option</a></p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fkrx3y3ul4j30kl06lgms.jpg"></p>
<p>试试把<code>click_on&quot; 登出&quot;</code>换成<code>page.find(:xpath, &quot;//a[@href=&#39;/users/sign_out&#39;]&quot;).click</code>, 终端再次运行案例，Pass！！</p>
<p>but ,xpath是啥？XPath 是一门在 XML 文档中查找信息的语言，用于在 XML 文档中通过元素和属性进行导航。</p>
<p>了解更多可以看看W3school的教程<a href="http://www.w3school.com.cn/xpath/index.asp">xpath</a>。</p>
<p>在capybara中为什么要这么用？戳这里<a href="https://github.com/teamcapybara/capybara#xpath-css-and-selectors">capybara XPath, CSS and selectors</a> .</p>
<h4 id="The-end"><a href="#The-end" class="headerlink" title="The end"></a>The end</h4><p><strong>capybara</strong> 中，操作页面的方法除了visit，click外，还有很多比如fill_in， check，choose等等，很强大。</p>
<p>详见：<a href="https://github.com/teamcapybara/capybara">capybara</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>RSpec</tag>
      </tags>
  </entry>
  <entry>
    <title>开发工具之User Story</title>
    <url>/posts/User-Story/</url>
    <content><![CDATA[<p>结合自己的理解，整理出的User Story笔记。</p>
<span id="more"></span> 

<h4 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h4><p>软件开发中常用的一个基本工具，用户故事，又称User Story。</p>
<p>wikipedia上是这样定义的：</p>
<blockquote>
<p>In software development and product management, a user story is an informal, natural language description of one or more features of a software system.</p>
</blockquote>
<p>软件开发中，用来描述一个软件系统单个或多个特性的非正式自然语言。</p>
<p>我的理解是，定下角色，然后从角色的角度出发，理清会做什么事，最后实现了什么样的价值。</p>
<h5 id="Why-User-Story："><a href="#Why-User-Story：" class="headerlink" title="Why User Story："></a>Why User Story：</h5><p>开发中常常遇到如下情况：</p>
<ul>
<li>不知道如何整理项目需求</li>
<li>不知道如何拆分需要成实际的任务</li>
<li>大概知道要去拆分，但是不知道要描述到多详细</li>
<li>如何才能让大家都能很快读懂，参与协作。</li>
</ul>
<p>User Story是解决上述情况的一大利器。</p>
<h4 id="格式："><a href="#格式：" class="headerlink" title="格式："></a>格式：</h4><p>User Story的格式如下：</p>
<blockquote>
<p>As a role of user, I want some feature, so that some business value.</p>
<p>身为「某角色」， 会做「某事」， 以完成「某商业价值」</p>
</blockquote>
<p>例如：</p>
<ul>
<li>管理者可以新增职缺</li>
<li>用户可以申请职缺</li>
<li>用户可以浏览详细的工作内容</li>
<li>……</li>
</ul>
<p>这里，<strong>角色正是系统复杂度的关键</strong>。</p>
<h4 id="撰写的秘诀："><a href="#撰写的秘诀：" class="headerlink" title="撰写的秘诀："></a>撰写的秘诀：</h4><p>既然工具有用，那么要如何写好User Story？</p>
<ul>
<li><p><strong>注意粒度大小，粒度大小很重要</strong></p>
<ul>
<li>针对不同的受众，颗粒度是不一样的，例如：</li>
</ul>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79ly1fic5g3pmdmj30le0ardlk.jpg"></p>
<p>对于投资人／生意人来说，颗粒度就要很大，而针对用户或者客户，则是相对小的size，而针对开发人员，则需要更为小的颗粒。</p>
<ul>
<li>拆分User Story，就好比切蛋糕，直着切，不是横着切。<ul>
<li>不要用技术去切分，而是具体而微，让用户可以体验到一个相对完整，有价值的功能。好比不能单作controller，单作model，或者view，而是结合成一个MVC</li>
<li>要具体切多小呢？有什么标准？<ul>
<li>不需要写太多，比如写20条User Stories，就过多了</li>
<li>一条story不是描述中间一个步骤，而是完成一件事情</li>
<li>一个user story大约是半天～数天的实作长度</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>比如下图：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fic5qwcr0yj30i00bh42k.jpg"></p>
</li>
</ul>
<ul>
<li><p><strong>可彻底完成的小故事</strong></p>
<blockquote>
<p>是要完成一个小目标，让用户可以彻底完成一个任务，而不是发散，模糊，持续进行的故事。</p>
<p>例如：管理员可以管理商品，就不是一个好的user story，比较发散，模糊。</p>
<p>而拆分成：</p>
<ul>
<li>管理员可以上架商品，字段包括商品名称，价格，说明等</li>
<li>管理员可以编辑上架时间，过期商品自动下架</li>
<li>管理员可以上传多张产品图片</li>
</ul>
<p>这才是好的stories</p>
</blockquote>
</li>
<li><p>描述功能需求，而不是解决方案</p>
<blockquote>
<p>不要描述技术细节，包括UI规格，技术规格</p>
<p>只描述对用户有价值的功能</p>
</blockquote>
</li>
<li><p>辨识用户角色</p>
<blockquote>
<ul>
<li>包含用户角色，并讲清楚用户可以做的事情</li>
<li>身为「某角色」， 会做「某事」， 以完成「某商业价值」</li>
<li>撰写User Story用主动语态</li>
<li>角色越多，项目整体复杂度会快速上升</li>
</ul>
</blockquote>
</li>
</ul>
<h4 id="收集和排序："><a href="#收集和排序：" class="headerlink" title="收集和排序："></a>收集和排序：</h4><p>以购物网站示范,将想到的User Story都写在便利贴上，贴在白板上</p>
<ul>
<li><p>Top-down方式：有明确目标导向</p>
<blockquote>
<p>先列出3～5个主要活动，然后将主要活动拆分成至少3个以上的可执行story</p>
</blockquote>
</li>
<li><p>Bottom-up方式：创意导向，适合头脑风暴</p>
<blockquote>
<p>将所有user story贴出来，然后按照时间顺序分类，将类似功能的user story放在一组，如下：</p>
<p>​</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fic6ag9lj7j30ci0avwlv.jpg"></p>
<p>将分组后的活动进行小结，整理成3～5个主要活动。</p>
</blockquote>
<p><strong>排序：</strong></p>
<p>根据优先级，分出Must have ，Should have , Could have, Nice have，先做must，然后should，could，最后再考虑Nice</p>
</li>
</ul>
<h4 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h4><p><a href="https://ihower.tw/blog/archives/2090">Ihower: 什么是User Story</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>关于听歌这件事</title>
    <url>/posts/about-music/</url>
    <content><![CDATA[<p>送君一掬温柔</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=28921691&auto=1&height=66"></iframe>

<span id="more"></span>

<p>一直觉得音乐是个特别神奇的东西。</p>
<p>无形无色，却能有着撩拨人心的力量。</p>
<p>开心了，听歌助兴，不开心了，听歌释怀。</p>
<p>疲惫时，一首歌，仿佛能治愈，能满血复活。</p>
<p>晴朗的日子里，踩着单车，塞上耳机，哼歌吹哨，真真是享受。</p>
<p>记得《偷影子的人》中，男主有个嗜好，每天早上都要来一段大提琴曲，而他最终找到了那个有着大提琴音色般笑声的克蕾尔，彼时她已经是一名大提琴家。</p>
<p>也许耳朵才是抵达心灵的窗口。</p>
<p>嗯，深情不过陪伴，温柔最是得人心。</p>
<p>愿你在音符中寻觅到那份温暖与温柔。</p>
<p>好了，不矫情了，听歌吧。</p>
<p>PS：</p>
<p>为什么要写这么一篇小短文？</p>
<p>其实，我只是想试试如何在hexo里面添加音乐文件……</p>
<p>事实证明，可以边看文章边听歌了……</p>
<p>嗯，其实，还是一心一意听歌的好，好音乐值得去专注。</p>
<hr>
<p>参考：</p>
<p><a href="http://www.jianshu.com/p/a52b68794a6b">hexo创建个人博客（附加插入音乐、分享、评论、标签页、搜索）</a></p>
]]></content>
      <categories>
        <category>Music</category>
      </categories>
      <tags>
        <tag>Music</tag>
      </tags>
  </entry>
  <entry>
    <title>让网站声色俱佳—添加背景音乐</title>
    <url>/posts/add-backgroup-music/</url>
    <content><![CDATA[<p>之前搭建网站时，做过一个landingpage, 加入了背景音乐，觉得还挺有意思的，记录下操作步骤，以备不时之需。</p>
<span id="more"></span>

<h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><p>效果图：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fksf8misk7g30zi0j40yp.gif"></p>
<p>通过点击按钮来控制音乐的播放。</p>
<p>怎么做？</p>
<p><strong>三部曲，html,css, js.</strong></p>
<p>以首页为welcome的<code>index.html.erb</code>为例，简单说明。</p>
<ul>
<li>step1、在首页<code>index.html.erb</code>中，添加如下代码：</li>
</ul>
<pre><code class="Html">  &lt;a id=&quot;btn-music&quot; class=&quot;btn-music&quot;&gt;&lt;/a&gt;
  &lt;audio class=&quot;music&quot; src=&quot;XXX.mp3&quot; autoplay controls loop hidden&gt;
  &lt;/audio&gt;
</code></pre>
<p>其中，<code>src</code>部分根据个人情况进行修改，如果音乐文件存在本地的public下，直接引用文件名，如果是网路上，直接引用网址，类似这样：<br><code>src=&quot;https://res.cloudinary.com/dfbew47j6/video/upload/v1496754060/lighthouse_s31qoc.m4a&quot;</code></p>
<ul>
<li>step2、在你的<code>welcome.scss</code>或者<code>application.scss</code>中添加以下代码：</li>
</ul>
<pre><code class="Css">.btn-music &#123;
  position: absolute;
  top: 1rem;
  left: 1rem;
  width: 3rem;
  height: 3rem;
  margin-left: 20px;
  background: url(&#39;https://res.cloudinary.com/elliepooh/image/upload/v1491889929/music_s7aiet.svg&#39;) center center / 100% no-repeat;
  cursor: pointer;
&#125;

.music-off &#123;
  background: url(&#39;https://res.cloudinary.com/elliepooh/image/upload/v1491890054/music-off_nrnsni.svg&#39;) center center / 90% no-repeat;
&#125;
</code></pre>
<ul>
<li>step3、在首页<code>index.html.erb</code>最下方，加入如下代码：<pre><code class="Html">&lt;script type=&quot;text/javascript&quot;&gt;
let playMusic = true;
document.getElementById(&quot;btn-music&quot;).addEventListener(&quot;click&quot;, function() &#123;
playMusic = !playMusic;
document.getElementById(&quot;btn-music&quot;).classList.toggle(&#39;music-off&#39;);
playMusic ? document.querySelector(&#39;.music&#39;).play() : document.querySelector(&#39;.music&#39;).pause();
&#125;);
worldMusic.volume = 0.8;//预设音量
&lt;/script&gt;
</code></pre>
</li>
</ul>
<p>搞定，可以愉快地听歌啦！！</p>
<h4 id="The-End"><a href="#The-End" class="headerlink" title="The End"></a>The End</h4><p>参考资料：</p>
<p><a href="https://codepen.io/elliepooh/pen/dRPOqM/">lighthouse</a><br><a href="http://web.ruby001.cn/css/64065747447400107852.html">CSS中id与class共存</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>Load resource in cancancan</title>
    <url>/posts/Load-resource-in-cancancan/</url>
    <content><![CDATA[<p>cancancan中load_resource的用法小结。</p>
<span id="more"></span> 

<h4 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h4><p>最基本的用法:</p>
<pre><code class="ruby">class TasksController &lt; ApplicationController
  load_resource
end

#### 等同于 @task = Task.find(params[:id]), @task = Task.new, @tasks = Task.all
</code></pre>
<p>options 众多，来一一捋捋。【借鉴cancancan的wiki，以下代码多以 task，project 为例。】</p>
<ul>
<li><p>only  / except</p>
<p>同before_action中的only  / except，指明load_resource在哪些action前调用。</p>
<p>only:</p>
<pre><code class="ruby">class TasksController &lt; ApplicationController
  load_resource only: [:index, :show]
end

### 仅在 index，show action 前调用load_resource
</code></pre>
<p>except:</p>
<pre><code class="ruby">class TasksController &lt; ApplicationController
  load_resource except: [:sent]
end

### 在除 sent action 外的其他actions前调用load_resource
</code></pre>
</li>
<li><p>through</p>
<p>通过A，B之间的关联来load某一方。</p>
<pre><code class="ruby">class Project &lt; ActiveRecord
  has_many :tasks
end

class TasksController &lt; ApplicationController
  load_resource :project
  load_resource :task, through: :project ## 这里也可以省略 :task
end

#### 等同于： @project = Project.find(params[:project_id])
#### @task = @project.tasks.find(params[:id])
</code></pre>
<p>也可以通过method，比如：current_user，也就是wiki中所说的nested through method：</p>
<pre><code class="ruby">class TasksController &lt; ApplicationController
  load_resource through: :current_user
end

#### 等同于： @task = current_user.tasks.find(params[:id])
</code></pre>
</li>
<li><p>through_association</p>
<p>与through的不同在于，project中，如果给tasks起了“别名”，不是，<code>has_many tasks</code>, 而是长这样：</p>
<pre><code class="ruby">class Project &lt; ActiveRecord
  has_many :events, class_name: &#39;Task&#39;
end
</code></pre>
<p>则在taskController中需要通过through_association来指明：</p>
<pre><code class="ruby">class TasksController &lt; ApplicationController
  load_resource :project
  load_resource :task, through: :project, through_association: :events
end

#### 等同于：@project = Project.find(params[:project_id]),
#### @task = @project.events.find(params[:id])
</code></pre>
</li>
<li><p>shallow</p>
<p>shallow是跟着through的，设置为true则允许parent resource为 nil，设置为false则不允许nil，默认为false。</p>
<pre><code class="ruby">class TasksController &lt; ApplicationController
  load_resource :project
  load_resource :task, through: :project, shallow: true
end

#### 等同于：
#### @project存在，则@task = @project.events.find(params[:id])
#### @project不存在，则@task = Task.find(params[:id])
</code></pre>
</li>
<li><p>singleton</p>
<p>当project与task存在一对一关系：</p>
<pre><code class="ruby">class Project &lt; ActiveRecord
 has_one :task
end

class TasksController &lt; ApplicationController
 load_resource :project
 load_resource :task, through: :project, singleton: true
end

#### 等同于： @project = Project.find(params[:project_id])
#### @task = @project.task
</code></pre>
</li>
<li><p>parent</p>
<p>根据这个resource是不是一个parent resource来决定，当resource的name与controller无法匹配时，则默认为是parent resource。比如：</p>
<pre><code class="ruby">class TasksController &lt; ApplicationController
  load_resource :project
  load_resource :task, through: :project
end
</code></pre>
<p>这里，project在task的controller中，就是一个parent resource。</p>
</li>
<li><p>class</p>
<p>指定类名。多用于当controller与model无法匹配时。</p>
<p>常见的是个人中心这样的ProfilesController，对应的类名是User：</p>
<pre><code class="ruby">class ProfilesController &lt; ApplicationController
  load_resource :profile, class: User
end

#### 等同于： @profile = User.find(params[:id])
</code></pre>
</li>
<li><p>find_by</p>
<p>指定find_by_[attribute]。比如：</p>
<pre><code class="ruby">class PersonationsController &lt; ApplicationController
  load_resource find_by: :token, class: User
end

#### 等同于： @personation = User.find_by_token(params[:id])
</code></pre>
<p>注意，此处是params[:id]， 不是params[:token]，如果需要设置params fetch的attribute，可以用id_params.</p>
</li>
<li><p>Id_params</p>
<p>默认是id，可以改为其他的param key，比如上面的例子:</p>
<pre><code class="ruby">class PersonationsController &lt; ApplicationController
  load_resource find_by: :token,, class: User, id_params: :token
end

#### 等同于： @personation = User.find_by_token(params[:token])
</code></pre>
<p>可以将through，find_by,  id_params 结合运用：</p>
<p>以常见的一个订阅为例， 用户订阅项目：</p>
<pre><code class="ruby">class SubscriptionsController &lt; ApplicationController
  before_action &#123; @user = current_user &#125;
  load_resource through: :user, find_by: :project_id, id_param: :project_id
end

#### 等同于：
#### @subscription = @user.subscriptions.find_by_project_id(params[:project_id])
</code></pre>
</li>
<li><p>new</p>
<p>指定除默认的new，create之外，哪些action需要new resource。</p>
<pre><code class="ruby">class TasksController &lt; ApplicationController
  load_resource new: :build

  def build
    .....
  end
end

#### 等同于： 在调用build action前，执行 @task = Task.new
</code></pre>
</li>
<li><p>prepend</p>
<p>值为true或者false，默认false。如果设置为true，则会调用prepend_before_filter 而不是 before_filter。</p>
</li>
</ul>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://github.com/CanCanCommunity/cancancan">cancancan</a></p>
<p><a href="https://www.rubydoc.info/github/CanCanCommunity/cancancan/CanCan%2FControllerAdditions%2FClassMethods:load_resource">cancancan load_resource</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
      </tags>
  </entry>
  <entry>
    <title>nuxt中全局设置错误处理页面</title>
    <url>/posts/add-global-error-handle-on-nuxt/</url>
    <content><![CDATA[<p>文档里其实已经写明了，但还是过一遍吧。</p>
<span id="more"></span>

<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>调接口后，当response返回404，500等status code时，进行统一处理，render到错误页面。</p>
<h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><p>Nuxt v2.6.2,  nuxtjs/axios v5.3.6.</p>
<h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><p>Nuxt 在context 中添加了一个<code>error(params)</code> 方法，下面正是通过调用这个方法来调错误页面。</p>
<p>两步即可：</p>
<ul>
<li><p>在<code>plugins/axios.js</code>文件中，统一添加错误处理：</p>
<pre><code class="javascript">export default function (&#123; $axios, error &#125;) &#123;
  $axios.onError(e =&gt; &#123;
    if(e.response.status === 403) &#123;
      error(&#123; statusCode: 403, message: &quot;forbidden&quot; &#125;)
    &#125;

    if(e.response.status === 404) &#123;
      error(&#123; statusCode: 404, message: &quot;not found&quot; &#125;)
    &#125;

    if(e.response.status === 500) &#123;
      error(&#123; statusCode: 500, message: &quot;server error&quot; &#125;)
    &#125;
  &#125;)
&#125;
</code></pre>
<p>每次axios 发送请求后，当response 返回错误时，会调用error这个method，而error 这个方法可以用来调用错误页面 error page。</p>
</li>
<li><p>在layouts 中添加 <code>error.vue</code> 文件，这个文件就是出错时render的error page.</p>
<p><code>error.vue</code>的内容可以长这样：</p>
<pre><code class="html">&lt;template&gt;
  &lt;div class=&quot;container&quot;&gt;
    &lt;h1 v-if=&quot;error.statusCode === 403&quot;&gt;Forbidden&lt;/h1&gt;
    &lt;h1 v-if=&quot;error.statusCode === 404&quot;&gt;Page not found&lt;/h1&gt;
    &lt;h1 v-if=&quot;error.statusCode === 500&quot;&gt;Server Error&lt;/h1&gt;
    &lt;nuxt-link to=&quot;/&quot;&gt;Home page&lt;/nuxt-link&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
export default &#123;
  props: [&#39;error&#39;],
  layout: &#39;blank&#39;
&#125;
&lt;/script&gt;
</code></pre>
<p>这里需要注意的是：</p>
<p>当前版本的nuxt，在<code>error.vue</code>中设置layout是无效的。</p>
<p>不过这个问题已修复，下一版本应该会发布，戳<a href="https://github.com/nuxt/nuxt.js/issues/2537#ref-issue-499747914">bug(csr): error page layout not correctly applied #2537</a>  可查看详情。<br>「2019-10-14更新： 在2.10.0版本中，已经修复了该问题，可查看<a href="https://github.com/nuxt/nuxt.js/releases">release</a>了解」<br>好了，搞定，收工！！</p>
</li>
</ul>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://nuxtjs.org/guide/views#error-page">Error page</a></p>
<p><a href="https://axios.nuxtjs.org/helpers">Axios Helpers</a></p>
<p><a href="https://github.com/nuxt/nuxt.js/issues/2537#ref-issue-499747914">bug(csr): error page layout not correctly applied</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Nuxt</tag>
      </tags>
  </entry>
  <entry>
    <title>DFW - this is water</title>
    <url>/posts/after-watching-this-is-water/</url>
    <content><![CDATA[<p>A speech given by David Foster Wallace in 2005 , you can find it on Youtube <a href="https://www.youtube.com/watch?v=PhhC_N6Bm_s">This Is Water by David Foster Wallace Full Speech</a>.</p>
<span id="more"></span>

<p>David Foster Wallace suicided in 2008, at age 46.</p>
<p>In this speech, he said “It is about making it to thirty, or maybe even fifty, without wanting to shoot yourself in the head.”</p>
<p>He hasn’t made it to fifty.</p>
<p>To be honest, it is hard for me to digest his main points in this speech totally.</p>
<p>So I downloaded the small book titled <em>this is water</em> and reread it again.</p>
<p>Still,  confused.</p>
<p>Here are some of my notes on his speech:</p>
<ul>
<li>“Learning how to think” really means learning how to exercise some control over <strong>how and what you think</strong>.</li>
<li>being conscious and aware enough to choose <strong>what you pay attention to</strong> and to choose <strong>how you construct meaning from experience</strong>.</li>
</ul>
<ul>
<li><p>The really important kind of freedom involves attention, and awareness, and discipline, and effort, and <strong>being able truly to care about other people and to sacrifice for them</strong>, over and over, in myriad petty little unsexy ways, every day.  「This is really really really hard」</p>
<p>[ To recap, it is a lifetime journey for learning and revising your default settings. ]</p>
</li>
</ul>
<p>Some of his thoughts reminded me of the book titled <em>Beyond feelings</em>, the default settings David mentioned resemble first reaction and arrogance reflects people’s hidden attitude “mine is better” in that book.</p>
<p>but  the authors of <em>Beyond feelings</em> explained these default settings in more detail, which is  worth your time more: the speech or <em>Beyond feelings</em>?  I recommend the latter.</p>
<p>But the book need more time to read, so his speech is  a good start. enjoy.</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/imageswp-1486198560059.jpg"></p>
]]></content>
      <categories>
        <category>Learning</category>
      </categories>
      <tags>
        <tag>Talks</tag>
      </tags>
  </entry>
  <entry>
    <title>《汇编语言》第三版实验7代码实现</title>
    <url>/posts/assembly-code-for-lab-7/</url>
    <content><![CDATA[<p>花了大半天的时间，终于把这个作业给做了。</p>
<span id="more"></span>

<p>最初的版本大量使用了loop, 可以说是很低效，很小白了。<br>但一想到这是我目前写到的最复杂的一个汇编程序，还是选择记录下: P。<br>期待刷完整本后，再来看这段代码, 能被自己蠢哭。</p>
<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>这个实验算是前面8章所学的一个小小总结了。</p>
<p>最初的版本；</p>
<pre><code>assume cs:codesg, es:table, ss:stacksg

data segment
db &#39;1975&#39;,&#39;1976&#39;,&#39;1977&#39;,&#39;1978&#39;,&#39;1979&#39;,&#39;1980&#39;,&#39;1981&#39;,&#39;1982&#39; 
db &#39;1983&#39;,&#39;1984&#39;,&#39;1985&#39;,&#39;1986&#39;,&#39;1987&#39;,&#39;1988&#39;,&#39;1989&#39;,&#39;1990&#39;
db &#39;1991&#39;,&#39;1992&#39;,&#39;1993&#39;,&#39;1994&#39;,&#39;1995&#39;
;stands for years from 1975 to 1995

dd 16,22,382,1356,2390,8000,16000,24486,50065,97479,140417,197514
dd 345980,590827,803530,1183000,1843000,2759000,3753000,4649000,5937000
;stands for yearly revenue from 1975 to 1995

dw 3,7,9,13,28,38,130,220,476,778,1001,1442,2258,2793,4037,5635,8226
dw 11542,14430,15257,17800
;stands for number of employees from 1975 to 1995

data ends

table segment
  db 21 dup (&#39;year summ ne ?? &#39;)
table ends

stacksg segment
  dw 8 dup (0)
stacksg ends

codesg segment
  start: mov ax, data
         mov ds, ax
     mov bx, 0
     mov bp,0

     mov ax, table
     mov es, ax

     mov ax, stacksg
     mov ss, ax
     mov sp,0
     
     mov cx, 21
      s: push cx 
         mov si, 0
     mov cx, 2
     s0: mov ax, ds:[bp+si] 
         mov es:[bx+si], ax
     add si,2
     loop s0

     pop cx
     add bx, 16
     add bp, 4
     loop s

     mov cx, 21
     mov bx, 0
     s1: push cx
         mov si, 0
     mov cx, 2
     s2: mov ax, ds:[bp+si]
     mov es:[bx+5+si], ax
     mov ax, ds:[bp+si+2]
     mov es:[bx+7+si], ax
     add si, 2
     loop s2
     
     pop cx
     add bx, 16
     add bp, 4
     loop s1

     mov cx, 21
     mov bx, 0
     s3: mov ax, ds:[bp]
     mov es:[bx+10], ax
     add bx, 16
     add bp, 2
     loop s3

     mov cx, 21
     mov bx, 0
     s4: mov ax, es:[bx+5]
         mov dx, es:[bx+7]
     div word ptr es:[bx+10]
     mov es:[bx+13], ax
     add bx, 16
     loop s4

     mov ax, 4c00h
     int 21h
codesg ends
end start
</code></pre>
<p>看网上别人的解答，基本用21*4来偏移，两次循环搞定, 我起初也是这么想的，结果做的时候，发现脑子不够用，于是改用了最简单也最低效的方式，惭愧。</p>
<p>重新试着写了一轮，改进后的版本长这样：</p>
<pre><code>assume cs:codesg, es:table, ss:stacksg

data segment
db &#39;1975&#39;,&#39;1976&#39;,&#39;1977&#39;,&#39;1978&#39;,&#39;1979&#39;,&#39;1980&#39;,&#39;1981&#39;,&#39;1982&#39; 
db &#39;1983&#39;,&#39;1984&#39;,&#39;1985&#39;,&#39;1986&#39;,&#39;1987&#39;,&#39;1988&#39;,&#39;1989&#39;,&#39;1990&#39;
db &#39;1991&#39;,&#39;1992&#39;,&#39;1993&#39;,&#39;1994&#39;,&#39;1995&#39;
;stands for years from 1975 to 1995

dd 16,22,382,1356,2390,8000,16000,24486,50065,97479,140417,197514
dd 345980,590827,803530,1183000,1843000,2759000,3753000,4649000,5937000
;stands for yearly revenue from 1975 to 1995

dw 3,7,9,13,28,38,130,220,476,778,1001,1442,2258,2793,4037,5635,8226
dw 11542,14430,15257,17800
;stands for number of employees from 1975 to 1995

data ends

table segment
  db 21 dup (&#39;year summ ne ?? &#39;)
table ends

stacksg segment
  dw 8 dup (0)
stacksg ends

codesg segment
  start: mov ax, data
         mov ds, ax
     mov bx, 0
     mov bp, 0
     mov di, 0

     mov ax, table
     mov es, ax

     mov ax, stacksg
     mov ss, ax
     mov sp,0
     
     mov cx, 21
      s: push cx 
         mov si, 0
     mov cx, 2
     s0: mov ax, ds:[bp+si] 
         mov es:[bx+si], ax

     mov ax, ds:[bp+21*4+si]
     mov es:[bx+5+si], ax

     add si,2
     loop s0


         mov ax, ds:[di+21*4+21*4]
     mov es:[bx+10], ax

         mov ax, es:[bx+5]
         mov dx, es:[bx+7]
     div word ptr es:[bx+10]
     mov es:[bx+13], ax

     pop cx
     add bx, 16
     add bp, 4
     add di, 2
     loop s

     mov ax, 4c00h
     int 21h
codesg ends
end start
</code></pre>
<p>果然虐过一遍，脑子清醒多了。</p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Assembly</tag>
      </tags>
  </entry>
  <entry>
    <title>使用global gitignore来ignore所有项目下的.idea</title>
    <url>/posts/always-add-idea-to-gitignore/</url>
    <content><![CDATA[<p>使用rubymine带来的一个问题。</p>
<span id="more"></span>

<h4 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h4><p>每次都会生成.idea，如何在每一个rails项目中，将.idea自动添加到gitignore中？</p>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>两步：</p>
<ul>
<li><p>生成全局的gitignore文件，终端执行：</p>
<pre><code>cd ~
git config --global core.excludesfile ~/.gitignore_global
touch .gitignore_global
</code></pre>
</li>
<li><p>将需要ignore的文件路径添加到.gitignore_global文件中，以.idea为例，将～/ROR下所有项目的.idea都ignore：</p>
<pre><code>vi .gitignore_global
</code></pre>
<p>在打开的.gitignore_global中，添加：</p>
<pre><code>ROR/*/.idea
</code></pre>
<p>保存，退出，OK!</p>
</li>
</ul>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://help.github.com/articles/ignoring-files/">ignoring files</a></p>
<p><a href="https://davidwalsh.name/global-gitignore">create a global .gitignore</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Rails中的assign_attributes和accepts_nested_attributes_for</title>
    <url>/posts/assign-attributes-with-accepts-nested-attributes-for/</url>
    <content><![CDATA[<p>工作中遇到的一个问题。</p>
<span id="more"></span>

<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>场景类似下面这样：</p>
<p>现有model project， model member， model user，可以将member看作是user与project之间多对多关系的中间表，现在需要在project新建后，将创建该project的当前用户current_user设为该项目的负责人，也就是在member中新增一条记录。同时在project 的<code>new.html.erb</code>表单中，只有一个name，即项目名称字段。</p>
<p>如何实现？</p>
<p>我开始用了极为粗暴简单的方式，在<code>projects_controller.rb</code>的create action中添加了这么一句：</p>
<pre><code class="Ruby">def create
  @project.save
  Member.create!(role: &quot;owner&quot;, project: @project, user: current_user)
  respond_with @project, location: ok_url_or_default(Project)
end
</code></pre>
<p>这样功能是实现了，但是这明显不是正确的写法，找不到一点rails的影子，完全新手小白的方式。老大提到了用assign_attributes和accepts_nested_attributes_for来实现。改写了，实现了，踩了点坑。</p>
<p>记录下assign_attributes的用法，主要是与accepts_nested_attributes_for结合使用，在不依靠表单的情况下，更新数据库。</p>
<h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><p><a href="https://apidock.com/rails/ActiveRecord/AttributeAssignment/assign_attributes">assign_attributes</a>，既可以更新model所有的attributes，也可以用来更新model的部分attributes。光看没什么感觉，拿个例子练练手。</p>
<p>有一个model movie，字段name, description, name要求不能为空,同时与user之间存在一对多的关联。</p>
<pre><code class="Ruby">class Movie &lt; ApplicationRecord
  validates :name, presence: true
  belongs_to :user
end  
</code></pre>
<p>进入console试试：</p>
<pre><code class="Ruby">m = Movie.new

### 只更新一部分
m.assign_attributes(name: &quot;before you&quot;)
m.attributes
=&gt; &#123;&quot;id&quot;=&gt;nil, &quot;name&quot;=&gt;&quot;before you&quot;, &quot;description&quot;=&gt;nil, &quot;created_at&quot;=&gt;nil, &quot;updated_at&quot;=&gt;nil, &quot;user_id&quot;=&gt;nil&#125;

### 更新全部并保存
m.assign_attributes(name: &quot;before you&quot;, description: &quot;it is a love story&quot;, user: User.first)
m.save
=&gt; true
m.attributes
=&gt; &#123;&quot;id&quot;=&gt;7, &quot;name&quot;=&gt;&quot;before you&quot;, &quot;description&quot;=&gt;&quot;it is a love story&quot;, &quot;created_at&quot;=&gt;Sat, 23 Jun 2018 01:25:15 UTC +00:00, &quot;updated_at&quot;=&gt;Sat, 23 Jun 2018 01:25:15 UTC +00:00, &quot;user_id&quot;=&gt;1&#125;
</code></pre>
<p>上面的例子是create，如果要update呢？</p>
<pre><code class="Ruby">m = Movie.first
=&gt; #&lt;Movie id: 4, name: &quot;once&quot;, description: &quot;Apart but still together&quot;, created_at: &quot;2018-06-04 07:55:59&quot;, updated_at: &quot;2018-06-04 07:55:59&quot;, user_id: 1&gt;

m.assign_attributes(name: &quot;one day&quot;)
m.attributes

=&gt; &#123;&quot;id&quot;=&gt;4, &quot;name&quot;=&gt;&quot;one day&quot;, &quot;description&quot;=&gt;&quot;Apart but still together&quot;, &quot;created_at&quot;=&gt;Mon, 04 Jun 2018 07:55:59 UTC +00:00, &quot;updated_at&quot;=&gt;Mon, 04 Jun 2018 07:55:59 UTC +00:00, &quot;user_id&quot;=&gt;1&#125;

m.save
m
=&gt; #&lt;Movie id: 4, name: &quot;one day&quot;, description: &quot;Apart but still together&quot;, created_at: &quot;2018-06-04 07:55:59&quot;, updated_at: &quot;2018-06-23 01:30:41&quot;, user_id: 1&gt;
</code></pre>
<p>可以看到成功完成了更新！</p>
<p>这么看，好像没什么，更新和新建而已，但是结合accepts_nested_attributes_for就很cool了。</p>
<p>下面的例子均以create为导向，不涉及update。</p>
<h4 id="单个关联下"><a href="#单个关联下" class="headerlink" title="单个关联下"></a>单个关联下</h4><p>assign_attributes中，针对一对一的关联关系，有一个单独的private method，<a href="https://apidock.com/rails/ActiveRecord/NestedAttributes/assign_nested_attributes_for_one_to_one_association">assign_nested_attributes_for_one_to_one_association</a>， private method不能直接调用，用assign_attributes 和accepts_nested_attributes_for也可以实现一样的效果。</p>
<p>比如有一个model 别名alias , 与user之间是一对一的关系，每次创建alias时，需要关联到user。对应model中的代码如下：</p>
<pre><code class="Ruby">Class Alias &lt; ActiveRecord::Base
  belongs_to :user
  accepts_nested_attributes_for :user
end
</code></pre>
<p>这样使用assign_attributes，如果alias的user已经存在，则会更新，如果不存在，则新建一个对应的user。这里要注意，不要在user里面添加<code>belongs_to :alias</code>， 这样你在传递user_attribute时，会报错，显示alias必须存在，而此时alias还没有创建成功。</p>
<p>进入console试试, 在alias未创建前，创建一个user：</p>
<pre><code class="Ruby">a = Alias.new

a.assign_attributes(&#123;name: &quot;ruby&quot;, user_attributes: &#123; email: &quot;world@gmail.com&quot;, password: &quot;123456&quot;, password_confirmation: &quot;123456&quot;&#125;&#125;)

a.save
=&gt; true
a
=&gt; #&lt;Alias id: 1, name: &quot;ruby&quot;, user_id: 3, created_at: &quot;2018-06-23 02:33:23&quot;, updated_at: &quot;2018-06-23 02:33:23&quot;&gt;
a.user
=&gt; #&lt;User id: 3, email: &quot;world@gmail.com&quot;, created_at: &quot;2018-06-23 02:33:23&quot;, updated_at: &quot;2018-06-23 02:33:23&quot;&gt;
</code></pre>
<p>可以看到user已经创建完成！</p>
<p>不过我觉得这种情况，多半是你需要新建一个默认的user，因为参数的值是你传递过去的，已经定义好了，而不是像页面的表单那样。这个方法的好处在于，你不需要在页面表单中添加user部分，让用户选择，直接在创建alias时就与user建立起了关联。</p>
<h4 id="多关联下"><a href="#多关联下" class="headerlink" title="多关联下"></a>多关联下</h4><p>如同一对一关联中，一对多关系下，也有一个private method：<a href="https://apidock.com/rails/ActiveRecord/NestedAttributes/assign_nested_attributes_for_collection_association">assign_nested_attributes_for_collection_association</a>。 官方给到的例子是这样的：</p>
<pre><code class="Ruby">assign_nested_attributes_for_collection_association(:people, &#123;
  &#39;1&#39; =&gt; &#123; id: &#39;1&#39;, name: &#39;Peter&#39; &#125;,
  &#39;2&#39; =&gt; &#123; name: &#39;John&#39; &#125;,
  &#39;3&#39; =&gt; &#123; id: &#39;2&#39;, _destroy: true &#125;
&#125;)
</code></pre>
<p>People 是复数，这里传递的参数是一个hash，可以看出传了三条记录。如果用assign_attributes怎么实现呢？我这里直接用背景中那个问题来举例。【啧啧，在背景里卖关子没给到解答，悄悄把解答放在了这里。】</p>
<p>在<code>project.rb</code>中，添加<code>accepts_nested_attributes_for :members</code>:</p>
<pre><code class="Ruby">class Project &lt; ApplicationRecord
  has_many :members, dependent: :destroy
  accepts_nested_attributes_for :members
end
</code></pre>
<p>这样，我们可以修改controller中的action create了, 在save之前进行assign_attributes:</p>
<pre><code class="Ruby">def create
  @project.assign_attributes(members_attributes: [ &#123; role: &quot;owner&quot;, project: @project, user: current_user &#125; ])
  @project.save
  respond_with @project, location: ok_url_or_default(Project)
end
</code></pre>
<p>踩坑的地方就在于members_attributes后面传递的是一个Array数组<code>[ &#123; role: &quot;owner&quot;, project: @project, user: current_user &#125; ]</code>，数组里面的元素才是Hash。启发来自于文档中的这个例子：</p>
<pre><code class="Ruby">assign_nested_attributes_for_collection_association(:people, [
  &#123; id: &#39;1&#39;, name: &#39;Peter&#39; &#125;,
  &#123; name: &#39;John&#39; &#125;,
  &#123; id: &#39;2&#39;, _destroy: true &#125;
])
</code></pre>
<p>OK！</p>
<p>BTW，还有一个类似assign_attributes的method，update_attributes，官方没有给到例子，可以参考这篇文章<a href="https://maori.geek.nz/accepts-nested-attributes-for-is-creating-new-records-gotcha-b060665f43ed">accepts_nested_attributes_for is Creating New Records; Gotcha!</a>，感觉跟assign_attributes还是很像的。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://apidock.com/rails/ActiveRecord/AttributeAssignment/assign_attributes">assign_attributes</a></p>
<p><a href="https://apidock.com/rails/ActiveRecord/NestedAttributes/assign_nested_attributes_for_one_to_one_association">assign_nested_attributes_for_one_to_one_association</a></p>
<p><a href="https://apidock.com/rails/ActiveRecord/NestedAttributes/assign_nested_attributes_for_collection_association">assign_nested_attributes_for_collection_association</a></p>
<p><a href="https://maori.geek.nz/accepts-nested-attributes-for-is-creating-new-records-gotcha-b060665f43ed">accepts_nested_attributes_for is Creating New Records; Gotcha!</a></p>
<h4 id="一点思考"><a href="#一点思考" class="headerlink" title="一点思考"></a>一点思考</h4><p>当我写出正确解答的时候，再看，发现其实挺简单的，可是我为什么花了差不多两个小时呢？因为我的搜索习惯。</p>
<p>曾经我的习惯是，出问题了就Google，看stack overflow，对于文档，觉得冗长枯燥，效率低，不愿意去读，其实这样反而是走了弯路。不懂的时候，看文档，看文档，看文档！不要偷懒去看别人写的那些解答和文章，极有可能完全不是你想要的，甚至可能让你离正确的解决方法越来越远。看文档虽然略显枯燥，却最有效，如果文档中没有相关的实例，可以去搜一下别人用例。<br><strong>change your mind, change your habit.</strong></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
      </tags>
  </entry>
  <entry>
    <title>《汇编语言》第三版课程设计1代码实现</title>
    <url>/posts/assembly-code-for-course-design-1/</url>
    <content><![CDATA[<p>果然是绝知此事要躬行。</p>
<span id="more"></span>

<h4 id="效果："><a href="#效果：" class="headerlink" title="效果："></a>效果：</h4><p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/imagesXnip2020-04-09_00-14-06.jpg"></p>
<h4 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h4><p>两个小小的说明：</p>
<ul>
<li><p>所有用到的小程序都是实验10里面的，稍微有点超前的指令是cmp 和 jna 类条件跳转，但是刷了chapter11后，就很容易懂了，另外整个屏幕一行160个字节，正好4列数据，所以每列我配了40个字节，显示出来正好占满整个屏幕。</p>
</li>
<li><p>程序是从第1行而不是第0行开始显示数据的，因为执行EXE文件后，屏幕会自动下移一行，光标闪烁等待用户输入，如果从第0行开始显示，1975 那一年的数据就无法看到了。</p>
</li>
</ul>
<p>以下为具体实现：</p>
<pre><code class="assembly">assume cs:codesg, ds:data, ss:stacksg

; 所要显示的原始数据

data segment
db &#39;1975&#39;,&#39;1976&#39;,&#39;1977&#39;,&#39;1978&#39;,&#39;1979&#39;,&#39;1980&#39;,&#39;1981&#39;,&#39;1982&#39; 
db &#39;1983&#39;,&#39;1984&#39;,&#39;1985&#39;,&#39;1986&#39;,&#39;1987&#39;,&#39;1988&#39;,&#39;1989&#39;,&#39;1990&#39;
db &#39;1991&#39;,&#39;1992&#39;,&#39;1993&#39;,&#39;1994&#39;,&#39;1995&#39;
;stands for years from 1975 to 1995

dd 16,22,382,1356,2390,8000,16000,24486,50065,97479,140417,197514
dd 345980,590827,803530,1183000,1843000,2759000,3753000,4649000,5937000
;stands for yearly revenue from 1975 to 1995

dw 3,7,9,13,28,38,130,220,476,778,1001,1442,2258,2793,4037,5635,8226
dw 11542,14430,15257,17800
;stands for number of employees from 1975 to 1995

db 10 dup(0)
; 用于暂存十进制数值
data ends

stacksg segment
  dw 16 dup (0)
stacksg ends

codesg segment
  start: mov ax, data
         mov ds, ax

           mov ax, stacksg
           mov ss, ax
           mov sp, 20h

         mov ax, 0b800h
         mov es, ax

          ; 初始化用于定位的寄存器, bp 为160，从第一行开始
           mov bx, 0
           mov bp, 160
           mov si, 0

         ; 默认在屏幕的1行0列开始显示，cx用于循环，故改用dl保存色值，颜色为绿色
           mov dh, 0
           mov dl, 2

           ; 按行显示，循环21次, cx = 21 
           mov cx, 21
      s: push cx 
           mov di, 0
           call display_years
           call display_revenue
           call display_employees
           call display_per_income
           add bp, 160
           add si, 4 
           add bx, 2
           pop cx
           loop s

           mov ax, 4c00h
           int 21h

; 显示年份
display_years: push dx
               push si
               mov cx, 4
    show_year: mov dh, ds:[si]
                 mov es:[bp + di], dh
                 mov es:[bp + di + 1], dl
                 add di, 2
                 inc si
                 loop show_year

           ; 在年份后的空白处显示空字符
  show_empty0: mov byte ptr es:[bp+di], &#39; &#39;
                 mov es:[bp + di + 1], dl
                 add di, 2
                   cmp di, 40
                   jna show_empty0

                 pop si
                 pop dx
    end_years: ret

; 显示年收入
display_revenue: push ax
                 push dx
                     push cx
                     mov ax, ds:[21*4+si] ; 年收入是两个字，高位存在dx中，低位存在ax
                     mov dx, ds:[21*4+si+2]
                     mov cx, 10
                     call dtoc  ; 使用实验10的小程序3显示十进制的字符串
                     pop cx
                     pop dx
                     pop ax

                     call show_str ; 使用实验10的小程序1显示十进制的字符串

            ; 在年收入后的空白处显示空字符
   show_empty1: mov byte ptr es:[bp+di], &#39; &#39;
                  mov es:[bp + di + 1], dl
                  add di, 2
                    cmp di, 80
                    jna show_empty1
   end_revenue: ret


; 显示员工数量
display_employees: push ax
                   push dx
                       push cx
                       mov ax, ds:[21*8+bx]
                       mov dx, 0 
                       mov cx, 10
                       call dtoc  ; 使用实验10的小程序3显示十进制的字符串
                       pop cx
                       pop dx
                       pop ax

                       call show_str ; 使用实验10的小程序1显示十进制的字符串

            ; 在员工数量后的空白处显示空字符
    show_empty2: mov byte ptr es:[bp+di], &#39; &#39;
                  mov es:[bp + di + 1], dl
                  add di, 2
                    cmp di, 120 
                    jna show_empty2
  end_employees: ret

; 显示年均人收入
display_per_income: push ax
                    push dx
                        push cx
                        mov ax, ds:[21*4+si]
                        mov dx, ds:[21*4+si + 2]
                        mov cx, ds:[21*8+bx]
                        call divdw ; 使用实验10的小程序2先得出人均年收入，高位存放在dx, 低位存放在ax
                        mov cx, 10
                        call dtoc  ; 使用实验10的小程序3显示十进制的字符串
                        pop cx
                        pop dx
                        pop ax

                        call show_str ; 使用实验10的小程序1显示十进制的字符串

            ; 在年均人收入后的空白处显示空字符
    show_empty3: mov byte ptr es:[bp+di], &#39; &#39;
                   mov es:[bp + di + 1], dl
                   add di, 2
                     cmp di, 160 
                     jna show_empty3
end_per_income: ret

   dtoc: push si
           push di
           push bp 

           mov si, 0
           mov di, 0
           mov bp, cx

     s0: mov cx, bp 
         call divdw

           add cx, 30h
           push cx
           inc si ; si 用来记录总的十进制数的字符串个数, 出栈时用到
           mov cx, ax
           jcxz s1
           jmp short s0

     s1: pop ax
         mov ds:[21*10 + di], al
           dec si
           mov cx, si
           jcxz ok
           inc di
           jmp short s1

     ok: pop bp
         pop di
         pop si
         ret 

   divdw: push bx
          push ax
          mov ax, dx
            mov dx, 0
            div cx
            mov bx, ax

            pop ax
            div cx

            mov cx, dx
            mov dx, bx
            pop bx
          ret

 show_str: push cx
           push si
             mov si, 0
           mov ch, 0
 display: mov cl, ds:[21*10 + si]
            jcxz finish
            mov es:[bp + di], cl
            mov es:[bp + di + 1], dl
             mov ds:[21*10+si], ch
            inc si
            add di, 2
            jmp short display
  finish: pop si 
          pop cx
          ret

codesg ends
end start
</code></pre>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Assembly</tag>
      </tags>
  </entry>
  <entry>
    <title>使用cancancan做权限管理</title>
    <url>/posts/authorize-with-cancancan/</url>
    <content><![CDATA[<p>cancancan是Rails中的运用较为广泛的权限管理gem，源码：<a href="https://github.com/CanCanCommunity/cancancan/wiki">GitHub库</a>， <a href="https://github.com/CanCanCommunity/cancancan/wiki">wiki</a></p>
<span id="more"></span>

<p>目前最新的版本是<a href="https://rubygems.org/search?utf8=%E2%9C%93&query=cancancan">2.2.0</a>， 安装部分可见文档，这里我记录下自己在定义权限时遇到的问题，同时附上验证权限及Rspec下如何测试Ability。</p>
<h4 id="定义权限"><a href="#定义权限" class="headerlink" title="定义权限"></a>定义权限</h4><p>cancancan的wiki中<a href="https://github.com/CanCanCommunity/cancancan/wiki/defining-abilities">Defining Abilities</a>中给到了权限定义的例子：</p>
<p>较常规的，比如：</p>
<pre><code class="Ruby">## ability.rb
class Ability
  include CanCan::Ability

  def initialize(user)
    can :read, :all
    if user.present?
      can :manage, Post, user_id: user.id
      can :manage, Comment
      can :read, Tag, released: true
    end
    if user.admin?
      can :manage, :all
    end
  end
end
</code></pre>
<p>简单说一下，<code>can :manage, Post, user_id: user.id</code>, 表明post含有字段user_id，且当前的user.id等于project的user_id，可以理解成对于所有current_user创建的post，都有manage的权限。</p>
<p>而<code>can :read, Tag, released: true</code>则表明，用户只能阅读已经发布的tag。</p>
<p>需要注意的是，Ability的初始化，默认是在application_controller中添加了helper method:current_ability， 可以在它的源码module CanCan的定义中看到，调用了钩子方法included，当include CanCan时，这些method会自动引入：</p>
<pre><code class="Ruby">def self.included(base)
  base.extend ClassMethods
  base.helper_method :can?, :cannot?, :current_ability if base.respond_to? :helper_method
  base.class_attribute :_cancan_skipper
end
</code></pre>
<p>而module CanCan是自动included 到所有的controller的，这样所有的controller都拥有了current_ability 这个helper method。</p>
<p>我们可以通过在ApplicationController中自定义current_ability来定制权限分配。</p>
<p>看一个稍微有点不一样的场景：</p>
<p>现有model: project，user，member，task，其中project与task是一对多的关系，member是连接user与project之间多对多关系的中间表，4个model的表结构如下：</p>
<pre><code class="Ruby"># Table name: projects
#
#  id         :bigint(8)        not null, primary key
#  name       :string

# Table name: users
#
#  id                     :bigint(8)        not null, primary key
#  email                  :string           default(&quot;&quot;), not null
#  name                   :string
#  admin                  :boolean          default(FALSE)
......[users使用devise创建，其他的attributes省去]

# Table name: task
#
#  id           :bigint(8)        not null, primary key
#  title        :string
#  content      :text
#  project_id   :bigint(8)

# Table name: members
#
#  id         :bigint(8)        not null, primary key
#  role       :string           [owner, member]
#  project_id :bigint(8)
#  user_id    :bigint(8)
</code></pre>
<p>需要定义权限如下：</p>
<ul>
<li><p>user是admin时，拥有最高权限，即can :manage, :all</p>
</li>
<li><p>User不是admin时，根据user在project中的角色来决定他的权限，比如role为owner时，可以读和改project，manage task，role为member时，则只能读project, manage task。</p>
<p>这里就相当于initialize ability的时候，user是参数，需要判断是否是admin，另外需要创建一个新的method，将member作为参数传递过去，根据member的role来定义权限。</p>
<p>我们先来定义从user出发的权限：</p>
<pre><code class="Ruby">## ability.rb
class Ability
  include CanCan::Ability

  def initialize(user)
    return unless user
    if user.admin?
      can :manage, :all
      return
    end
  end
end
</code></pre>
<p>而current_ability的默认定义是这样的：</p>
<pre><code class="Ruby">def current_ability
  @current_ability ||= Ability.new(current_user)
end
</code></pre>
<p>这样user的权限是OK了，但是member呢？我们需要基于项目给user授权，同一个user在不同的项目中可能有不同的角色。我们需要重新修改下ability的初始化，把user和member的授权都定义在单独的method中：</p>
<pre><code class="Ruby">class Ability
  include CanCan::Ability

  def initialize(&amp;block)
    block.(self)
  end

  def apply_user_permissions(user)
    return unless user

    if user.admin?
      can :manage, :all
      return
    end
    can :read, Project, members: &#123; user_id: user.id &#125;
  end

  def apply_member_permissions(member)
    return unless member

    if member.role.owner?
      can [:read, :update], member.project
      can :manage, Task
    end

    if member.role.member?
      can :read, member.project
      can :manage, Task
    end
  end
end
</code></pre>
<p>这样权限就定义好了，要如何使用呢？</p>
<p>在<code>application_controller.rb</code>中，添加current_ability method：</p>
<pre><code class="Ruby">  def current_ability
    @current_ability ||= Ability.new &#123; |a| a.apply_user_permissions(current_user) &#125;
  end
</code></pre>
<p>传递给apply_user_permissions的参数是current_user，类似地，调用apply_member_permissions，传递的是current_member，而这个权限的初始化，则在project和task中，遵循着DRY原则，我们新建一个BaseController来定义current_ability， 然后让ProjectsController， TasksController继承它。</p>
<pre><code class="ruby">def BaseController &lt; ApplicationController
  def current_ability
    super.tap &#123; |a| a.apply_member_permissions(current_member) &#125;
  end
end
</code></pre>
<p>这里，先调用了ApplicationController中的current_ability，判断如果user是admin，则直接manage all，如果不是admin，同时也不是nil，则调用apply_member_permissions来授权，那么current_member如何定义呢？参考<a href="https://luciaca.cn/2018/06/24/define-a-helper-method-like-devise-current-user/">define a helper method like devise’s current_user</a>, 我们可以这样写：</p>
<pre><code class="Ruby">def current_member
  @current_member ||= current_project&amp;.members&amp;.where(user_id: current_user)&amp;.take
end
</code></pre>
<p>首先找出当前project的所有members，然后在members中找出user_id == current_user.id的那一条member纪录即可。【此处，current_project的定义略去，可参见<a href="https://luciaca.cn/2018/06/24/define-a-helper-method-like-devise-current-user/">define a helper method like devise’s current_user</a>】</p>
<p>将这个method添加到BaseController中：</p>
<pre><code class="Ruby">def BaseController &lt; ApplicationController
  def current_member
    @current_member ||= current_project&amp;.members&amp;.where(user_id: current_user)&amp;.take
  end

  def current_ability
    super.tap &#123; |a| a.apply_member_permissions(current_member) &#125;
  end
end
</code></pre>
<p>让ProjectsController， TasksController都继承自BaseController：</p>
<pre><code class="Ruby">### projects_controller.rb
class ProjectsController &lt; BaseController
  ......
end

### tasks_controller.rb
class TasksController &lt; BaseController
  ......
end
</code></pre>
<p>OK!! 下面看看如何验证权限。</p>
</li>
</ul>
<h4 id="验证权限"><a href="#验证权限" class="headerlink" title="验证权限"></a>验证权限</h4><p>验证权限其实比较简单，在view中直接添加if语句即可：</p>
<pre><code class="Ruby">&lt;%= link_to &quot;New Post&quot;, new_post_path if can? :create, Post %&gt;

&lt;%= link_to &quot;edit Post&quot;, edit_post_path(@post) if can? :edit, @post %&gt;

&lt;%= link_to @post.title, post_path(@post) if can? :read, @post %&gt;

&lt;%= link_to &quot;destroy Post&quot;, post_path(@post), method: :delete if can? :destroy, @post %&gt;

&lt;% if cannot? :destroy, @post %&gt;
 &lt;span class=&quot;permission-message&quot;&gt;you are not allowed to delete this post&lt;/span&gt;
&lt;% end %&gt;
</code></pre>
<h4 id="加载资源并授权"><a href="#加载资源并授权" class="headerlink" title="加载资源并授权"></a>加载资源并授权</h4><p>非常好用的一个method：<code>load_and_authorize_resource</code>, 顾名思义，就是加载资源并授权，可以拆分成：<code>load_resource</code>, <code>authorize_resource</code>来单独使用。</p>
<p>看个简单的例子：</p>
<pre><code class="Ruby">class PostsController &lt; ApplicationController
 load_and_authorize_resource
 def show
 end
end
</code></pre>
<p>等同于：</p>
<pre><code class="Ruby">class PostsController &lt; ApplicationController
  def show
    @post = Post.find(params[:id])
    authorize! :read, @post
  end
end
</code></pre>
<p>你也可以按需择取，比如你load_resource的方式不是通过 <code>Post.find(params[:id])</code>，而是自定义了一个current_post的helper method，则可以这样：</p>
<pre><code class="Ruby">class PostsController &lt; ApplicationController
  before_action -&gt; &#123; @post = current_post &#125;
  authorize_resource
  def show
  end
end
</code></pre>
<h4 id="有关Rspec"><a href="#有关Rspec" class="headerlink" title="有关Rspec"></a>有关Rspec</h4><p>Rspec部分比较简单，参见<a href="https://github.com/CanCanCommunity/cancancan/wiki/Testing-Abilities#rspec">test Ability Rspec</a>.</p>
<p>这里，直接用上面定义的ability为例，来写一写对应的Rspec。</p>
<p>先写好factories：</p>
<pre><code class="Ruby">### users.rb
FactoryBot.define do
  factory :user do
    email &#123; Faker::Internet.email &#125;
    name &#123; Faker::Name.name &#125;
    password &quot;password&quot;
    password_confirmation &quot;password&quot;

    trait :admin do
      admin true
    end
  end
end

### projects.rb
FactoryBot.define do
  factory :project do
    name &quot;My project&quot;
  end
end

### members.rb
FactoryBot.define do
  factory :member do
    project
    user

    trait :admin do
      role &quot;admin&quot;
    end

    trait :member do
      role &quot;member&quot;
    end
  end
end
</code></pre>
<p>在<code>spec/models/ability_spec.rb</code>添加如下内容：</p>
<pre><code class="Ruby">require &#39;rails_helper&#39;
require &#39;cancan/matchers&#39;

RSpec.describe Ability, type: :model do
  describe &quot;#apply_user_permissions&quot; do
    context &quot;admin&quot; do
      let!(:admin) &#123; create :user, :admin &#125;
      let!(:project) &#123; create :project &#125;
      subject(:ability) &#123; Ability.new &#123; |a| a.apply_user_permissions(admin) &#125; &#125;
      it &#123;
        is_expected.to be_able_to(:manage, :all)
      &#125;
    end

    context &quot;not admin but a member of a project&quot; do
      let!(:user) &#123; create :user &#125;
      let!(:project) &#123; create :project &#125;
      let!(:member) &#123; create :member, project: project, user: user, role: &quot;member&quot; &#125;
      subject(:ability) &#123; Ability.new &#123; |a| a.apply_user_permissions(user) &#125; &#125;
      it &#123;
        is_expected.to be_able_to(:read, project)
      &#125;
    end

    context &quot;neither admin nor member of a project&quot; do
      let!(:user) &#123; create :user &#125;
      let!(:project) &#123; create :project &#125;
      subject(:ability) &#123; Ability.new &#123; |a| a.apply_user_permissions(user) &#125; &#125;
      it &#123;
        is_expected.not_to be_able_to(:read, project)
      &#125;
    end
  end

  describe &quot;#apply_member_permissions&quot; do

    context &quot;admin&quot; do
      let!(:project) &#123; create :project &#125;
      let!(:member) &#123; create :member, :admin, project: project &#125;
      subject(:ability) &#123; Ability.new &#123; |a| a.apply_member_permissions(member) &#125; &#125;
      it &#123;
        is_expected.to be_able_to([:read, :update], project)
        is_expected.to be_able_to(:manage, Task)
      &#125;
    end

    context &quot;member&quot; do
      let!(:project) &#123; create :project &#125;
      let!(:member) &#123; create :member, :member, project: project &#125;
      subject(:ability) &#123; Ability.new &#123; |a| a.apply_member_permissions(member) &#125; &#125;
      it &#123;
        is_expected.to be_able_to(:read, project)
        is_expected.to be_able_to(:manage, Task)
      &#125;
    end
  end
end
</code></pre>
<p>OK ! 终端跑一下测试，pass！</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://github.com/CanCanCommunity/cancancan">cancancan</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
        <tag>Cancancan</tag>
      </tags>
  </entry>
  <entry>
    <title>axios跨域请求</title>
    <url>/posts/axios-cors-config/</url>
    <content><![CDATA[<p>工作中遇到的一个axios跨域请求问题，记录下最终的解决方法。</p>
<span id="more"></span>

<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>前端用Vue，引入了axios，调用的是rails项目中的接口。vue 2.5.17 , rails 5.2.1</p>
<p>Vue项目中，配置文件含如下内容：</p>
<pre><code class="js">  axios: &#123;
    // See https://github.com/nuxt-community/axios-module#options
    baseURL:
      process.env.NODE_ENV === &#39;production&#39;
        ? &#39;https://xxxxxx/v2&#39;
        : &#39;http://api.xxxxx:3000/v2&#39;,
    credentials: true
  &#125;,
</code></pre>
<p>设置credentials为true，axios请求时，会自动携带cookie。本地运行 <code>yarn run dev</code>，设置端口为4000.</p>
<p>浏览器打开<code>localhost:4000</code>, 没有任何反应，查看chrome 开发者模式下的console，出现如下报错：</p>
<pre><code>Response to preflight request doesn&#39;t pass access control check: The value of the &#39;Access-Control-Allow-Origin&#39; header in the response must not be the wildcard &#39;*&#39; when the request&#39;s credentials mode is &#39;include&#39;. The credentials mode of requests initiated by the XMLHttpRequest is controlled by the withCredentials attribute.
</code></pre>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>需要在rails项目中，安装gem rack-cors</p>
<pre><code class="ruby">gem &#39;rack-cors&#39;, :require =&gt; &#39;rack/cors&#39;
</code></pre>
<p>bundle后，在<code>config/application.rb</code>文件中，添加如下语句：</p>
<pre><code class="ruby">    config.middleware.insert_before 0, Rack::Cors do
      allow do
        origins &#39;*&#39;
        resource &#39;*&#39;, headers: :any, methods: [:get, :post, :options]
      end
    end
</code></pre>
<p>重启rails项目。</p>
<p>这时，本地再次访问locahost:4000，如果console依然报错：</p>
<pre><code class="html">Access to XMLHttpRequest at &#39;http://api.xxxxx:3000/v2&#39; from origin &#39;http://localhost:4000&#39; has been blocked by CORS policy: Response to preflight request doesn&#39;t pass access control check: No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource.
</code></pre>
<p>请修改rails项目的<code>config/application.rb</code>文件，在resource中添加<code>credentials: true</code>，同时设置origins，添加正则来限定请求访问的来源地址，如果只是单单添加<code>credentials: true</code>，重启rails时，Rack::Cors会弹出报错：</p>
<pre><code class="ruby">Allowing credentials for wildcard origins is insecure. Please specify more restrictive origins or set &#39;credentials&#39; to false in your CORS configuration. (Rack::Cors::Resource::CorsMisconfigurationError)
</code></pre>
<p>最终添加到<code>config/application.rb</code>文件的配置内容如下：</p>
<pre><code class="ruby">    config.middleware.insert_before 0, Rack::Cors do
      allow do
        origins %r&#123;/A***your-regex***\z/&#125;x
        resource &#39;*&#39;, headers: :any, methods: [:get, :post, :options], credentials: true
      end
    end
</code></pre>
<p>重启rails项目。</p>
<p>再次访问，OK。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://ruby-china.org/topics/24358">如何使用 Rails 建立可跨域访问的 API？</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
        <tag>Axios</tag>
      </tags>
  </entry>
  <entry>
    <title>美化input file上传并添加图片预览</title>
    <url>/posts/beauty-input-file-and-preview-image/</url>
    <content><![CDATA[<p>初识 Rails 中的 Stimulus controller。</p>
<span id="more"></span>

<h4 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h4><p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNbRwly1fu3rv5vgcog30v70cyjys.gif"></p>
<p>基本流程：点击按钮，上传图片，预览图片，用户可以清除已上传的图片。demo中没体现出来的还有上传文件的的格式检查，图片上传个数的限制以及图片预览时的裁剪。</p>
<p>这类效果实现，网上有不少前辈已经给出了很好的代码参考。这里仅记录下在Rails项目中，如何借助stimulus，实现以上效果。其中CSS部分，引用了Bootstrap。</p>
<h4 id="HTML部分"><a href="#HTML部分" class="headerlink" title="HTML部分"></a>HTML部分</h4><pre><code class="html">&lt;% template = capture do %&gt;
  &lt;label class=&quot;d-flex align-items-center justify-content-center upload-area rounded bg-secondary border border-light m-0&quot; data-action=&quot;click-&gt;attachment#checkNumber&quot;&gt;
    &lt;i class=&quot;fas fa-camera fa-3x&quot; style=&quot;color: white;&quot;&gt;&lt;/i&gt;
    &lt;input name=&quot;attachment[file]&quot; type=&quot;file&quot; class=&quot;d-none&quot; data-action=&quot;change-&gt;attachment#uploadAttachment&quot;&gt;
  &lt;/label&gt;
&lt;% end %&gt;

&lt;% image_item = capture do %&gt;
  &lt;div class=&quot;prev-item mr-2&quot;&gt;
        &lt;span class=&quot;closebtn rounded-circle border border-secondary text-muted text-center bg-light&quot; data-action=&quot;click-&gt;attachment#removeAttachment&quot;&gt;
        &lt;/span&gt;
    &lt;div class=&quot;cover rounded&quot;&gt;
      &lt;img src=&quot;&quot;&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;% end %&gt;

&lt;p class=&quot;text-info&quot;&gt;附件：&lt;/p&gt;
&lt;%= content_tag :div, class: &quot;bg-light p-2&quot;, data: &#123; controller: &quot;attachment&quot;, max_upload_count: max_attachments_count, template: template, image_item: image_item &#125; do %&gt;
  &lt;div class=&quot;preview&quot;&gt;&lt;/div&gt;
  &lt;label class=&quot;d-flex align-items-center justify-content-center upload-area rounded bg-secondary border border-light m-0&quot; data-action=&quot;click-&gt;attachment#checkNumber&quot;&gt;
    &lt;i class=&quot;fas fa-camera fa-3x&quot; style=&quot;color: white;&quot;&gt;&lt;/i&gt;
    &lt;input name=&quot;attachment[file]&quot; type=&quot;file&quot; class=&quot;d-none&quot; data-action=&quot;change-&gt;attachment#uploadAttachment&quot;&gt;
  &lt;/label&gt;
&lt;% end %&gt;
</code></pre>
<p>这里，用capture定义了两段html，其中，template对应的是图片上传前的那个label，每次上传完图片后，将这个空的label追加到后面，而image_item则用来预览每张图片，max_attachments_count为最多可上传的附件数量，把这三个一并传给attachment这个controller。</p>
<p>这里，有几个事件：</p>
<p>点击label会先触发click事件，对应的是controller里面的function checkNumber, 而上传后，触发了input的change事件，对应的是function uploadAttachment，最后预览图片时，添加了删除事件，对应的是removeAttachment ，下面针对这些事件进行处理。</p>
<h4 id="JS部分【Stimulus-controller】"><a href="#JS部分【Stimulus-controller】" class="headerlink" title="JS部分【Stimulus controller】"></a>JS部分【Stimulus controller】</h4><p>在<code>attachment_controller.jsx</code>中，添加如下代码：</p>
<pre><code class="javascript">import &#123; Controller &#125; from &#39;stimulus&#39;
import $ from &#39;jquery&#39;
import &#39;./attachment.scss&#39; //引入CSS部分，后面会附上该部分代码

export default class extends Controller &#123;
  // 判断附件上传数量是否超出限制  
  checkNumber(event) &#123;
    const uploaded = $(this.element).find(&#39;label&#39;).length //目前label的数量，包括未上传文件的那个
    const attachmentCount = $(this.element).data(&#39;maxUploadCount&#39;) //获取传给controller的值
    if (uploaded - 1 &gt;= attachmentCount) &#123;
      event.preventDefault()
      alert(`最多可以上传 $&#123;attachmentCount&#125; 张图片！`)
      return false
    &#125;
    return null
  &#125;

  //上传文件时，触发事件  
  uploadAttachment(event) &#123;
    const html = $(this.element).data(&#39;template&#39;)
    const item = $(html)
    const $preview = $(this.element).find(&#39;.preview&#39;) // 存放预览图片的container
    const $imageItem = $($(this.element).data(&#39;imageItem&#39;))
    const $imgTag = $imageItem.find(&#39;img&#39;)
    const file = $(event.currentTarget).get(0) // 获取到input

    // 检查上传文件是否是图片，如果是，则添加图片的预览，不是则弹出警告
    if (file.files[0] !== undefined) &#123;
      const dataURL = this.createObjectURL(file.files[0]) //调用createObjectURL生成图片的URL
      const fileName = file.files[0].name
      const extension = fileName.split(&#39;.&#39;).pop().trim().toUpperCase()
      if ([&#39;JPG&#39;, &#39;JPEG&#39;, &#39;PNG&#39;].includes(extension)) &#123;
        $imgTag.attr(&#39;src&#39;, dataURL)
      &#125; else &#123;
        alert(&#39;请上传图片(格式为JPG、JPEG、PNG)&#39;)
        return false
      &#125;

      $imageItem.appendTo($preview) // 将图片预览部分，追加到preview中
      $(event.currentTarget).parent().addClass(&#39;hidden&#39;) //已经上传过文件的input，对应的label隐藏
      item.appendTo($(this.element)) // 显示空白的文件上传按钮
    &#125;
    return null
  &#125;

  // 移除attachment  
  removeAttachment(event) &#123;
    event.preventDefault()
    const index =  $(event.currentTarget).parent().index()
    $(event.currentTarget).parent().remove()
    $(`label:eq($&#123;index&#125;)`).remove()
  &#125;

  // 获取图片的URL  
  createObjectURL(blob) &#123;
    if (window.URL) &#123;
      return window.URL.createObjectURL(blob)
    &#125; else if (window.webkitURL) &#123;
      return window.webkitURL.createObjectURL(blob)
    &#125;
    return null
  &#125;
&#125;
</code></pre>
<h4 id="CSS部分"><a href="#CSS部分" class="headerlink" title="CSS部分"></a>CSS部分</h4><p>CSS部分，踩的坑主要是不知道如何裁剪图片，最终使用了CSS的clip: rect， 看了下W3school，里面对clip: rect 的描述感觉不够清晰，参考阅读<a href="https://www.zhangxinxu.com/wordpress/2011/04/css-clip-rect/">CSS clip:rect矩形剪裁功能及一些应用介绍</a>。此外，对于关闭按钮那块，用一个圆圈，内含一个X，但是一直无法让X对齐，后面微调对齐了，但是CSS部分的代码有些奇怪，height与inline-height并不相同，故closebtn部分请小心参考。</p>
<p>附上CSS部分的代码：【attachment.scss】</p>
<pre><code class="scss">.upload-area &#123;
  width: 100px;
  height: 100px;
&#125;

.preview &#123;
  display:block;
  float:left;
&#125;

.prev-item &#123;
  position:relative;
  display: inline-block;
  vertical-align: bottom;
&#125;

.cover &#123;
  width: 100px;
  height: 100px;
  overflow: hidden;

  img &#123;
    max-height:100px;
    width: auto;
    clip:rect(200px 300px 300px 200px);
  &#125;
&#125;

.closebtn &#123;
  position: absolute;
  right: -1px;
  height: 15px;
  width: 15px;
  margin-right: -5px;
  margin-top: -5px;
  line-height: 11px;
  font-size: 9px;
  padding: 2px;

  &amp;::before &#123;
    content: &quot;\2716&quot;;
  &#125;
&#125;
</code></pre>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://blog.csdn.net/CodingNoob/article/details/76549231">H5移动端实现仿QQ空间照片上传效果代码</a></p>
<p><a href="https://www.zhangxinxu.com/wordpress/2011/04/css-clip-rect/">CSS clip:rect矩形剪裁功能及一些应用介绍</a></p>
<p><a href="https://www.cnblogs.com/stephenykk/p/3558887.html">CreateObjectURL方法实现本地图片预览</a></p>
<p> <a href="http://blog.iderzheng.com/close-button-with-css-only/">CSS3实现关闭按钮</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>Ruby盲点梳理</title>
    <url>/posts/benchmark-new-allocate-and-delegator-in-ruby/</url>
    <content><![CDATA[<p>前两天被小伙伴问到ruby的一些常用概念，觉得自己对某些方法和概念还是理解的不够清晰，想起之前写gem的时候，一度掉进了delegator的坑里，对某些类的使用，依然停留在相识未深知的阶段，于是刷了点文档，梳理下一些概念。</p>
<p>说三个：benchmark，new &amp; allocate， delegator。</p>
<span id="more"></span>

<h4 id="Benchmark"><a href="#Benchmark" class="headerlink" title="Benchmark"></a>Benchmark</h4><p>Benchmark是一个module，提供了诸多方法，用于获取ruby代码的执行时间。</p>
<p>比较常用的三个方法：</p>
<ul>
<li>benchmark(caption = “”, label_width = nil, format = nil, *labels) { |report| … }</li>
<li>bm(label_width = 0, *labels) { |report| … }</li>
<li>bmbm(width = 0) { |job| … }</li>
</ul>
<p>bm可以看作是benchmark方法的一个简洁版，省去了参数caption，format的设置，这里，caption用于设置输出的标题内容，而format则用于设置时间的输出样式。通常可采用默认设置CAPTION，FORMAT，不过使用CAPTION，FORMAT常量时，记得加上<code>include Benchmark</code>。</p>
<p>bmbm其实是执行了两次bm（看它名字就知道了，double bm : P ），这么做是为了获取更为精准的时间统计结果。因为有的时候，由于垃圾回收和内存分配的不同，可能会导致早期代码的执行时间与后期代码的执行时间存在差异，当然执行两次，并不代表结果一定不受到GC或者其他因素的影响，只是说会得到更为精准的结果。【希望我的理解没有偏……】</p>
<p>看例子感受下三者：</p>
<pre><code class="Ruby">require &#39;benchmark&#39;
include Benchmark

n = 500000

Benchmark.benchmark(CAPTION, 6, FORMAT) do |x|
  tf = x.report(&quot;for: &quot;) &#123;for i in 1..n; a = &quot;1&quot; ; end &#125;
  tt = x.report(&quot;times: &quot;) &#123; n.times do; a = &quot;1&quot;; end &#125;
  tu = x.report(&quot;upto: &quot;) &#123;1.upto(n) do ; a = &quot;1&quot; ; end &#125;
end

Benchmark.bm(6) do |x|
  tf = x.report(&quot;for: &quot;) &#123;for i in 1..n; a = &quot;1&quot; ; end &#125;
  tt = x.report(&quot;times: &quot;) &#123; n.times do; a = &quot;1&quot;; end &#125;
  tu = x.report(&quot;upto: &quot;) &#123;1.upto(n) do ; a = &quot;1&quot; ; end &#125;
end


Benchmark.bmbm(6) do |x|
  tf = x.report(&quot;for: &quot;) &#123;for i in 1..n; a = &quot;1&quot; ; end &#125;
  tt = x.report(&quot;times: &quot;) &#123; n.times do; a = &quot;1&quot;; end &#125;
  tu = x.report(&quot;upto: &quot;) &#123;1.upto(n) do ; a = &quot;1&quot; ; end &#125;
end
</code></pre>
<p>输出的结果：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcly1fr438e3d72j30fv09ewg0.jpg"></p>
<p>这么看，感觉times也没有特别比for快多少……</p>
<h4 id="new-amp-allocate"><a href="#new-amp-allocate" class="headerlink" title="new &amp; allocate"></a>new &amp; allocate</h4><p>两者都用于实例化类，不同之处在于是否调用了initialize。</p>
<p>allocate是为类的对象分配空间，创建实例，但是不调用initialize方法，new也用于实例化，但是它调用了initialize，new可以看成是先调用allocate，再调用了initialize。</p>
<p>new对应的sourcecode如下：</p>
<pre><code class="C">static VALUE
rb_class_s_new(int argc, const VALUE *argv, VALUE klass)
&#123;
    VALUE obj;

    obj = rb_class_alloc(klass);
    rb_obj_call_init(obj, argc, argv);

    return obj;
&#125;
</code></pre>
<p>new的实现中，先是调用了<code>rb_class_alloc</code>【查看allocate的源码，会发现这正是allocate方法的实现】，然后调用了<code>rb_obj_call_init</code>。</p>
<p>看个例子感受下两者的差异：</p>
<pre><code class="ruby">### 根据官方文档稍稍改编了下
klass = Class.new do
  def initialize(*args)
    @initialized = true
  end

  def initialized?
    @initialized || false
  end
end

klass.allocate #=&gt; #&lt;#&lt;Class:0x00007fdb1f004a40&gt;:0x00007fdb1f004978&gt;
klass.allocate.initialized? #=&gt; false
klass.new #=&gt; #&lt;#&lt;Class:0x00007fdb1f004a40&gt;:0x00007fdb1f004770 @initialized=true&gt;
klass.new.initialized? #=&gt; true
</code></pre>
<h4 id="Delegator"><a href="#Delegator" class="headerlink" title="Delegator"></a>Delegator</h4><p>Delegator是一个类，提供了三种不同的方法用于代理对象的方法调用，最简单的方法是使用SimpleDelegator。其次是使用DelegateClass，通过类继承来代理，第三种是继承Delegator这个abstract class，然后自己定制代理机制。</p>
<p>先来看看SimpleDelegator。</p>
<p>它有两个较为常用的实例方法：<code>__setobj__</code> 用来更改代理对象，<code>__getobj__</code>  用来获取代理对象。</p>
<p>看个例子：</p>
<pre><code class="Ruby">class Stats
  def initialize
    @source = SimpleDelegator.new([])
  end

  def stats(records)
    p &quot;before setobj: #&#123;@source.size&#125;&quot;
    @source.__setobj__(records)
    p &quot;after setobj: #&#123;@source.size&#125;&quot;
  end
end

s = Stats.new

s.stats(%w&#123;Hello ruby world&#125;)
#=&gt; &quot;before setobj: 0&quot;
#=&gt; &quot;after setobj: 3&quot;
</code></pre>
<p>稍稍解释一下。这里调用stats方法时，@source最开始是SimpleDelegator的一个实例，它的代理对象是[]，所以输出before setobj 中，执行@source.size 就是在执行[].size， 随后使用<code>__setobj__</code>将代理对象更改成了records，这里传递过去的参数是数组%w{Hello ruby world}，随后执行@source.size，就是在执行[“Hello”, “ruby”,  “world”].size，所以输出结果为0，3.</p>
<p>第二种，通过继承来代理，跟祖先链很类似，略过，看第三种，定制代理。</p>
<p>custom delegator这种操作，涉及到module Forwardable和SingleForwardable，Forwardable是针对object level，而SingleForwardable则是object，class，module通吃。</p>
<p>两者主要的原理其实是一样的，通过在类，对象或者模块中使用<strong>extend</strong>来为其拓展单件方法，调用诸如def_delegate, def_delegates, def_instance_delegator等method来实现定制化代理。</p>
<p>先看个Forwardable的例子：</p>
<pre><code class="Ruby">require &#39;forwardable&#39;

class RecordCollection
  attr_accessor :records
  extend Forwardable
  def_delegator :@records, :[], :record_number
  def_delegators :@records, :size, :&lt;&lt;, :map
end

obj = RecordCollection.new
obj.records = [1,2,4]
obj.record_number(0) #=&gt; 1， 相当于执行[1,2,4](0)
obj.size #=&gt; 3 ， 相当于执行[1,2,4].size
obj &lt;&lt; 5 #=&gt;[1, 2, 4, 5]， 相当于执行[1,2,4]&lt;&lt; 5
obj.map &#123; |x| x + 1&#125; #=&gt;[2, 3, 5, 6]， 相当于执行[1,2,4,5].map&#123;|x| x + 1&#125;
</code></pre>
<p>这里 <code> def_delegators :@records, :size, :&lt;&lt;, :map</code>相当于:</p>
<pre><code class="Ruby">def_delegator :@records, :size
def_delegator :@records, :&lt;&lt;
def_delegator :@records, :map
</code></pre>
<p>再来看一个SingleForwardable的例子：</p>
<pre><code class="Ruby">class A
  def self.hi
    puts &quot;hello&quot;
  end
end

module B
  extend SingleForwardable
  def_delegator :A, :hi
end

B.hi #=&gt; hello
</code></pre>
<p>这里的<code>B.hi</code> ，使用代理，执行的其实是<code>A.hi</code> ，故输出为hello.</p>
<p>看到这里你也许要问，如果当前对象本身有一个方法method A，代理方法里面也有一个同名的method A，会调用哪一个？</p>
<p><strong>当然是调用自己的，自己没有才会调用代理的</strong>。</p>
<p>以上面的例子为例：</p>
<pre><code class="Ruby">class A
  def self.hi
    puts &quot;hello&quot;
  end
end

module B
  extend SingleForwardable
  def_delegator :A, :hi

  def self.hi
    puts &quot;world&quot;
  end

end

B.hi #=&gt; world
</code></pre>
<h4 id="题外"><a href="#题外" class="headerlink" title="题外"></a>题外</h4><p>看Date部分的时候，发现<code>ruby cal.rb -c it 10 1582</code> 时[此处it 指的是Italy] 的输出结果很是诡异，自己在本机执行，同样得到了奇葩的结果:</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcly1fr43phbujxj308e034t8q.jpg"></p>
<p>莫名其妙少了10天，什么情况？！刚开始还以为是bug，Google下才知道是不同历法的切换导致, wiki上对于<a href="https://en.wikipedia.org/wiki/1582">1582</a>年，是这么说的：</p>
<blockquote>
<p>However, this year saw the <strong>beginning of the Gregorian Calendar switch</strong>, when the Papal bull known as Inter gravissimas introduced the Gregorian calendar, adopted by Spain, Portugal, the Polish–Lithuanian Commonwealth and most of present-day Italy from the start. In these countries, <strong>the year continued as normal until Thursday, October 4. However, the next day became Friday, October 15</strong> (like a common year starting on Friday), in those countries (France followed two months later, letting Sunday, December 9 be followed by Monday, December 20).</p>
</blockquote>
<p>这种操作真6，老祖宗们会玩。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="http://devdocs.io/ruby~2.5/">ruby 2.5</a></p>
<p><a href="https://en.wikipedia.org/wiki/1582">1582</a></p>
<p>谢谢D推荐的<a href="http://devdocs.io/">devdocs</a>， 用来阅读文档真的是超赞！推荐使用<a href="http://devdocs.io/">devdocs</a>：P</p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次薄荷面试</title>
    <url>/posts/boohee-interview/</url>
    <content><![CDATA[<p>一次印象深刻的面试。</p>
<span id="more"></span>

<p>今天下午去了薄荷面试，结束后赶着去听一波带着浓浓文艺气息的演唱会，去年手一抖，买了寂静如海的门票，差点忘记这茬，短信提醒才想起，哈哈，这算是用音乐抚慰下受伤的心吗？</p>
<p>可能因为面试的整个过程自己很不满意，所以听歌的时候脑子里还时不时复现一些面试的画面，于是，回来后决定写一写这次面试。</p>
<p>周一收到薄荷面试通知的时候，真的挺激动的，之前follow了该公司的大牛Vincent，也看过他的博客，想着如果可以去更多rubyist的公司，而且还有大牛，那会是一件多棒的事儿！随后不久，薄荷的一位工程师来电话了，问了我一些基础的问题，那时候脑子有点懵，我还在想着怎么在后台弄一个类似CMS的文章管理系统，结果几个小问题都回答的不是很满意，还很实诚地交代了自己在数据库并发处理这块比较薄弱，天，我是不是上帝派来的逗逼？！不过工程师真的很nice，对于我问的一些问题耐心的解答，特别是之前曾困惑rubyist为什么会青睐go，结束完电话面试，原本以为这下没戏了，好好的机会就这么被我给毁了，没成想竟然有面试的机会，真的是很惊喜！</p>
<p>因为周一的时候，同时接到了另一家的面试通知，定在了周二上午，所以我把薄荷的定在了周三下午，想着留些时间再复习下可能会被问到的知识点。今早跑步的时候，跑到一半，脑子里想着还有什么是我很困惑的，最后干脆不跑了，回去把rails的一些知识点又过了下。下午去面试的时候，见到了电话面试我的那位工程师，是个有点呆萌的程序员小哥哥，为了不侵犯姓名权，用程序员小哥哥来称呼吧。前面的两个问题，其实都涉及到ruby元编程，虽然我回答的不是很好，但是我真心喜欢这两道题，让我注意到之前没有思考的点，发觉原来我在元编程上还有很多需要提升的地方，至少在实战上很欠缺。然后问到了sort的实现，一些基本的排序算法，比如快排，算法的时间复杂度，设计模式以及内存，缓存的一些知识，这些基本都没回答好。去年我刷过一些算法方面的视频教程，但是很显然，工作中没用到，已经不记得了，而设计模式这一块，我之前看过秦小波的那本《设计模式之禅》，只是看到了第三章就搁浅了，有些概念不是很理解，看着有点懵逼，无法继续，小哥哥提到了工厂模式，我知道这个名词，但我却想不起来这个概念的定义。后面小哥哥问到还有什么其他想问他的，我提到之前对于polymorphic associations的困惑，小哥哥给我解惑了，是的，没有什么东西是过时的，不要一味求新，为了求新而求新其实挺傻的，新的不也是旧的组装或改进而来的吗？最后小哥哥又反复问了还有什么其他想问的，其实准备面试的时候，我去玩过他们的app，看过他们的版本记录，还发现一些小bug，比如给自己点赞或者评论的时候会弹出not found，可是由于前面那些问题我都没有回答好，挫败感很强，当然也是由于我事先没想到会有算法的考察，这是我疏忽了，情绪一低落，就没啥心情继续了，更没有信心继续问小哥哥问题了。因为没有问题再问，这场面试也就到此结束了。</p>
<p>整场面试下来，有两点感触最深，一是自己在计算机专业基础知识上很薄弱，虽然自己是半路出家的野路子，但既然你选择了这行，该补的坑，还是要好好静下心来补，要按照科班出身的程序员的标准来要求自己；二是这位小哥哥，我发现他会在我没有回答出来的情况下，告诉我这些问题的解答，每一题都会，这种为他人解惑的品质真的很赞！</p>
<p>总的来说，这是一次收获满满的面试！后面继续努力填坑吧！</p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>Life</tag>
      </tags>
  </entry>
  <entry>
    <title>踩坑之compact！</title>
    <url>/posts/bug-in-compact/</url>
    <content><![CDATA[<p>测试遇到的一个坑，在那里找了大半天，最后发现错误的原因是compact！导致，记录下。</p>
<span id="more"></span>

<p>出错原因在于我之前对于compact 与compact！的理解，错误的理解是：compact用于去除数组对象中的nil，而不改变数组对象本身，而compact！与compact唯一的不同在于它会改变调用对象的值。</p>
<p>比如：</p>
<pre><code class="ruby">a = [ &quot;a&quot;, nil, &quot;b&quot;, nil, &quot;c&quot; ]

a.compact
#=&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]
a
#=&gt; [&quot;a&quot;, nil, &quot;b&quot;, nil, &quot;c&quot;]

a.compact!
#=&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]
a
#=&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]
</code></pre>
<p>But!!</p>
<p>如果这个数组本身没有nil，两者的结果完全不同。调用compact或者compact！，数组都不变，但是compact！返回的却是nil。</p>
<p>看例子：</p>
<pre><code class="ruby">b = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]

b.compact
#=&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]
b
#=&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]

b.compact!
#=&gt; nil
b
#=&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]
</code></pre>
<p>也就是说<strong>在数组中没有nil的情况下，使用compact！返回的值是nil，同时数组本身不会改变</strong>。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://ruby-doc.org/core-2.2.0/Array.html#method-i-compact-21">compact!</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Hexo在GitHub上为自己搭建一个静态Blog站点</title>
    <url>/posts/build-blog-with-hexo/</url>
    <content><![CDATA[<p>不废话，直接上货。</p>
<span id="more"></span>

<h3 id="初步搭建"><a href="#初步搭建" class="headerlink" title="初步搭建"></a>初步搭建</h3><h4 id="Step1-在GitHub上创建一个Repo"><a href="#Step1-在GitHub上创建一个Repo" class="headerlink" title="Step1. 在GitHub上创建一个Repo"></a>Step1. 在GitHub上创建一个Repo</h4><p>登陆GitHub，当然没有账号的话，注册个。</p>
<p>创建一个Repo，名称格式为<code>yourname.github.io</code>, 这里要注意，yourname 不是你随随便便起一个的，要和你GitHub的账户名保持一致，不然后面你会发现无法部署。</p>
<h4 id="Step2-本地安装git-npm"><a href="#Step2-本地安装git-npm" class="headerlink" title="Step2. 本地安装git , npm"></a>Step2. 本地安装git , npm</h4><p>这里以homebrew为例来说明安装git, npm的方法，你也可以通过其他方式来安装。</p>
<p>安装Xcode和Homebrew：</p>
<ul>
<li><p>Xcode：在App Store中下载，建议关闭VPN，以免下载速度过慢</p>
</li>
<li><p>Homebrew：在终端输入</p>
<p><code>/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</code></p>
<p>回车, 安装过程中，会被问到系统密码，此时只管输入密码，回车即可。</p>
<p>了解更多，参见：<a href="https://brew.sh/index_zh-tw.html">Homebrew 的官方网址</a></p>
</li>
</ul>
<p>安装git , npm 并确认安装成功：</p>
<ul>
<li>安装 npm<ul>
<li>终端输入：<code>brew install node</code>，休息下，等它安装完毕；</li>
<li>输入：<code>node -v</code> , <code>npm -v</code>会显示版本号，表示已经安装成功；</li>
</ul>
</li>
<li>安装 git<ul>
<li>终端输入：<code>brew install git</code>， 同样的，等安装完成；</li>
<li>输入：<code>git --version</code>，显示git的版本，安装完成。</li>
</ul>
</li>
</ul>
<h4 id="Step3-安装hexo"><a href="#Step3-安装hexo" class="headerlink" title="Step3. 安装hexo"></a>Step3. 安装hexo</h4><p>终端输入：</p>
<pre><code>npm install hexo -g
npm install hexo-cli -g
</code></pre>
<h4 id="Step4-创建本地目录"><a href="#Step4-创建本地目录" class="headerlink" title="Step4. 创建本地目录"></a>Step4. 创建本地目录</h4><p>去GitHub复制你Repo的git地址，然后在终端输入：</p>
<pre><code>git clone https://github.com/yourname/yourname.github.io.git
</code></pre>
<h4 id="Step5-初始化本地站点"><a href="#Step5-初始化本地站点" class="headerlink" title="Step5. 初始化本地站点"></a>Step5. 初始化本地站点</h4><p>终端输入：</p>
<pre><code>hexo init yourname.github.io
cd yourname.github.io
npm install hexo-deployer-git --save
git init
hexo generate
hexo server
</code></pre>
<p>此时，可以打开浏览器，输入：<code>localhost:4000</code>, 可以在本地看到网站的样子。</p>
<h4 id="Step6-部署到GitHub"><a href="#Step6-部署到GitHub" class="headerlink" title="Step6. 部署到GitHub"></a>Step6. 部署到GitHub</h4><p>终端输入：</p>
<pre><code>atom .
</code></pre>
<p>Atom打开后，按快捷键command+P，搜索<code>_config.yml</code>文件，在文件的下面，会看到<code>deploy</code>部分，修改如下：</p>
<pre><code>deploy:
    type: git
    repo: https://github.com/yourname/yourname.github.io
</code></pre>
<p>command+S 保存。</p>
<p>最后，在终端输入：</p>
<pre><code>hexo deploy
open yourname.github.io
</code></pre>
<p>稍等一下，就可以看到你的个人网站了！给自己点个赞吧：P</p>
<p>好，大功告成！下面我们来装饰一下，让它变美美哒。</p>
<h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h3><h4 id="Step1-选择你喜欢的主题"><a href="#Step1-选择你喜欢的主题" class="headerlink" title="Step1. 选择你喜欢的主题"></a>Step1. 选择你喜欢的主题</h4><p>hexo默认的主题是landscape，其实界面也还可以，不过就好比Mac自带了safari，但我们总想用用chrome啥的，所以，点击<a href="https://hexo.io/themes/">Themes</a>， you may find something cool. 找到你钟意的那一款吧。</p>
<h4 id="Step2-安装主题"><a href="#Step2-安装主题" class="headerlink" title="Step2. 安装主题"></a>Step2. 安装主题</h4><p>选中主题后，点击目标主题，会跳到相应的GitHub repo 中，可以按照GitHub 上的指示进行安装，或者在终端输入：</p>
<pre><code>git  submodule add &#123;theme-github-url&#125; themes/&#123;theme-name&#125;
</code></pre>
<p>复制主题下的<code>_config.yml.example</code>，命名为<code>_config.yml</code></p>
<pre><code>cp themes/&#123;theme-name&#125;/_config.yml.example themes/&#123;theme-name&#125;/_config.yml
</code></pre>
<p>修改文档的<code>_config.yml</code>（注意，不是theme下的<code>_config.yml</code>文件），启用新主题</p>
<pre><code>theme: &#123;theme-name&#125;
</code></pre>
<h3 id="发表文章"><a href="#发表文章" class="headerlink" title="发表文章"></a>发表文章</h3><ul>
<li><p>新建文章</p>
<pre><code>hexo new &#123;postname&#125;
</code></pre>
</li>
<li><p>编辑文章,使用markdown格式</p>
</li>
<li><p>生成文件并部署</p>
<pre><code>hexo generate -d
</code></pre>
</li>
</ul>
<h3 id="添加评论功能"><a href="#添加评论功能" class="headerlink" title="添加评论功能"></a>添加评论功能</h3><p>这里我们用Disqus。</p>
<h4 id="注册Disqus"><a href="#注册Disqus" class="headerlink" title="注册Disqus"></a>注册<a href="https://disqus.com/">Disqus</a></h4><ul>
<li>登录后，点击首页的 GET STARTED 按钮，然后选择 I want to install Disqus on my site</li>
<li>在弹出的Create a new site窗口中，填写你的Website Name， 也就是你的short name，后面会用到，点击create Site</li>
<li>创建完成后，在新页面点击Install Disqus， Platform选择Universal Code，拉到最下面点击按钮即可</li>
<li>点击Configure Disqus，将Website Name改为你想要的名称，URL设置为你的Github page地址<code>https://yourname.github.io</code></li>
</ul>
<h4 id="配置Hexo"><a href="#配置Hexo" class="headerlink" title="配置Hexo"></a>配置Hexo</h4><ul>
<li>修改theme下的<code>_config.yml</code>，找到 disqus部分，修改如下：</li>
</ul>
<pre><code>disqus:
  enable: true
  shortname: &#123;your_website_short_name&#125;
  count: true
</code></pre>
<p>short name就是之前你在Disqus中生成的short name</p>
<ul>
<li>终端输入：<code>hexo g -d</code></li>
<li>刷新你的网站，Disqus可见</li>
</ul>
<p>Happy posting!</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="http://lixiaolai.com/2016/06/22/makecs-build-a-blog-with-hexo-on-github/#more">使用 Hexo 为自己在 Github 上建一个静态 Blog 站点</a></li>
<li><a href="https://zirho.github.io/2016/06/04/hexo/">How to setup a blog on github with Hexo</a></li>
<li><a href="https://www.ctolib.com/topics-119380.html">GithubPages + Hexo + Disqus博客教程</a></li>
</ul>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>用 Express 搭建一个 nsfw 服务</title>
    <url>/posts/build-nsfw-express-server/</url>
    <content><![CDATA[<p>工作中遇到的一个问题, 这里简单记录下解决过程.</p>
<span id="more"></span>

<p>起因是后台频现用户上传了违规图片, 收到了七牛的警告邮件. 老大要求搭建一个nsfw(Not-Safe-For-Work)服务, 在图片上传到七牛云存储前, 先调用这个服务, 确定图片没有违规, 再上传.</p>
<h4 id="搭建服务"><a href="#搭建服务" class="headerlink" title="搭建服务"></a>搭建服务</h4><p>找到了全网star最多的一个开源项目 <a href="https://github.com/infinitered/nsfwjs">nsfwjs</a>,  文档中给到了一个完整的 Express 的例子. 照着来就好.</p>
<p>参考 <a href="https://expressjs.com/">Express Docs</a> 官方文档, 使用express-generator 快速搭个架子, 将 <a href="https://github.com/infinitered/nsfwjs">nsfwjs</a> 文档中给到的<a href="https://github.com/infinitered/nsfwjs/blob/master/example/node_demo/server.js">server.js</a> 部分的示例代码放进去. 本地起服务 <code>node server.js</code>, 使用 curl 测试, 结果符合预期:</p>
<pre><code class="shell">curl --request POST localhost:8080/nsfw --header &#39;Content-Type: multipart/form-data&#39; --data-binary &#39;image=@/full/path/to/picture.jpg&#39;
</code></pre>
<h4 id="支持多格式"><a href="#支持多格式" class="headerlink" title="支持多格式"></a>支持多格式</h4><p><a href="https://github.com/infinitered/nsfwjs">nsfwjs</a> 给到的例子中, 只支持JPEG格式的文件,  改用 <a href="https://github.com/dy/image-decode">image-decode</a> 换掉  jpeg-js. 可支持jpeg, jpg, png, gif, bmp, tiff, webp 格式的图片, 基本满足需求.</p>
<pre><code class="shell">yarn remove jpeg-js
yarn add image-decode
</code></pre>
<p>修改 convert 部分的代码如下:</p>
<pre><code class="javascript">const decode = require(&#39;image-decode&#39;)

......

const convert = async (img) =&gt; &#123;
  const &#123; data, width, height &#125; = decode(img)

  const numChannels = 3
  const numPixels = width * height
  const values = new Int32Array(numPixels * numChannels)

  for (let i = 0; i &lt; numPixels; i++)
    for (let c = 0; c &lt; numChannels; ++c)
      values[i * numChannels + c] = data[i * 4 + c]

  return tf.tensor3d(values, [height, width, numChannels], &#39;int32&#39;)
&#125;
</code></pre>
<h4 id="CROS-配置"><a href="#CROS-配置" class="headerlink" title="CROS 配置"></a>CROS 配置</h4><p>在本地起了 Vue 的一个项目, 在这个 Vue 项目中, 使用 axios 给 nsfw 项目发请求的时候, 会出现 CROS 的报错.</p>
<p>当时直接 Google, StackOverflow 上一堆提到全局设置 header 的, 试了下, 结果无效, 踩了点坑…. 其实直接使用 <a href="https://github.com/expressjs/cors">cors</a> 就能简单粗暴地解决:</p>
<pre><code>yarn add cors
</code></pre>
<p>修改 server.js:</p>
<pre><code class="javascript">var cors = require(&#39;cors&#39;);
......
var app = express();

......

// cors settings
var corsOptionsDelegate = function (req, callback) &#123;
  const corsOptions = &#123; origin: true, credentials: true &#125;
  callback(null, corsOptions)
&#125;
app.use(cors(corsOptionsDelegate));
......
</code></pre>
<p> 这里设置了<code>&#123; origin: true, credentials: true &#125;</code>, <a href="https://github.com/expressjs/cors">cors</a> 的文档中, 默认配置中 origin 为 *, credentials 未设置.</p>
<p>直接使用默认配置会报错:</p>
<pre><code>Response to preflight request doesn&#39;t pass access control check: The value of the &#39;Access-Control-Allow-Origin&#39; header in the response must not be the wildcard &#39;*&#39; when the request&#39;s credentials mode is &#39;include&#39;
</code></pre>
<p>干脆直接都设置成true.</p>
<p>再次使用 axios 发送请求, OK.</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://github.com/infinitered/nsfwjs">nsfwjs</a></p>
<p><a href="https://expressjs.com/">Express Docs</a></p>
<p><a href="https://github.com/dy/image-decode">image-decode</a></p>
<p><a href="https://github.com/expressjs/cors">cors</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
      </tags>
  </entry>
  <entry>
    <title>headless_chrome下，使用capybara截取整个网页</title>
    <url>/posts/capture-full-page-with-capybara/</url>
    <content><![CDATA[<p>做cucumber测试时，使用capybara来截取整个网页，掉进了一个坑，记录下，也附上最终的解决方法。</p>
<span id="more"></span>

<h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><p>默认情况下，capybara截取的图片大小尺寸是由自己设置的window.size来决定的，如果你想截取全屏怎么办？</p>
<p>这样的需求肯定不是你第一个提出来，所以Google下， how to get full page screenshot with capybara ，会得到一些相关的链接，比如这条：</p>
<p><a href="https://stackoverflow.com/questions/16695075/is-it-possible-to-take-a-screenshot-of-the-whole-page-with-selenium-capybara">Is it possible to take a screenshot of the whole page with Selenium/Capybara?</a></p>
<p>看解答，很简单，窃喜，这么快就解决了：</p>
<pre><code>page.save_screenshot(&#39;screen.png&#39;, full: true)
</code></pre>
<p>连提问者本人都对这个解答很满意，亲测有效，立马试试。</p>
<p>然后你会发现，根本没有任何效果，截取的仍然不是整个网页，只是一部分页面，这时候，可以去看源码<a href="http://www.rubydoc.info/github/jnicklas/capybara/Capybara%2FSession:save_screenshot">Capybara::Session#save_screenshot</a>, 发现确实有option的选项：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fn9bsxoifmj30n00drgo3.jpg"></p>
<p>这样看，应该没错啊，然后你会怀疑是不是自己代码敲错了，符号敲的不对，还是哪里没有设置好……</p>
<p>这个地方真的是个坑。</p>
<p>为什么坑？因为你没注意看这个解答中提到的driver是Selenium，而它通常的搭档browser是Firefox, 不是chrome，所以只能说是你的粗心给自个挖了个坑……</p>
<p>这里，你会想问，为什么是headerless_chrome时就不行了呢？</p>
<p>还是stack overflow：【强大的stack！】</p>
<p>看这个<a href="https://stackoverflow.com/questions/43254247/cucumber-capybara-save-screenshotpath-full-true-is-not-capturing-the-full-b">save_screenshot(path, full: true) is not capturing the full browser?</a></p>
<p>这里，Thomas Walpole的解答非常清楚，忍不住想点赞。【可惜我的reputations还不到15……】</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fn9c9khgxbj30im09c41f.jpg"></p>
<p>查看selenium的<a href="https://github.com/SeleniumHQ/selenium/blob/master/rb/lib/selenium/webdriver/common/driver_extensions/takes_screenshot.rb#L34">takes_screenshot</a>， save_screenshot的定义中，参数只有一个path：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fn9fzei9h1j30mo058dge.jpg"></p>
<p>所以，剩下的就简单了，去resize window即可。</p>
<p>好，不废话了，直接上货：</p>
<p>在<code>features/support</code>下新建文件<code>screenshot.rb</code>, 放入以下内容：</p>
<pre><code class="Ruby">def full_page_screenshot(file_name = nil)
  width  = Capybara.page.execute_script(&quot;return Math.max(document.body.scrollWidth, document.body.offsetWidth);&quot;)
  height = Capybara.page.execute_script(&quot;return Math.max(document.body.scrollHeight, document.body.offsetHeight);&quot;)
  window = Capybara.current_session.driver.browser.manage.window
  window.resize_to(width, height)
  file = Capybara.page.save_screenshot(file_name)
  return file
end
</code></pre>
<p>上图看清楚点：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fnack5oeqyj30o303l74z.jpg"></p>
<p>这里，width，height是调用脚本来运行得到的，也就是借助JS获取了当前打开页面的长宽值。</p>
<p>参数方面，file_name我用了nil作为默认值，这样更灵活，既可以用capybara默认生成的文件名，也可以自定义。</p>
<p>调用的时候，直接调用full_page_screenshot就好了。</p>
<p>上个效果图：【截取了codepen主页】</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fn9gikub5fj31ig2xze7f.jpg"></p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://testingrepository.com/full-page-screenshot-with-selenium/">Full page screenshot with selenium</a></p>
<p><a href="https://stackoverflow.com/questions/43254247/cucumber-capybara-save-screenshotpath-full-true-is-not-capturing-the-full-b">save_screenshot(path, full: true) is not capturing the full browser?</a></p>
<p><a href="http://yizeng.me/2014/02/23/how-to-get-window-size-resize-or-maximize-window-using-selenium-webdriver/">How to get window size, resize or maximize window using Selenium WebDriver</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Cucumber</tag>
        <tag>Selenium</tag>
      </tags>
  </entry>
  <entry>
    <title>Ruby中的一些惯用技巧</title>
    <url>/posts/common-idioms-in-ruby/</url>
    <content><![CDATA[<p>说三个自己也用过的技巧，没用过的也写不出来。</p>
<span id="more"></span>

<h4 id="空指针保护"><a href="#空指针保护" class="headerlink" title="空指针保护"></a>空指针保护</h4><p>这个非常常见。</p>
<p>看个例子：</p>
<pre><code class="Ruby">a ||= []
## 上面的|| 是逻辑操作符或，相当于 a || (a = [])
</code></pre>
<p>上面这个方法的好处在于，它可以保证a不为nil，这种惯用方法称为<strong>空指针保护</strong>。</p>
<p>空指针保护常常用于初始化实例变量。比如下面的例子：</p>
<pre><code class="Ruby">class C
  def data
    @data ||= &#123;&#125;
  end

  def data?
    @data.present?
  end
end
</code></pre>
<h4 id="Tap"><a href="#Tap" class="headerlink" title="Tap"></a>Tap</h4><p>《ruby元编程》里面提到了tap，使用tap，可以在方法链中插入中间操作，比如：</p>
<pre><code class="Ruby">temp = [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;].push(&#39;d&#39;).shift
puts temp #=&gt; a
x = temp.upcase.next
</code></pre>
<p> 上诉的代码显得很不ruby，使用tap改进下，可以这么写：</p>
<pre><code class="Ruby">[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;].push(&#39;d&#39;).shift.tap &#123;|x| puts x&#125;.upcase.next #=&gt; a
</code></pre>
<p>其实tap在方法定义中也很常见。比如<a href="https://github.com/glebm/i18n-tasks">i18n-tasks</a>的源代码中，就多次出现了tap的身影：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcly1fpzts3u39sj30mb064wey.jpg"></p>
<p>举一个简单的例子感受下：</p>
<pre><code class="Ruby"># source是一个Array，存放文件路径
# get_all_files 可以获取指定的单个或多个路径下所有的文件
def get_all_files(source)
  files = []
  source.map do |path|
    path = path[-1] == &#39;/&#39; ? path : path + &#39;/&#39;
    group = Dir.glob(&quot;#&#123;path&#125;**/**&quot;)
    files &lt;&lt; group.reject &#123; |x| File.directory?(x) &#125;
  end
end
</code></pre>
<p>如果换成tap，则可以这样定义：</p>
<pre><code class="Ruby">def get_all_files(source)
  [].tap do |files|
    source.map do |path|
      path = path[-1] == &#39;/&#39; ? path : path + &#39;/&#39;
      group = Dir.glob(&quot;#&#123;path&#125;**/**&quot;)
      files &lt;&lt; group.reject &#123; |x| File.directory?(x) &#125;
    end
  end
end
</code></pre>
<h4 id="Symbol-to-proc"><a href="#Symbol-to-proc" class="headerlink" title="Symbol#to_proc"></a>Symbol#to_proc</h4><p>这个在rubyist高手中算是比较流行的一种技巧了。</p>
<p>看个常用的数组求和：</p>
<pre><code class="Ruby">a = [1,2,3,4]
a.reduce(&amp;:+) #= &gt; 10
a.inject(0,&amp;:+) #= &gt; 10
</code></pre>
<p>「reduce 和inject 是alias的关系, 两者可以互用。我依然记得第一次看到数组求和<code>[1,2,3,4].reduce(&amp;:+)</code> 这个例子时，一脸懵逼……」</p>
<p>这种带有<code>&amp;:+</code>的标记的，就是Symbol#to_proc。</p>
<p>上面的求和，如果不用Symbol#to_proc， 则可以这样写：</p>
<pre><code class="Ruby">a = [1,2,3,4]
a.reduce&#123;|sum, x| sum + x &#125; #= &gt; 10
a.inject(0)&#123;|sum, x| sum + x &#125; #= &gt; 10
</code></pre>
<p>对于Symbol#to_proc 的方法的使用，要注意一点，那就是<code>&amp;:method</code>中的method，必须是对象可以调用的无参method，比如上面的<code>&amp;:+</code>，+ 是1，2，3，4都可以调用的<strong>无参实例方法</strong>。</p>
<p>看个例子感觉下：</p>
<pre><code class="Ruby">b = [&#39;hi&#39;,&#39;ruby&#39;,&#39;hello&#39;]
b.map(&amp;:capitalize) #= &gt; [&quot;Hi&quot;, &quot;Ruby&quot;, &quot;Hello&quot;]
b.map(&amp;:nil?) #= &gt; [false, false, false]
b.map(&amp;:concat(&#39;world&#39;)) #= &gt; raise: syntax error
</code></pre>
<p>b中的每一个元素都是String对象，可以成功调用无参的实例方法capitalize，nil?等，但是当调用带有参数的concat方法时就会报错，为什么？</p>
<p>原来在Symbol类中有一个to_proc方法，用于把符号转化为一个Proc对象：</p>
<pre><code class="Ruby">class Symbol
  def to_proc
    Proc.new &#123;|x| x.send(self)&#125; # 动态派发，调用self这个method的
  end
end
</code></pre>
<p>上面的<code>b.map(&amp;:capitalize)</code> 等价于<code>b.map(&amp;:capitalize.to_proc)</code>, 由于&amp;可以调用对象的to_proc方法把对象转为一个proc，所以可以简写成<code>b.map(&amp;:capitalize)</code> ， 也就是说，<code>b.map(&amp;:capitalize)</code> 等同于<code>b.map&#123;|x|x.send(:capitalize)&#125;</code>。</p>
<p>注意到Symbol类中定义的to_proc方法是不带参数的。</p>
<p>当然，如果你想要调用带参数的method，可以自定义一个method或者考虑给to_proc打个猴子补丁。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://book.douban.com/subject/26575429/">《ruby元编程第二版》</a></p>
<p><a href="https://medium.com/aviabird/ruby-tap-that-method-90c8a801fd6a">Ruby: Tap that method</a></p>
<p><a href="https://www.brianstorti.com/understanding-ruby-idiom-map-with-symbol/">Understanding Ruby’s idiom: array.map(&amp;:method)</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>Nuxt中低版本浏览器不兼容问题的处理</title>
    <url>/posts/check-browser-compatible-in-nuxt/</url>
    <content><![CDATA[<p>浏览器版本兼容问题很常见，这里记录下近期踩的坑：在nuxt 项目中，如何处理低版本浏览器的不兼容问题。</p>
<span id="more"></span>

<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>网页在chrome 75 及 Safari 12 中均可以正常显示，但对 360安全浏览器 8.1版本的支持并不友好，360中存在的主要问题是上下滚动条消失，鉴于360 8.1 版本的浏览器使用的内核是 chrome 45，故 下载了chrome 45 测试，发现chrome 45 也存在相同的问题，故问题转变为 如何处理内核 为chrome 45- 的浏览器不兼容问题。</p>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>最直接的方式：通过 userAgent 判断浏览器类型及版本，然后针对不兼容的低版本浏览器，显示页面，提示用户进行版本升级或者更换其他的浏览器。</p>
<p>思路没有问题，网上也搜出来了一堆判断浏览器类型及版本的示例代码，但这些处理方式的基本思路是先判断浏览器类型，然后判断版本，而这里需要处理的是 内核 为chrome的浏览器，可能是chrome，可能是360， 也可能是opera，只要版本低于45，则要求升级或更换。故，首先得去解析userAgent。</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/User-Agent">User Agent mozilla </a>  中给出了UA的基本组成 以及 主流浏览器的UA 字符串：</p>
<p>Web端 User -Agent 基本组成规则：</p>
<pre><code>Mozilla/&lt;version&gt; (&lt;system-information&gt;) &lt;platform&gt; (&lt;platform-details&gt;) &lt;extensions&gt;
</code></pre>
<p>部分主流浏览器的UA示例：「在 <a href="%5Bhttp://tools.jb51.net/table/useragent%5D(http://tools.jb51.net/table/useragent)">常用浏览器(PC,移动) user-agent</a> 可以查到 UC，腾讯TT等部分国内浏览器的UA。」</p>
<ul>
<li><p>Chrome</p>
<blockquote>
<p>Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36</p>
</blockquote>
</li>
<li><p>Firefox</p>
<blockquote>
<p>Mozilla/5.0 (Macintosh; Intel Mac OS X x.y; rv:42.0) Gecko/20100101 Firefox/42.0</p>
</blockquote>
</li>
<li><p>Opera</p>
<blockquote>
<p>Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36 OPR/38.0.2220.41</p>
</blockquote>
</li>
<li><p>Safari</p>
<blockquote>
<p>Mozilla/5.0 (iPhone; CPU iPhone OS 10_3_1 like Mac OS X) AppleWebKit/603.1.30 (KHTML, like Gecko) Version/10.0 Mobile/14E304 Safari/602.1</p>
</blockquote>
</li>
<li><p>IE</p>
<blockquote>
<p>Mozilla/5.0 (compatible; MSIE 9.0; Windows Phone OS 7.5; Trident/5.0; IEMobile/9.0)</p>
</blockquote>
</li>
</ul>
<p>根据UA 的基本组成规则，可以考虑解析整个UA，分成三部分：</p>
<pre><code> Mozilla/&lt;version&gt; (&lt;system-information&gt;)

 &lt;platform&gt; (&lt;platform-details&gt;)
 
 &lt;extensions&gt;
</code></pre>
<p>部分浏览器可能仅有第一部分，比如IE，这样可以根据 system-information 来判断是否为IE，并获取其版本，而针对chrome 部分，在解析得到的extensions 中进行二次解析，先根据空白符分割成数组，再针对数组中的每一个对象，进行split(‘/‘)，取到每一个extension的name 和version，最后只需要判断chrome 是否存在该数组中，存在则取其对应version，判断version是否过低即可。</p>
<p>具体的解析代码这里就不列出来了。</p>
<p>另一个需要说明的地方，是让这段处理浏览器不兼容的代码具有可扩展性。</p>
<p>比如这次处理的是chrome 45 以下版本，下一次如果发现腾讯TT 4.0 以下版本存在不兼容问题，需要在不修改主代码的情况下，保证功能正常。</p>
<p>鉴于自己写得很烂，这里直接借用领导的处理方式：</p>
<ul>
<li><p>新建变量blacklist，将所有不兼容的浏览器，版本及规则放入blacklist中。</p>
</li>
<li><p>新建class AgentInfo，在AgentInfo内部定义extension，test等函数。</p>
</li>
<li><p>使用parseAgentInfo方法，解析 userAgent，将解析后的结果塞给 AgentInfo ，进行初始化，得到AgentInfo的实例。</p>
</li>
<li><p>针对blacklist中的rules，逐一进行测试，如有未通过测试的，则表示该浏览器过低，跳转至新页面，要求用户升级或者更换浏览器。</p>
</li>
</ul>
<p>大致代码如下：</p>
<pre><code class="javascript">const blacklist = [
  &#123; name: &#39;chrome &lt;= 45&#39;, rules: [
    (info) =&gt; info.extension(&#39;Chrome&#39;).versionNumber &lt;= 45
  ]&#125;
]

export default function (&#123; route, req, redirect &#125;) &#123;
  const userAgent = process.server ? req.headers[&#39;user-agent&#39;] : navigator.userAgent
  const agentInfo = parseAgentInfo(userAgent)
  const uncompatible = _.some(blacklist, (item) =&gt; agentInfo.test(item.rules))

  if (uncompatible) &#123;
    redirect(&#39;/compatible&#39;)
  &#125;
&#125;
</code></pre>
<p>后面如果需要排除其他不兼容的浏览器，只需更改blacklist即可。</p>
<p>这部分是中间件的内容，不要忘记在<code>nuxt.config.js</code> 中声明对应的文件名。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/User-Agent">User Agent mozilla </a><br><a href="%5Bhttp://tools.jb51.net/table/useragent%5D(http://tools.jb51.net/table/useragent">常用浏览器(PC,移动) user-agent</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Nuxt</tag>
      </tags>
  </entry>
  <entry>
    <title>对比scheme中的Y-bang和Y</title>
    <url>/posts/compare-the-difference-between-y-bang-and-y/</url>
    <content><![CDATA[<p>试着找出 Y-bang 和 Y 的不同。</p>
<span id="more"></span>

<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>《the seasoned schemer》chapter16 中提到了Y-bang，后面给到一个biz函数，来比较两者的不同，但是作者赶着去吃炒蛋和煎饼，没有明确指出不同之处在哪里😆。</p>
<p>用作者的话来说，既然都能推导出Y combinator，自然也就能理解 Y 和 Y-bang 的不同​​。</p>
<blockquote>
<p>After you have worked through the definition of the Y combinator, nothing will ever affect your hat size again. not even an attempt to understand the difference between Y and Yi.</p>
</blockquote>
<p>既是如此，自己便试着推导了下，算是初步理清了两者的不同。</p>
<p>开始之前，建议在桌前备上一瓶肥仔水，你会需要它的😆。</p>
<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>先看两者的定义：</p>
<pre><code class="scheme">; define Y-bang
;
(define Y-bang
  (lambda (f)
    (letrec
      ((h (f (lambda (arg) (h arg)))))
      h)))
;

; Y combinator from chapter 09, old friend.
;
(define Y
  (lambda (le)
    ((lambda (f)
      (f f))
      (lambda (f)
        (le (lambda (x)
              ((f f) x)))))))
;
</code></pre>
<h4 id="推导过程"><a href="#推导过程" class="headerlink" title="推导过程"></a>推导过程</h4><p>Y-bang的推导较简单，可以参看<a href="https://mitpress.mit.edu/books/seasoned-schemer-second-edition">《the seasoned schemer》</a>chapter 16 ，这里不妨再过一遍：</p>
<p>故事依然从length开始：</p>
<pre><code class="scheme">; define length
;
(define length
  (lambda (l)
    (cond
      ((null? l) 0)
      (else (add1 (length (cdr l)))))))
;
</code></pre>
<p>使用let 和 set! 来重新定义length:</p>
<pre><code class="scheme">; using let and set! to get another version of length
;
(define length
  (let ((h (lambda (l) 0)))
    (set! h
      (lambda (l)
        (cond
          ((null? l) 0)
          (else (add1 (h (cdr l)))))))
    h))
;
</code></pre>
<p>这里我们来定义一个函数L，用来简化这个新版本length的定义:</p>
<pre><code class="scheme">; define L
;
(define L
  (lambda (length)
    (lambda (l)
      (cond
        ((null? l) 0)
        (else (add1 (length (cdr l))))))))
;
</code></pre>
<p>这个 L 函数，接受一个函数length做为参数，返回结果是一个lambda函数。</p>
<p>利用 L，来简化 length：</p>
<pre><code class="scheme">(define length
  (let ((h (lambda (l) 0)))
    (set! h
      (L (lambda (arg) (h arg))))
    h))
</code></pre>
<p>如果你看懂了这步，可跳过下面的推导细节。</p>
<hr>
<p>为什么可以这样简化？ 我们将 L 换成 定义的lambda函数：</p>
<pre><code class="scheme">; replace L with its definition

((lambda (length)
  (lambda (l)
    (cond
      ((null? l) 0)
      (else (add1 (length (cdr l))))))) (lambda (arg) (h arg)))
;
; replace length with (lambda (arg) (h arg)), we can get those below:

(lambda (l)
    (cond
      ((null? l) 0)
      (else (add1 ((lambda (arg) (h arg)) (cdr l))))))
;

; the result of ((lambda (arg) (h arg)) (cdr l)) is (h (cdr l))
;
(lambda (l)
    (cond
      ((null? l) 0)
      (else (add1 (h (cdr l))))))
</code></pre>
<p>最后得到的<code>(L (lambda (arg) (h arg)))</code> 的结果就是：</p>
<pre><code class="scheme">(lambda (l)
  (cond
   ((null? l) 0)
   (else (add1 (h (cdr l))))))
</code></pre>
<p>这时，替换<code>(L (lambda (arg) (h arg)))</code> ，得到的length如下：</p>
<pre><code class="scheme">(define length
  (let ((h (lambda (l) 0)))
    (set! h
      (lambda (l)
        (cond
          ((null? l) 0)
          (else (add1 (h (cdr l)))))))
    h))
;
</code></pre>
<hr>
<p>利用新定义的length，可以推导出Y-bang.</p>
<pre><code class="scheme">; we get Y-bang
;
(define Y-bang
  (lambda (f)
    (letrec
      ((h (f (lambda (arg) (h arg)))))
      h)))
;
</code></pre>
<p>Y 稍微复杂了些 ，如果你看<a href="https://mitpress.mit.edu/books/seasoned-schemer-second-edition">《the little schemer》</a>chapter 09 时仍是懵逼状，可参考之前这篇<a href="https://luciaca.cn/2019/04/13/deriving-the-Y-combinator-in-scheme/">scheme中有关Y combinator 的推导</a>。</p>
<h4 id="两者对比"><a href="#两者对比" class="headerlink" title="两者对比"></a>两者对比</h4><p>当调用的函数符合一定的”模式”时，两者没什么大的区别。</p>
<p>看一个depth* 的例子：</p>
<pre><code class="scheme">; define D
;
(define D
  (lambda (depth*)
    (lambda (s)
      (cond
        ((null? s) 1)
        ((atom? (car s)) (depth* (cdr s)))
        (else
          (max
            (add1 (depth* (car s)))
            (depth* (cdr s))))))))
;
</code></pre>
<p>使用Y-bang 和 Y 来定义 depth*:</p>
<pre><code class="scheme">(define depth* (Y-bang D))

(depth* (quote (c (b (a b) a) a)))
;Value: 3

(define depth* (Y D))

(depth* (quote (c (b (a b) a) a)))
;Value: 3
</code></pre>
<p>使用<code>(Y-bang D)</code> 和 <code>(Y D)</code> 来定义 depth*，得到的结果相同。</p>
<p>来看个不一样的例子：</p>
<pre><code class="scheme">; define biz
;
(define biz
  (let ((x 0))
    (lambda (f)
      (set! x (add1 x))
      (lambda (a)
        (if (= a x)
            0
            (f a))))))
</code></pre>
<p>调用biz:</p>
<pre><code class="scheme">((Y biz) 5)
; Value: 0

((Y-bang biz) 5)
; no answer
</code></pre>
<p>此时<code>((Y-bang biz) 5)</code>没有结果，因为调用<code>((Y-bang biz) 5)</code>时，只执行了一次<code>(set! x (add1 x))</code> ，x 一直是1，进入了一个无限的死循环。</p>
<p>为什么会是这样的？</p>
<p>来看一下<code>(Y-bang biz)</code> 是什么：</p>
<pre><code class="scheme">; define Y-bang
;
(define Y-bang
  (lambda (f)
    (letrec
      ((h (f (lambda (arg) (h arg)))))
      h)))
; define biz
;
(define biz
  (let ((x 0))
    (lambda (f)
      (set! x (add1 x))
      (lambda (a)
        (if (= a x)
            0
            (f a))))))
;
; now, we want know what (Y-bang biz) is.
;
; first, replace Y-bang, biz with their definition.
;
((lambda (f)
    (letrec
      ((h (f (lambda (arg) (h arg)))))
      h)) (let ((x 0))
        (lambda (f)
          (set! x (add1 x))
          (lambda (a)
            (if (= a x)
                0
                (f a))))))
;
; then, replace f with biz&#39;s definition

(letrec
  ((h ((let ((x 0))
          (lambda (f)
            (set! x (add1 x))
            (lambda (a)
              (if (= a x)
                  0
                  (f a))))) (lambda (arg) (h arg)))))
  h)
;
; and, replace f in biz with (lambda (arg) (h arg))

(letrec
  ((h ((let ((x 0))
          (lambda (f)
            (set! x (add1 x))
            (lambda (a)
              (if (= a x)
                  0
                  ((lambda (arg) (h arg)) a))))))))
  h)
;
; the result of ((lambda (arg) (h arg)) a) is (h a)
; finally, we get it.
(letrec
  ((h ((let ((x 0))
         (set! x (add1 x))
         (lambda (a)
           (if (= a x)
               0
               (h a)))))))
  h)
</code></pre>
<p>最后得到的结果中，可以看出，第一次调用递归函数 h 时，x 初始化为零，然后执行 add1, x 为1，此后递归时，不再执行 <code>(lambda (a) ....)</code> 外的表达式，x的值一直没变化，保持为1，<code>((Y-bang biz) 5)</code> 自然是无结果的。</p>
<p>我们可以测试一下，既然 x 的值一直是1，那么<code>((Y-bang biz) 1)</code> 应该有结果, 且为0:</p>
<pre><code class="scheme">((Y-bang biz) 1)
; Value: 0
</code></pre>
<p>我们可以修改一下biz函数，让<code>((Y-bang biz) 5)</code> 得到结果0。</p>
<pre><code class="scheme">; redefine biz
;
(define biz
  (lambda (f)
    (let ((x 0))
      (lambda (a)
        (set! x (add1 x))
        (if (= a x)
            0
            (f a))))))
;
((Y-bang biz) 5)
; Value: 0
</code></pre>
<p>   至此，<code>（Y-bang biz)</code> 部分结束。</p>
<p>惭愧的是，一直无法推导出<code>(Y biz)</code> 的最终样子，将biz 的定义带入Y 中时，卡在<code>(f f)</code>这里，简直就是一个无限死循环。</p>
<p>算是一个未填的坑，留待猴年马月再填。</p>
<p>初步猜测<code>(Y biz)</code>最终的结果类似这样：</p>
<pre><code class="scheme">(lambda (a)
  (let ((x 0))
    (letrec
      ((h
        (lambda (a)
          (set! x (add1 x))
          (if (= a x)
              0
              (h a)))))
      (h a))))
</code></pre>
<p>另，这里不推荐使用<a href="http://www.gnu.org/software/mit-scheme/documentation/mit-scheme-user/Debugging-Aids.html">pp</a> 来输出<code>(Y biz)</code>  和 <code>(Y-bang biz)</code>的结果，因为输出的结果中，两者相同：</p>
<pre><code class="scheme">(pp (Y biz))

; result
;
(lambda (a)
  (if (= a x)
      0
      (f a)))

(pp (Y-bang biz))

;result
;
(lambda (a)
  (if (= a x)
      0
      (f a)))
</code></pre>
<p>可以看到，输出的结果中已经弃掉了<code>(set! x (add1 x))</code>， 使得两者看着好像是一样的，但其实并不相同，这样的结果容易误人子弟啊。</p>
<p>OK，Time for 🍰.</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://mitpress.mit.edu/books/seasoned-schemer-second-edition">《the seasoned schemer》</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Scheme</tag>
      </tags>
  </entry>
  <entry>
    <title>有关Howitzer中的几个概念</title>
    <url>/posts/concepts-in-howitzer/</url>
    <content><![CDATA[<p>学学 Howitzer。</p>
<span id="more"></span>

<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p><a href="http://howitzer-framework.io/">howitzer</a>是一个基于ruby脚本的web验收测试框架， 初学时，对这个新伙伴是不甚了解，按照老规矩，看doc，看API。看完后，结合自己的理解，简单过一下里面几个重要的概念。</p>
<p>基本思路：</p>
<blockquote>
<ul>
<li>是什么？</li>
<li>怎么用？</li>
<li>用的时候要注意什么？</li>
</ul>
</blockquote>
<h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><ul>
<li><p>Driver</p>
<blockquote>
<p>是一个针对多个浏览器进行测试的通用界面，所有的Driver可以分成两类：</p>
<ul>
<li>Headless testing: 没有用户操作界面的模拟浏览器</li>
<li>real browser testing: 通过扩展程序或者插件来与真实的浏览器进行集成</li>
</ul>
</blockquote>
<p>Howitzer使用Capybara来对driver进行管理和设置，可以在<code> config/default.yml</code>中进行设置</p>
</li>
<li><p>Pages</p>
<p>介绍pages之前，介绍一下Page Object Model。</p>
<p>Page Object Model是一个自动化测试模版，创建用于测试的用户界面的抽象实体。可以将网站的每个page看作是一个类，然后通过调用这些类的实例来进行测试，而每个页面的元素可以看作是一个page的method，通过调用这些method来对该页面的元素进行调用。</p>
<p>这样，page就很好理解了。</p>
<p>Page是用于描述真实页面的类，比如在<code>web/pages</code>目录下，建立主页的文件，可以这样写：</p>
<pre><code class="Ruby">class Homepage &lt; Howitzer::Web::Page
path &#39;/&#39;
end
HomePage.open #打开主页
</code></pre>
<p>当然，这里的前提是你在<code>config/default.yml </code>中已经设置好了app_host</p>
<p>再比如：</p>
<pre><code class="Ruby">class ProductPage &lt; Howitzer::Web::Page
  path &#39;/products&#123;/id&#125;&#39;
end
ProductPage.open(id: 1) #=&gt; 访问 /products/1
</code></pre>
<p>如果要指定特定的host，可以这样：</p>
<pre><code class="Ruby">class AuthPage &lt; Howitzer::Web::Page
    site &#39;https://example.com&#39;
    path &#39;/auth&#39;
end
</code></pre>
<p><strong>Pages的验证：</strong></p>
<p>其实就是用于区分每个page的anchor，有三种不同的类型：</p>
<p><strong>URL，title，element</strong></p>
<p>比如：</p>
<pre><code class="Ruby">class HomePage &lt; Howitzer::Web::Page
  path &#39;/&#39;
  validate :url, /\A(?:.*?:\/\/)?[^\/]*\/?\z/
end
</code></pre>
<p>使用<code>.displayed?</code>可以去判断一个页面的所有验证是否都通过。</p>
<p>用这个可以检查特定的页面成功打开，比如：</p>
<pre><code class="Ruby">class AccountPage &lt; Howitzer::Web::Page
  path &#39;/accounts/&#123;id&#125;&#39;
 end
 AccountPage.open(id: 22)
 expect(AccountPage).to be_displayed
</code></pre>
</li>
<li><p>Elements</p>
<p>页面的元素，可以是单个元素，比如搜索栏，也可以是元素集合，比如菜单中的选项集。</p>
<p>比如：</p>
<pre><code class="Ruby">class HomePage &lt; Howitzer::Web::Page
  element :test_name1, &#39;.foo&#39;                         #css locator, default
  element :test_name2, :css, &#39;.foo&#39;                   #css locator
  element :test_name3, :xpath, &#39;//div[@value=&quot;bar&quot;]&#39;  #xpath locator

  element :test_link1, :link, &#39;Foo&#39;                   #link locator by &#39;Foo&#39; text
  element :test_link2, :link, &#39;bar&#39;                   #link locator by &#39;bar&#39; id

  element :test_field1, :fillable_field, &#39;Foo&#39;        #field locator by &#39;Foo&#39; text
  element :test_field2, :fillable_field, &#39;bar&#39;        #field locator by &#39;bar&#39; id
  element :test_field3, :fillable_field, &#39;baz&#39;        #field locator by &#39;baz&#39; name
end
</code></pre>
<p>这里要注意，不能通过page类直接调用element，需要在page类中定义一个method来调用element。</p>
<p>比如：</p>
<pre><code class="Ruby">class HomePage &lt; Howitzer::Web::Page
  element :new_button, :xpath, &quot;.//*[@name=&#39;New&#39;]&quot;

  def start_new_project
    new_button_element.click
  end
end

HomePage.on &#123; new_button_element.click &#125; # 不正确的用法
HomePage.on &#123; start_new_project &#125; # 正确的打开方式
</code></pre>
</li>
<li><p>Sections</p>
<p>在howitzer中，有一个Howitzer::Web::Section类。</p>
<p>section的使用场景：当多个页面中出现相同的部分时，或者某部分在一个页面中频繁出现，类似rails中的公用表单。</p>
<p>使用<code>&lt;section_name&gt;_section</code>来生成一个section的实例,  这里使用一个特别的me方法，通过参数指定section，比如：</p>
<pre><code class="Ruby">class MenuSection &lt; Howitzer::Web::Section
  me &quot;#gbx3&quot; #section的父元素
end
</code></pre>
<p>使用的时候，这么用：</p>
<pre><code class="Ruby"># 定义section:

class MenuSection &lt; Howitzer::Web::Section
  me &quot;#gbx3&quot;
end

# 包含menusection的页面:

class HomePage &lt; Howitzer::Web::Page
  section :menu
end

# 页面调用section:

HomePage.on &#123; menu_section &#125;
</code></pre>
<p>当两个页面有相同的section，但是跟节点不同时，可以这么用：</p>
<pre><code class="Ruby"># 定义section

class MenuSection &lt; Howitzer::Web::Section
  me &#39;#gbx3&#39;
end

# 定义两个page类，都包含有menu这个section

class HomePage &lt; Howitzer::Web::Page
  section :menu # 使用默认的selector
end

class SearchResultsPage &lt; Howitzer::Web::Page
  section :menu, &quot;#gbx48&quot; # 覆盖了默认的selector
end
</code></pre>
<p>测试section是否存在某个页面：</p>
<pre><code class="Ruby">class MenuSection &lt; Howitzer::Web::Section
  me &#39;#gbx3&#39;
  element :search, &quot;a.search&quot;
end

class HomePage &lt; Howitzer::Web::Page
  section :menu
end

HomePage.on &#123; has_menu_section? &#125; #=&gt; returns true or false
</code></pre>
<p>多层级section的使用，看一个登陆的例子，结合了cucumber 的step定义：</p>
<pre><code class="Ruby"># define a page that contains an area that contains a section for both logging in and registration, then modeling each of the sub sections separately

class LoginSection &lt; Howitzer::Web::Section
  me &quot;div.login-area&quot;
  element :username, &quot;#username&quot;
  element :password, &quot;#password&quot;
  element :sign_in, &quot;button&quot;

  def login(username, password)
    username_element.set username
    password_element.set password
    sign_in_element.click
  end  
end

class RegistrationSection &lt; Howitzer::Web::Section
  me &quot;div.reg-area&quot;
  element :first_name, &quot;#first_name&quot;
  element :last_name, &quot;#last_name&quot;
  element :next_step, &quot;button.next-reg-step&quot;

  def sign_up(first_name, last_name)
    first_name_element.set first_name
    first_name_element.set last_name
    next_step_element.click
  end
end

class LoginRegistrationFormSection &lt; Howitzer::Web::Section
  me &quot;div.login-registration&quot;
  section :login
  section :registration  
end

class HomePage &lt; Howitzer::Web::Page
  section :login_and_registration
end

# how to login (fatuous, but demonstrates the point):
Then /^I sign in$/ do
  HomePage.open
  HomePage.on do
    is_expected.to have_login_and_registration_section
    login_and_registration_section.login_section.login(&#39;bob&#39;, &#39;p4ssw0rd&#39;)
  end  
end

# how to sign up:

When /^I enter my name into the home page&#39;s registration form$/ do
  HomePage.open
  HomePage.on do
    expect(login_and_registration_section.registration_section).to have_first_name
    expect(login_and_registration_section.registration_section).to have_last_name
    login_and_registration_section.registration_section.signup(&#39;Bob&#39;, &#39;Arum&#39;)
  end  
end
</code></pre>
</li>
<li><p>IFrames</p>
<p>IFrames 在howitzer中被声明为一个 <code>Howitzer::Web::Page</code>类，通过包含该frame 的section或者page来引用，比如：</p>
<p>创建一个frame实例，在DashboardPage中引用它，测试该frame是否在DashboardPage中存在。</p>
<pre><code class="Ruby">class FbPage &lt; Howitzer::Web::Page
  element :some_text_field, &quot;input.username&quot;
end

class DashboardPage &lt; Howitzer::Web::Page
  iframe :fb, &quot;#fb&quot;
end

DashboardPage.open
DashboardPage.on &#123; is_expected.to have_fb_iframe &#125;
</code></pre>
<p>与iframe中的元素进行交互, 这里用了cucumber login的step definition来说明：</p>
<pre><code class="Ruby"># Howitzer::Web::Page representing the iframe
class LoginPage &lt; Howitzer::Web::Page
  element :username, &quot;input.username&quot;
  element :password, &quot;input.password&quot;

  def login(username, password)
    username_element.set username
    password_element.set password
  end  
end

# Howitzer::Web::Page representing the page that contains the iframe
class HomePage &lt; Howitzer::Web::Page
  iframe :login, &quot;#login_and_registration&quot;
end

# cucumber step that performs login
When /^I log in$/ do
  HomePage.open
  HomePage.on do
    login_iframe do |frame|
      #`frame` is an instance of the `LoginPage` class
      frame.login(&#39;admin&#39;, &#39;p4ssword&#39;)
    end
  end  
end
</code></pre>
</li>
</ul>
<h4 id="The-End"><a href="#The-End" class="headerlink" title="The End"></a>The End</h4><p>参考：</p>
<p><a href="http://docs.howitzer-framework.io/">howitzer doc</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Howitzer</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue中使用moment格式化时间</title>
    <url>/posts/config-moment-in-vue/</url>
    <content><![CDATA[<p>为了日期格式更好看。</p>
<span id="more"></span>

<h4 id="引入-moment"><a href="#引入-moment" class="headerlink" title="引入 moment"></a>引入 moment</h4><ul>
<li><p>安装</p>
<p>yarn:</p>
<pre><code>yarn add moment
</code></pre>
<p>npm:</p>
<pre><code>npm i moment
</code></pre>
</li>
<li><p>配置</p>
<p>在plugins目录下，新建文件：<code>moment.js</code>，放入以下内容：</p>
<pre><code class="js">import Vue from &#39;vue&#39;
import moment from &#39;moment&#39;

Vue.filter(&#39;moment&#39;, function(value, pattern = &#39;YYYY-MM-DD HH:mm:ss&#39;) &#123;
  if (!value) &#123; return null &#125;
  return moment(value).format(pattern)
&#125;)
</code></pre>
<p>这里设置了默认的时间样式是YYYY-MM-DD HH:mm:ss。</p>
<p>最后，在<code>nuxt.config.js</code>文件的plugins中添加：</p>
<pre><code>plugins: [
  &#39;xxxx&#39;,
   // 引入我们刚刚新增的文件moment.js
  &#39;~/plugins/moment&#39;
]
</code></pre>
</li>
</ul>
<p>OK ,重启后就可以开始用了。</p>
<h4 id="全局设置多种格式"><a href="#全局设置多种格式" class="headerlink" title="全局设置多种格式"></a>全局设置多种格式</h4><p>比如需要配置两种格式，日期型和时间型。</p>
<p>修改<code>plugins/moment.js</code>:</p>
<pre><code class="js">import Vue from &#39;vue&#39;
import moment from &#39;moment&#39;

const formats = &#123;
  &quot;date&quot;: &quot;YYYY-MM-DD&quot;,
  &quot;datetime&quot;: &quot;YYYY-MM-DD hh:mm:ss&quot;
&#125;

Vue.filter(&#39;moment&#39;, function(value, format=&#39;date&#39;) &#123;
  if (!value) &#123; return null &#125;
  const pattern = formats[format]
  return moment(value).format(pattern)
&#125;)
</code></pre>
<p>这里，设置默认为日期格式。</p>
<h4 id="页面使用"><a href="#页面使用" class="headerlink" title="页面使用"></a>页面使用</h4><p>比如需要显示商品创建时间：</p>
<pre><code>&#123;&#123; product.created_at | moment('datetime') &#125;&#125;

// 或者仅仅显示日期
&#123;&#123; product.created_at | moment('date') &#125;&#125;
&#123;&#123; product.created_at | moment &#125;&#125;
</code></pre>
<p>因为设置了参数format默认是date, 当moment内不传参数时，则采用日期样式。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://forum.vuejs.org/t/how-to-format-date-for-display/3586">how to format date for display</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>创建Access token以访问GitHub接口</title>
    <url>/posts/create-access-token-for-github-api/</url>
    <content><![CDATA[<p>瞅瞅 GitHub 接口。</p>
<span id="more"></span>

<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>访问GitHub接口时，除了通过用户名和密码来实现基本的授权外，还可以通过OAuth2 token的方式。不过后一种方式需要你先生成ACCESS TOKEN。</p>
<p>GitHub的help中有一篇文章<a href="https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line">create a personal access token for the command line</a>提到了如何生成token，这里记录下实际操作的过程。</p>
<h4 id="创建你的token"><a href="#创建你的token" class="headerlink" title="创建你的token"></a>创建你的token</h4><p>登录GitHub，点击页面右上角你的头像，弹出的菜单栏中，有settings选项，点击进入settings页面。</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1g0pgc8fwptj30kg0pmdi5.jpg"></p>
<p>在左边的菜单栏中选择Developer settings：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1g0pgdkpi4cj30g812gwgn.jpg"></p>
<p>在Developer settings主页中，选择 <strong>Personal access tokens</strong>，点击 <strong>Generate new token</strong> 按钮。</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1g0pgg6x00bj31re0iu42l.jpg"></p>
<p>在token的生成界面，输入token的描述，并选择可以访问的信息范围，比如允许访问我的repos，notifications，gist.</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1g0pgneg94kj310n0u00z8.jpg"></p>
<p>点击下方的Generate token按钮，便会生成token【这里隐去我自己的……】。</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1g0pgqxidemj31om0isae6.jpg"></p>
<p>呃，以上步骤也可以简化成一句：直接访问<a href="https://github.com/settings/tokens%EF%BC%8C%E7%99%BB%E5%BD%95%EF%BC%8C%E6%8C%89%E7%85%A7%E6%8C%87%E7%A4%BA%E5%88%9B%E5%BB%BAtoken%E3%80%82">https://github.com/settings/tokens，登录，按照指示创建token。</a></p>
<h4 id="使用token"><a href="#使用token" class="headerlink" title="使用token"></a>使用token</h4><p>好了，拿到access token后，就可以在终端使用啦。</p>
<p>输入：</p>
<pre><code>curl -H &quot;Authorization: token YourToken&quot; https://api.github.com
</code></pre>
<p>或者：</p>
<pre><code>curl https://api.github.com/?access_token=YourToken
</code></pre>
<p>将「 YourToken 替换成 刚刚生成的token 」</p>
<p>会得到如下的response：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1g0pgulbufrj31jw0u0k1z.jpg"></p>
<p>鉴于每次访问其他接口时，都需要把token放在header中，可以将token设置成环境变量，这样每次用起来就不用copy一大坨的字符了。</p>
<p>设置：</p>
<pre><code class="shell">export GITHUB_ACCESS_TOKEN=YourToken
</code></pre>
<p>请求你的个人信息:</p>
<pre><code class="shell">curl -v -H &quot;Authorization: token $GITHUB_ACCESS_TOKEN&quot; https://api.github.com/user
</code></pre>
<p>简直完美！</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line">create a personal access token for the command line</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>API</tag>
      </tags>
  </entry>
  <entry>
    <title>给《Listening to music》建了个电台</title>
    <url>/posts/create-an-radio-channel-for-listening-to-music/</url>
    <content><![CDATA[<p>还是没忍住，建了个电台。</p>
<span id="more"></span>

<p>距离刷这个课程已经过去好几个月了，我依然是懵逼的： P。</p>
<p>因为是公开课，就去<a href="https://oyc.yale.edu/">Open Yale Courses </a> 里，找了下教授的课程，有公开的音频文件和课程介绍，就搬运了下。</p>
<p>附上电台地址：<a href="http://music.163.com/radio/794820730?userid=95304519">《Listening to music - Yale courses》</a></p>
<p>可以通勤路上听了。</p>
]]></content>
      <categories>
        <category>Music</category>
      </categories>
      <tags>
        <tag>Music</tag>
      </tags>
  </entry>
  <entry>
    <title>给开源项目提PR</title>
    <url>/posts/create-pull-request-for-open-source-project/</url>
    <content><![CDATA[<p>参考<a href="https://gist.github.com/zxhfighter/62847a087a2a8031fbdf">如何给开源项目贡献代码</a> ，自己倒腾的时候，简化了下。</p>
<span id="more"></span>

<p>以<a href="https://github.com/nowa/carrierwave-upyun">carrierwave-upyun</a> 为例， 在没有开源库的写入权限下，如何给开源库提PR ？</p>
<p>四步走。</p>
<ul>
<li><p>clone 开源库到本地:</p>
<pre><code>git clone https://github.com/nowa/carrierwave-upyun.git
</code></pre>
</li>
<li><p>创建你的新分支：</p>
<pre><code>cd carrierwave-upyun
git checkout -b my_branch
</code></pre>
<p>进行修改后，commit。</p>
<pre><code>git commit -m &quot;fixed bugs&quot;
</code></pre>
</li>
<li><p>fork 开源库</p>
<p>访问开源库，fork 开源库到自己的repos。</p>
</li>
<li><p>本地push新分支:</p>
<p>以我fork后的repos为例：</p>
<pre><code class="shell"># 添加新的推送地址
git remote add upstream git@github.com:Lupeipei/carrierwave-upyun.git
git push upstream my_branch
</code></pre>
<p>再次访问开源库，发现新分支已经push上去了，创建PR即可。</p>
</li>
</ul>
<p>[2020-03-26]补充：</p>
<p> 如果发现开源库master上有更新，如何同步自己fork的库，然后再PR？</p>
<p> 其中一个方法是删除之前fork的库，重新fork，但是显然太粗暴了。</p>
<p> 在本地仓库目录下，更适合的方式：</p>
<pre><code>git checkout master
# 拉原仓库最新代码
git fetch origin
git reset --hard origin/master
git checkout -b my_other_branch
# do something, commit
git push upstream my_other_branch
</code></pre>
<p>OK。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://gist.githu.com/zxhfighter/62847a087a2a8031fbdf">如何给开源项目贡献代码</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
      </tags>
  </entry>
  <entry>
    <title>为IP地址生成自签名证书</title>
    <url>/posts/create-self-signed-certificate-for-ip/</url>
    <content><![CDATA[<p>如题</p>
<span id="more"></span>

<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>为指定的域名或者IP地址生成自签名证书, 要求使用HTTPS协议访问时, 主流浏览器Chrome, firefox等不弹出警告.</p>
<p>这里的自签名证书是指可根据IP或域名动态生成的二级证书.不借由第三方权威颁发机构生成.</p>
<p>举个简单的场景, A机在指定端口起了服务后, B机在浏览器中想要通过HTTPS协议访问A机服务器, 浏览器不警告.</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images20210316175549.png"></p>
<p>通常的服务器证书, 我们是向let’s Encript或其他权威机构申请, 而这里, 要求A机服务器的证书是由自己生成的CA机构颁发.</p>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>解决思路:</p>
<p>先生成一个根证书颁发机构 (Root certificate authority), 然后基于颁发机构生成二级证书, 在二级证书中绑定域名或者IP地址.</p>
<p>针对问题描述中的提到的例子, 相当于在A机生成根证书颁发机构RCA 和基于该颁发机构生成的绑定A机IP地址的二级证书,然后B机通过某种方式下载了该 RCA, 同时系统设置信任[相当危险], 这样便可走HTTPS协议访问A机的服务了.</p>
<p>下面分传统的openssl和nodejs两个方式来实现下.</p>
<ul>
<li><p>Openssl方式</p>
<p>先生成根证书:</p>
<p>新增一个shell 脚本文件generate_root_ca.sh, 放入如下内容, 然后执行脚本即可.[具体各参数的含义, 可参考<a href="https://www.openssl.org/docs/man1.1.1/man5/x509v3_config.html">x509v3 config</a>]</p>
<pre><code class="shell">#!/bin/sh

echo &quot;[req]
default_bits  = 2048
distinguished_name = req_distinguished_name
x509_extensions = v3_req
prompt = no
[req_distinguished_name]
countryName = XX
stateOrProvinceName = N/A
localityName = N/A
organizationName = Self-signed Cert
commonName = Self-signed Cert
[v3_req]
basicConstraints = CA:TRUE
&quot; &gt; root.cnf

openssl req -x509 -nodes -days 730 -newkey rsa:2048 -keyout rootCA.key -out rootCA.crt -config root.cnf

rm root.cnf
</code></pre>
<p>此处的关键在于<code>basicConstraints</code> 设置为 <code>CA:TRUE</code></p>
<p>也可以直接在终端生成, 执行:</p>
<pre><code class="shell"># 生成private key, 可以添加选项 -des3 来给 private key 设置密码.这里略过
openssl genrsa  -out rootCA.key 2048

# 生成cert, -days 用于设置过期时间, 指定加密算法为 sha256, 执行后会有提示, 设置即可
openssl req -x509 -new -nodes -key rootCA.key -sha256 -days 730 -out rootCA.crt
</code></pre>
</li>
</ul>
<p>  生成后得让计算机信任这个机构. 以MacOS为例:</p>
<p>  打开keychain Access,  file &gt; import items 选中生成的rootCA.crt文件, 双击该文件, 选择 Always Trust.</p>
<p>  <img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images20210316181828.png"></p>
<p>  这样,基于该机构颁发的证书, 都是被本机信任的.</p>
<p>  现在我们来生成基于该CA颁发的证书:</p>
<p>  以IP地址为例, 新增shell脚本文件 generate_ip_cert.sh, 添加如下内容:</p>
<pre><code class="shell">IP=$(echo $1)
echo &quot;
authorityKeyIdentifier=keyid,issuer
basicConstraints=CA:FALSE
keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment
subjectAltName = @alt_names
[alt_names]
IP.1 = $IP
&quot; &gt; cert.cnf

openssl genrsa -out key.pem 2048
openssl req -new -key key.pem -out csr.pem -subj &quot;/C=XX/ST=MyST&quot;
openssl x509 -req -in csr.pem -CA rootCA.crt -CAkey rootCA.key -CAcreateserial -out cert.pem -days 730 -sha256 -extfile cert.cnf
rm cert.cnf
</code></pre>
<p>  执行<code>./generate_ip_cert.sh IPAddress</code> [IPAddress为你需要为其生成证书的IP地址]</p>
<p>  如果为指定的域名生成证书, 只需修改alt_names部分即可:</p>
<pre><code class="shell">DNS=$(echo $1)

echo &quot;
authorityKeyIdentifier=keyid,issuer
basicConstraints=CA:FALSE
keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment
subjectAltName = @alt_names
[alt_names]
DNS.1 = $DNS
&quot; &gt; cert.cnf

openssl genrsa -out key.pem 2048
openssl req -new -key key.pem -out csr.pem -subj &quot;/C=XX/ST=MyST&quot;
openssl x509 -req -in csr.pem -CA rootCA.crt -CAkey rootCA.key -CAcreateserial -out cert.pem -days 730 -sha256 -extfile cert.cnf
rm cert.cnf
</code></pre>
<p>  同样也可以在终端一步步走openssl 生成, 这里略过.</p>
<p>  随后将生成的cert.pem, key.pem放进服务器的配置中即可.</p>
<ul>
<li><p>Nodejs 方式</p>
<p>原理同上面的一样, 这里用一个小的express实例来实验下.</p>
<p>为了生成证书, 首先我们需要引用了一个开源的package: <a href="https://github.com/jfromaniello/selfsigned">selfsigned</a>,  因为原来的库并不支持基于Root CA生成证书, 这里我们用<a href="https://github.com/Envek">Andrey Novikov</a> fork后的改进版本.</p>
<p>直接起一个express, entry point为app.js. 在package.json中添加:</p>
<pre><code class="json">&quot;selfsigned&quot;: &quot;https://github.com/Envek/selfsigned.git#7477718&quot;
</code></pre>
<p>随后npm install.</p>
<p>app.js中添加如下内容:</p>
<pre><code class="javascript">const express = require(&#39;express&#39;)
const https = require(&#39;https&#39;)
const fs = require(&#39;fs&#39;)
const ip = require(&#39;ip&#39;)
const selfsigned = require(&#39;selfsigned&#39;)

const app = express()
const address = ip.address()
const port = 3008

fs.mkdirSync(&#39;./ca&#39;, &#123; recursive: true &#125;)
const rootCA = selfsigned.generate(
  [
    &#123; name: &#39;commonName&#39;, value: &#39;Self-signedCert&#39; &#125;,
    &#123; name: &#39;countryName&#39;, value: &#39;XX&#39; &#125;,
    &#123; name: &#39;organizationName&#39;, value: &#39;Myorg&#39; &#125;,
  ],
  &#123;
    keySize: 2048,
    algorithm: &#39;sha256&#39;,
    extensions: [
      &#123;
        name: &#39;basicConstraints&#39;,
        cA: true,
      &#125;,
    ]
  &#125;
)

fs.writeFileSync(&#39;./ca/rootCA.crt&#39;, rootCA.cert)

const pems = selfsigned.generate(
  [
    &#123; name: &#39;commonName&#39;, value: &#39;Self-signedCert&#39; &#125;,
    &#123; name: &#39;countryName&#39;, value: &#39;XX&#39; &#125;,
    &#123; name: &#39;organizationName&#39;, value: &#39;Myorg&#39; &#125;,
  ],
  &#123;
    keySize: 2048,
    ca: rootCA,
    algorithm: &#39;sha256&#39;,
    extensions: [
      &#123;
        name: &#39;basicConstraints&#39;,
        cA: false,
      &#125;,
      &#123;
        name: &quot;keyUsage&quot;,
        keyCertSign: false,
        digitalSignature: true,
        nonRepudiation: true,
        keyEncipherment: true,
        dataEncipherment: true,
      &#125;,
      &#123;
        name: &quot;extKeyUsage&quot;,
        serverAuth: true,
        clientAuth: true,
        codeSigning: true,
        timeStamping: true,
      &#125;,
      &#123;
        name: &quot;subjectAltName&quot;,
        altNames: [
          &#123;
            type: 7,
            ip: address,
          &#125;,
        ],
      &#125;,
    ],
  &#125;
)

fs.writeFileSync(&#39;./ca/cert.pem&#39;, pems.cert)
fs.writeFileSync(&#39;./ca/key.pem&#39;, pems.private)

app.get(&#39;/&#39;, (req, res) =&gt; &#123;
  res.send(&#39;Hello World!&#39;)
&#125;)

https.createServer(&#123;
  key: fs.readFileSync(&#39;./ca/key.pem&#39;),
  cert: fs.readFileSync(&#39;./ca/cert.pem&#39;)
&#125;, app).listen(port, () =&gt; &#123;
  console.log(`listening on https://$&#123;address&#125;:$&#123;port&#125;`)
&#125;)
</code></pre>
<p><strong>将项目的ca目录下的rootCA.crt 拖到 keychain中, 并设置为信任的机构.</strong></p>
<p>终端执行<code>node app.js</code>:</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images20210316191512.png"></p>
<p>浏览器访问正常.可以点开🔒️的图标, 查看我们生成的二级证书:</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images20210316192959.png"></p>
</li>
</ul>
<p>最后, 值得一提的是Firefox, 系统设置信任对Firefox并不起效, 需要在perferences 中将生成的rootCA.crt 导入进去才可以. [此为危险操作]</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images20210316191730.png"></p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul>
<li><p><a href="https://book.douban.com/subject/10746113/">HTTP权威指南</a></p>
</li>
<li><p><a href="https://www.openssl.org/docs/man1.1.1/man5/x509v3_config.html">x509v3 config</a></p>
</li>
<li><p><a href="https://deliciousbrains.com/ssl-certificate-authority-for-local-https-development/">How to Create Your Own SSL Certificate Authority for Local HTTPS Development</a></p>
</li>
<li><p><a href="https://gist.github.com/sethvargo/81227d2316207b7bd110df328d83fad8">Use openssl to create an x509 self-signed certificate authority (CA)</a></p>
</li>
<li><p><a href="https://github.com/jfromaniello/selfsigned">selfsigned repos</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>创建你的第一个gem</title>
    <url>/posts/create-your-first-rubygem/</url>
    <content><![CDATA[<p>第一次造轮子。</p>
<span id="more"></span>

<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>用了很多前辈们造的轮子，没准你也想自己造个轮子，用实际行动来为open source添砖加瓦。</p>
<p>即便刚开始做出来的不甚理想，甚至是破砖破瓦，不过能自己做一个gem，这本身就是一件很cool的事了：P</p>
<p>那么一个简单的gem包括哪些文件呢？基本的框架是怎样的？如何快速创建一个gem？</p>
<h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><ul>
<li><p>准备工作：命名</p>
<p>借用Phil Karlton的话：There are only two hard things in Computer Science: cache invalidation and <strong>naming things</strong>.</p>
<p>So first of all, naming your gem. 记得去<a href="https://rubygems.org/">rubygems</a>搜索下，确保你的gem名唯一。</p>
<p>好，开始正式创建你的gem。</p>
<p>如果你认真去看<a href="http://guides.rubygems.org/">guides rubygems</a>， 会发现步骤其实还挺多，这里我们直接抄近道。</p>
<p>一个gem的基本pattern长这样：【该gem名为ice_bear，呃，谁会不喜欢<a href="http://webarebears.wikia.com/wiki/Ice_Bear">ice bear</a>？】</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fpjbe4verpj30af09e0t2.jpg"></p>
</li>
</ul>
<p>以下以ice_bear gem的创建为例，四步走：</p>
<ul>
<li><p>创建gem</p>
<p>终端运行：</p>
<pre><code>bundle gem ice_bear
</code></pre>
<p>如果是第一次创建gem，会问你要不要生成test文件(rspec/minitest)，是否想要添加license等，根据需要回复即可。</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fpjawbg751j30rd059769.jpg"></p>
<p>这里选择rspec,会生成如下文件：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fpjaxcc7zcj30eo06ogm9.jpg"></p>
<p>如果是第一次生成gem，是没有README.md的，需要自己手动添加。</p>
</li>
<li><p>放到GitHub上，open source</p>
<p>默认添加了version control，所以cd 到ice_bear 目录后，不需要git init.</p>
<p>终端运行：</p>
<pre><code>cd ice_bear
git add .
git commit -m &quot;my first gem ice_bear&quot;
git remote add origin https://github.com/XXX/ice_bear
git push -u origin master
</code></pre>
</li>
<li><p>修改文件：<code>ice_bear_gemspec</code>：</p>
<p>三处需要修改：spec.summary，spec.description，spec.homepage</p>
<p>其中在spec.homepage 列添加你的public repo URL, 也就是你push到GitHub的repos 地址：</p>
<pre><code class="spec">Gem::Specification.new do |spec|
  ......
  spec.summary       = &#39;ice bear would have been less charming&#39;
  spec.description   = &lt;&lt;-TEXT
  Ice Bear is the youngest of the trio but is undoubtedly the strongest and, in some respects, the most mature.
  TEXT
  spec.homepage      = &quot;https://github.com/xxxx/ice_bear&quot;
  ......
end
</code></pre>
<p>这里description部分太长，故用<code>&lt;&lt;-TEXT TEXT</code>【类似<a href="https://en.wikipedia.org/wiki/Here_document">heredoc</a>】包起来了。</p>
<p>最近进度push到GitHub：</p>
<pre><code>git commit -am &quot;update ice_bear_gemspec&quot;
git push
</code></pre>
</li>
<li><p>运行测试文件，确保正常</p>
<p>本地运行<code>bundle exec rspec</code>，得到如下结果：</p>
<pre><code class="Shell">IceBear
  has a version number
  does something useful (FAILED - 1)

Failures:

  1) IceBear does something useful
     Failure/Error: expect(false).to eq(true)

       expected: true
            got: false

       (compared using ==)
     # ./spec/ice_bear_spec.rb:7:in `block (2 levels) in &lt;top (required)&gt;&#39;

Finished in 0.08058 seconds (files took 0.55356 seconds to load)
2 examples, 1 failure

Failed examples:

rspec ./spec/ice_bear_spec.rb:6 # IceBear does something useful
</code></pre>
<p>查看测试文件：<code>ice_bear_spec.rb</code> ：</p>
<pre><code class="Ruby">RSpec.describe IceBear do
  it &quot;has a version number&quot; do
    expect(IceBear::VERSION).not_to be nil
  end

  it &quot;does something useful&quot; do
    expect(false).to eq(true)
  end
end
</code></pre>
<p>与预期相同，OK！gem 搭建成功，下一步，make your gem useful ：P</p>
</li>
</ul>
<h4 id="关于发布"><a href="#关于发布" class="headerlink" title="关于发布"></a>关于发布</h4><p>gem 完成后，确保你有<a href="https://rubygems.org/">RubyGems.org</a>的账号，终端运行：</p>
<pre><code>gem push ice_bear_0.1.0.gem
</code></pre>
<p>其中0.1.0是你gem的版本号，输入账号和密码即可。当然你也可以修改一些其他设置，比如set up a private gem server，具体参见<a href="http://guides.rubygems.org/publishing/">publishing your gem</a>。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://stackoverflow.com/questions/9549450/how-to-setup-a-basic-ruby-project">How to setup a basic ruby project?</a></p>
<p><a href="https://github.com/codinguy/skeleton-ruby-project">skeleton ruby project</a></p>
<p><a href="http://guides.rubygems.org/">guides rubygems</a></p>
<p><a href="http://wsmoak.net/2015/02/22/ruby-project-structure.html">Ruby Project Structure</a></p>
<p><a href="http://guides.rubygems.org/publishing/">publishing your gem</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建一个简单的Vue项目</title>
    <url>/posts/create-your-first-vue-project/</url>
    <content><![CDATA[<p>对Vue窥视已久，最近弄了下，感觉挺赞，记录下简单的搭建过程。</p>
<span id="more"></span>

<p>以下操作均以Mac OS X为准。</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>开发环境需要 npm, node, vue，我们 一步步来。</p>
<p>用nvm来安装node：</p>
<p>类似RVM，nvm是用于管理node多版本，参考<a href="https://github.com/creationix/nvm">nvm</a>.</p>
<p>先装nvm，终端执行：</p>
<pre><code>curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash
</code></pre>
<p>然后执行：</p>
<pre><code>export NVM_DIR=&quot;$HOME/.nvm&quot;
[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \. &quot;$NVM_DIR/nvm.sh&quot; # This loads nvm
</code></pre>
<p>这会将nvm库clone到<code>./nvm</code>，同时会在你的profile文件中添加source line. <code>source ~/.nvm/nvm.sh</code></p>
<p>执行命令检查下nvm是否已经安装成功：</p>
<pre><code>command -v nvm
</code></pre>
<p>如果终端输出nvm，则表示安装成功，如果没有输出nvm，参考<a href="https://github.com/creationix/nvm">nvm</a> ，里面有详尽的解说帮你脱坑。</p>
<p>装node最新版：</p>
<pre><code>nvm install node
</code></pre>
<p>安装完成后，执行：</p>
<pre><code>nvm use node
</code></pre>
<p>这个命令会使系统使用刚刚安装的node最新版本，此时的最新版是v10.1.0, npm 5.7.1</p>
<p>或者使用xcode, homebrew， 安装node。</p>
<p>在安装了xcode, homebrew的情况下，终端执行：</p>
<pre><code>brew install node
</code></pre>
<p>稍等一会，就会安装好最新的node，连带着会安装npm.</p>
<p>用npm安装vue ,vue-cli 这两个node包：</p>
<p>终端执行：</p>
<pre><code>npm install vue vue-cli -g
</code></pre>
<h4 id="创建第一个vue项目"><a href="#创建第一个vue项目" class="headerlink" title="创建第一个vue项目"></a>创建第一个vue项目</h4><p>准备工作完成，来建一个vue项目。</p>
<p>终端执行：</p>
<pre><code>vue init webpack my_project
</code></pre>
<p>webpack是用于把各种js/css/html代码最后打包编译到一起的工具。vuejs集成了webpack， 这里创建的vue项目是基于webpack的。</p>
<p>如果是第一次创建，它会问你一堆的问题，回答即可。</p>
<p>运行结束时，会看到：</p>
<pre><code># Project initialization finished!
# ========================

To get started:

  cd my_project
  npm run dev
</code></pre>
<p>我们照着来：</p>
<pre><code>cd my_project
npm run dev
</code></pre>
<p>成功的话，会显示这样的信息：</p>
<pre><code>Your application is running here: http://localhost:8080
</code></pre>
<p>打开<a href="http://localhost:8080/">http://localhost:8080</a>, 可以看到：<br><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcly1fr5ibfqdpcj30mo0h1q3r.jpg"></p>
<p>项目的基本结构大致如下：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79ly1fr6nnnpugaj30820cwdg6.jpg"></p>
<p>其中dist是打包后生成的，即执行<code>npm run build</code>后生成的。</p>
<p>简单看看各个目录放的是什么。</p>
<ul>
<li>build/：打包相关</li>
<li>config/：配置文件存放目录</li>
<li>node_modules/: 项目中用到的第三方包，特别大，安装所有的第三方包，执行 <code>npm install</code></li>
<li>src/：源代码所在目录，也是我们主要活动的地方，你可以将它看成是rails的app，一般在<code>src/components/</code>下面添加组件文件，然后在<code>src/router/index.js</code>中定义新的路径。后面我们会建一个新的组件试试。</li>
<li>static/：静态文件</li>
<li>test/：测试</li>
</ul>
<p>至此，一个简单的Vue项目的搭建完成，下面我们自己来添加一些页面。</p>
<h4 id="创建你的第一个页面"><a href="#创建你的第一个页面" class="headerlink" title="创建你的第一个页面"></a>创建你的第一个页面</h4><p>上面打开的<a href="http://localhost:8080，">http://localhost:8080，</a> 其默认的页面内容定义在<code>src/components/HelloWorld.vue</code>中。</p>
<p>vue文件的基本结构如下：</p>
<pre><code class="Vue">&lt;template&gt;
 ......
&lt;/template&gt;  
&lt;script&gt;
......
&lt;/script&gt;

&lt;style&gt;
......
&lt;/style&gt;
</code></pre>
<p>在<code>router/index.js</code>中可以看到路径的定义方式，仿照HelloWorld.vue，我们可以自己新增一个页面。</p>
<p>两步走：</p>
<ul>
<li>新增路由</li>
<li>新增vue文件</li>
</ul>
<p>比如我们要新增一个hi页面，修改<code>router/index.js</code>，修改如下：</p>
<pre><code class="Js">import Vue from &#39;vue&#39;
import Router from &#39;vue-router&#39;
import HelloWorld from &#39;@/components/HelloWorld&#39;
import Hi from &#39;@/components/Hi&#39;
Vue.use(Router)

export default new Router(&#123;
  routes: [
    &#123;
      path: &#39;/&#39;,
      name: &#39;HelloWorld&#39;,
      component: HelloWorld
    &#125;,
    &#123;
      path: &#39;/hi&#39;,
      name: &#39;Hi&#39;,
      component: Hi
    &#125;
   ]
&#125;)  
</code></pre>
<p>新增Hi.vue组件：</p>
<pre><code>touch src/components/Hi.vue
</code></pre>
<p>在Hi.vue中填入以下内容：</p>
<pre><code>&lt;template&gt;
  &lt;div&gt;
    &#123;&#123;message&#125;&#125;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
export default &#123;
  data () &#123;
    return &#123;
      message: &#39;Hi, I am a Rubyist&#39;
    &#125;
  &#125;
&#125;
&lt;/script&gt;

&lt;style&gt;
&lt;/style&gt;
</code></pre>
<p>此时，访问<a href="http://localhost:8080/#/hi%EF%BC%8C">http://localhost:8080/#/hi，</a> 可以看到如下页面：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79ly1fr6od9autqj30k90c43ys.jpg"></p>
<p>OK！自定义页面完成！</p>
<p>更多玩法，参考Vuejs官方。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://vuejs.org/">Vue.js</a></p>
<p><a href="https://github.com/creationix/nvm">nvm</a></p>
<p><a href="http://vue_book.siwei.me/">vuejs教程</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS中&#39;&gt;&#39;,&#39;+&#39;,&#39;～&#39;符号的区别</title>
    <url>/posts/css-symbol-compare/</url>
    <content><![CDATA[<p>工作中遇到了+,～不清楚两者的区别，查了下，顺带把&gt;也缕缕，记录下三者的差异。</p>
<span id="more"></span>

<h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><p>用一个例子来说明一下。</p>
<p>页面内容如下：</p>
<pre><code class="html">&lt;div class=&quot;container&quot;&gt;
  &lt;p&gt;第一段落&lt;/p&gt;
  &lt;div&gt;
    &lt;p&gt;第一段落: 子段落&lt;/p&gt;
  &lt;/div&gt;
  &lt;p&gt;第二段落&lt;/p&gt;
  &lt;p&gt;第三段落&lt;/p&gt;
  &lt;p&gt;第四段落&lt;/p&gt;
&lt;/div&gt;
</code></pre>
<p>在不设置任何格式的情况下，页面画风如下：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fte98sm1epj30u80aqdge.jpg"></p>
<p>来一个个试一下。</p>
<h4 id="gt"><a href="#gt" class="headerlink" title="&gt;"></a>&gt;</h4><p>&gt; 只对该选择器下的直接子元素设定CSS值。</p>
<p>添加CSS：</p>
<pre><code class="css">.container &#123;
  color: red;

  &gt; p &#123;
    color: green;
  &#125;
&#125;  
</code></pre>
<p>这时，container下面的所有第一级子元素p，都变成了green：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fte7l4ewkzj30w00b6dh4.jpg"></p>
<p>而用div 包起来的那个p，则依然继承container的颜色属性值red.</p>
<p>页面效果：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fte7p5o59ej30em0ast96.jpg"></p>
<p>如果去掉 &gt; ,则container下的所有p都会变成绿色：</p>
<pre><code class="css">.container &#123;
  color: red;

  p &#123;
    color: green;
  &#125;
&#125;  
</code></pre>
<p>页面效果：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fte7uub8woj30oy0akdgc.jpg"></p>
<h4 id=""><a href="#" class="headerlink" title="+"></a>+</h4><p>+ 连接两个selector，要求这两个selector必须同属于一个父selector，同时第二个selector必须是紧跟第一个selector。</p>
<p>试一下，改CSS：</p>
<pre><code class="css">.container &#123;
  color: red;

  div + p &#123;
    color: blue;
  &#125;
&#125;
</code></pre>
<p>这时，只有紧随div的那个p变成了蓝色，而且它与div同属一个 父selector .container，也就是两者是同级的。</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fte80zob35j30sq0b83zp.jpg"></p>
<p>页面效果：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fte82emeplj30t60aegm8.jpg"></p>
<h4 id="-1"><a href="#-1" class="headerlink" title="~"></a>~</h4><p>~ 跟+  很像，但是它不要求第二个selector必须紧随其后，它会选中所有它后面的第二个selector，设置CSS。</p>
<p>试一下，改CSS：</p>
<pre><code class="css">.container &#123;
  color: red;

  div ~ p &#123;
    color: blue;
  &#125;
&#125;
</code></pre>
<p>这时，div后面的所有p都成了蓝色。</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fte8a0yrgdj30ns0a40ts.jpg"></p>
<p>对应的页面效果：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fte8ar807nj30no0aeq3l.jpg"></p>
<p>跟+  一样，~ 也只对同一个层级的selector有效，比如我们添加上span.</p>
<pre><code class="html">&lt;div class=&quot;container&quot;&gt;
 &lt;p&gt;第一段落&lt;/p&gt;
 &lt;div&gt;
   &lt;p&gt;第一段落: 子段落&lt;/p&gt;
 &lt;/div&gt;
 &lt;p&gt;第二段落&lt;/p&gt;
 &lt;p&gt;第三段落&lt;/p&gt;
 &lt;p&gt;第四段落&lt;/p&gt;
 &lt;span&gt;这是跟div同级的span&lt;/span&gt;
 &lt;div&gt;&lt;span&gt;这是子span&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<p>对应的CSS：</p>
<pre><code class="css">.container &#123;
  color: red;

  div ~ span &#123;
    color: blue;
  &#125;
&#125;
</code></pre>
<p>页面效果：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fte8iywqqvj30pe0dmab0.jpg"></p>
<p>第一个span颜色变成了blue，而用div包起来的span，依然继承container的color值。</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fte8m436umj30si0f476a.jpg"></p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://techbrij.com/css-selector-adjacent-child-sibling">Understand ‘+’, ‘&gt;’ and ‘~’ symbols in CSS Selector By Brij Mohan</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>cucumber does not go to afterstep when the step failed</title>
    <url>/posts/cucumber-does-not-go-to-afterstep-when-step-failed/</url>
    <content><![CDATA[<p>来根cucumber。</p>
<span id="more"></span>

<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>cucumber的AfterStep hook很好用，但是当一个step failed时，Cucumber这个黄瓜就不执行AfterStep了，而如果你需要在每一步后都截图或者每一步都输出日志信息，不管这一步的执行结果是passed还是failed， 那就麻烦了。</p>
<p>不过问题总是有方法可以解决的，我们来看个例子。</p>
<h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><p>Attention：本解答基于cucumber 3.0.0 +， 因为用到的Test Step Finished Event基于3.0.0版本 + 。</p>
<p><strong>给定场景：</strong></p>
<blockquote>
<p> 每个step执行后都进行全屏截图操作 【No matter the result of the step is passed or failed or whatever】</p>
</blockquote>
<p><strong>前提：</strong></p>
<blockquote>
<ul>
<li>cucumber 3.0.0 +</li>
<li> 假定你已经定义好了截取全屏的函数full_page_screenshot. 【不知道怎么定义？戳这里找找感觉：<a href="https://lupeipei.github.io/2018/01/08/capture-full-page-with-capybara/">capture full page screenshot with capybara</a>】</li>
</ul>
</blockquote>
<p><strong>解决思路：</strong></p>
<p>在Cucumber中，AfterStep被当作是一个step，所以，如果你的step是failed，后续的step就会skipped，也就是说，AfterStep必然会skipped【弄清楚这一点很重要，就不会白白浪费时间在AfterStep上】，这样如果想要在step failed的情况下，继续运行该scenario后续的step，只能弃用AfterStep，改用<a href="http://www.rubydoc.info/github/cucumber/cucumber-ruby/Cucumber/Events/TestStepFinished">Test Step Finished Event</a>。</p>
<p><strong>具体步骤：</strong></p>
<p>在<code>features/support</code>下，新建文件<code>event.rb</code>,  放入以下内容：</p>
<pre><code class="Ruby">AfterConfiguration do |config|
  config.on_event :test_step_finished do |event|
    step = event.test_step.text
    if step != &quot;AfterStep hook&quot; &amp;&amp; step != &quot;Before hook&quot; &amp;&amp; step != &quot;After hook&quot;
      file = full_page_screenshot
    end
  end
end
</code></pre>
<p>这里，每一步是一个event，所以运行的时候，会按照Before hook ,step,  AfterStep hook, After hook来走，鉴于截图只是针对每个step，所以这里筛选掉了其他三类event。</p>
<p>此处的 step取值是<code>event.test_step.text</code>， 这样获取的就是每一步的name，而<code>event.test_step</code>本身是一个step对象，输出的结果不是step的name。</p>
<p>详情可以参考它的documentation<a href="https://app.cucumber.pro/projects/cucumber-ruby/documents/branch/master/features/docs/events/test_step_finished_event.feature">Test Step Finished Event</a>，也可以用类似如下的代码在运行时输出其他信息：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fnbizyhm4yj30iu045wf2.jpg"></p>
<p>这里多提一个：如果<strong>想要获取该step的执行结果</strong>怎么办？</p>
<p>你一定会想到用<code>event.result</code>， 没错，但是它只输出两个值：✓ ，  ✗</p>
<p>这就很不友好了，每个step运行后，其实有7种结果：</p>
<p>[:failed, :flaky, :skipped, :undefined, :pending, :passed, :unknown]</p>
<p>当<code>event.result</code>是✓ ，它是passed，但是当<code>event.result</code>是✗ ，无法判断到底是failed，还是pending，还是skipped……</p>
<p>这里，你会想到 <strong>In Ruby,  Everything is an object except block</strong> .</p>
<p>调用methods获取<code>event.result</code>的所有methods，然后找到<code>to_sym</code>。</p>
<p>使用<code>event.result.to_sym</code> 得到的是符号类型的值， 比如:passed,  想要换成字符， 可以用<code>event.result.to_sym.to_s</code>，  按需择取。</p>
<p>OK，大功告成！此外，你也可以自定义每个event中需要添加的操作，比如截图后上传图片，输出每一步的日志信息，创建实例等等。</p>
<h4 id="The-End"><a href="#The-End" class="headerlink" title="The End"></a>The End</h4><p>参考：</p>
<p><a href="https://github.com/cucumber/cucumber-ruby/issues/1026">Cucumber does not go to AfterStep if the step is failed!</a></p>
<p>P.S.<br>AfterTestStep这个event的<a href="https://app.cucumber.pro/projects/cucumber-ruby/documents/branch/master/features/docs/events/test_step_finished_event.feature">documents</a>在17年2月份的时候发出的，估计用的人不多，至少在stack overflow上是没看到，但是用起来没啥问题，感谢 Matt Wynne， 这个event真的很好用。</p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Cucumber</tag>
      </tags>
  </entry>
  <entry>
    <title>初尝Cucumber</title>
    <url>/posts/cucumber-first-try/</url>
    <content><![CDATA[<p>使用cucumber 实作了个小小的例子，来感受一下小黄瓜的魅力：P。</p>
<span id="more"></span>

<h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><p>做了一个用于计算的专案，名为calculator。</p>
<p>calculator会做这样的事情：</p>
<pre><code>如果你输入了：
2+2
那么它会输出4
如果你输入了：
3*3
那么它会输出9
……
</code></pre>
<p>其实就是一个简单的计算器。</p>
<p>好，我们开始吧。</p>
<p>终端运行:</p>
<pre><code>rails new calculator
cd calculator
</code></pre>
<p>建立专案calculator, 安装cucumber。参考：<a href="https://github.com/cucumber/cucumber-rails/blob/master/README.md">Cucumber-Rails</a></p>
<p>在gemfile文件中添加 cucumber-rails：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fl533xnblyj30fm037t90.jpg"></p>
<p>database_cleaner这个gem是用来清理测试数据的，可加可不加，不过建议添加。</p>
<p>终端运行：</p>
<pre><code>bundle install
rails g cucumber:install
</code></pre>
<p>会自动生成一些文件：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fl53d5jnsaj30oq06ota5.jpg"></p>
<p>它帮我们生成好了features文件夹， 还有step_definitions.</p>
<p>让我们删除rails自带的test:</p>
<pre><code>rm -rf test
</code></pre>
<p>终端输入cucumber试试：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fl53j79w13j30st072gng.jpg"></p>
<p>显示Deprecated了，针对这个问题我 Google了一下，你可以在cucumber-rails的<a href="https://github.com/cucumber/cucumber-rails/issues/346">issues346</a>中看到, 但是没有找到解答，如果你留意，你会发现config文件下的<code>cucumber.yml</code>里面确实有<code>~@wip</code>, 如果你尝试着把所有的<code>~@wip</code> 替换成<code>not @tag</code> 会出现报错，鉴于它并不影响测试，所以你可以选择无视这些Deprecated：P</p>
<p>好，我们继续添加测试文件吧！新增<code>adding.feature</code>文件：</p>
<pre><code>touch features/adding.feature
</code></pre>
<p><code>adding.feature</code>文件的内容如下：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fl54cns0dnj30fx04aaab.jpg"></p>
<p>终端运行cucumber，显示如下：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fl54f04mr0j30zk0k9tdg.jpg"></p>
<p>会发现报错了，我们并没有定义step_definitions来告诉cucumber如何将这些直白的英文转换成专案中具体的action。但是，你也会发现小黄瓜贴心的地方，它告诉你step definitions里面要加一些snippets。</p>
<p>新建<code>features/step_definitions/calculator_steps.rb</code> 文件，文件内容如下：</p>
<p>【其实就是复制了它告诉我们的代码：P】</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fl54onlhmaj30g605rmy1.jpg"></p>
<p>再次运行cucumber试试：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fl54qokbosj30j807kjse.jpg"></p>
<p>显示一个pending，2个skipped了，我们来修改一下<code>calculator_steps.rb</code>，让第一个step可以pass。</p>
<pre><code class="Ruby">Given(&quot;the input &#123;string&#125;&quot;) do |string|
  @input = string
end

When(&quot;the calculator is run&quot;) do
  pending # Write code here that turns the phrase above into concrete actions
end

Then(&quot;the output should be &#123;string&#125;&quot;) do |string|
  pending # Write code here that turns the phrase above into concrete actions
end
</code></pre>
<p>运行cucumber，step1 pass.</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fl54vc0mf4j30kk07g3zj.jpg"></p>
<p>第二个step pending，Oops，我们继续。</p>
<p>这里可以梳理一下，第一步是input，最后是output，所以第二步应当是调用了method进行计算。好，我们添加一个ruby文件: calc.rb, 修改<code>calculator_steps.rb</code>，如下：</p>
<pre><code class="Ruby">Given(&quot;the input &#123;string&#125;&quot;) do |string|
  @input = string
end

When(&quot;the calculator is run&quot;) do
  @output = `ruby calc.rb #&#123;@input&#125;`
end

Then(&quot;the output should be &#123;string&#125;&quot;) do |string|
  pending # Write code here that turns the phrase above into concrete actions
end
</code></pre>
<p>运行cucumber，step2 pass.</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fl56z0meapj30ma07jq43.jpg"></p>
<p>注意到这里<code>calc.rb</code>还只是一个空文件，而且需要注意<code>calc.rb</code>是在根目录下。</p>
<p>继续修改<code>calculator_steps.rb</code>, 让第三个step pass：</p>
<pre><code class="Ruby">Given(&quot;the input &#123;string&#125;&quot;) do |string|
  @input = string
end

When(&quot;the calculator is run&quot;) do
  @output = `ruby calc.rb #&#123;@input&#125;`
end

Then(&quot;the output should be &#123;string&#125;&quot;) do |string|
  expect(@output).to eq string
end
</code></pre>
<p>在<code>calc.rb</code>中加入一行，使得output等于预期:</p>
<pre><code>print eval (ARGV[0])
</code></pre>
<p>不了解eval的用法？👉戳这里<a href="https://ruby-hacking-guide.github.io/anyeval.html">Dynamic evaluation</a></p>
<p>简单来说，这里input是”2 + 2”，那么eval(input)就是会4.</p>
<p>这时继续运行cucumber，出现这样的报错：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fl5763tsrqj30mg084jsm.jpg"></p>
<p>显示except是undefined method，那是由于没有安装RSpec，在gemfile中加入</p>
<pre><code>gem &#39;rspec-rails&#39;
</code></pre>
<p>然后<code>bundle install</code>，再次运行<code>cucumber</code>，Pass！</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fl579bi1l5j30mf04r3yx.jpg"></p>
<p>整个流程算是走完了。</p>
<p>以上就是一个cucumber测试的基本流程了。</p>
<p>cucumber的整个语法结构有个名字叫做<a href="https://github.com/cucumber/cucumber/wiki/Gherkin">Gherkin</a>，例子中我们的<code>add.feature</code>就是遵守着Gherkin的语法。</p>
<p>Gherkin的大致结构类似这样：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fl57tq18wej30av03474i.jpg"></p>
<h4 id="The-End"><a href="#The-End" class="headerlink" title="The End"></a>The End</h4><p>实作的时候还是踩了些坑的，看报错却又找不到哪里出问题，看stack overflow也是一脸懵逼，这里略去一万字的吐糟……</p>
<p>推荐：</p>
<p><a href="https://forums.pragprog.com/forums/166">the cucumber book‘s forums</a></p>
<p><a href="https://book.douban.com/subject/24843412/">Cucumber：行为驱动开发指南</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Cucumber</tag>
      </tags>
  </entry>
  <entry>
    <title>对Cucumber的一点理解</title>
    <url>/posts/cucumber-intro-1/</url>
    <content><![CDATA[<p><a href="https://cucumber.io/">Cucumber</a>是BDD测试中的明星。</p>
<span id="more"></span>

<h4 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h4><p>Cucumber中的几个关键字：</p>
<p><strong>feature, scenario, given, when, then,  and,  but</strong></p>
<p>简单说说这些关键字的含义。</p>
<p>Feature：你可以把它看作是一个user story</p>
<p>scenario用于描述一个简单的场景。</p>
<p>一个feature可以有1个或者多个scenario。</p>
<p>一个scenario可以有3～8个steps。</p>
<p>其中，steps的定义类似于Ruby中method的定义。</p>
<p>step中的5个关键字：</p>
<ul>
<li>Given : 表示事件发生之前的状态， preconditions。</li>
<li>When： 表示事件本身，比如用户push 了一个button</li>
<li>Then：表示事件发生后的预期结果，比如push了一个button，要跳转到某个特定的页面</li>
<li>And &amp; But：用来延续之前的steps</li>
</ul>
<h4 id="用例"><a href="#用例" class="headerlink" title="用例"></a>用例</h4><p>看个例子：</p>
<pre><code class="Ruby">Feature: user can manually add movie

Scenario: Add a movie
    Given I am on the RottenPotatoes home page
    When I follow &quot;Add new movie&quot;
    Then I should be on the Create New Movie page
    when I fill in &quot;Title&quot; with &quot;Men In Black&quot;
    And I select &quot;PG-13&quot; from &quot;Rating&quot;
    And I press &quot;Save changes&quot;
    Then I shoud be on the RottenPotatoes home page
    And I should see &quot;Men in Black&quot;
</code></pre>
<p>这里测试一个feature，用户可以手动添加电影，添加的电影会在首页显示，表明添加成功。</p>
<p>具体的steps是这样的：</p>
<p>Given：用户在烂番茄主页，<strong>这是precondition</strong></p>
<p>When：用户点击新增电影，<strong>这是事件本身</strong></p>
<p>Then：用户应该会跳转到新建电影的页面，<strong>这是事件发生后的预期结果</strong></p>
<p>When：电影有title字段，用户将“Men in Black” 填入到title中，<strong>这是事件本身</strong></p>
<p>And：用户在星级中选择了“PG-13”，<strong>这是上一步的延续</strong></p>
<p>And：用户按下“保存”，<strong>继续延续上一步</strong></p>
<p>Then：用户应该跳转回烂番茄首页，<strong>这是事件发生后的预期结果</strong></p>
<p>And：用户应该看到“Men in Black”，<strong>这是上一步结果的延续</strong></p>
<p>此外，用cucumber去测试的一个好处是，它会提示你如何做可以让测试通过。</p>
<p>再看一个实例，看看如何DRY：P。</p>
<p>用户在TMDb首页搜索movie，可能出现的两种结果: 搜索到该影片(happy path)，没有搜索到(bad path)</p>
<p>测试文件长这样：</p>
<pre><code class="Ruby">Feature: User can add movie by searching in The Movie
    Database(TMDb)
    As a movie fan
    so that I can add new movies without manual tedium
    I want to add movies by looking up their details in TMDb
Scenario: Try to add nonexistent movie(sad path)
    Given I am on the RottenPotatoes home page
    Then I should see &quot;Search TMDb for a movie&quot;
    When I fill in &quot;Search Terms&quot; with &quot;Movie that Does Not Exist&quot;
    And I press &quot;Search TMDb&quot;
    Then I should be on the RottenPotatoes home page
    And I should see &quot;Movie That Does Not Exist&quot; was not found in TMDb
Scenario: Try to add nonexistent movie(happy path)
    Given I am on the RottenPotatoes home page
    Then I should see &quot;Search TMDb for a movie&quot;
    When I fill in &quot;Search Terms&quot; with &quot;Inception&quot;
    And I press &quot;Search TMDb&quot;
    Then I should be on the RottenPotatoes home page
    And I should see &quot;Inception&quot;
</code></pre>
<p>其中，sad path ，happy path都有6个 steps，两者的前两个steps是一样的，how to DRY it?</p>
<p>这里用到<strong>background</strong>，我的理解是background类似于RSpec中的before。</p>
<p>我们重构一下：</p>
<pre><code class="Ruby">Feature: User can add movie by searching in The Movie
    Database(TMDb)
    As a movie fan
    so that I can add new movies without manual tedium
    I want to add movies by looking up their details in TMDb
Background: Start from the Search form on the home page
            Given I am on the RottenPotatoes home page
            Then I should see &quot;Search TMDb for a movie&quot;
Scenario: Try to add nonexistent movie(sad path)
    When I fill in &quot;Search Terms&quot; with &quot;Movie that Does Not Exist&quot;
    And I press &quot;Search TMDb&quot;
    Then I should be on the RottenPotatoes home page
    And I should see &quot;Movie That Does Not Exist&quot; was not found in TMDb
Scenario: Try to add nonexistent movie(happy path)
    When I fill in &quot;Search Terms&quot; with &quot;Inception&quot;
    And I press &quot;Search TMDb&quot;
    Then I should be on the RottenPotatoes home page
    And I should see &quot;Inception&quot;
</code></pre>
<p>OK，大功告成。</p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Cucumber</tag>
      </tags>
  </entry>
  <entry>
    <title>Simple form 添加 array input 组件</title>
    <url>/posts/custom-array-input-in-simple-form/</url>
    <content><![CDATA[<p>PG支持array类型，但simple form中却没有 array input 组件，试着custom一个，效果还不错。</p>
<span id="more"></span>

<h4 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h4><p>最终效果：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/array_input.gif" alt="array_input"></p>
<h4 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h4><p>这里以诗词Poem的content类型为array为例，基于rails5.2，webpacker4.0，给出具体的实现步骤，</p>
<ul>
<li><p>新增component array_input</p>
<p>添加<code>app/inputs/array_input.rb</code>文件，内容如下：</p>
<pre><code class="ruby">class ArrayInput &lt; SimpleForm::Inputs::Base
  def input(wrapper_options = nil)
    existing_values = Array(object.public_send(attribute_name))
    template.content_tag(:div) do
      existing_values.map do |array_item|
        template.concat builder_input_with_remove_btn(array_item)
      end

      if existing_values.empty?
        template.concat builder_input_with_remove_btn(nil)
      end

      template.concat add_item_btn
    end
  end

  def input_html_options
    super.merge(&#123; class: &#39;form-control rounded&#39;, type: :text &#125;)
  end

  def builder_input_with_remove_btn(element)
    template.content_tag(:div, class: &#39;input-group mb-3&#39;) do
      template.concat @builder.text_field(nil, input_html_options.merge(value: element, name: &quot;#&#123;object_name&#125;[#&#123;attribute_name&#125;][]&quot;))
             template.concat remove_item_btn
    end
  end

  def add_item_btn
    content = &lt;&lt;~HTML
      &lt;button type=&quot;button&quot; class=&quot;btn btn-success btn-sm array-add-item&quot;&gt;新增 +&lt;/button&gt;
    HTML
    content.html_safe
  end

  def remove_item_btn
    content = &lt;&lt;~HTML
    &lt;div class=&quot;input-group-append ml-2&quot;&gt;
      &lt;button type=&quot;button&quot; class=&quot;btn btn-secondary btn-sm rounded array-remove-item&quot;&gt;移除 -&lt;/button&gt;
    &lt;/div&gt;
    HTML
    content.html_safe
  end
end
</code></pre>
<p>这里，需要注意的是，当content 为空时，只会有一行input，此时的移除按钮应该是disabled才合适。</p>
<p>我这里给出的解决方法有点蠢，直接在build_input_with_remove_btn中，添加了参数来控制，可以看到效果图中，第一个移除按钮是disabled。</p>
<p>修改builder_input_with_remove_btn 这个method：</p>
<pre><code class="ruby">## 给 builder_input_with_remove_btn 添加 disabled 参数
    def builder_input_with_remove_btn(element, disabled = false)
    template.content_tag(:div, class: &#39;input-group mb-3&#39;) do
      template.concat @builder.text_field(nil, input_html_options.merge(value: element, name: &quot;#&#123;object_name&#125;[#&#123;attribute_name&#125;][]&quot;))
      disabled ? template.concat(disabled_remove_item_btn) : template.concat(remove_item_btn)
    end
  end
  
## 添加新的 disabled_remove_item_btn
  def disabled_remove_item_btn
    content = &lt;&lt;~HTML
    &lt;div class=&quot;input-group-append ml-2&quot;&gt;
      &lt;button type=&quot;button&quot; class=&quot;btn btn-secondary btn-sm rounded array-remove-item&quot; disabled&gt;移除 -&lt;/button&gt;
    &lt;/div&gt;
    HTML
    content.html_safe
  end
      
## 修改 input ，调用新的 builder_input_with_remove_btn
  def input(wrapper_options = nil)
    existing_values = Array(object.public_send(attribute_name))
    template.content_tag(:div) do
      existing_values.each_with_index do |array_el, index|
        disabled = index.zero? ? true : false
        template.concat builder_input_with_remove_btn(array_el, disabled)
      end

      if existing_values.empty?
        template.concat builder_input_with_remove_btn(nil, true)
      end

      template.concat add_item_btn
    end
  end
</code></pre>
</li>
<li><p>给移除和新增按钮添加click监听事件</p>
<p>在app/javascripts中，添加文件<code>src/array_input.jsx</code>:</p>
<pre><code class="javascript">import $ from &#39;jquery&#39;;

$(document).on(&#39;content:loaded&#39;, function(event) &#123;
 $(event.target).find(&#39;.array-add-item&#39;).each(function() &#123;
   $(this).on(&#39;click&#39;, e =&gt; &#123;
     e.preventDefault()
     const inputList = this.parentElement.querySelectorAll(&#39;.input-group&#39;)
     const lastLineField = inputList[inputList.length - 1]
     const $cloneField = $(lastLineField).clone()
     $cloneField.find(&#39;input&#39;).val(&quot;&quot;)
     $cloneField.find(&#39;button&#39;).removeAttr(&#39;disabled&#39;)
     $(lastLineField).after($cloneField)
   &#125;)
 &#125;)

 $(event.target).on(&#39;click&#39;, &#39;.array-remove-item&#39;, e =&gt; &#123;
   e.preventDefault()
   e.currentTarget.parentElement.parentElement.remove()
 &#125;)
&#125;)
</code></pre>
<p>这里针对移除按钮的 click 事件，需要使用<code> on(&#39;click&#39;, &#39;.array-remove-item&#39;,e =&gt; &#123;....&#125;)</code>来全局监听，因为新增事件中，clone出来的input-group 并没有将事件监听也一并clone了。「踩过这个坑的都懂」</p>
<p>在packs/application.js中，引入刚刚新增的文件：</p>
<pre><code class="javascript">import &#39;../src/array_input.jsx&#39;;
</code></pre>
</li>
<li><p>修改使用content的地方，确保值正确传递</p>
<p>修改文件的表单部分：</p>
<pre><code class="html">&lt;%= f.input :content, as: :array %&gt;
</code></pre>
<p>在controller中，针对传过来的params，设定content为array：</p>
<pre><code class="ruby">params.require(:poem).permit(:title, :dynasty, :author, content: [])
</code></pre>
<p>在poem.rb中，清除content中的空行：</p>
<pre><code class="ruby">before_save :remove_blank_item
def remove_blank_item
  self.content.reject!(&amp;:blank?)
end
</code></pre>
</li>
</ul>
<p>OK，收工。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://tenforward.consulting/blog/integrating-an-array-column-in-rails-with-simple-form">Integrating an array column with Simple Form in Rails</a></p>
<p><a href="https://railsguides.net/simple-form-array-text-input/">Simple form array text input</a></p>
<p><a href="https://github.com/plataformatec/simple_form/wiki/Custom-inputs-examples">Custom inputs examples</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
      </tags>
  </entry>
  <entry>
    <title>nuxt中自定义音频播放组件</title>
    <url>/posts/custom-audio-player-component-in-nuxt/</url>
    <content><![CDATA[<p>nuxt 中的 eventbus。</p>
<span id="more"></span>

<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>在nuxt中自定义音频播放组件，遇到了一个问题：当存在多个音频播放器时，一次只允许播放一个音频。Google了大半天，写出来的效果并不好，后面老大出手解决了，觉得他的这个方式很精巧，记录下以备忘。</p>
<h4 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h4><p>做一个最简单的自定义音频播放组件AudioPlayer，props中只有一个参数：文件的source地址。</p>
<p>效果图：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1g0ufeelegdg30uz06iaba.gif"></p>
<h4 id="实现细节"><a href="#实现细节" class="headerlink" title="实现细节"></a>实现细节</h4><p>为了实现这个效果，需要将功能拆分下：</p>
<p>1、获取音频文件的时长duration，这个可以通过audio的<strong>canplay</strong>事件。</p>
<p>2、获取音频的currentTime， 这个可以通过audio的<strong>timeupdate</strong>事件</p>
<p>3、用变量state来显示audio的三种状态：paused, playing, stopped，并分别定义三种状态下的方法: play(), pause(), stop()，根据用户操作来调用不同的方法。</p>
<p>4、定义numberToStardardMinuteSecond函数，将currentTime，duration处理成时间，这里引入库<a href="https://numbrojs.com/">numbro</a>来做这件事。</p>
<p>5、自定义进度条，添加click事件处理函数seek，通过获取点击位置占整个长度的百分比，换算出此时audio的currentTime，设置audio的currentTime</p>
<p>6、使用eventbus进行组件间的通信，在audio play之前，触发beforeplay事件，同时在AuidoPlay组件中监听beforeplay事件。</p>
<p>分步来：</p>
<p>先布局出音频播放组件的模子：</p>
<pre><code class="vue">&lt;template&gt;
  &lt;div class=&quot;d-flex w-100 align-items-top&quot;&gt;
    &lt;div class=&quot;audio-player mr-2&quot;&gt;
      &lt;audio :src=&quot;src&quot; ref=&quot;audio&quot; /&gt;
      &lt;i v-if=&quot;state === &#39;playing&#39;&quot; class=&quot;far fa-pause-circle fa-2x&quot; @click=&quot;pause&quot;&gt;&lt;/i&gt;
      &lt;i v-if=&quot;state != &#39;playing&#39;&quot; class=&quot;far fa-play-circle fa-2x&quot; @click=&quot;play&quot;&gt;&lt;/i&gt;
    &lt;/div&gt;
    &lt;div class=&quot;w-100&quot;&gt;
      &lt;span class=&quot;float-right text-muted small&quot;&gt;&#123;&#123; currentTime &#125;&#125; / &#123;&#123; mediaDuration &#125;&#125;&lt;/span&gt;
      &lt;span class=&quot;small&quot;&gt;点击后开始播放&lt;/span&gt;
      &lt;div class=&quot;progress&quot;&gt;
        &lt;div class=&quot;progress-bar bg-primary&quot; style=&quot;transition-duration: 0.2s; transition-timing-function: linear;&quot; role=&quot;progressbar&quot; :style=&quot;`width: $&#123;currentPercentage&#125;`&quot;&gt;&lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
import numbro from &#39;numbro&#39;

export default &#123;
  props: [ &#39;src&#39; ],
  data() &#123;
    return &#123;
      currentTime: 0,
      mediaDuration: 0,
      state: &#39;stopped&#39;
    &#125;
  &#125;,
  computed: &#123;
    currentPercentage() &#123;
      if (this.mediaDuration === 0) &#123;
        return numbro(this.mediaDuration).format(&#123; output: &#39;percent&#39;, mantissa: 0 &#125;)
      &#125; else &#123;
        return numbro(this.currentTime / this.mediaDuration ).format(&#123; output: &#39;percent&#39;, mantissa: 0 &#125;)
      &#125;
    &#125;
  &#125;
&#125;
&lt;/script&gt;
</code></pre>
<p>Step1: 获取duration</p>
<p>在audio上添加事件监听@canplay，在methods中定义对应的处理函数onCanplay。</p>
<pre><code class="vue">&lt;audio :src=&quot;src&quot; ref=&quot;audio&quot; @canplay=&quot;onCanplay&quot; /&gt;

.....

    onCanplay(event) &#123;
      const audio = event.target
      this.mediaDuration = parseInt(audio.duration)
    &#125;
</code></pre>
<p>Step2: 获取currentTime</p>
<p>在audio上添加事件监听@timeupdate，在methods中定义对应的处理函数onTimeupdate. 这里调用的stop函数，会在下一步定义。</p>
<pre><code class="vue">&lt;audio :src=&quot;src&quot; @canplay=&quot;onCanplay&quot; @timeupdate=&quot;onTimeupdate&quot; ref=&quot;audio&quot; /&gt;
.......
    onTimeupdate(event) &#123;
      const audio = event.target
      if (audio.currentTime &gt;= this.mediaDuration) &#123;
        this.currentTime = this.mediaDuration
        this.stop()
      &#125; else &#123;
        this.currentTime = audio.currentTime
      &#125;
    &#125;
</code></pre>
<p>Step3: 在methods中，定义play, pause, stop函数，用以处理audio的状态。</p>
<pre><code class="javascript">    play() &#123;
      const audio = this.$refs.audio
      if (this.state === &#39;stopped&#39;) &#123;
        audio.currentTime = 0
      &#125;
      if (audio.paused) &#123;
        audio.play()
      &#125;
      this.state = &#39;playing&#39;
    &#125;,
    pause() &#123;
      const audio = this.$refs.audio
      if (!audio.paused) &#123;
        audio.pause()
      &#125;
      this.state = &#39;paused&#39;
    &#125;,

    stop() &#123;
      const audio = this.$refs.audio
      if (!audio.paused) &#123;
        audio.pause()
      &#125;
      this.state = &#39;stopped&#39;
    &#125;
</code></pre>
<p>Step4: 定义numberToStardardMinuteSecond函数，将currentTime，duration转化为时间。</p>
<p>引入numbro.</p>
<pre><code class="shell">yarn add numbro
</code></pre>
<p>在methods中定义numberToStardardMinuteSecond：</p>
<pre><code class="javascript">    numberToStardardMinuteSecond(num) &#123;
      const number = parseInt(num)
      const time = numbro(number).format(&#123; output: &#39;time&#39; &#125;)

      if (time.substr(0, 1) === &#39;0&#39;) &#123;
        return time.substr(2, time.length - 2)
      &#125; else &#123;
        return time
      &#125;
    &#125;
</code></pre>
<p>Step5: 在进度条上监听click事件，在methods中定义seek函数来处理click事件。</p>
<pre><code class="vue">&lt;div class=&quot;progress&quot; @click=&quot;seek&quot;&gt;
  &lt;div class=&quot;progress-bar bg-primary&quot; style=&quot;transition-duration: 0.2s; transition-timing-function: linear;&quot; role=&quot;progressbar&quot; :style=&quot;`width: $&#123;currentPercentage&#125;`&quot;&gt;&lt;/div&gt;
&lt;/div&gt;

......

    seek(event) &#123;
      const $this = $(event.target)

      const widthclicked = event.pageX - $this.offset().left
      const totalWidth = $this.width()

      this.$refs.audio.currentTime = widthclicked / totalWidth * this.mediaDuration
    &#125;
</code></pre>
<p>为了使progress可以点击，需要在style中给progress设置pointer-events。</p>
<pre><code class="css">.progress &#123;
  pointer-events: auto;
&#125;
</code></pre>
<p>Step6: 使用eventbus进行组件间的通信，实现一次只播放一个视频。</p>
<p>在audio play之前，$emit一个事件beforeplay， 同时将audio作为参数传出去。</p>
<p>修改play函数，添加事件派发：</p>
<pre><code class="javascript">    play() &#123;
      const audio = this.$refs.audio
      if (this.state === &#39;stopped&#39;) &#123;
        audio.currentTime = 0
      &#125;
      if (audio.paused) &#123;
        this.$nuxt.$emit(&#39;beforeplay&#39;, audio)
        audio.play()
      &#125;
      this.state = &#39;playing&#39;
    &#125;
</code></pre>
<p>任何其他的组件都可以监听这个beforeplay事件，当然也包括AudioPlayer组件。</p>
<p>在AudioPlayer组件添加对beforeplay的监听：</p>
<pre><code class="javascript">  created() &#123;
    this.$nuxt.$on(&#39;beforeplay&#39;, (player) =&gt; &#123;
      if (player === this.$refs.audio) &#123;
        return
      &#125;
      if (this.state === &#39;playing&#39;) &#123;
        this.pause()
      &#125;
    &#125;)
  &#125;
</code></pre>
<p>这里判断传过来的参数，如果是自身emit了这个事件，就跳过，如果是其他audio，同时自身还在播放，则自身停止播放。</p>
<p>OK，大功告成。</p>
<p>最终的完整代码：</p>
<pre><code class="vue">&lt;template&gt;
  &lt;div class=&quot;d-flex w-100 align-items-top&quot;&gt;
    &lt;div class=&quot;audio-player mr-2&quot;&gt;
      &lt;audio :src=&quot;src&quot; @timeupdate=&quot;onTimeupdate&quot; @canplay=&quot;onCanplay&quot; ref=&quot;audio&quot; /&gt;
      &lt;i v-if=&quot;state === &#39;playing&#39;&quot; class=&quot;far fa-pause-circle fa-2x&quot; @click=&quot;pause&quot;&gt;&lt;/i&gt;
      &lt;i v-if=&quot;state != &#39;playing&#39;&quot; class=&quot;far fa-play-circle fa-2x&quot; @click=&quot;play&quot;&gt;&lt;/i&gt;
    &lt;/div&gt;
    &lt;div class=&quot;w-100&quot;&gt;
      &lt;span class=&quot;float-right text-muted small&quot;&gt;&#123;&#123; numberToStardardMinuteSecond(currentTime) &#125;&#125; / &#123;&#123; numberToStardardMinuteSecond(mediaDuration) &#125;&#125;&lt;/span&gt;
      &lt;span class=&quot;small&quot;&gt;点击后开始播放&lt;/span&gt;
      &lt;div class=&quot;progress&quot; @click=&quot;seek&quot;&gt;
        &lt;div class=&quot;progress-bar bg-primary&quot; style=&quot;transition-duration: 0.2s; transition-timing-function: linear;&quot; role=&quot;progressbar&quot; :style=&quot;`width: $&#123;currentPercentage&#125;`&quot;&gt;&lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
import $ from &#39;jquery&#39;
import numbro from &#39;numbro&#39;

export default &#123;
  props: [ &#39;src&#39; ],
  data() &#123;
    return &#123;
      currentTime: 0,
      mediaDuration: 0,
      state: &#39;stopped&#39;
    &#125;
  &#125;,
  created() &#123;
    this.$nuxt.$on(&#39;beforeplay&#39;, (player) =&gt; &#123;
      if (player === this.$refs.audio) &#123;
        return
      &#125;
      if (this.state === &#39;playing&#39;) &#123;
        this.pause()
      &#125;
    &#125;)
  &#125;,
  computed: &#123;
    currentPercentage() &#123;
      if (this.mediaDuration === 0) &#123;
        return numbro(this.mediaDuration).format(&#123; output: &#39;percent&#39;, mantissa: 0 &#125;)
      &#125; else &#123;
        const progress = this.currentTime / this.mediaDuration
        return numbro(progress).format(&#123; output: &#39;percent&#39;, mantissa: 0 &#125;)
      &#125;
    &#125;
  &#125;,
  methods: &#123;
    play() &#123;
      const audio = this.$refs.audio
      if (this.state === &#39;stopped&#39;) &#123;
        audio.currentTime = 0
      &#125;
      if (audio.paused) &#123;
        this.$nuxt.$emit(&#39;beforeplay&#39;, audio)
        audio.play()
      &#125;
      this.state = &#39;playing&#39;
    &#125;,

    pause() &#123;
      const audio = this.$refs.audio
      if (!audio.paused) &#123;
        audio.pause()
      &#125;
      this.state = &#39;paused&#39;
    &#125;,

    stop() &#123;
      const audio = this.$refs.audio
      if (!audio.paused) &#123;
        audio.pause()
      &#125;
      this.state = &#39;stopped&#39;
    &#125;,

    onTimeupdate(event) &#123;
      const audio = event.target
      if (audio.currentTime &gt;= this.mediaDuration) &#123;
        this.currentTime = this.mediaDuration
        this.stop()
      &#125; else &#123;
        this.currentTime = audio.currentTime
      &#125;
    &#125;,

    seek(event) &#123;
      const $this = $(event.target)

      const widthclicked = event.pageX - $this.offset().left
      const totalWidth = $this.width()

      this.$refs.audio.currentTime = widthclicked / totalWidth * this.mediaDuration
    &#125;,

    onCanplay(event) &#123;
      const audio = event.target
      this.mediaDuration = parseInt(audio.duration)
    &#125;,

    numberToStardardMinuteSecond(num) &#123;
      const number = parseInt(num)
      const time = numbro(number).format(&#123; output: &#39;time&#39; &#125;)

      if (time.substr(0, 1) === &#39;0&#39;) &#123;
        return time.substr(2, time.length - 2)
      &#125; else &#123;
        return time
      &#125;
    &#125;
  &#125;
&#125;
&lt;/script&gt;
</code></pre>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Media_events">Media events</a></p>
<p><a href="https://medium.com/@Shardik/eventbus-for-nuxt-js-components-46660ae54f2d">EventBus for Nuxt.js components</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Nuxt</tag>
      </tags>
  </entry>
  <entry>
    <title>Nuxt中自定义全选指令</title>
    <url>/posts/custom-directive-in-nuxt/</url>
    <content><![CDATA[<p>看两个例子来熟悉熟悉nuxt中如何自定义指令，一个简单的focus指令，一个是比较常用的全选功能。</p>
<span id="more"></span>

<h4 id="一个简单的focus指令"><a href="#一个简单的focus指令" class="headerlink" title="一个简单的focus指令"></a>一个简单的focus指令</h4><p>在plugins文件夹下，新建文件<code>directives.js</code>，放入如下内容：</p>
<pre><code class="js">// focus指令的定义参考vuejs官方文档
import Vue from &#39;vue&#39;
Vue.directive(&#39;focus&#39;, &#123;
  inserted: function (el) &#123;
    el.focus()
  &#125;
&#125;)
</code></pre>
<p>修改<code>nuxt.config.js</code>文件，添加自定义指令声明：</p>
<pre><code class="js">  plugins: [
    &#39;~/plugins/directives&#39;
  ],
</code></pre>
<p>重启nuxt,  好了，可以开始使用了。</p>
<p>任意页面中添加:</p>
<pre><code class="html">&lt;input v-focus&gt;
</code></pre>
<p>效果：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1g0bwp3to18j318y0isaag.jpg"></p>
<h4 id="全选实现"><a href="#全选实现" class="headerlink" title="全选实现"></a>全选实现</h4><p>先看效果：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcly1g0d5876tz7g30uo0br3yp.gif"></p>
<p>思路是给全选按钮一个class: select-all, 每个选项一个class：select-item， 最外面包一层指令: select-all-container. 这样所有相关的checkbox都在指令的el内了，这样就可以定位到对应的元素。</p>
<p>然后利用bind钩子函数，来给按钮添加change事件。</p>
<p>具体步骤基本同focus，只是<code>directives.js</code>的内容不一样，这里贴上指令的定义部分和示例的HTML代码：</p>
<pre><code class="js">// plugins/directives.js
import Vue from &#39;vue&#39;
import $ from &#39;jquery&#39;

Vue.directive(&#39;select-all-container&#39;, &#123;
  bind: function (el) &#123;
    $(el).on(&#39;change&#39;, &#39;.select-item&#39;, function() &#123;
      const $items = $(el).find(&#39;.select-item&#39;)
      const allChecked = $items.length != 0 &amp;&amp; $items.not(&#39;:checked&#39;).length == 0
      $(el).find(&#39;.select-all&#39;).prop(&#39;checked&#39;, allChecked)
    &#125;)

    $(el).on(&#39;change&#39;, &#39;.select-all&#39;, function() &#123;
      $(el).find(&#39;.select-item&#39;).prop(&#39;checked&#39;, this.checked)
    &#125;)
  &#125;
&#125;)
</code></pre>
<p>调用bind钩子函数，给全选及单个子选项添加change事件。</p>
<p>HTML示例部分：</p>
<pre><code class="html">&lt;template&gt;
  &lt;div v-select-all-container&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; class=&quot;select-all&quot;&gt; 全选
    &lt;/label&gt;
    &lt;ul class=&quot;list-unstyled ml-4&quot;&gt;
      &lt;li v-for=&quot;student in students&quot; :key=&quot;student.id&quot;&gt;
        &lt;label&gt;
          &lt;input type=&quot;checkbox&quot; :value=&quot;student.id&quot; class=&quot;select-item&quot;&gt;
          &#123;&#123; student.name &#125;&#125;
        &lt;/label&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
  export default &#123;
      data() &#123;
          return &#123;
              students: [&#123; &#39;id&#39;: 1, &#39;name&#39;: &quot;张三&quot; &#125;,
                         &#123; &#39;id&#39;: 2, &#39;name&#39;: &quot;李四&quot; &#125;,
                         &#123; &#39;id&#39;: 3, &#39;name&#39;: &quot;王五&quot; &#125;,
                         &#123; &#39;id&#39;: 4, &#39;name&#39;: &quot;赵麻子&quot; &#125;]
          &#125;
      &#125;  
  &#125;    
&lt;/script&gt;    
</code></pre>
<p>好，大功告成。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://github.com/nuxt/nuxt.js/issues/3127">Where do custom directives belong?</a></p>
<p><a href="https://vuejs.org/v2/guide/custom-directive.html">custom-directive</a></p>
<p><a href="https://segmentfault.com/a/1190000006811318">用Vue实现全选指令</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Nuxt</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在ruby中的定制你的exception？</title>
    <url>/posts/custom-exceptions-in-ruby/</url>
    <content><![CDATA[<p>定制你的exception。</p>
<span id="more"></span>

<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>在ruby中抛出异常时，除了输出程序本身的exception之外，你可能还希望它输出一些其他信息，例如指出是哪个文件，对应的id是什么等，以便后期查找。</p>
<p>这时，可以通过定制ruby的exception来解决。</p>
<h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><p><strong>看个场景：</strong></p>
<p>以接口测试的一个情况为例，说明一下怎么玩。</p>
<p>用户A在做接口测试时，使用restclient的get, put, post, delete发出请求，出错，这时，用户A除了希望获取到rest client本身的Exception外，还希望可以输出reponse.headers中的traceid， 类似这样：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1flr4wg5vwhj30pp015gll.jpg"></p>
<p>那么如何将traceid加入到exception的message内容中去呢？</p>
<p><strong>重新定义一个class，继承自ruby的StandardError， 将需要输出的信息作为变量传递给该class即可。</strong></p>
<p>具体这么来：</p>
<p>新建一个class ： MyError</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1flr4v3whjkj30kp0423yq.jpg"></p>
<p>在使用restclient时，raise 异常即可。具体代码类似这样👇：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1flr4ju0i95j30k305f0tb.jpg"></p>
<p>简单说明一下：</p>
<p>我们去获取网站example.com首页的内容，用rescue来捕捉异常，并将restclient的异常信息<code>e. message</code> 和<code>e.response.headers[:traceid]</code>合并起来作为参数传递，生成MyError的一个实例 <code>my_error</code> ，并针对response的code做判断，如果code不在200～206， 则抛出<code>my_error</code>.</p>
<p>这里，其实是将标准的出错信息加了个定制的尾巴，父对象StandardError接受到新的message，在出错时抛出。</p>
<p>OK啦。</p>
<p>很简单是不是？得空可以试试定制化你的exceptions：P</p>
<h4 id="The-end"><a href="#The-end" class="headerlink" title="The end"></a>The end</h4><p>参考：</p>
<p><a href="http://blog.honeybadger.io/ruby-custom-exceptions/">Custom exceptions in Ruby</a></p>
<p><a href="http://blog.honeybadger.io/ruby-exception-vs-standarderror-whats-the-difference/">Ruby’s Exception vs StandardError: What’s the difference?</a>Â</p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>配置iTerm2</title>
    <url>/posts/custom-iterm2/</url>
    <content><![CDATA[<p>配置好iTerm2，才能更开心的coding😄。</p>
<span id="more"></span>

<h4 id="配置后的效果"><a href="#配置后的效果" class="headerlink" title="配置后的效果"></a>配置后的效果</h4><p>按照之前课程里的指导，配置了下iTerm2，最终的效果长这样：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1ft3lwlla7oj317u0aejup.jpg"></p>
<p>稍稍整理了下参考的内容，简化了一些步骤，5步完成配置。</p>
<h4 id="将bash改为zsh"><a href="#将bash改为zsh" class="headerlink" title="将bash改为zsh"></a>将bash改为zsh</h4><p>打开安装好的iTerm, 终端输入：</p>
<pre><code>chsh -s /bin/zsh
</code></pre>
<h4 id="安装-oh-my-zsh"><a href="#安装-oh-my-zsh" class="headerlink" title="安装 oh-my-zsh"></a>安装 oh-my-zsh</h4><p>终端继续输入：</p>
<pre><code>cd ~/
git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh
cp ~/.zshrc ~/.zshrc.orig
cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc
</code></pre>
<h4 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h4><ul>
<li><p>编辑.zshrc文件，将主题修改为agnoster：</p>
<p>终端输入：</p>
<pre><code>vi .zshrc
</code></pre>
<p>将 <code>ZSH_THEME=&quot;robbyrussell</code> 修改为：<code>ZSH_THEME=&quot;agnoster&quot;</code></p>
<p>保存退出。</p>
</li>
<li><p>修改agnoster主题的源代码</p>
<p>终端输入：</p>
<pre><code>vi  ~/.oh-my-zsh/themes/agnoster.zsh-theme
</code></pre>
<p>在打开的agnoster.zsh-theme文件中，把内容替换成：</p>
<p><a href="https://gist.githubusercontent.com/agnoster/3712874/raw/c3107c06c04fb42b0ca27b0a81b15854819969c6/agnoster.zsh-theme%E4%B8%AD%E7%9A%84%E5%86%85%E5%AE%B9%E3%80%82">https://gist.githubusercontent.com/agnoster/3712874/raw/c3107c06c04fb42b0ca27b0a81b15854819969c6/agnoster.zsh-theme中的内容。</a></p>
<p>保存退出。</p>
</li>
</ul>
<h4 id="替换字体"><a href="#替换字体" class="headerlink" title="替换字体"></a>替换字体</h4><ul>
<li><p>安装字体</p>
<p>去该<a href="https://gist.github.com/qrush/1595572">网站</a>下载字体：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1ft3mgsvi3aj31kw09yjtg.jpg"></p>
</li>
</ul>
<p>  点击<strong>download ZIP</strong>下载后，解压，会看到有三个字体文件，双击安装。</p>
<p>  <img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1ft3mhsvn7tj30oa05mwf2.jpg"></p>
<ul>
<li><p>替换iTerm字体</p>
<p>打开iTerm的Preferences，修改Text：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1ft3mkw6lh4j31eq118tgp.jpg"></p>
</li>
</ul>
<h4 id="替换布景"><a href="#替换布景" class="headerlink" title="替换布景"></a>替换布景</h4><p>下载<a href="http://ethanschoonover.com/solarized/files/solarized.zip">solarized</a>，下载后，解压。</p>
<p>打开iTerm的Preferences，修改Colors，导入solarized：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1ft3mqmocnyj31eq11swm1.jpg"></p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1ft3ms087whj31kw19hth8.jpg"></p>
<p>导入后，点击Color Presets， 选择Solarized Dark即可。</p>
<p> command＋q 退出 iTerm ， 重新打开， OK！</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="http://docs.qzy.camp/docs/iterm2">配置iTerm2</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>rails routes中使用自定义的params</title>
    <url>/posts/custom-params-in-rails-routes/</url>
    <content><![CDATA[<p>写接口的时候，遇到的一个问题。</p>
<span id="more"></span>

<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>通常情况下，通过ID来查找instance，类似这样：</p>
<pre><code class="ruby">resources :books do
  get :publish_info, on: :member
end
</code></pre>
<p>想要查找某本书详细的出版信息时，URL长这样：</p>
<pre><code class="ruby">/books/&#123;book_id&#125;/publish_info
</code></pre>
<p>假定现在要求传递的是商品的序列号ISBN，而不是book.id，怎么写？</p>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>在rails的routes部分有介绍，类似这样：</p>
<pre><code class="ruby">get &#39;books/*section/:title&#39;, to: &#39;books#show&#39;

get &#39;photos/:id&#39;, to: &#39;photos#show&#39;, id: /[A-Z]\d&#123;5&#125;/
</code></pre>
<p>可以用其他字段来代替id，且可以给字段添加上正则校验。</p>
<p>比如上面的ISBN，可以这么写：</p>
<pre><code class="ruby">resources :books, params: :isbn do
  get :publish_info, on: :member
end
</code></pre>
<p>同时参考<a href="http://regexlib.com/">RegExLib.com</a>, ISBN 10 or 13 对应的正则表达式是<code>^(97(8|9))?\d&#123;9&#125;(\d|X)$</code> ，故可以添加上正则校验：</p>
<pre><code class="ruby">resources :books, params: :isbn, isbn: %r&#123;^(97(8|9))?\d&#123;9&#125;(\d|X)$&#125; do
  get :publish_info, on: :member
end
</code></pre>
<p>OK。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://edgeguides.rubyonrails.org/routing.html">Rails Routing from the Outside In</a></p>
<p> <a href="https://robots.thoughtbot.com/rails-patch-change-the-name-of-the-id-parameter-in">Rails Patch: Change the Name of the :id Parameter in Routing Resources</a></p>
<p><a href="https://github.com/rails/rails/issues/16058">Slash usage in to_param results in escaped character and no route match with 4.1.2 upgrade</a></p>
<p><a href="http://regexlib.com/">RegExLib.com</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
      </tags>
  </entry>
  <entry>
    <title>selenium webdriver中有关隐藏元素的处理</title>
    <url>/posts/deal-with-hidden-element-selenium/</url>
    <content><![CDATA[<p>太阳底下，所有隐藏的都能找出来。</p>
<span id="more"></span>

<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>在某些场景下，UI界面需要隐藏某些元素，这些元素对用户来说不可见，但是依然存在HTML中，当然，对用户不可见的元素，对于selenium也是不可见的，因为selenium基本就是在模拟着用户的页面行为。</p>
<p>被隐藏的元素，会带有类似如下的CSS值：</p>
<pre><code>style=”Display:none;&quot;
style=&quot;visibility:hidden;&quot;
type=”hidden”
……
</code></pre>
<p>针对这种情况，解决的思路有两个：</p>
<ul>
<li><strong>使用Selenium WebDriver 中driver的execute_script method直接对元素进行操作，比如click</strong></li>
<li><strong>使用selenium WebDriver 中driver的execute_script method修改元素的属性，让它可见，然后再进行操作</strong></li>
</ul>
<p>第二种显得有点绕弯了，而且第二种在某些情况下并不适用，比如：</p>
<p>看这段HTML代码：</p>
<pre><code class="Html">&lt;div class=&quot;ant-time-picker-panel-select&quot;&gt;
  &lt;ul&gt;
    &lt;li&gt;09&lt;/li&gt;
    &lt;li&gt;10&lt;/li&gt;
    &lt;li&gt;11&lt;/li&gt;
    &lt;li&gt;12&lt;/li&gt;
    &lt;li&gt;13&lt;/li&gt;
    &lt;li&gt;14&lt;/li&gt;
    &lt;li&gt;15&lt;/li&gt;
    &lt;li&gt;16&lt;/li&gt;
    &lt;li class=&quot;ant-time-picker-panel-select-option-selected&quot;&gt;17&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</code></pre>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fpgmneyklij30so08gdh8.jpg"></p>
<p>这里其实并没有给元素添加一些不可见的CSS设置，即使你给13对应的li tag添加<code>style=&quot;visibility:visible;&quot;</code> 也没有效果，依然是不可见。</p>
<p>通常的用户行为是将光标放在17的位置，然后鼠标滑动到最上方，让所有选项可见，然后再选择，为了不让问题过于复杂，针对隐藏元素，建议直接采用第一种解决方法。</p>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>直接以上面的问题为例，假定我们需要选择13，先定位到13，采用cssSelector方式【戳这里了解<a href="using-chrome-console-to-evaluate-and-validate-xpath-and-cssselector/">如何快速获取xpath和cssSelector</a>】：</p>
<pre><code class="Ruby">element = driver.find_element(:css, &quot;.ant-time-picker-panel-select &gt; ul &gt; li:nth-child(5)&quot;)
</code></pre>
<p>然后调用execute_script：</p>
<pre><code class="Ruby">driver.execute_script(&quot;arguments[0].click();&quot;, element )
</code></pre>
<p>完成。</p>
<p>这里如果选定的值是一个变量呢？可以直接封装起来：</p>
<pre><code class="Ruby">def select_hour(driver, hour)
  hour_list = driver.find_element(:css, &quot;.ant-time-picker-panel-select &gt; ul &gt; li&quot;)
  target = hour_list.select &#123;|x| x.text == hour &#125;
  driver.execute_script(&quot;arguments[0].click();&quot;, target.first ) if target != []
end
</code></pre>
<p>OK，大功告成。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p> <a href="https://seleniumwithjavapython.wordpress.com/selenium-with-python/intermediate-topics/playing-with-javascript-and-javascript-executor/hidden-elements-in-javascript/">Hidden Elements In HTML Page</a></p>
<p><a href="http://www.rubydoc.info/gems/selenium-webdriver/0.0.28/Selenium/WebDriver/Driver">docs for Selenium::WebDriver::Driver</a></p>
<p>PS. 还有一些麻烦的定位，比如从日期选择器中选定特定日期，可以参考<a href="https://www.guru99.com/handling-date-time-picker-using-selenium.html">How to Select Date from DatePicker in Selenium Webdriver</a>，不过日期选择这种还是要具体问题具体分析。</p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Selenium</tag>
      </tags>
  </entry>
  <entry>
    <title>RestClient：URL中特殊字符的处理</title>
    <url>/posts/deal-with-special-character-when-using-restclient-url/</url>
    <content><![CDATA[<p>URL中通常会遇到特殊字符的处理。</p>
<span id="more"></span>

<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>URL某一个参数中含有中文 或者”#$ ^ &amp; * + =”等特殊符号。</p>
<p>如何处理才能正确传递参数？</p>
<h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><p><strong>处理之前，先来点小知识。</strong></p>
<p>URL中一些特殊字符及对应的Url编码如下：</p>
<table>
<thead>
<tr>
<th>Character</th>
<th>From UTF-8</th>
</tr>
</thead>
<tbody><tr>
<td>space</td>
<td>%20</td>
</tr>
<tr>
<td>!</td>
<td>%21</td>
</tr>
<tr>
<td>“</td>
<td>%22</td>
</tr>
<tr>
<td>#</td>
<td>%23</td>
</tr>
<tr>
<td>$</td>
<td>%24</td>
</tr>
<tr>
<td>%</td>
<td>%25</td>
</tr>
<tr>
<td>&amp;</td>
<td>%26</td>
</tr>
<tr>
<td>‘</td>
<td>%27</td>
</tr>
<tr>
<td>(</td>
<td>%28</td>
</tr>
<tr>
<td>)</td>
<td>%29</td>
</tr>
<tr>
<td>*</td>
<td>%2A</td>
</tr>
<tr>
<td>+</td>
<td>%2B</td>
</tr>
<tr>
<td>,</td>
<td>%2C</td>
</tr>
<tr>
<td>-</td>
<td>%2D</td>
</tr>
<tr>
<td>.</td>
<td>%2E</td>
</tr>
<tr>
<td>/</td>
<td>%2F</td>
</tr>
</tbody></table>
<p><strong>小案例：从一个中文字符的处理开始</strong></p>
<p>restclient中，如果URL含有中文等非英文的特殊字符， 只需要使用<strong>URI::encode</strong>即可。比如下面这个例子：</p>
<p>网址是 <a href="http://example.com,/">http://example.com，</a> 用户输入关键字“伊丽莎白好乖滴 ”查询：</p>
<pre><code>url = &#39;http://example.com/search?keyword=伊丽莎白好乖滴&#39;
RestClient.get(url)
</code></pre>
<p>这里，使用restclient发出get请求，会出现URI::InvalidURIError 的错误.</p>
<p>正确的打开方式可以像这样：</p>
<pre><code>require &#39;addressable/uri&#39;
url = &#39;http://example.com/search?keyword=伊丽莎白好乖滴&#39;
RestClient.get(URI::encode(url))
</code></pre>
<p>这样，url中的中文字符会转化为下面这样的ascii码。</p>
<pre><code>http://example.com/search?keyword=%E4%BC%8A%E4%B8%BD%E8%8E%8E%E7%99%BD%E5%A5%BD%E4%B9%96%E6%BB%B4
</code></pre>
<p><strong>特别加餐：传递给参数的值中，含有&amp;等特殊字符</strong></p>
<p>需要特别提一句的是，如果你的URL是这样的：</p>
<pre><code>url = &#39;http://example.com/search?keyword=XXX&amp;city=shanghai&amp;type=food&#39;
</code></pre>
<p>而你希望将<code>&amp;s</code>传递给keyword， 使用URI::encode时，会是这样：</p>
<pre><code>http://example.com/search?keyword=&amp;s&amp;city=shanghai&amp;type=food
</code></pre>
<p>这里，因为URL中传递参数时，是用”&amp;”符号隔开的，所以rest client识别的时候，会认为keyword这个参数并没有赋值， 而<code>&amp;s</code>中，s表示另一个参数, 且没有赋值，这样，发出请求后会报错，这种情况如何解决？做这样的处理:</p>
<pre><code>URI::encode(url).sub(&quot;&amp;&quot;, &quot;%26&quot;)
</code></pre>
<p>encode后，将第一个&amp;, 也就是<code>&amp;s</code>转变为”%26s”, 再传递给RestClient。</p>
<p>这里你可能想要问，为什么不直接传递”%26s”？</p>
<p>问得好！如果直接将”%26s”传递给keyword，经过URI::encode之后，keyword接收到的就会是：“%2526s”， why？Cause it will encode “%” to “%25”。</p>
<p>当然，不只是rest client，其他需要针对URL进行encoding的，也可以进行类似的处理。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://github.com/rest-client/rest-client/issues/476">URL with square brackets: URI::InvalidURIError</a></p>
<p><a href="https://www.w3schools.com/tags/ref_urlencode.asp">HTML URL Encoding Reference</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>RestClient</tag>
      </tags>
  </entry>
  <entry>
    <title>Chrome开发者模式下断点调试JS</title>
    <url>/posts/debug-javascript-with-chrome-source/</url>
    <content><![CDATA[<p>JS debugging 是个痛点。</p>
<span id="more"></span>

<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>之前老大就教过如何在chrome的开发者模式下，设置断点，调试JS，第一次知道chrome还有这功能，觉得新鲜神奇。可惜后面偷懒没有及时记录下来，这次又遇到JS调试，脑子里一堆问号：上次是咋整的？Google了下，找到了一篇文章<a href="http://www.cnblogs.com/mqfblog/p/5397282.html">JS断点调试心得</a>，文章写得很详细，这里我就简单粗暴记录下操作要点，随时备忘。</p>
<h4 id="快速设置断点"><a href="#快速设置断点" class="headerlink" title="快速设置断点"></a>快速设置断点</h4><p>以bootstrap的button页面为例：</p>
<p>打开chrome的开发者模式：【右键，点击inspect】</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNbRwly1fxuza231yij31g90u0dxc.jpg"></p>
<p>选择 sources， 找到你要设置断点的文件，在你需要debug的地方，点击设置断点。</p>
<p>这里有一个小技巧，对于压缩后的JS文件，点击下面的一个<code>&#123;&#125;</code> 按钮：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNbRwly1fxuzghrj41j322w0s2jzo.jpg"></p>
<p>会将代码格式化，非常有用。</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNbRwly1fxv13o1u7qj31xy0s4qgd.jpg"></p>
<h4 id="逐句调试"><a href="#逐句调试" class="headerlink" title="逐句调试"></a>逐句调试</h4><p>有两个频繁使用的调试按钮，如图所示，一个点击去往下一个断点，另一个点击会前往下一条语句。</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNbRwly1fxv0dv6ax9j31yy0tmdpl.jpg"></p>
<h4 id="巧用console"><a href="#巧用console" class="headerlink" title="巧用console"></a>巧用console</h4><p>使用快捷键ESC，打开console，可以在console中输入变量，比如e，可以看到变量的具体内容。或者直接把光标放在需要查看的变量上，也可以看到变量的具体内容。</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNbRwly1fxv11pmrcoj328o0ru7g2.jpg"></p>
<p>注意这里的console与source旁边那个console不同。在source旁边的console中输入变量，会发现什么也不会发生。</p>
<h4 id="条件断点"><a href="#条件断点" class="headerlink" title="条件断点"></a>条件断点</h4><p>可以给断点添加条件，添加条件后的断点，颜色会变成橙色。</p>
<p>比如在下面这个循环体中，需要debug 某一次循环，就可以设置条件断点 n==2，设置后，刷新页面，在console中输入n，会车，就会发现此时 n 为2，然后就可以在n = 2 时，开始你的debug之旅。</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNbRwly1fxv0dy88kcg30vt0k4n5m.gif"></p>
<h4 id="取消断点"><a href="#取消断点" class="headerlink" title="取消断点"></a>取消断点</h4><p>临时禁用按钮：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNbRwly1fxv0qbl0uqj31na0j8wkd.jpg"></p>
<p>如果要取消或者移除所有断点：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNbRwly1fxv102tzcrj31ra0jaq9i.jpg"></p>
<p>注意，需要在面板的Breakpoints下点击右键，才会弹出上图所示的功能列表。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>推荐：<a href="http://www.cnblogs.com/mqfblog/p/5397282.html">JS断点调试心得</a></p>
<p>如果想要详细了解面板知识，推荐这篇：<a href="https://zhuanlan.zhihu.com/p/24770877">用Chrome调试你的Javascript</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>Rails中merge与deep_merge的差异</title>
    <url>/posts/deep-merge-vs-merge-in-rails/</url>
    <content><![CDATA[<p>Rails 小白的填坑之路。</p>
<span id="more"></span>

<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>前几天被老大问到merge与deep_merge的区别，一时语塞，试了几个例子，大致get到了两者的区别，但是当时没有记录下来，这里做一下笔记，加深印象。</p>
<h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><ul>
<li><p>merge用法</p>
<p>在<a href="http://api.rubyonrails.org/">docs</a>中搜索merge，可以看到有10个名为merge的method，这里我们要对比deep_merge，所以选择继承自Hash的ActiveSupport::HashWithIndifferentAccess下的method merge。</p>
<blockquote>
<p>选自ActiveSupport::HashWithdifferentAccess</p>
<p><strong>merge</strong>(hash, &amp;block)</p>
<p>This method has the same semantics of <code>update</code>, except it does not modify the receiver but rather returns a new hash with indifferent access with the result of the merge.</p>
</blockquote>
<p>此处的merge不会修改当前对象，而是将合并后的结果以一个新的hash表格式返回。</p>
<p>其实这里的merge就等同于ruby中的merge， 对于两个hash，针对共有的key，默认取后一个hash的key对应的value。</p>
<p>看个例子：</p>
<pre><code class="Ruby">h1 = &#123; &quot;a&quot; =&gt; 100, &quot;b&quot; =&gt; 200 &#125;
h2 = &#123; &quot;b&quot; =&gt; 254, &quot;c&quot; =&gt; 300 &#125;
h1.merge(h2) #=&gt; &#123;&quot;a&quot;=&gt;100, &quot;b&quot;=&gt;254, &quot;c&quot;=&gt;300&#125;
</code></pre>
<p>你可以通过block来指定merge的规则：</p>
<pre><code class="Ruby">h1 = &#123; &quot;a&quot; =&gt; 100, &quot;b&quot; =&gt; 200 &#125;
h2 = &#123; &quot;b&quot; =&gt; 254, &quot;c&quot; =&gt; 300 &#125;
h1.merge(h2) &#123;|k,v1,v2| v1+v2&#125; #=&gt; &#123;&quot;a&quot;=&gt;100, &quot;b&quot;=&gt;454, &quot;c&quot;=&gt;300&#125;
h1.merge(h2) &#123;|k,v1,v2| v1&#125; #=&gt; &#123; &quot;a&quot; =&gt; 100, &quot;b&quot; =&gt; 200 &#125;
</code></pre>
</li>
<li><p>deep_merge用法</p>
<p>官方给到的解释和例子是这样的：</p>
<blockquote>
<p>deep_merge(other_hash, &amp;block)</p>
<p>Returns a new hash with <code>self</code> and <code>other_hash</code> merged recursively.</p>
</blockquote>
<p>返回一个新的hash， 将当前对象和其他的hash进行<strong>递归merge</strong>。</p>
<p>还是以上面的例子为例：</p>
<pre><code class="Ruby">h1 = &#123; &quot;a&quot; =&gt; 100, &quot;b&quot; =&gt; 200 &#125;
h2 = &#123; &quot;b&quot; =&gt; 254, &quot;c&quot; =&gt; 300 &#125;
h1.deep_merge(h2) #=&gt; &#123;&quot;a&quot;=&gt;100, &quot;b&quot;=&gt;254, &quot;c&quot;=&gt;300&#125;
</code></pre>
<p>同样，你也可以通过block来指定deep_merge的规则：</p>
<pre><code class="Ruby">h1 = &#123; &quot;a&quot; =&gt; 100, &quot;b&quot; =&gt; 200 &#125;
h2 = &#123; &quot;b&quot; =&gt; 254, &quot;c&quot; =&gt; 300 &#125;
h1.deep_merge(h2) &#123;|k,v1,v2| v1+v2&#125; #=&gt; &#123;&quot;a&quot;=&gt;100, &quot;b&quot;=&gt;454, &quot;c&quot;=&gt;300&#125;
h1.deep_merge(h2) &#123;|k,v1,v2| v1&#125; #=&gt; &#123; &quot;a&quot; =&gt; 100, &quot;b&quot; =&gt; 200 &#125;
</code></pre>
</li>
<li><p>二者差异</p>
<p>从上面的例子看，似乎两者没有什么区别。</p>
<p>在非嵌套的hash表中，merge能做的，deep_merge也能做。</p>
<p>但是针对nested hash，两者就不一样了。</p>
<p>看个例子：</p>
<pre><code class="Ruby">h1 = &#123; a: true, b: &#123; c: [1, 2, 3], x: [1, 2, 3] &#125; &#125;
h2 = &#123; a: false, b: &#123; x: [3, 4, 5] &#125; &#125;
h1.merge(h2) #=&gt; &#123;:a=&gt;false, :b=&gt;&#123;:x=&gt;[3, 4, 5]&#125;&#125;
h1.deep_merge(h2) #=&gt; &#123;:a=&gt;false, :b=&gt;&#123;:c=&gt;[1, 2, 3], :x=&gt;[3, 4, 5]&#125;&#125;
</code></pre>
<p>使用merge时，对于相同的key, 它不会去检查对应的value是不是一个hash，就是简单按照merge的规则返回value。</p>
<p>使用deep_merge，会检查同样的key，对应的value是不是都是hash，如果是, 则对这两个hash再次进行deep_merge，也就是返回{ c: [1, 2, 3], x: [1, 2, 3]  }.deep_merge{ x: [3,  4,  5] }的结果，也就是概念中提到的递归merge。</p>
<p>再看个例子：</p>
<pre><code class="ruby">h1 = &#123; a: true, b: &#123; c: [1,2,3], x: &#123; y: 1 &#125; &#125; &#125;
h2 = &#123; a: false, b: &#123; x: &#123; y: 2, z: 1&#125; &#125; &#125;
h1.deep_merge(h2) #=&gt; &#123;:a=&gt;false, :b=&gt;&#123;:c=&gt;[1, 2, 3], :x=&gt;&#123;:y=&gt;2, :z=&gt;1&#125;&#125;&#125;
</code></pre>
<p>从上面这个例子可以看出，针对共有的key，deep_merge会一直检查对应的value是否都是hash，如果是，则继续对hash进行deep_merge，直到没有hash进行merge为止。</p>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4></li>
<li><p>针对非嵌套的hash：merge和deep_merge并没有什么差异。</p>
</li>
<li><p>针对嵌套的hash： 针对相同的key，merge不会检查，直接处理，根据merge规则返回value，deep_merge则会一直检查对应的value是否都是hash，如果是，则继续对hash进行deep_merge，直到没有hash进行merge为止。</p>
</li>
</ul>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="http://api.rubyonrails.org/">Ruby on Rails API</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
      </tags>
  </entry>
  <entry>
    <title>define a helper method like devise&#39;s current_user</title>
    <url>/posts/define-a-helper-method-like-devise-current-user/</url>
    <content><![CDATA[<p>定义一个 helper method。</p>
<span id="more"></span>

<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>在工作中遇到的一个问题：</p>
<p>navbar的item根据是否存在项目来决定是否显示，也就是写一个类似current_user的helper method <strong>current_project</strong>，要求当<strong>current_project</strong>存在时，navbar中的dropdown组件【以project为item】显示<strong>current_project</strong>的name，navbar的item则显示该project下的plans，issues等等，当current_project为nil时，则不显示project的任何信息。</p>
<p>其中，project与plan，issue存在一对多的关系：</p>
<pre><code class="Ruby">#project.rb
class Project &lt; ApplicationRecord
  has_many :plans, dependent: :destroy
  has_many :issues, dependent: :destroy
end

#plan.rb
class Plan &lt; ApplicationRecord
  belongs_to :project
end

#issue.rb
class Issue &lt; ApplicationRecord
  belongs_to :project
end
</code></pre>
<p>我最初在module ApplicationHelper中定义了一个helper method，算是勉强实现了功能，但是写的极为难看，是通过request.original_fullpath()来判断请求中是否存在project， 如果存在，则找到current_project。而且这个helper method因为定义在ApplicationHelper中，便只能在views中使用。后面老大教了个好方法，真心觉得很赞，记录下大致的解决方法。</p>
<h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><p>devise的current_user的定义，较为复杂，在它的源代码<a href="https://github.com/plataformatec/devise/blob/3722aa62961720eafa5bb5ee6c99b76c26b6be3e/lib/devise/controllers/helpers.rb#L112">define_helpers</a>中可以看到：</p>
<pre><code class="Ruby">def current_#&#123;mapping&#125;
  @current_#&#123;mapping&#125; ||= warden.authenticate(scope: :#&#123;mapping&#125;)
end
</code></pre>
<p>以我目前的水平，真心看的不是很明白，在stack overflow看到了一个比较简单的定义：</p>
<pre><code class="Ruby">#application_controller.rb
def current_user
  @current_user ||= User.find_by_id!(session[:user_id])
end
helper_method :current_user
</code></pre>
<p>参考这个，我们可以定义一下current_project:</p>
<pre><code class="Ruby">#application_controller.rb
def current_project
  @current_project ||= Project.find(params[:project_id])
end
helper_method :current_project
</code></pre>
<p>这样看着，貌似很简单就解决了，但是有一个问题，那就是所有的request中，project_id并不一定存在，这样使用<code>Project.find(params[:project_id])</code>就有可能报错，显示params中找不到project_id。</p>
<p>老大教的方法是这样的，重新定义了一个controller，然后通过继承，覆写current_project。具体如下：</p>
<p>Step1、在<code>application_controller.rb</code>定义current_project：</p>
<pre><code class="Ruby">#application_controller.rb
def current_project
  nil
end
helper_method :current_project
</code></pre>
<p>注意，这里的current_project返回的是nil值，这样所有继承自ApplicationController的Controller，其current_project默认为nil。</p>
<p>Step2、新建一个BaseProjectController, 继承自ApplicationController，重新定义current_project，覆盖掉父类的method：</p>
<pre><code class="Ruby">#base_project_controller.rb
class BaseProjectController &lt; ApplicationController
  def current_project
    @current_project ||= Project.find(params[:project_id])
  end
end
</code></pre>
<p>Step3、修改IssuesController和PlansController，让它们继承自BaseProjectController，拥有current_project方法：【以IssuesController为例，PlansController以此类推】</p>
<pre><code class="ruby">## 修改前：
class IssuesController &lt; BaseProjectController
  load_and_authorize_resource :project
  .....
end

## 修改后：
class IssuesController &lt; BaseProjectController
  before_action -&gt; &#123; @project = current_project &#125;
  authorize_resource :project
  .....
end
</code></pre>
<p>这里删除了cancancan的load_authorize，改用before_action的方式，将current_project赋给了@project。</p>
<p>对于没有继承自BaseProjectController的Controller，其current_project则为nil，不得不说，这样方式真的是漂亮。</p>
<p> OK！</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://github.com/plataformatec/devise">devise</a></p>
<p><a href="https://stackoverflow.com/questions/3992659/what-do-helper-and-helper-method-do">What do helper and helper_method do?</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
      </tags>
  </entry>
  <entry>
    <title>postman传参之array or hash</title>
    <url>/posts/deliver-array-hash-in-postman-body/</url>
    <content><![CDATA[<p>感觉好久没用postman，手生了好多，记录下今天踩的坑。</p>
<span id="more"></span>

<p>用postman发送请求时，在body中传递参数，如果传递的是Array/Hash型的参数，分简单的三种情况，分别用三个小例子说明一下：</p>
<ul>
<li><p>传递的参数是非嵌套的hash</p>
<p>在body中，输入以下内容：</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>key</th>
<th>value</th>
</tr>
</thead>
<tbody><tr>
<td>student[name]</td>
<td>Daniel</td>
</tr>
<tr>
<td>student[age]</td>
<td>20</td>
</tr>
<tr>
<td>student[gender]</td>
<td>male</td>
</tr>
<tr>
<td>发出请求的时候，对应传递的参数内容为：</td>
<td></td>
</tr>
</tbody></table>
<pre><code> &#123; &quot;student&quot;: &#123; &quot;name&quot;: &quot;Daniel&quot;, &quot;age&quot;: &quot;20&quot;, &quot;gender&quot;: &quot;male&quot; &#125; &#125;
</code></pre>
<ul>
<li>传递的参数是嵌套的hash</li>
</ul>
<p>  在body中，输入以下内容：</p>
<table>
<thead>
<tr>
<th>key</th>
<th>value</th>
</tr>
</thead>
<tbody><tr>
<td>student[name]</td>
<td>Daniel</td>
</tr>
<tr>
<td>student[age]</td>
<td>20</td>
</tr>
<tr>
<td>student[teachers][1][name]</td>
<td>David</td>
</tr>
</tbody></table>
<p>  发出请求的时候，对应传递的参数内容为：</p>
<pre><code> &#123; &quot;student&quot;: &#123; &quot;name&quot;: &quot;Daniel&quot;, &quot;age&quot;: &quot;20&quot;, &quot;teachers&quot;: &#123; &quot;1&quot;: &#123; &quot;name&quot;: &quot;David&quot; &#125;&#125;&#125;&#125;
</code></pre>
<ul>
<li><p>传递的是array</p>
<p>在body中，输入以下内容：</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>key</th>
<th>value</th>
</tr>
</thead>
<tbody><tr>
<td>student_ids[]</td>
<td>10</td>
</tr>
<tr>
<td>student_ids[]</td>
<td>11</td>
</tr>
<tr>
<td>student_ids[]</td>
<td>12</td>
</tr>
<tr>
<td>发出请求的时候，对应传递的参数内容为：</td>
<td></td>
</tr>
</tbody></table>
<pre><code> &#123; &quot;student_ids&quot;: [&quot;10&quot;, &quot;11&quot;, &quot;12&quot;] &#125;
</code></pre>
<p>  OK！下次不要再踩同样的坑了。</p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Postman</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu16.04下, 使用Nginx和Unicorn部署Rails App</title>
    <url>/posts/deploy-rails-app-with-nginx-and-unicorn-on-ubuntu/</url>
    <content><![CDATA[<p>踩坑 Nginx  + Unicorn。</p>
<span id="more"></span>

<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>之前用过Nginx  + Passengers来部署Rails 应用， 这次换Nginx  + Unicorn部署了Rails App，过程虽有些波折，但结果还是蛮赞的。【其实折腾了大半天，最后终于重新从坑里爬出来了，还多亏老大帮忙看了下……】</p>
<p>下面以一个简单的rails项目的部署为例，来感受下Nginx + Unicorn。</p>
<p>【如果你也和我一样是枚小白，补充下，这里，Unicorn是一个HTTP server，类似Passenger或者puma。由于Unicorn不能直接被用户访问，使用Nginx作为反向代理，来缓冲用户与Rails应用之间的请求与响应。】</p>
<h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><h5 id="1、准备Rails-App"><a href="#1、准备Rails-App" class="headerlink" title="1、准备Rails App"></a>1、准备Rails App</h5><ul>
<li><p>本地新建一个rails项目recipes</p>
<pre><code class="Shell">rails new recipes
cd recipes
git init
git add .
git commit -m &quot;new project recipes&quot;
# 将recipes托管到第三方代码库，这里选GitHub
git remote add origin https://github.com/XXXXX/recipes.git
git push -u origin master
rails g scaffold topic title:string description:text
rake db:migrate
git add .
git commit -m &quot;create topic model&quot;
rails s
</code></pre>
<p>修改<code>config/routes.rb</code>,把主页设定成topic的index, 添加<code>root &quot;topics#index&quot;</code>：</p>
<pre><code class="Ruby">Rails.application.routes.draw do
  resources :topics
 + root &quot;topics#index&quot;
end
</code></pre>
<p>这时，在浏览器打开<a href="http://localhost:3000/%EF%BC%8C%E7%94%BB%E9%A3%8E%E6%98%AF%E8%BF%99%E6%A0%B7%E7%9A%84%EF%BC%9A">http://localhost:3000/，画风是这样的：</a></p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcly1fnv0kthg2xj30og06874g.jpg"></p>
<pre><code class="Shell">git add .
git commit -m &quot;update routes&quot;
git push
</code></pre>
</li>
<li><p>添加gem： unicorn, foreman, dotenv-rails</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcly1fnv3oaphuhj30k50g9abf.jpg"></p>
<p>终端运行：</p>
<pre><code>bundler install
</code></pre>
<p>添加<code>config/deploy.rb</code>， 内容如下：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcly1fnv4da7cvhj30m50k040q.jpg"></p>
<p>【repo_url 换成你自己的URL】</p>
<p>根目录下添加Procfile 文件，内容如下：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcly1fnv4nzvr2mj30mw095t9v.jpg"></p>
<pre><code class="Shell">git add .
git commit -m &quot;add unicorn to project&quot;
git push
</code></pre>
<p>将所有进度push至remote， 好，我们开始部署！</p>
</li>
</ul>
<h5 id="2、安装套件"><a href="#2、安装套件" class="headerlink" title="2、安装套件"></a>2、安装套件</h5><p>这里以Ubuntu16.04为例，假定你已经添加一个免密登陆的用户deploy，我们将项目部署在home/deploy下。</p>
<ul>
<li><p>登陆服务器，更新，升级：</p>
<pre><code class="Shell">sudo apt-get update -y
sudo apt-get upgrade -y
</code></pre>
</li>
<li><p>裝套件，这些是Ruby on Rails 需要的：</p>
<pre><code class="Shell">sudo apt-get install -y build-essential git-core bison openssl libreadline6-dev curl zlib1g zlib1g-dev libssl-dev libyaml-dev libsqlite3-0 libsqlite3-dev sqlite3 autoconf libc6-dev libpcre3-dev libcurl4-nss-dev libxml2-dev libxslt-dev imagemagick nodejs libffi-dev
</code></pre>
<p>如果安装的nodejs版本低，尝试这样：</p>
<pre><code class="Shell">#nodejs v9
curl -sL https://deb.nodesource.com/setup_9.x | sudo -E bash -
sudo apt-get install -y nodejs
</code></pre>
</li>
<li><p>裝Ruby</p>
<p>检查版本：</p>
<pre><code class="shell">ruby --version
</code></pre>
<p>如果有旧的版本，比如1.8/1.9， 卸载掉:</p>
<pre><code class="Shell">sudo apt-get remove -y ruby1.8 ruby1.9
</code></pre>
<p>下载，解压，编译，安装：</p>
<pre><code class="shell">mkdir /tmp/ruby &amp;&amp; cd /tmp/ruby
wget https://cache.ruby-lang.org/pub/ruby/ruby-2.4.0.tar.gz
tar -xzvf ruby-2.4.0.tar.gz
cd ruby-2.4.0/
./configure --prefix=/usr
make
sudo make install

ruby -v

# 处理SSL问题，加入国内gems镜像
gem sources --add http://gems.ruby-china.org/ --remove https://rubygems.org/
# 如果报错：uninitialized constant Gem::RemoteFetcher::Zlib， 则执行：sudo apt-get install zlib1g-dev

gem sources -l

sudo gem install bundler --no-ri --no-rdoc --source https://gems.ruby-china.org
</code></pre>
<p>戳这里<a href="http://cache.ruby-lang.org/pub/ruby/">pub ruby</a> 查看ruby最新版本。</p>
</li>
<li><p>装 foreman gems:</p>
<pre><code class="Shell">sudo gem install rake bundler foreman --no-ri --no-rdoc
</code></pre>
</li>
<li><p>装runit：</p>
<pre><code class="Shell">sudo apt-get install runit
</code></pre>
</li>
<li><p>裝SQL：</p>
<pre><code class="Shell">sudo apt-get install mysql-common mysql-client libmysqlclient-dev mysql-server
</code></pre>
<p>执行过程中会让你配置一个数据库的 root 密码， 记下来，设定rails的数据库时会用到。</p>
<p>建新的数据库：</p>
<p>执行<code>mysql -u root -p</code> 进入console, 输入：</p>
<pre><code class="Sql">CREATE DATABASE recipes CHARACTER SET utf8mb4;
</code></pre>
<p>创建user deploy，并给user分配数据库 recipes的权限, 把$password 替换成你自己设置的密码：</p>
<pre><code class="sql">CREATE USER &#39;deploy&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;$password&#39;;
GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, INDEX, ALTER, LOCK TABLES ON `recipes`.* TO &#39;deploy&#39;@&#39;localhost&#39;;
exit
</code></pre>
<p>退出SQL的session后，尝试连接一下数据库：</p>
<pre><code class="Shell">sudo mysql -u deploy -p -D recipes
</code></pre>
<p>这时会让你输入密码，输入刚刚替换$password的密码即可。</p>
</li>
</ul>
<h5 id="3、部署项目"><a href="#3、部署项目" class="headerlink" title="3、部署项目"></a>3、部署项目</h5><ul>
<li><p>clone项目到服务器</p>
<p>deploy身份登陆，执行：</p>
<pre><code class="Shell">sudo git clone //github.com/XXXXX/recipes.git recipes
cd recipes
ls -la
</code></pre>
<p>如果recipes下面文件的owner不是deploy，执行：</p>
<pre><code class="Shell">sudo chown deploy:deploy . -R
</code></pre>
<p><strong>确保deploy对recipes下的文件拥有读写权限，不然后面部署时会失败</strong>。</p>
<p>配置文件：</p>
<pre><code class="Shell">sudo mkdir -p log tmp/pids tmp/sockets
sudo chown -R deploy log/ tmp/
sudo chmod -R u+rwX,go-w log/ tmp/
sudo chmod -R u+rwX,go-w log/
sudo chmod -R u+rwX tmp/
touch .env
touch config/unicorn.rb
</code></pre>
<p>配置.env:</p>
<pre><code class="Shell"># ==== Required configuration settings  ====

# Replace the following with the output from &quot;rake secret&quot;
APP_SECRET_TOKEN=REPLACE_ME_NOW!

############################
#      Database Setup      #
############################

DATABASE_ADAPTER=mysql2
DATABASE_ENCODING=utf8
DATABASE_RECONNECT=true
DATABASE_NAME=recipes
DATABASE_POOL=20
DATABASE_USERNAME=deploy
DATABASE_PASSWORD=&quot;your_password&quot;
#DATABASE_HOST=your-domain-here.com
#DATABASE_PORT=3306
#DATABASE_SOCKET=/tmp/mysql.sock

# MySQL only: If you are running a MySQL server &gt;=5.5.3, you should
# set DATABASE_ENCODING to utf8mb4 instead of utf8 so that the
# database can hold 4-byte UTF-8 characters like emoji.
#DATABASE_ENCODING=utf8mb4

# ==== Additional required production settings ====

# Configure Rails environment.  This should only be needed in production and may cause errors in development.
RAILS_ENV=production

# Should Rails force all requests to use SSL?
FORCE_SSL=false
# 设置SECRET_KEY_BASE，config/secrets.yml中有用到，用development的secret_key_base即可
SECRET_KEY_BASE= your_devlopment_secret_key_base
</code></pre>
<p>配置<code> config/unicorn.rb</code>：</p>
<pre><code class="Ruby">wd = File.expand_path(File.join(File.dirname(__FILE__), &#39;..&#39;))

app_path = wd

worker_processes 2
preload_app true
timeout 180
listen &quot;#&#123;wd&#125;/tmp/sockets/unicorn.socket&quot;

working_directory app_path

rails_env = ENV[&#39;RAILS_ENV&#39;] || &#39;production&#39;

# Log everything to one file
stderr_path &quot;log/unicorn.log&quot;
stdout_path &quot;log/unicorn.log&quot;

# Set master PID location
pid &quot;#&#123;wd&#125;/tmp/pids/unicorn.pid&quot;

before_fork do |server, worker|
  ActiveRecord::Base.connection.disconnect!
  old_pid = &quot;#&#123;server.config[:pid]&#125;.oldbin&quot;
  if File.exist?(old_pid) &amp;&amp; server.pid != old_pid
    begin
      Process.kill(&quot;QUIT&quot;, File.read(old_pid).to_i)
    rescue Errno::ENOENT, Errno::ESRCH
      # someone else did our job for us
    end
  end
end

after_fork do |server, worker|
  ActiveRecord::Base.establish_connection
end
</code></pre>
<p>安装gems：</p>
<pre><code class="shell">sudo bundle install --deployment --without development test
</code></pre>
<p>migrate 数据库：</p>
<pre><code class="shell">sudo bundle exec rake db:migrate RAILS_ENV=production
</code></pre>
<p>编译assets：</p>
<pre><code class="Shell">sudo bundle exec rake assets:precompile RAILS_ENV=production
</code></pre>
<p>修改Procfile：</p>
<pre><code class="shell">sudo vi Procfile
</code></pre>
<p>注释掉Procfile这两行：</p>
<pre><code>web: bundle exec rails server -p $&#123;PORT-3000&#125; -b $&#123;IP-0.0.0.0&#125;
jobs: bundle exec rails runner bin/threaded.rb
</code></pre>
<p>同时取消对Procfile这两行的注释：</p>
<pre><code># web: bundle exec unicorn -c config/unicorn.rb
# jobs: bundle exec rails runner bin/threaded.rb
</code></pre>
<p>创建Unicorn的初始脚本：</p>
<p>终端输入：</p>
<pre><code class="shell">sudo vi /etc/init.d/unicorn_recipes
</code></pre>
<p>然后在文件中放入以下内容：</p>
<pre><code class="shell">#!/bin/sh

### BEGIN INIT INFO
# Provides:          unicorn
# Required-Start:    $all
# Required-Stop:     $all
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: starts the unicorn app server
# Description:       starts unicorn using start-stop-daemon
### END INIT INFO

set -e

USAGE=&quot;Usage: $0 &lt;start|stop|restart|upgrade|rotate|force-stop&gt;&quot;

# app settings
USER=&quot;deploy&quot;
APP_NAME=&quot;recipes&quot;
APP_ROOT=&quot;/home/$USER/$APP_NAME&quot;
ENV=&quot;production&quot;

# environment settings
PATH=&quot;/home/$USER/.rbenv/shims:/home/$USER/.rbenv/bin:$PATH&quot;
CMD=&quot;cd $APP_ROOT &amp;&amp; bundle exec unicorn -c config/unicorn.rb -E $ENV -D&quot;
PID=&quot;$APP_ROOT/tmp/pids/unicorn.pid&quot;
OLD_PID=&quot;$PID.oldbin&quot;

# make sure the app exists
cd $APP_ROOT || exit 1

sig () &#123;
  test -s &quot;$PID&quot; &amp;&amp; kill -$1 `cat $PID`
&#125;

oldsig () &#123;
  test -s $OLD_PID &amp;&amp; kill -$1 `cat $OLD_PID`
&#125;

case $1 in
  start)
    sig 0 &amp;&amp; echo &gt;&amp;2 &quot;Already running&quot; &amp;&amp; exit 0
    echo &quot;Starting $APP_NAME&quot;
    su - $USER -c &quot;$CMD&quot;
    ;;
  stop)
    echo &quot;Stopping $APP_NAME&quot;
    sig QUIT &amp;&amp; exit 0
    echo &gt;&amp;2 &quot;Not running&quot;
    ;;
  force-stop)
    echo &quot;Force stopping $APP_NAME&quot;
    sig TERM &amp;&amp; exit 0
    echo &gt;&amp;2 &quot;Not running&quot;
    ;;
  restart|reload|upgrade)
    sig USR2 &amp;&amp; echo &quot;reloaded $APP_NAME&quot; &amp;&amp; exit 0
    echo &gt;&amp;2 &quot;Couldn&#39;t reload, starting &#39;$CMD&#39; instead&quot;
    $CMD
    ;;
  rotate)
    sig USR1 &amp;&amp; echo rotated logs OK &amp;&amp; exit 0
    echo &gt;&amp;2 &quot;Couldn&#39;t rotate logs&quot; &amp;&amp; exit 1
    ;;
  *)
    echo &gt;&amp;2 $USAGE
    exit 1
    ;;
esac
</code></pre>
<p>更改权限，并设置可以在boot上启动：</p>
<pre><code class="shell">sudo chmod 755 /etc/init.d/unicorn_recipes
sudo update-rc.d unicorn_recipes defaults
</code></pre>
<p>开启：</p>
<pre><code class="shell">sudo /etc/init.d/unicorn_recipes start
</code></pre>
<p>检查unicorn的状态：</p>
<pre><code class="Shell">sudo service unicorn status
</code></pre>
<p>设置logrotate：</p>
<pre><code class="shell">sudo vi /etc/logrotate.d/recipes
</code></pre>
<p>内容如下：</p>
<pre><code class="Shell">/home/deploy/recipes/log/*.log &#123;
  daily
  missingok
  rotate 180
  # must use with delaycompress below
  compress
  dateext

  # this is important if using &quot;compress&quot; since we need to call
  # the &quot;lastaction&quot; script below before compressing:
  delaycompress

  # note the lack of the evil &quot;copytruncate&quot; option in this
  # config.  Unicorn supports the USR1 signal and we send it
  # as our &quot;lastaction&quot; action:
  lastaction
    pid=/home/deploy/recipes/tmp/pids/unicorn.pid
    test -s $pid &amp;&amp; kill -USR1 &quot;$(cat $pid)&quot;
  endscript
&#125;
</code></pre>
<p>如果提示readonly, 无法写入，使用chmod或者chown来获取读写权限。</p>
</li>
<li><p>安装Ngnix</p>
<pre><code class="Shell">sudo apt-get install -y nginx
</code></pre>
<p>查看版本：</p>
<pre><code class="Shell">nginx -v
</code></pre>
<p>在/etc/nginx/sites-available下，新增recipes文件：</p>
<pre><code class="Shell">sudo vi /etc/nginx/sites-available/recipes
</code></pre>
<p>内容如下：</p>
<pre><code class="Shell">###################################
##         configuration         ##
###################################
##
## See installation.md#using-https for additional HTTPS configuration details.

upstream recipes &#123;
  server unix:/home/deploy/recipes/tmp/sockets/unicorn.socket fail_timeout=0;
&#125;

## Normal HTTP host
server &#123;
  listen 0.0.0.0:80 default_server;
  listen [::]:80 ipv6only=on default_server;
  server_name 101.132.151.71; ## 这里填域名，如果没有，填服务器 IP 位置
  server_tokens off; ## Don&#39;t show the nginx version number, a security best practice
  root /home/deploy/recipes/public;

  ## Increase this if you want to upload large attachments
  client_max_body_size 20m;

  ## Individual nginx logs for vhost
  access_log  /var/log/nginx/recipes_access.log;
  error_log   /var/log/nginx/recipes_error.log;

  location / &#123;
    ## Serve static files from defined root folder.
    ## @huginn is a named location for the upstream fallback, see below.
    try_files $uri $uri/index.html $uri.html @recipes;
  &#125;

  ## If a file, which is not found in the root folder is requested,
  ## then the proxy passes the request to the upsteam (huginn unicorn).
  location @recipes &#123;
    ## If you use HTTPS make sure you disable gzip compression
    ## to be safe against BREACH attack.
    # gzip off;

    proxy_read_timeout      300;
    proxy_connect_timeout   300;
    proxy_redirect          off;

    proxy_set_header    Host                $http_host;
    proxy_set_header    X-Real-IP           $remote_addr;
    proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;
    proxy_set_header    X-Forwarded-Proto   $scheme;
    proxy_set_header    X-Frame-Options     SAMEORIGIN;

    proxy_pass http://recipes;
  &#125;

  ## Enable gzip compression as per rails guide:
  ## http://guides.rubyonrails.org/asset_pipeline.html#gzip-compression
  ## WARNING: If you are using relative urls remove the block below
  ## See config/application.rb under &quot;Relative url support&quot; for the list of
  ## other files that need to be changed for relative url support
  location ~ ^/(assets)/ &#123;
    root /home/deploy/recipes/public;
    gzip_static on; # to serve pre-gzipped version
    expires max;
    add_header Cache-Control public;
  &#125;

  error_page 502 /502.html;
&#125;
</code></pre>
<p>建立links:</p>
<pre><code class="Shell">sudo ln -s /etc/nginx/sites-available/recipes /etc/nginx/sites-enabled/recipes
</code></pre>
<p>删除default：</p>
<pre><code class="shell">sudo rm /etc/nginx/sites-enabled/default
</code></pre>
<p>测试设置：</p>
<pre><code class="Shell">sudo nginx -t
</code></pre>
<p>会弹出syntax is ok 和test is successful的信息，终端运行：</p>
<pre><code class="Shell">sudo service nginx restart
</code></pre>
</li>
</ul>
<p>最后的效果：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcly1fnvasde46qj30o809rjrn.jpg"></p>
<p>「终于出来了，太不容易了……」</p>
<p>P.S</p>
<p>如果<code>sudo service nginx restart</code>没有任何反应，可以检查以下路径的log：</p>
<pre><code class="Shell">cd /var/log/nginx
cd recipes/log
</code></pre>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.digitalocean.com/community/tutorials/how-to-deploy-a-rails-app-with-unicorn-and-nginx-on-ubuntu-14-04">How To Deploy a Rails App with Unicorn and Nginx on Ubuntu 14.04</a></p>
<p><a href="https://linode.com/docs/development/ror/use-unicorn-and-nginx-on-ubuntu-14-04/">Use Unicorn and Nginx to Configure Ruby on Rails Applications on Ubuntu 14.04</a></p>
<p><a href="https://github.com/huginn/huginn/blob/master/doc/manual/installation.md">Huginn install guide for Ubuntu/Debian</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
        <tag>Nginx</tag>
        <tag>Unicorn</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu16.04下使用Capistrano, Nginx and Puma部署Rails 5.2</title>
    <url>/posts/deploy-with-capistrano-nginx-and-puma-on-rails/</url>
    <content><![CDATA[<p>Capistrano, Nginx and Puma部署Rails 5.2。</p>
<span id="more"></span>

<p>部署前的前提条件：</p>
<ul>
<li>一个可以正常运行的rails项目，项目代码push到了代码托管平台如GitHub，GitLab上</li>
<li>租云服务器，安装Ubuntu 16.04的操作系统</li>
</ul>
<p>假定现在有一个rails project ，名为demo，本地运行正常。</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79ly1fszdf2dqv1j30ci04rdfx.jpg"></p>
<p>以下操作均以demo这个rails项目为例。</p>
<h4 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h4><p>添加用户deploy。</p>
<p>用root权限登录后，终端执行：</p>
<pre><code>adduser deploy
</code></pre>
<p>新增 <code>/etc/sudoers.d/deploy</code>，添加如下内容， 让新用户可以使用sudo：</p>
<pre><code class="shell">deploy ALL=(ALL:ALL) ALL
</code></pre>
<p>免密码登录：</p>
<p>新用户登录，在当前目录下，执行：</p>
<pre><code>mkdir ~/.ssh
touch ~/.ssh/authorized_keys
</code></pre>
<p>回到本地，把公钥复制出来，执行：</p>
<pre><code>cat ~/ssh/id_rsa.pub
</code></pre>
<p> 回到服务器，执行：</p>
<pre><code>vi ~/.ssh/authorized_keys
</code></pre>
<p>把公钥放进去。</p>
<p>修改权限：</p>
<pre><code>chmod 700 ~/.ssh
chmod 644 ~/.ssh/authorized_keys
</code></pre>
<p>退出后，重新登录，会发现不需要输入密码 了。</p>
<h4 id="更新和安装Liunx套件"><a href="#更新和安装Liunx套件" class="headerlink" title="更新和安装Liunx套件"></a>更新和安装Liunx套件</h4><p>先更新系统， 再升级。</p>
<p>终端执行：</p>
<pre><code>sudo apt-get update -y
sudo apt-get upgrade -y
</code></pre>
<h4 id="安装Ruby-on-Rails-所需要的东西："><a href="#安装Ruby-on-Rails-所需要的东西：" class="headerlink" title="安装Ruby on Rails 所需要的东西："></a>安装Ruby on Rails 所需要的东西：</h4><pre><code class="Shell">sudo apt-get install -y build-essential git-core bison openssl libreadline6-dev curl zlib1g zlib1g-dev libssl-dev libyaml-dev libsqlite3-0 libsqlite3-dev sqlite3 autoconf libc6-dev libpcre3-dev libcurl4-nss-dev libxml2-dev libxslt-dev imagemagick nodejs libffi-dev
</code></pre>
<h4 id="安装Ruby"><a href="#安装Ruby" class="headerlink" title="安装Ruby"></a>安装Ruby</h4><p>安装 RVM:</p>
<pre><code class="Shell">sudo apt-get install libgdbm-dev libncurses5-dev automake libtool bison libffi-dev
gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB
curl -sSL https://get.rvm.io | bash -s stable
</code></pre>
<p>成功时，会弹出如下信息：</p>
<pre><code>Upgrade of RVM in /home/deploy/.rvm/ is complete.
</code></pre>
<p>安装ruby，这里选2.4.0：</p>
<pre><code class="Shell">source ~/.rvm/scripts/rvm
rvm requirements
rvm install 2.4.0
rvm use 2.4.0 --default
</code></pre>
<p>安装bundler：</p>
<pre><code class="Shell">gem install bundler --no-ri --no-rdoc
</code></pre>
<h4 id="安装数据库MySQl"><a href="#安装数据库MySQl" class="headerlink" title="安装数据库MySQl"></a>安装数据库MySQl</h4><pre><code class="Shell">sudo apt-get install mysql-common mysql-client libmysqlclient-dev mysql-server
</code></pre>
<p>执行 <code>mysql -u root -p</code> 进入 mysql console 后，输入：</p>
<pre><code class="Shell">CREATE DATABASE demo CHARACTER SET utf8mb4;
</code></pre>
<p>这里demo记得换成你的数据库名称。</p>
<p>运行后，会弹出Query OK的信息，exit，退出。</p>
<h4 id="安装Nignx"><a href="#安装Nignx" class="headerlink" title="安装Nignx"></a>安装Nignx</h4><pre><code class="Shell">sudo apt-get install nginx
sudo service nginx start
</code></pre>
<h4 id="安装Capistrano"><a href="#安装Capistrano" class="headerlink" title="安装Capistrano"></a>安装Capistrano</h4><p>本地 gemfile中，添加：</p>
<pre><code class="Ruby">gem &#39;mysql2&#39;
gem &#39;puma&#39;, &#39;~&gt; 3.11&#39;
group :development do
  gem &#39;capistrano&#39;,&#39;3.11.0&#39;
  gem &#39;capistrano-rvm&#39;, &#39;0.1.2&#39;
  gem &#39;capistrano-rails&#39;,&#39;1.4.0&#39;
  gem &#39;capistrano3-puma&#39;, &#39;3.1.1&#39;
end
</code></pre>
<p>保存后，<code>bundle install</code>.</p>
<p>创建 capfile：</p>
<pre><code class="Shell">bundle exec cap install
</code></pre>
<p>配置Capfile:</p>
<pre><code class="Ruby">require &quot;capistrano/rvm&quot;
require &#39;capistrano/rails&#39;
require &#39;capistrano/puma&#39;
require &#39;capistrano/puma/nginx&#39;
install_plugin Capistrano::Puma
install_plugin Capistrano::Puma::Nginx
</code></pre>
<p>配置<code>config/deploy.rb</code>:</p>
<pre><code class="Ruby">set :application, &quot;demo&quot;  ## demo 换成你的项目名
set :repo_url, &quot;https://github.com/xxxxx/demo&quot; ## 这里写上项目代码的托管地址
append :linked_dirs, &quot;log&quot;, &quot;tmp/pids&quot;, &quot;tmp/cache&quot;, &quot;tmp/sockets&quot;, &quot;public/system&quot;, &quot;public/uploads&quot;, &quot;vendor/bundle&quot;
append :linked_files, &quot;config/database.yml&quot;, &quot;config/master.key&quot;

set :rvm_type, :user
set :rvm_ruby_version, &#39;2.4.0&#39;
</code></pre>
<p>配置 <code>config/deploy/staging.rb</code>:</p>
<pre><code class="Ruby">server &#39;106.15.182.207&#39;, user: &#39;deploy&#39;, roles: %w&#123;app db web&#125;
set :deploy_to, &quot;/home/deploy/demo/#&#123;fetch(:rails_env)&#125;&quot;
set :branch, :master
set :stage, :staging
set :ssh_options, &#123;
    keys: %w(/home/deploy/.ssh/authorized_keys),
    auth_methods: %w(publickey)
&#125;
</code></pre>
<p>这里的key，就是你放在远端服务器上的SSH公钥，也是放在远端代码仓库上的公钥。</p>
<p>在远端服务器上创建<code>/home/deploy/demo/shared/config/database.yml</code>:</p>
<pre><code class="Iml">staging:
  adapter: mysql2
  encoding: utf8
  pool: &lt;%= ENV.fetch(&quot;RAILS_MAX_THREADS&quot;) &#123; 5 &#125; %&gt;
  username: root
  password: password
  socket: /var/run/mysqld/mysqld.sock
  database:  deploy_demo
</code></pre>
<p>password换成你之前设置的root密码。</p>
<p>创建 <code>/home/deploy/demo/shared/config/master.key</code> , 把本机的master key贴进去，这里master.key取代了之前的secrets。</p>
<p>修改demo目录下所有文件的权限：</p>
<pre><code>cd /home/deploy/demo
chown -R deploy:deploy .
</code></pre>
<p>其中，第一个deploy是指用户名，第二个deploy是指group 名，deploy默认属于deploy组。</p>
<p>回到本地执行：</p>
<pre><code class="Shell">cap staging deploy:check
cap staging puma:config
cap staging puma:nginx_config
cap staging deploy
</code></pre>
<p>如果运行：<code>cap staging puma:nginx_config</code>时报错，显示如下出错信息：</p>
<pre><code>00:00 puma:nginx_config
      Uploading /tmp/nginx_demo_staging 100.0%
      01 sudo mv /tmp/nginx_demo_staging /etc/nginx/sites-available/demo_staging
      01 sudo
      01 :
      01 no tty present and no askpass program specified
</code></pre>
<p>尝试添加了要求密码输入，也没有效果，建议直接自己手动添加文档。</p>
<p><code>cap staging puma:nginx_config</code>这一步 本身要做的就是添加了一个nginx的config文件，我们可以自己手动添加：</p>
<pre><code>cd etc/nginx/sites-available
touch demo_staging
</code></pre>
<p>在demo_staging中，填入如下内容：</p>
<pre><code>upstream puma_deploy_demo_staging &#123;
  server unix:/home/deploy/demo/shared/tmp/sockets/puma.sock fail_timeout=0;
&#125;

server &#123;
  listen 80;
  server_name 106.15.182.207;
  root /home/deploy/demo/current/public;
  try_files $uri/index.html $uri @puma_demo_staging;

  client_max_body_size 4G;
  keepalive_timeout 10;

  error_page 500 502 504 /500.html;
  error_page 503 @503;

  location @puma_deploy_demo_staging &#123;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $host;
    proxy_redirect off;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection &quot;Upgrade&quot;;
    proxy_set_header X-Forwarded-Proto http;
    proxy_pass http://puma_demo_staging;
    # limit_req zone=one;
    access_log /home/deploy/demo/shared/log/nginx.access.log;
    error_log /home/deploy/demo/shared/log/nginx.error.log;
  &#125;
location ^~ /assets/ &#123;
    gzip_static on;
    expires max;
    add_header Cache-Control public;
  &#125;

  location = /50x.html &#123;
    root html;
  &#125;
    location = /404.html &#123;
    root html;
  &#125;

  location @503 &#123;
    error_page 405 = /system/maintenance.html;
    if (-f $document_root/system/maintenance.html) &#123;
      rewrite ^(.*)$ /system/maintenance.html break;
    &#125;
    rewrite ^(.*)$ /503.html break;
  &#125;

  if ($request_method !~ ^(GET|HEAD|PUT|PATCH|POST|DELETE|OPTIONS)$ )&#123;
    return 405;
  &#125;

  if (-f $document_root/system/maintenance.html) &#123;
    return 503;
  &#125;
&#125;
</code></pre>
<p>保存后，退出， 建立link：</p>
<pre><code>sudo ln -s /etc/nginx/sites-available/demo_staging /etc/nginx/sites-enabled/demo_staging
</code></pre>
<p>继续执行：</p>
<pre><code>cap staging deploy
</code></pre>
<p>完成后，重启nginx:</p>
<pre><code>sudo service nginx restart
</code></pre>
<p>打开浏览器：</p>
<p>  <img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79ly1fszddggcj1j30cw05fmx9.jpg"></p>
<p>OK！！</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.digitalocean.com/community/tutorials/deploying-a-rails-app-on-ubuntu-14-04-with-capistrano-nginx-and-puma">Deploying a Rails App on Ubuntu 14.04 with Capistrano, Nginx, and Puma</a></p>
<p><a href="https://gist.github.com/thanhtoan1196/3018539d62c55c77cc62942472981e16">Deploy a Rails App with Puma and Nginx on Ubuntu 16.04</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
        <tag>Nginx</tag>
        <tag>Puma</tag>
      </tags>
  </entry>
  <entry>
    <title>七牛云端存储，想说爱你不容易</title>
    <url>/posts/deploy-with-qiniu/</url>
    <content><![CDATA[<p>部署时踩坑七牛云存储。</p>
<span id="more"></span>
<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>  前段时间，租了阿里云，买了域名，最近折腾了下，终于把之前做的网站部署上去了。</p>
<p>  整个部署过程中，感觉最虐的就是七牛云那块了，对于半路出家的新手来说，真是个不小的坑。记录下这段虐心的旅程。</p>
<hr>
<h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><p>  我用的是Capistrano来部署Rails项目，这里只记录一下我在远端服务器运行seed时，会出现的问题。<br>  好，我们开始吧！<br>  当你在终端<code>~/yourproject_name/current</code>执行<code>RAILS_ENV=production bundle exec rake db:seed</code>, 可能会出现如下报错：</p>
<ul>
<li><p><strong>NoMethodError： undefined method qiniu_up_host</strong></p>
<p>这个报错出现的有些奇怪，我在本地运行<code>rake db:seed</code>时，也报错，而我之前部署到heroku时并没有出现过这种情况，不解。</p>
<p>虽然不理解它为什么会出现，但是有问题咱就得想着解决，看看怎么破了它。</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fkj51hciw8j30qn069di8.jpg"></p>
<p><strong>解决办法：</strong></p>
<p>方法很粗暴。<br>在本地的<code>config/initializers/carrierwave.rb</code>文件中，将host那一行直接注释，然后运行<code>rake db:seed</code>， 发现OK啦。</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fkj56rr9y4j30cl06ndgc.jpg"></p>
<p>为什么我会想到直接注释？Google了下，发现如果你的服务器在国内，qiniu_up_host是可以不用设置的。</p>
<p>另外，还有一种情况是config.qiniu_up_host的值写错了，不同的存储区域是不一样的，具体可以参见<a href="https://developer.qiniu.com/kodo/manual/1671/region-endpoint">七牛开发者中心-存储区域</a>。</p>
</li>
<li><p><strong>TypeError: no implicit conversion of nil to String</strong></p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fkj032q8itj30l70bctbx.jpg"></p>
<p>出现这个情况，是因为我使用了<a href="https://github.com/laserlemon/figaro">Figaro</a> 管理密码，之前部署到heroku时，终端运行<code>figaro heroku:set -e production</code>就可以了，但是这里，我们怎么把七牛对应的AccessKey，SecretKey等信息放入remote server呢？</p>
<p>其实，<a href="https://github.com/laserlemon/figaro">Figaro</a> 的README文档中已经提到了，咱们这么来：</p>
<p>Step1、在远端的<code>~/yourproject_name/shared/config</code>中，添加<code>application.yml</code>, 内容如下：</p>
<p>```Ruby<br>production:<br>   qiniu_access_key: xxxx  # 你的 qiniu AccessKey</p>
<p>   qiniu_secret_key: xxxx  # 你的 qiniu SecretKey</p>
<p>   qiniu_bucket: xxxx  # 你的 qiniu bucket</p>
<p>   qiniu_bucket_domain: xxxx  # 你的 qiniu bucket domain</p>
</li>
</ul>
<p>   development:<br>     qiniu_access_key: xxxx  # 你的 qiniu AccessKey</p>
<pre><code> qiniu_secret_key: xxxx  # 你的 qiniu SecretKey

 qiniu_bucket: xxxx  # 你的 qiniu bucket

 qiniu_bucket_domain: xxxx  # 你的 qiniu bucket domain
</code></pre>
<pre><code>
这里，虽然我们添加了这个文件，但是由于你的`config/deploy.rb`中没有设置，所以部署的时候并不会去连接这个文件。

Step2、在本机上编辑`config/deploy.rb`，将`application.yml`添加进去：

```Ruby
-  append :linked_files, &quot;config/database.yml&quot;, &quot;config/secrets.yml&quot;
+  append :linked_files, &quot;config/database.yml&quot;, &quot;config/secrets.yml&quot;, &quot;config/application.yml&quot;
</code></pre>
<p>  OK啦！记得commit 和 push，再运行 <code>cap production deploy</code>，最后在远端服务器运行seed。</p>
<ul>
<li><p><strong>TypeError: class or module required for rescue clause</strong></p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79ly1fkj0j8b12pj30oa0bujuv.jpg"></p>
<p>看到报错，第一反应就是google，在<a href="https://github.com/huobazi/carrierwave-qiniu/issues/17">carrierwave-qiniu configuration error #17</a> 中, 提到<code>qiniu-rs</code>这个gem已经没有人在维护了，要安装最新版的<code>carrierwave-qiniu</code>。好，那就重新安装，又不是第一次被版本坑了: P。</p>
<p>在gemfile中做如下修改：</p>
<pre><code>+ gem &#39;carrierwave-qiniu&#39;, &#39;~&gt; 1.1.5&#39;

- gem &#39;qiniu-rs&#39;
</code></pre>
<p>终端运行<code>bundle install</code>, 报错显示：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79ly1fkj1s2ugzfj30me0bq76f.jpg"></p>
<p>显示没有mime-types，按照提示，运行<code>bundle update</code>， OK！</p>
<hr>
</li>
</ul>
<h4 id="The-end"><a href="#The-end" class="headerlink" title="The end"></a>The end</h4><p><strong>Attention：</strong></p>
<p>  请在每次修改后，进行git commit 和 git push ，然后在本地运行 <code>cap production deploy</code>部署，Capistranno会从GitHub上拉下最新的进度，最后在远端服务器的<code>~/yourproject_name/current</code>目录下，运行<code>RAILS_ENV=production bundle exec rake db:seed</code>。</p>
<p>  哦，附上我的成品<a href="https://www.togetherisbetter.cn/">Together is better</a> : P.</p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
        <tag>ErrorTracking</tag>
      </tags>
  </entry>
  <entry>
    <title>scheme中有关Y combinator 的推导</title>
    <url>/posts/deriving-the-Y-combinator-in-scheme/</url>
    <content><![CDATA[<p>推导结束，两瓶元气森林已空瓶。</p>
<span id="more"></span>

<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>《the little schemer》中的第9章，可以换一个开头：故事从一个没有名字的递归开始说起……</p>
<p>鉴于理解的过程蛮苦逼，记录下整个Y combinator 的推导过程，便于下次失忆的时候能迅速回忆。</p>
<p>不过在推导前，先来看看Y combinator 是什么。</p>
<h4 id="Y-combinator"><a href="#Y-combinator" class="headerlink" title="Y combinator"></a>Y combinator</h4><p>wiki上的解释  <a href="https://en.wikipedia.org/wiki/Fixed-point_combinator#Fixed_point_combinators_in_lambda_calculus">fixed-point combinator </a> 是这样的：</p>
<blockquote>
<p>fix, when applied to an arbitrary function f, yields the same result as f applied to the result of applying fix to f.</p>
</blockquote>
<p>细节部分太复杂了。Google 到这篇 <a href="https://docs.huihoo.com/homepage/shredderyin/wiki/SchemeYcombinator.html">Y Combinator的scheme 实现</a>， 发现作者的解释看起来清楚多了，可参阅。</p>
<p>简单而言, 一个公式：</p>
<blockquote>
<p>fix f = f (fix f) for all f</p>
</blockquote>
<p>对于任意的函数f,  fix 接受参数 f，返回(fix f)，将 f 作用于 (fix f)，得到的结果仍为(fix f)。</p>
<p>在scheme中，Y 的定义如下：</p>
<pre><code class="scheme">(define Y
  (lambda (le)
    ((lambda (f)
      (f f))
      (lambda (f)
        (le (lambda (x)
              ((f f) x)))))))
</code></pre>
<p>或者这样：</p>
<pre><code class="scheme">(define Y
 (lambda (F)
   (let ((W (lambda (x)
              (F (lambda arg (apply (x x) arg))))))
     (W W))))
</code></pre>
<p>两者其实是一样的。</p>
<p>来看一个调用Y的实例：</p>
<p>定义一个函数 Fi，用来计算斐波那契数列：【 F(1)=1，F(2)=1, F(n)=F(n-1)+F(n-2)（n&gt;=3) 】</p>
<pre><code class="scheme">(define Fi
  (lambda (func-arg)
    (lambda (n)
      (cond
        ((zero? (sub1 n)) 1)
        ((zero? (- n 2)) 1)
        (else (+ (func-arg (sub1 n)) (func-arg (- n 2))))))))
</code></pre>
<p>然后执行：</p>
<pre><code class="scheme">((Y Fi) 10)
;Value: 55

((Fi (Y Fi)) 10)
;Value: 55
</code></pre>
<p>两次调用的输出结果相同。</p>
<h4 id="推导过程"><a href="#推导过程" class="headerlink" title="推导过程"></a>推导过程</h4><p>以书中定义的length函数为例：</p>
<p>先定义一个永远不会有值输出，死循环的函数：eternity</p>
<pre><code class="scheme">(define eternity
  (lambda (x)
    (eternity x)))
</code></pre>
<p>length的定义如下：</p>
<pre><code class="scheme">(define length
  (lambda (l)
    (cond
      ((null? l) 0)
      (else (add1 (length (cdr l)))))))
</code></pre>
<p>这里，我们定义了一个函数，命名为length，而且在该函数内部调用了它自己。</p>
<p>现在问题来了，如果不允许使用define来定义函数，不给函数命名，如何实现length？</p>
<p>我们先从最简单的 length0 开始，当 list 为空时，<code>(length l)</code>为 0.</p>
<p>先来看 length0:</p>
<pre><code class="scheme">; length0
;
(lambda (l)
  (cond
    ((null? l) 0)
    (else (add1 (eternity (cdr l))))))
</code></pre>
<p>调用时， 也很简单：</p>
<pre><code class="scheme">((lambda (l)
  (cond
    ((null? l) 0)
    (else (add1 (eternity (cdr l)))))) (quote ()))
;Value: 0
</code></pre>
<p>由此，继续定义 length&lt;=1 ：</p>
<pre><code class="scheme">; length&lt;=1
;
(lambda (l)
  (cond
    ((null? l) 0)
    (else
      (add1 (
        (lambda (l)
           (cond
             ((null? l) 0)
             (else (add1 (eternity (cdr l))))))
        (cdr l))))))
</code></pre>
<p>调用  length&lt;=1 ：</p>
<pre><code class="scheme">((lambda (l)
  (cond
    ((null? l) 0)
    (else
      (add1 (
        (lambda (l)
           (cond
             ((null? l) 0)
             (else (add1 (eternity (cdr l))))))
        (cdr l)))))) (quote (hello)))
;Value: 1
</code></pre>
<p>类推 length&lt;=2：</p>
<pre><code class="scheme">(lambda (l)
  (cond
    ((null? l) 0)
    (else
      (add1 (
        (lambda (l)
          (cond
            ((null? l) 0)
            (else
              (add1 (
                (lambda (l)
                   (cond
                     ((null? l) 0)
                     (else (add1 (eternity (cdr l))))))
                (cdr l))))))
          (cdr l))))))
</code></pre>
<p>调用  length&lt;=2 ：</p>
<pre><code class="scheme">((lambda (l)
  (cond
    ((null? l) 0)
    (else
      (add1 (
        (lambda (l)
          (cond
            ((null? l) 0)
            (else
              (add1 (
                (lambda (l)
                   (cond
                     ((null? l) 0)
                     (else (add1 (eternity (cdr l))))))
                (cdr l))))))
          (cdr l)))))) (quote (hello scheme)))
;Value: 2
</code></pre>
<p>按照这个规律，我们可以一直定义下去，length&lt;=n, n 为无穷大……</p>
<p>但这显然不是一个函数该有的样子，所以我们换一种方式，来重新定义下 length0:</p>
<pre><code class="scheme">; redefine length0
;
((lambda (length)
  (lambda (l)
    (cond
      ((null? l) 0)
      (else (add1 (length (cdr l)))))))
  eternity)
</code></pre>
<p>这里重新定义了一个函数，这个函数接受一个参数length，返回结果是一个lambda函数。</p>
<p>上面这段代码，调用了该函数，并将 eternity 作为参数值传递进去。与我们先前定义的 length0 没有区别，仅仅是写法不同而已。</p>
<p>用这种方式，可以类推出 length&lt;=1, length&lt;=2:</p>
<pre><code class="scheme">; rewrite length&lt;=1 in the same style
;
((lambda (length)
  (lambda (l)
    (cond
      ((null? l) 0)
      (else (add1 (length (cdr l)))))))
  ((lambda (length)
    (lambda (l)
      (cond
        ((null? l) 0)
        (else (add1 (length (cdr l))))))) eternity))
;
; rewrite length&lt;=2 in the same style
;
((lambda (length)
  (lambda (l)
    (cond
      ((null? l) 0)
      (else (add1 (length (cdr l)))))))
((lambda (length)
  (lambda (l)
    (cond
      ((null? l) 0)
      (else (add1 (length (cdr l)))))))
  ((lambda (length)
    (lambda (l)
      (cond
        ((null? l) 0)
        (else (add1 (length (cdr l))))))) eternity)))
</code></pre>
<p>顺着这个思路，再一次进行抽象提取，重新定义 length0:</p>
<pre><code class="scheme">; mk-length for length0
;
((lambda (mk-length)
    (mk-length eternity))
    (lambda (length)
      (lambda (l)
        (cond
          ((null? l) 0)
          (else (add1 (length (cdr l))))))))
</code></pre>
<p>这里，是将整个 length 的定义，作为 mk-length 的参数值：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79ly1g260f7p56aj30vo0c4my9.jpg"></p>
<p>它其实是同我们第二次定义的 length0 是一样的：</p>
<p>只是这里调用了两次，一次将整个 length 的定义，作为 mk-length 的参数值，第二次将 eternity 作为 length 的参数值。</p>
<p>由此可以类推出length&lt;=1, length&lt;=2:</p>
<pre><code class="scheme">; mk-length for length&lt;=1
;
((lambda (mk-length)
    (mk-length
      (mk-length eternity)))
  (lambda (length)
    (lambda (l)
      (cond
        ((null? l) 0)
        (else (add1 (length (cdr l))))))))
;
; mk-length for length&lt;=2
;
((lambda (mk-length)
  (mk-length
    (mk-length
      (mk-length eternity))))
  (lambda (length)
    (lambda (l)
      (cond
        ((null? l) 0)
        (else (add1 (length (cdr l))))))))
</code></pre>
<p>这里，eternity 扮演的是参数值的角色，它本身是一个函数，我们使用 mk-length 来替换掉 eternity，当然也是可以的，重新看一下替换掉eternity后的 length0 :</p>
<pre><code class="scheme">; replace eternity with mk-length
;
((lambda (mk-length)
    (mk-length mk-length))
    (lambda (length)
      (lambda (l)
        (cond
          ((null? l) 0)
          (else (add1 (length (cdr l))))))))
</code></pre>
<p>这里，length也不过是一个参数名，自然也是可以换成mk-length的。</p>
<pre><code class="scheme">; using mk-length instead of length
;
((lambda (mk-length)
    (mk-length mk-length))
    (lambda (mk-length)
      (lambda (l)
        (cond
          ((null? l) 0)
          (else (add1 (mk-length (cdr l))))))))
</code></pre>
<p>现在，调用上面这个函数，将eternity作为参数值，我们可以得到 length&lt;=1:</p>
<pre><code class="scheme">; apply mk-length to get length&lt;=1
;
((lambda (mk-length)
    (mk-length mk-length))
    (lambda (mk-length)
      (lambda (l)
        (cond
          ((null? l) 0)
          (else (add1 ((mk-length eternity) (cdr l))))))))
</code></pre>
<p>这里稍稍有点绕，截个图就明白了：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1g20zc49bf6j317q0c4ta9.jpg"></p>
<p>调用一次试试看：</p>
<pre><code class="scheme">(((lambda (mk-length)
    (mk-length mk-length))
    (lambda (mk-length)
      (lambda (l)
        (cond
          ((null? l) 0)
          (else (add1 ((mk-length eternity) (cdr l)))))))) (quote (apple)))
;Value: 1
</code></pre>
<p>结果无误。</p>
<p>现在，我们再将上面 length&lt;=1定义中 的 eternity 替换成 mk-length:</p>
<pre><code class="scheme">; replace eternity with mk-length
;
((lambda (mk-length)
    (mk-length mk-length))
    (lambda (mk-length)
      (lambda (l)
        (cond
          ((null? l) 0)
          (else (add1 ((mk-length mk-length) (cdr l))))))))
</code></pre>
<p>鉴于<code>(f x)</code> 与 <code>(lambda (x) (f x))</code> 是一样的，所以我们使用<code>((lambda (x) ((mk-length mk-length) x)) (cdr l))</code> 来替换掉<code>((mk-length mk-length) (cdr l))</code>。</p>
<p>替换后的结果如下：</p>
<pre><code class="scheme">((lambda (mk-length)
    (mk-length mk-length))
    (lambda (mk-length)
      (lambda (l)
        (cond
          ((null? l) 0)
          (else (add1 ((lambda (x) ((mk-length mk-length) x)) (cdr l))))))))
</code></pre>
<p>再来一次抽取，将<code>(lambda (x) ((mk-length mk-length) x))</code> 作为参数值提取出来：</p>
<pre><code class="scheme">((lambda (mk-length)
    (mk-length mk-length))
    (lambda (mk-length)
      ((lambda (length)
        (lambda (l)
          (cond
            ((null? l) 0)
            (else (add1 (length (cdr l)))))))
        (lambda (x) ((mk-length mk-length) x)))))
</code></pre>
<p>你会发现最初定义length的那段代码已经完整浮现了：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1g20zkh1gz2j314c0ei75t.jpg"></p>
<p>最后一次，将整块length的定义作为参数值，提取出来：</p>
<pre><code class="scheme">((lambda (le)
  ((lambda (mk-length)
    (mk-length mk-length))
    (lambda (mk-length)
      (le (lambda (x)
            ((mk-length mk-length) x))))))
 (lambda (length)
  (lambda (l)
    (cond
      ((null? l) 0)
      (else (add1 (length (cdr l))))))))
</code></pre>
<p>这段代码中，将：</p>
<pre><code class="scheme"> (lambda (length)
  (lambda (l)
    (cond
      ((null? l) 0)
      (else (add1 (length (cdr l)))))))
</code></pre>
<p>作为了le的参数值。</p>
<p>现在，我们移除掉这个参数值，得到如下代码：</p>
<pre><code class="scheme">(lambda (le)
  ((lambda (mk-length)
    (mk-length mk-length))
    (lambda (mk-length)
      (le (lambda (x)
            ((mk-length mk-length) x))))))
</code></pre>
<p>好了，我们可以撒花🎉啦。</p>
<p>用 f 替换 mk-length，Y combinator 登场：</p>
<pre><code class="scheme">; Y combinator
;
(define Y
  (lambda (le)
    ((lambda (f)
      (f f))
      (lambda (f)
        (le (lambda (x)
              ((f f) x)))))))
</code></pre>
<p>整个推导过程结束。</p>
<p>另，<a href="https://github.com/pkrumins">Peter Krumins</a> 有一篇文章也详细演示了Y combinator的推导过程，可参阅 <a href="https://catonmat.net/derivation-of-ycombinator">Deriving the Y-Combinator</a>。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://en.wikipedia.org/wiki/Fixed-point_combinator#Fixed_point_combinators_in_lambda_calculus">fixed-point combinator</a>.  </p>
<p><a href="https://docs.huihoo.com/homepage/shredderyin/wiki/SchemeYcombinator.html">Y Combinator的scheme 实现</a></p>
<p><a href="https://mitpress.mit.edu/books/little-scheme-fourth-edition">《The little schemer》</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Scheme</tag>
      </tags>
  </entry>
  <entry>
    <title>Ruby中require,load,autoload,extend,include,prepend的区别</title>
    <url>/posts/differences-among-require-load-autoload-extend-include-prepend-in-ruby/</url>
    <content><![CDATA[<p>读完 Ruby 元编程后的收获。</p>
<span id="more"></span>

<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>关于这个问题，已经有很多大牛给到过解答，但是Google全网，并没有看到涉及这6个method的完整对比，</p>
<p>稍完整的比如：<a href="http://web-k.github.io/blog/2012/12/19/ruby-require-load/">About Ruby require / load / autoload / include / extend</a>，RubyChina上也有很精彩的解答：<a href="https://ruby-china.org/topics/25706">基础 Ruby 中 Include, Extend, Load, Require 的使用区别</a>， 决定整理下各位大牛的解答，顺带加点个人的理解，对这6位进行下对比。</p>
<h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><p>先给它们简单分类下：require，load, autoload均涉及到文件的加载，归为一类，剩下的include，prepend，extend归为第二类。先来看第一类。</p>
<h4 id="require"><a href="#require" class="headerlink" title="require"></a>require</h4><ul>
<li>kernel method，可以加载ruby文件，也可以加载外部的库。</li>
<li>相比load ,针对同一个文件，它只加载一次</li>
</ul>
<h4 id="load"><a href="#load" class="headerlink" title="load"></a>load</h4><ul>
<li>与require很类似，但是<code>load</code>会每次都重新加载文件。</li>
<li>大部分情况下，除非你加载的库变动频繁，需要重新加载以获取最新版本，一般建议用require来代替load.</li>
</ul>
<h4 id="autoload"><a href="#autoload" class="headerlink" title="autoload"></a>autoload</h4><ul>
<li>用法稍稍不同：<code>autoload(const_name, &#39;file_path&#39;)</code>, 其中const_name 通常是模块名，或者类名。</li>
<li>对于load和require，在ruby运行到require／load时，会立马加载文件，而autoload则只有当你调用module或者class时才会加载文件。</li>
</ul>
<p>看个例子来感受下三者的不同：【#= &gt; 表示输出结果】</p>
<pre><code class="Ruby">## module_m.rb
module M
  puts &#39;load a module&#39;
  class A
    def self.hello
      puts &#39;hello&#39;
    end
  end
end

## test.rb

## require ：只加载一次
puts &quot;first load: #&#123;(require &#39;./module_m.rb&#39;)&#125;&quot;
puts &quot;load again: #&#123;(require &#39;./module_m.rb&#39;)&#125;&quot;
#= &gt; load a module
#= &gt; first load: true
#= &gt; load again: false

# load ：多次加载
puts &quot;first load: #&#123;(load &#39;./module_m.rb&#39;)&#125;&quot;
puts &quot;load again: #&#123;(load &#39;./module_m.rb&#39;)&#125;&quot;
#= &gt; load a module
#= &gt; first load: true
#= &gt; load a module
#= &gt; load again: true

# autoload ：调用时才加载
puts &quot;first load: #&#123;autoload(:M,&#39;./module_m.rb&#39;)&#125;&quot;
puts &quot;load again: #&#123;autoload(:M,&#39;./module_m.rb&#39;)&#125;&quot;
M::A::hello
#= &gt; first load:
#= &gt; load again:
#= &gt; hello
</code></pre>
<p>不过现在应该很少有rubyist用autoload了。</p>
<p>2011年，Matz针对 Autoload will be dead，有如下的声明：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fpq5qxl950j30dx06iwfp.jpg"></p>
<p>至于原因，则是autoload本身在多线程环境下存在基本的缺陷，这个我并没有尝试过，不是很理解。stack overflow上<a href="https://stackoverflow.com/questions/804297/when-to-use-require-load-or-autoload-in-ruby?rq=1&utm_medium=organic&utm_source=google_rich_qa&utm_campaign=google_rich_qa">When to use <code>require</code>, <code>load</code> or <code>autoload</code> in Ruby?</a>有位是这么说的：</p>
<blockquote>
<p>The lazyness of autoload sounds nice in theory, <strong>but many Ruby modules do things like monkey-patching other classes, which means that the behavior of unrelated parts of your program may depend on whether a given class has been used yet or not</strong>。</p>
</blockquote>
<p>他提到了猴子补丁的情况。如果有例子，应该会更好理解。</p>
<p>顺带提一句，Rails的ActiveRecord中大量使用的autoload，跟这里的autoload不是一回事，它是module ActiveSupport::Autoload中的方法。</p>
<h4 id="include"><a href="#include" class="headerlink" title="include"></a>include</h4><p>当一个类或者模块 include了一个module M时， 则该类或者模块就拥有了该module M的方法。</p>
<p>当涉及多个类调用同一方法时，这个方法就可以抽离出来，放入module中，然后类只需include该module即可。这样的做法也正体现了DRY原则。</p>
<p>例如：</p>
<pre><code class="Ruby">module M
  def my_method; puts &quot;hello&quot;; end
end

class C
  include M
end

class D
  include M
end

C.new.my_method #= &gt; hello
D.new.my_method #= &gt; hello
</code></pre>
<p>include的另一种较常见的用法是<strong>搭配extend</strong>，实现<strong>包含并扩展</strong>类的功能，同时可能还会搭配着钩子方法included。在一些常用gem的源代码中，可以看到这类用法的身影。</p>
<h4 id="extend"><a href="#extend" class="headerlink" title="extend"></a>extend</h4><p>当一个类或者对象使用extend 时，相当于<strong>打开了该类或者该对象的单件类</strong>，为其添加了单件方法。</p>
<p>比如：</p>
<pre><code class="Ruby">module MyModule
  def a_method; puts &quot;hello&quot;; end
end

class C
  extend MyModule
end

obj = []
obj.extend MyModule

C.a_method #= &gt; hello
C.singleton_methods #= &gt; [:a_method]

obj.a_method #= &gt; hello
obj.singleton_methods #= &gt; [:a_method]
</code></pre>
<p>使用include实现同样的效果：</p>
<pre><code class="Ruby">module MyModule
  def a_method; puts &quot;hello&quot;; end
end

class C
  class &lt;&lt; self
    include MyModule
  end
end

obj = []
class &lt;&lt; obj
  include MyModule
end

C.a_method #= &gt; hello
C.singleton_methods #= &gt; [:a_method]

obj.a_method #= &gt; hello
obj.singleton_methods #= &gt; [:a_method]
</code></pre>
<h4 id="prepend"><a href="#prepend" class="headerlink" title="prepend"></a>prepend</h4><p>相比include，extend， prepend「Available since Ruby 2」的知名度和使用率要少很多。</p>
<p>prepend和include很像，当一个类prepend或include 一个模块时，该模块中的方法会成为该类的实例方法。</p>
<p>二者的区别在于，模块在祖先链中的位置。 使用include时，模块在包含它的类之上。如果是prepend， 则是在prepend它的类之下。而祖先链中位置的不同，决定了方法调用的顺序。</p>
<p>比如下面这个例子：</p>
<pre><code class="Ruby">module M1
  def hello
    puts &quot;hello! this is module M1&quot;
  end
end
module M2
  def hello
    puts &quot;hello! this is module M2&quot;
  end
end

class C
  prepend M1
  include M2
  def hello
    puts &quot;hello! this is class C&quot;
  end
end

C.ancestors #=&gt; [M1, C, M2, Object, Kernel, BasicObject]

C.new.hello #=&gt; hello! this is module M1
</code></pre>
<p>这里，祖先链的顺序是M1在最前面，所以即使C中定义了一个method hello， 也不会被调用，因为module M1覆写了这个method。</p>
<p>从上面的例子也可以看出，prepend是很方便的方法包装器，假定我们想要给class C的hello method添加一些其他的功能实现，则可以这样写：</p>
<pre><code class="Ruby">module M1
  def hello
    puts &quot;add something outside C#hello&quot;
    super
  end
end
...... # 省略module M2
class C
  prepend M1
  include M2
  def hello
    puts &quot;hello! this is class C&quot;
  end
end

C.new.hello
#=&gt; add something outside C#hello
#=&gt; hello! this is class C
</code></pre>
<p>在module M1中覆写了hello，同时使用了super，调用了C中原来的hello method。</p>
<h4 id="extend-require-include中，module在祖先链中的差异"><a href="#extend-require-include中，module在祖先链中的差异" class="headerlink" title="extend, require, include中，module在祖先链中的差异"></a>extend, require, include中，module在祖先链中的差异</h4><p>前面已经提到在使用include时，模块在包含它的类之上。如果是prepend， 则是在prepend它的类之下。那么使用extend，模块会出现在哪里？</p>
<p>根据之前的例子，改编了下：</p>
<pre><code class="ruby">module M1
  def hello
    puts &quot;hello! this is module M1::hello&quot;
  end
end
module M2
  def hello
    puts &quot;hello! this is module M2&quot;
  end
end

## 添加 M3
module M3
  def hello
    puts &quot;hello! this is module M3&quot;
  end
end

class C
  prepend M1
  include M2
  extend M3
  def hello
    puts &quot;hello! this is C#hello&quot;
  end
end

C.ancestors #=&gt; [M1, C, M2, Object, Kernel, BasicObject]
</code></pre>
<p>此时，C的祖先链中并没有出现M3，那么M3在哪里？</p>
<p>当类extend某个module时，其实是扩展了该类的类方法，所以，可以在该类的单件类的祖先链里面找找。</p>
<p>承接上面的例子， 查看C单件类的祖先链：</p>
<pre><code class="ruby">C.singleton_class.ancestors
#=&gt; [#&lt;Class:C&gt;, M3, #&lt;Class:Object&gt;,#&lt;Class:BasicObject&gt;,Class, Module, Object, Kernel,BasicObject]
</code></pre>
<p>可以看到，M3在该类的单件类的上方。此时调用C.hello, 会得到</p>
<pre><code class="ruby">C.hello #=&gt; hello! this is module M3
</code></pre>
<p>当然，如果你在C中定义了类方法hello，则会调用C自定义的这个类方法，比如：</p>
<pre><code class="Ruby">...... # 省略module M1 M2 M3
class C
  ...... # 同上，省略

  def self.hello
    puts &quot;hello! This is C.hello&quot;
  end
end
C.hello #=&gt; hello! This is C.hello
</code></pre>
<p>如果想要调用M3中的hello，在C的hello中加上super即可。</p>
<pre><code class="ruby">...... # 省略module M1 M2 M3
class C
  ...... # 同上，省略

  def self.hello
    puts &quot;hello! This is C.hello&quot;
    super
  end
end
C.hello
#=&gt; hello! This is C.hello
#=&gt; hello! this is module M3
</code></pre>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://bugs.ruby-lang.org/issues/5653">I strongly discourage the use of autoload in any standard libraries” (Re: autoload will be dead)</a></p>
<p><a href="http://web-k.github.io/blog/2012/12/19/ruby-require-load/">About Ruby require / load / autoload / include / extend</a></p>
<p><a href="https://ruby-china.org/topics/25706">基础 Ruby 中 Include, Extend, Load, Require 的使用区别</a></p>
<p><a href="https://stackoverflow.com/questions/804297/when-to-use-require-load-or-autoload-in-ruby?rq=1&utm_medium=organic&utm_source=google_rich_qa&utm_campaign=google_rich_qa">When to use <code>require</code>, <code>load</code> or <code>autoload</code> in Ruby?</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>Rails中reference与foreign key的区别</title>
    <url>/posts/differences-between-references-and-foreign-keys-in-rails/</url>
    <content><![CDATA[<p>对add_reference, remove_reference, add_foreign_key, remove_foreign_key这四个有点拎不清，查了官方的API，记录下。</p>
<p>部分实例取自官网。</p>
<span id="more"></span>

<h4 id="add-reference-VS-add-foreign-key"><a href="#add-reference-VS-add-foreign-key" class="headerlink" title="add_reference VS add_foreign_key"></a>add_reference VS add_foreign_key</h4><ul>
<li><p><strong>add_reference</strong>(table_name, ref_name, **options)</p>
<p>用来给表添加一个参考列，使用时，options可以有如下的设置：</p>
<pre><code>:type
参考列的类型. 默认是 :bigint.

:index
添加一个键. 默认是 true.

:foreign_key
添加一个合适的外键约束. 默认是 false.

:polymorphic
多态关联，也就是是否需要添加额外的_type. 默认是 false， 即不添加， 设置为true时，则添加上_type

:null
该列是否允许为 nulls. 默认是 true.
</code></pre>
<p>以articles，authors为例，这里我们主要看添加外键：</p>
<pre><code class="Ruby">add_reference :articles, :author, foreign_key: true
</code></pre>
<p>上面的这种用法，使用add_foreign_key可以这样写：</p>
<pre><code class="Ruby">add_foreign_key :articles, :authors
</code></pre>
<p>默认添加的列名为author_id。</p>
<p>或者指定列名：</p>
<pre><code class="Ruby">add_foreign_key :articles, :authors, column: :custom_author_id, primary_key: &#39;id&#39;
</code></pre>
</li>
</ul>
<ul>
<li><p><strong>add_foreign_key</strong>(from_table, to_table, options = {})</p>
<p>用来给表添加一个外键，使用时，options可以有如下的设置：</p>
<pre><code>:column
外键列的名字. 默认是to_table的单数形式 + &quot;_id&quot;

:primary_key
to_table的主键. 默认是 id.

:name
约束名或者说是外键的名称 默认是 fk_rails_&lt;identifier&gt; 样式，identifier是一个根据from_table和column来生成的总长为10的字符串，比如fk_rails_e74ce85cbc.

:on_delete
发生删除时的行为，可设置为nullify，cascade， restrict

:on_update
发生更新时的行为，同delete

:validate
只用于Postgres， 指定是否应该验证约束. 默认是 true.
</code></pre>
<p>add_foreign_key还可以指定to_table主表delete或者update时，from_table从表的行为约束。</p>
<p>nullify：删除／更新主表时，自动更新从表值为NULL。删除／更新从表，主表不变</p>
<p>cascade：删除／更新主表时，自动删除／更新从表。删除／更新从表，主表不变</p>
<p>restrict：从表记录不存在时，主表才可以删除／更新。删除／更新从表，主表不变</p>
</li>
<li><p><strong>两者的区别</strong></p>
<p>add_foreign_key是用来添加外键的method，但是add_reference却不一定添加的就是外键，如果在options中，添加了<code>foreign_key: true</code>， 那么其效果就同add_foreign_key的基本用法。</p>
</li>
</ul>
<h4 id="remove-reference-VS-remove-foreign-key"><a href="#remove-reference-VS-remove-foreign-key" class="headerlink" title="remove_reference VS remove_foreign_key"></a>remove_reference VS remove_foreign_key</h4><ul>
<li><p><strong>remove_reference</strong>(table_name, ref_name, foreign_key: false, polymorphic: false, **options)</p>
<p>顾名思义，移除reference。</p>
<p>移除单个reference，同时移除index：</p>
<pre><code class="ruby">remove_reference(:products, :user, index: true)
</code></pre>
<p>移除设置为多态关联的reference：</p>
<pre><code class="Ruby">remove_reference(:products, :supplier, polymorphic: true)
</code></pre>
<p>移除外键：</p>
<pre><code class="Ruby">remove_reference(:products, :user, index: true, foreign_key: true)
</code></pre>
</li>
<li><p><strong>remove_foreign_key</strong>(from_table, options_or_to_table = {})</p>
<p>移除外键约束。</p>
<p>移除一个外键， 这里移除了accounts的branch_id 这个外键：</p>
<pre><code class="Ruby">remove_foreign_key :accounts, :branches
</code></pre>
<p>指定移除的外键列：</p>
<pre><code class="Ruby">remove_foreign_key :accounts, column: :owner_id
</code></pre>
<p>指定移除的外键名称，这里移除了accounts表中名为special_fk_name的外键。「前面add_foreign_key中，可以通过name来设定添加的外键名称。」</p>
<pre><code class="Ruby">remove_foreign_key :accounts, name: :special_fk_name
</code></pre>
</li>
<li><p><strong>两者的区别</strong></p>
<p>基本同添加外键一样，remove_reference当指定了<code>foreign_key: true</code> 时，等同与remove_foreign_key。比如下面这个例子：</p>
<pre><code class="Ruby">remove_reference :groups, :order, foreign_key: true
## 等同于下面这两种写法
remove_foreign_key :groups, :orders
remove_foreign_key :groups, column: :order_id
</code></pre>
</li>
</ul>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="http://edgeapi.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_reference">add_reference</a></p>
<p><a href="http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_foreign_key">add foreign key</a></p>
<p><a href="http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-remove_reference">remove_reference</a></p>
<p><a href="http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-remove_foreign_key">remove foreign key</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
      </tags>
  </entry>
  <entry>
    <title>使用RMagick来给图片添加线条或文字</title>
    <url>/posts/drawing-on-and-adding-text-to-images-using-rmagick/</url>
    <content><![CDATA[<p>画画的过程蛮好玩的。</p>
<span id="more"></span>

<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p> 之前用<a href="https://github.com/wvanbergen/chunky_png">chunky png</a>来做图片处理，后面发现在添加线条及文字这方面，<a href="https://github.com/wvanbergen/chunky_png">chunky png</a>很受限，决定换成<a href="https://github.com/rmagick/rmagick">RMagick</a>，随后又因为它吃内存的原因，换成了 <a href="https://github.com/minimagick/minimagick">mini_magick</a> , <a href="https://github.com/minimagick/minimagick">mini_magick</a>的用法与<a href="https://github.com/rmagick/rmagick">RMagick</a>较相似，这里记录下<a href="https://github.com/rmagick/rmagick">RMagick</a>的draw用法【单纯觉得很好玩 : P】，另，安装的时候，踩了点坑，顺带把安装也写写。</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>Mac OS下：</p>
<pre><code>brew install imagemagick
gem install rmagick
</code></pre>
<p>如果已经安装了imagemagick，则：</p>
<pre><code>brew upgrade imagemagick
gem install rmagick
</code></pre>
<p>对于<strong>Mac OSX Sierra</strong> (and High Sierra)，安装的时候，可能还是失败，看日志，可能会出现这样的报错信息：</p>
<pre><code>Can&#39;t install RMagick 2.16.0. Can&#39;t find MagickWand.h.
</code></pre>
<p>如何解决？参考这个<a href="https://stackoverflow.com/questions/39494672/rmagick-installation-cant-find-magickwand-h">RMagick installation: Can’t find MagickWand.h</a></p>
<p>终端输入：</p>
<pre><code>brew unlink imagemagick
brew install imagemagick@6 &amp;&amp; brew link imagemagick@6 --force
</code></pre>
<p>然后：</p>
<pre><code>gem install rmagick
</code></pre>
<p>OK，你已经get到了这个轮子，看看怎么使用吧。</p>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>RMagick不仅仅可以用来给图片添加线条和文字，它还可以新建，读写图片等，戳<a href="https://rmagick.github.io/usage.html">官网</a>详见。</p>
<p>重点看它的draw类。【因为我觉得Drawing on and adding text to images是它最cool的功能点：P】</p>
<p>这里用两个简单的例子说一下如何添加文字和线条。</p>
<ul>
<li><p>添加线条</p>
<p>以添加一个方框为例，新建<code>demo.rb</code>:</p>
<pre><code class="Ruby">require &#39;RMagick&#39;
include Magick

demo = ImageList.new(&quot;demo.png&quot;) # 建image对象，这里demo.png是存在的，若要新建一张图片，可以用Image.new
border = Magick::Draw.new # 建draw实例
border.stroke(&#39;rgb(255,0,0)&#39;) # 线条颜色，这里红色
border.fill(&#39;transparent&#39;) # 填充色，这里不填充，选透明
border.stroke_width(4) # 线条宽度
border.rectangle(100, 100, 500, 500) # 方框线条的位置，左上角起始点,右下角终止点
border.draw(demo) # 给demo画上
demo.write(&#39;demo.png&#39;) # 保存
</code></pre>
<p>这里，demo.png本来是一张空白图片：【不要怀疑，我真的放了一张空白的图片】</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fp6upeoxkfj31hc0hndfm.jpg"></p>
<p>终端运行<code>ruby demo.rb</code>后，demo.png成了这样：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fp6urjqvynj31hc0hn0nb.jpg"></p>
<p>好玩吧？还可以画其他的，比如圆形，星星等等，比如我们画个星星:</p>
<pre><code class="Ruby">require &#39;RMagick&#39;
include Magick

demo = ImageList.new(&quot;demo.png&quot;)
star = Magick::Draw.new
star.stroke(&#39;red&#39;).stroke_width(3)
star.fill(&#39;yellow&#39;)
star.polygon( 75,37.5,     89.5,80.5, 134.5,80.5,   98.5,107.5,
           111.5,150.5,  75,125,    38.5,150.5,   51.5,107.5,
           15.5,80.5,    60.5,80.5)
star.draw(demo)
demo.write(&#39;demo.png&#39;)
</code></pre>
<p> 运行后，效果图：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fp6uxrz3c5j31hc0hngll.jpg"></p>
<p>画图基本的套路就是这样，想画画其他的？看它的<a href="https://rmagick.github.io/draw.html">draw class</a>的文档。</p>
</li>
<li><p>添加文字</p>
<p>还是用demo.png，我们看看如何在空白页上添加文字：</p>
<pre><code class="Ruby">require &#39;RMagick&#39;
include Magick

demo = ImageList.new(&quot;demo.png&quot;)
Text = &#39;I Love Ruby!&#39; # 需要添加的文字
text = Magick::Draw.new
text.font_family = &#39;helvetica&#39; # 字体
text.pointsize = 60 # 大小
text.gravity = Magick::CenterGravity # 字的朝向，这里是区域的中心
# 调用annotate(img, width, height, x, y, text)这个method给demo添加文字， width, height, x, y决定字体的摆放位置
# 把文字当成一个长方形，width, height是起始位置【gravity设定的起始点】，x, y是偏移量. fill是填充色
text.annotate(demo, 0,0,2,2, Text) &#123;
    self.fill = &#39;red&#39;
&#125;

demo.write(&#39;demo.png&#39;)
</code></pre>
<p>效果图：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fp6veoa0fmj31hc0hna9x.jpg"></p>
<p>哈哈，是不是很cool？我就抛砖引玉，剩下的，看文档，自己玩吧！</p>
</li>
</ul>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://stackoverflow.com/questions/39494672/rmagick-installation-cant-find-magickwand-h">RMagick installation: Can’t find MagickWand.h</a></p>
<p><a href="https://rmagick.github.io/usage.html">how to use RMagick</a></p>
<p><a href="https://rmagick.github.io/draw.html">class Draw</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>RMagick</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac下，三步实现高速下载百度网盘资料</title>
    <url>/posts/download-files-fast-from-baidu-cloud/</url>
    <content><![CDATA[<p>跟全栈的小伙伴学了一招。</p>
<span id="more"></span>
<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>最近在网盘上下载多个文件资料时，发现特别卡，想起之前看过一位小伙伴写的关于高速下载网盘资料的文章：<a href="http://hongliang.site/2017/10/18/Mac%E4%B8%8A%E9%AB%98%E9%80%9F%E4%B8%8B%E8%BD%BD%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E8%B5%84%E6%BA%90%E7%9A%84%E6%96%B9%E6%B3%95%EF%BC%882%E6%AD%A5%EF%BC%89/">Mac上高速下载百度网盘资源的方法</a>，试了下，搞定了，速度很快，很惊喜。</p>
<p>不过该文章的操作中有点小问题，给chrome添加扩展程序那部分，是不能直接将整个BaiduExporter文件添加进去的，会报错。【难道是因为版本更新导致？】</p>
<p>想着要不我也来写份简单的操作手册？算是现学现卖。</p>
<p><strong>效果：</strong></p>
<p>30M网速，非会员情况下，使用Aria2后，下载速度可以达到<strong>5.6MB/s</strong></p>
<h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><ul>
<li><p>下载Aria2最新版本：戳这里直达<a href="https://github.com/yangshun1029/aria2gui/releases">ara2gui</a></p>
<p>目前的最新版本是1.4：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fnch8pua6xj30tt0cm3zt.jpg"></p>
<p>下载后，解压，拖到应用程序中，打开。</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fnchqtqwiuj30jt03xdgc.jpg"></p>
</li>
<li><p>下载BaiduExporter：<a href="https://github.com/acgotaku/BaiduExporter">BaiduExporter</a></p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fnchak7wwrj30t30f7juk.jpg"></p>
</li>
<li><p>给chrome添加扩展程序BaiduExporter</p>
<p>解压下载好的BaiduExporter-master文件，打开chrome，选择扩展程序，将其添加到chrome的扩展程序，有两种方式：</p>
<ul>
<li>直接将文件<code>BaiduExporter.crx</code> 拖进去，会弹出提示框，确认即可</li>
<li>点击选择load unpacked extension, 选择文件BaiduExporter-master/chrome/release。</li>
</ul>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fncheub8o1j30qi04z75i.jpg"></p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fnchl40wznj30kf0770u2.jpg"></p>
<p>​</p>
</li>
</ul>
<p><strong>开始感受这令人欣喜的速度：</strong></p>
<p><strong>请确保你已经打开了Aria2</strong></p>
<ul>
<li><p>在<strong>chrome浏览器中，打开你的百度网盘</strong>，选择需要下载的文件，点击<strong>导出下载-ARIA2 PRC</strong>即可：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fnchuilmc3j30kp067t99.jpg"></p>
<p>下载速度可以达到<strong>5.6MB/s</strong>， 对于没有开会员的小伙伴来说，还是相当给力的。</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fndnzcv69pj30lm023jrj.jpg"></p>
</li>
</ul>
<p>也可以为Firefox添加插件，完成下载，具体可参考<a href="https://github.com/acgotaku/BaiduExporter">BaiduExporter</a>。</p>
<p>Enjoy your downloading process : ）</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="http://hongliang.site/2017/10/18/Mac%E4%B8%8A%E9%AB%98%E9%80%9F%E4%B8%8B%E8%BD%BD%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E8%B5%84%E6%BA%90%E7%9A%84%E6%96%B9%E6%B3%95%EF%BC%882%E6%AD%A5%EF%BC%89/">Mac上高速下载百度网盘资源的方法</a></p>
<p> <a href="https://blog.icehoney.me/posts/2015-01-31-Aria2-download">使用Aria2下载百度网盘和115的资源</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>Rails：使用base58压缩uuid</title>
    <url>/posts/encode-uuid-as-base58/</url>
    <content><![CDATA[<p>使用base58压缩uuid。</p>
<span id="more"></span>

<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p><strong>base58</strong> ,wikipedia上面的定义是这样的：</p>
<blockquote>
<p><strong>Base58</strong> is a group of binary-to-text encoding schemes used to represent large integers  as alphanumeric text.</p>
</blockquote>
<p>我的理解是它是一种将二进制转化为文本的编码方式，用于将大的整数表示成字母和数字的文本组合，其优势在于避免混淆。之前大热的bitcoin，它的address，钱包地址，用的就是base58编码方式。</p>
<p>在Rails中，通常会给model加上uuid作为唯一标示，生成的uuid通常比较长，而且带有’-‘符号，使用base58进行编码会显得更好一些。下面实作一下，如何在Rails中将uuid编码成base58格式。</p>
<h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><p>以一个project的model为例，该model含有字段：uuid，title，description</p>
<p><code>project.rb</code>的文件内容如下：</p>
<pre><code class="Ruby">class Project &lt; ApplicationRecord
  validates :title, presence: true
  before_validation :generate_uuid, :on =&gt; :create

  def to_param
    self.uuid
  end

  protected
  def generate_uuid
    self.uuid ||= SecureRandom.uuid
  end

end
</code></pre>
<p>这里，uuid是由SecureRandom.uuid来生成的。</p>
<p>我们定义一下用base58压缩uuid的method，为了能在所有model中都使用这个method，我们用module来包起这个method。具体如下：</p>
<ul>
<li><p>在lib目录下新建<code>my_base.rb</code>文件：</p>
</li>
<li><p>在<code>my_base.rb</code>中添加如下内容：</p>
<pre><code class="Ruby">module MyBase
  module Base
    ALPHABET = &quot;123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ&quot;.chars
    BASE = ALPHABET.size
    def uuid_as_base58(uuid)
      int_val = uuid.gsub(&#39;-&#39;,&#39;&#39;).to_i(16)
      &#39;&#39;.tap do |base58_val|
        while int_val &gt; 0
          int_val, mod = int_val.divmod(BASE)
          base58_val.prepend ALPHABET[mod]
        end
      end
    end
  end
end

class Object
  include MyBase::Base
end
</code></pre>
</li>
<li><p>在<code>config/application.rb</code>文件中，加入如下内容：</p>
<pre><code>config.autoload_paths += Dir[&quot;#&#123;config.root&#125;/lib/**&quot;]
</code></pre>
<p>运行时，会自动加载lib下的文件。</p>
</li>
<li><p>修改<code>project.rb</code>的文件中有关uuid的赋值：</p>
<pre><code class="Ruby">require &#39;my_base&#39;
class Project &lt; ApplicationRecord
......
  def generate_uuid
    self.uuid ||= uuid_as_base58(SecureRandom.uuid)
  end
......
end
</code></pre>
</li>
<li><p>新建一个project看看，会发现已经变成了base58的编码格式</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fn5xh10wkvj30hz01f0sr.jpg"></p>
</li>
</ul>
<p>大功告成！</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://en.wikipedia.org/wiki/Base58">base 58</a></p>
<p><a href="https://gist.github.com/jrunning/62cf199822a25ce441d1">uuid to base58 in ruby</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
      </tags>
  </entry>
  <entry>
    <title>Active Storage raises ActiveSupport::MessageVerifier::InvalidSignature</title>
    <url>/posts/error-record-of-activesupport-messageverifier-invalidsignature/</url>
    <content><![CDATA[<p>Rspec 遇上 Active Storage。</p>
<span id="more"></span>

<p>项目里文件上传部分使用了activestorage，写Rspec时，一直报错ActiveSupport::MessageVerifier::InvalidSignature，看文档查<a href="http://api.rubyonrails.org/v5.2/classes/ActiveSupport/MessageVerifier.html">ActiveSupport::MessageVerifier::InvalidSignature</a>， 懵逼，小坑，最后依靠强大的stack overflow解决了，记录下。</p>
<h4 id="场景："><a href="#场景：" class="headerlink" title="场景："></a>场景：</h4><p>现有model attachment，含有字段file，title，另有一个model issue，issue与attachment是一对多的关系。</p>
<p> 在<code>app/models/attachment.rb</code>中，添加了：</p>
<pre><code class="Ruby">class Attachment &lt; ApplicationRecord
  belongs_to :issue, optional: true
  has_one_attached :file
end
</code></pre>
<p>在<code>app/models/issue.rb</code>中，添加了：</p>
<pre><code class="Ruby">class Issue &lt; ApplicationRecord
  has_many :attachments, dependent: :destroy
  accepts_nested_attributes_for :attachments, allow_destroy: true
end
</code></pre>
<p>使用Rspec做测试时，用factorybot给Attachment建立测试数据，把测试使用的图片存放在<code>spec/resources</code>下，其中<code>spec/factories/attachments.rb</code>中的内容如下：</p>
<pre><code class="Ruby">FactoryBot.define do
  factory :attachment do
    file &#123; Rack::Test::UploadedFile.new(Rails.root.join(&quot;spec&quot;, &quot;resources&quot;, &quot;image.jpg&quot;) &#125;
    title &quot;this is a title&quot;
  end
end
</code></pre>
<p>这里通过<a href="https://www.rubydoc.info/github/brynary/rack-test/Rack/Test/UploadedFile">Rack ::Test::UploadedFile</a>构建了file，这样在controller的spec中，传递给params的file就会被视为一个上传的文件。</p>
<p>现在需要测试issue中添加了attachment的场景。<br>在<code>spec/controllers/issues_controller_spec.rb</code>中，有这样一段：</p>
<pre><code class="Ruby">RSpec.describe IssuesController, type: :controller do
  let!(:issue) &#123; create :issue &#125;
  let(:issue_attributes) &#123; &#123;&#125; &#125;
  .....  
    describe &quot;PUT update issue&quot; do
      action &#123; put :update, params: &#123; id: issue, issue: issue_attributes &#125; &#125;

      context &quot;with attachment&quot; do
       let!(:attachment) &#123; create :attachment, issue: issue &#125;
       it expect(issue.attachments.count).to eq 1
      end
      ......
    end
end
</code></pre>
<p>此时运行，会报错，显示：</p>
<pre><code class="Ruby">Failures:

  1) IssuesController PUT update issue with attachment should not be nil
     Failure/Error: @issue.update(issue_params)

     ActiveSupport::MessageVerifier::InvalidSignature:
       ActiveSupport::MessageVerifier::InvalidSignature
</code></pre>
<p>如果你在<code>issues_controller.rb</code>的issue_params中设置断点，会发现attachment虽然创建成功，但是attachment的file为空，也就是active storage并没有创建对应的blob， file并没有成功attached，可以通过<code>attachment.file.attached?</code>来判断file是否已经attached。</p>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>最后找到的解决的方法其实很简单，来自stack overflow上<a href="https://stackoverflow.com/questions/47583883/how-to-properly-do-model-testing-with-activestorage-in-rails">How to properly do model testing with ActiveStorage in rails?</a>， 只要修改一下attachment测试数据的生成方式即可，修改<code>spec/factories/attachments.rb</code>：</p>
<pre><code class="Ruby">FactoryBot.define do
  factory :attachment do
    title &quot;this is a title&quot;
    after(:build) do |attachment|
      attachment.file.attach(io: File.open(Rails.root.join(&quot;spec&quot;, &quot;resources&quot;, &quot;image.jpg&quot;)), filename: &#39;image.jpg&#39;, content_type: &quot;image/jpg&quot;)
    end
  end
end
</code></pre>
<p>再次跑测试，会发现通过了。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://stackoverflow.com/questions/48162667/active-storage-raises-activesupportmessageverifierinvalidsignature">Active Storage raises ActiveSupport::MessageVerifier::InvalidSignature</a></p>
<p><a href="https://stackoverflow.com/questions/47583883/how-to-properly-do-model-testing-with-activestorage-in-rails">How to properly do model testing with ActiveStorage in rails?</a></p>
<p><a href="http://edgeapi.rubyonrails.org/classes/ActiveStorage/Attached/One.html#method-i-attach">Active Storage attached one</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
        <tag>ErrorTracking</tag>
      </tags>
  </entry>
  <entry>
    <title>ErrorTracking - Could not find migration.rb</title>
    <url>/posts/error-recording-can-not-find-migration-rb-file/</url>
    <content><![CDATA[<p>奇葩的一次报错记录。</p>
<span id="more"></span>

<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>在运行<code>rails g migration xxxx</code>时弹出如下的报错：</p>
<pre><code>Running via Spring preloader in process 16933
      invoke  active_record
Could not find &quot;migration.rb&quot; in any of your source paths. Your current source paths are:
/Users/username/path/to/project/lib/templates/active_record/migration
/Users/username/.rvm/gems/ruby-2.4.0/gems/activerecord-5.2.0/lib/rails/generators/active_record/migration/templates
</code></pre>
<p>其中：</p>
<p>ruby v2.4.0</p>
<p>rails v5.2.0</p>
<p>同样，运行<code>rails g controller xxx</code> , <code>rails g model xxx</code>时，同样显示无法找到controller.rb， model.rb文件。</p>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>google了下，一直没有看到类似的问题，于是按照提示，去终端提示的：Your current source paths中去搜索，查看目录下的文件，发现有一个migration.rb.tt的文件，直接复制了一份，命名为migration.rb， 终端再次执行：</p>
<pre><code>rails g migration xxxx
</code></pre>
<p>OK!</p>
<p>对于controller以及model部分做同样的处理即可。</p>
<p>不过疑惑的是，为什么会有这些文件，它们是什么，应该存放的文件放在了哪里呢？</p>
<p>Google后，在<a href="https://github.com/bundler/bundler/blob/master/lib/bundler/cli/gem.rb">gem bundle</a>里面可以发现，这些带有tt后缀的文件应该是临时文件。</p>
<pre><code class="Ruby">
      templates = &#123;
        &quot;Gemfile.tt&quot; =&gt; &quot;Gemfile&quot;,
        &quot;lib/newgem.rb.tt&quot; =&gt; &quot;lib/#&#123;namespaced_path&#125;.rb&quot;,
        &quot;lib/newgem/version.rb.tt&quot; =&gt; &quot;lib/#&#123;namespaced_path&#125;/version.rb&quot;,
        &quot;newgem.gemspec.tt&quot; =&gt; &quot;#&#123;name&#125;.gemspec&quot;,
        &quot;Rakefile.tt&quot; =&gt; &quot;Rakefile&quot;,
        &quot;README.md.tt&quot; =&gt; &quot;README.md&quot;,
        &quot;bin/console.tt&quot; =&gt; &quot;bin/console&quot;,
        &quot;bin/setup.tt&quot; =&gt; &quot;bin/setup&quot;
      &#125;
</code></pre>
<p>顺藤摸瓜，发现本机上ruby-2.4.0下的那些ruby文件，很多都是带有了tt扩展名的，比如：</p>
<pre><code>model.rb.tt
module.rb.tt
application_record.rb.tt
</code></pre>
<p>至于为什么会出现这种情况，Google了也没找到，我回顾自己的操作，因为之前用的ruby是2.3.6，rails5.2， 后面将ruby升级了到2.4.0，随即重新在ruby2.4.0下裝rails，2.4.0 ruby on 5.2.0 rails，安装的过程中出现报错:</p>
<pre><code>ruby-2.4.0/lib/ruby/site_ruby/2.4.0/rubygems/core_ext/kernel_require.rb:55:in `require&#39;: cannot load such file -- bundler (LoadError)
</code></pre>
<p>于是按照指示，执行了<code>gem install bundler</code>。看了下，这些带有tt扩展名的文件生成时间差不多也是这个指令执行的时间，也许是在这一步导致的。至于到底为什么会这样，我也是很疑惑，也许是bundle很强大，连这些rails的源文件也能备份？</p>
<p>先记录下，在脑子里留个印象，下次再遇到，也许可以解惑。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://stackoverflow.com/questions/23401612/what-is-tt-file-in-ruby?utm_medium=organic&utm_source=google_rich_qa&utm_campaign=google_rich_qa">what is .tt file in ruby</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
        <tag>ErrorTracking</tag>
      </tags>
  </entry>
  <entry>
    <title>ErrorTracking - mysql2 0.5.0 on rails 5.1.2</title>
    <url>/posts/error-recording-mysql-on-rails/</url>
    <content><![CDATA[<p>踩坑mysql2。</p>
<span id="more"></span>

<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>gemfile中添加了mysql2：</p>
<pre><code>gem &#39;mysql2&#39;
</code></pre>
<p><code>bundle</code> 后，默认安装的是mysql2 0.5.0 。</p>
<p><code>database.yml</code>中，指定默认adapter为mysql2。</p>
<p>终端运行：<code>rake db:create</code></p>
<p>出现报错，如下：</p>
<pre><code>Specified &#39;mysql2&#39; for database adapter, but the gem is not loaded. Add gem &#39;mysql2&#39; to your Gemfile (and ensure its version is at the minimum required by ActiveRecord).
</code></pre>
<p> 其中，rails 5.1.2， ruby 2.3.6, macOS Sierra 10.12.3</p>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>google后，找到了<a href="https://github.com/brianmario/mysql2/issues/950">“Specified ‘mysql2’ for database adapter, but the gem is not loaded” when upgrading to 0.5.0</a>， 版本问题，rails5.1.X与mysql2 0.5.0之间不兼容。</p>
<p>修改gemfile，指定版本为 0.4.10.</p>
<pre><code>gem &#39;mysql2&#39;, &#39;~&gt; 0.4.10&#39;
</code></pre>
<p>重新<code>bundle</code>, OK .</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://github.com/brianmario/mysql2/issues/950">“Specified ‘mysql2’ for database adapter, but the gem is not loaded” when upgrading to 0.5.0</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
        <tag>ErrorTracking</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Nuxt中引入JS脚本报错 - jQuery requires a window with a document</title>
    <url>/posts/error-recording-nuxt-jquery-requires-a-window-with-a-document/</url>
    <content><![CDATA[<p>不止一次遇到这个问题了。</p>
<span id="more"></span>

<p>在nuxt的issue <a href="https://github.com/nuxt/nuxt.js/issues/356">It’s not clear how to include jQuery code #356</a>里面看到了类似情况，不过这位smth仁兄最后选择了放弃，改用directives，可惜这个issue已经closed，不然可以用我蹩脚的英语来码楼……</p>
<p>这里记录下我的解决方法。</p>
<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>在plugins下，添加了JS文件，该文件中引入了 jQuery，定义了多个函数，函数中包含了DOM操作。</p>
<p>比如这样的一个helper.js 文件：</p>
<pre><code class="javascript">// plugins/helper.js
import $ from &#39;jquery&#39;

export default &#123;
    methods: &#123;
        saySomething(words) &#123;
      const element = $(`&lt;h2&gt;$&#123;content&#125;&lt;/h2&gt;`)
      ......
    &#125;
    &#125;
&#125;
</code></pre>
<p>在组件中调用了该文件中的方法 saySomething，页面报出 <strong>jQuery requires a window with a document</strong> 的错误。</p>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>根据<a href="https://zh.nuxtjs.org/faq/window-document-undefined/">Window 或 Document 对象未定义？</a>所说的：</p>
<pre><code>一些只兼容客户端的脚本被打包进了服务端的执行脚本中去。 对于只适合在客户端运行的脚本，需要通过使用 process.client 变量来判断导入
</code></pre>
<p>所以解决方法就很简单了，给saySomething添加上判断可执行的条件即可。</p>
<p>修改helper.js的saySomething：</p>
<pre><code class="javascript">// plugins/helper.js
import $ from &#39;jquery&#39;

export default &#123;
    methods: &#123;
        saySomething(words) &#123;
      if (process.client) &#123;
        const element = $(`&lt;h2&gt;$&#123;content&#125;&lt;/h2&gt;`)
          ......
      &#125;  
    &#125;
    &#125;
&#125;
</code></pre>
<p>OK.</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://zh.nuxtjs.org/faq/window-document-undefined/">Window 或 Document 对象未定义？</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Nuxt</tag>
        <tag>ErrorTracking</tag>
      </tags>
  </entry>
  <entry>
    <title>Dangerous query method called with non-attribute argument(s)</title>
    <url>/posts/error-recording-of-dangerous-query-method/</url>
    <content><![CDATA[<p>踩坑 query method。</p>
<span id="more"></span>

<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>现有model issue，需要对issues进行排序，根据指定的ID集合来决定记录的位置，比如id包含在（4, 6, 9）中的纪录就排在前面，剩下的排在后面。</p>
<p>使用scope进行处理：</p>
<pre><code class="Ruby">class Issue &lt; ApplicationRecord
  .........
  IDLIST = [4, 6, 9]
  scope :order_by_custom_id, -&gt; &#123;
     order_by = [&#39;CASE&#39;]
    order_by &lt;&lt; &quot;WHEN id in (#&#123;IDLIST.join(&#39;, &#39;)&#125;) THEN 0&quot;
    order_by &lt;&lt; &#39;ELSE 1 END&#39;
    order(order_by.join(&#39; &#39;))
  &#125;
end
</code></pre>
<p>在controller中调用了该scope。刷新页面后，发现服务器报出warning message：</p>
<pre><code class="Ruby">DEPRECATION WARNING: Dangerous query method (method whose arguments are used as raw SQL) called with non-attribute argument(s): &quot;CASE WHEN id in (4,6,9) THEN 0 ELSE 1 END&quot;. Non-attribute arguments will be disallowed in Rails 6.0. This method should not be called with user-provided values, such as request parameters or model attributes. Known-safe values can be passed by wrapping them in Arel.sql().
</code></pre>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>其实，报错信息里面已经告诉我解决方法了，但是当时一看懵逼，Dangerous query method？！直接Google了一堆，后面在slack上跟同事求助了下，搞定！</p>
<p>很简单，就是使用warning message里面提到的Arel.sql()方法，将<code>CASE WHEN id in (4,6,9) THEN 0 ELSE 1 END</code> 用Arel.sql() 包起来即可。</p>
<p>修改scope：</p>
<pre><code class="Ruby">class Issue &lt; ApplicationRecord
  .........
  IDLIST = [4, 6, 9]
  scope :order_by_custom_id, -&gt; &#123;
     order_by = [&#39;CASE&#39;]
    order_by &lt;&lt; &quot;WHEN id in (#&#123;IDLIST.join(&#39;, &#39;)&#125;) THEN 0&quot;
    order_by &lt;&lt; &#39;ELSE 1 END&#39;
    order(Arel.sql(order_by.join(&#39; &#39;)))
  &#125;
end
</code></pre>
<p>OK!</p>
<p>但是，这个Arel.sql(raw_sql)是什么？</p>
<p>先看看Arel是什么。</p>
<p>官方文档的解释：</p>
<blockquote>
<p>Arel is a SQL AST manager for Ruby. It</p>
<ul>
<li>Simplifies the generation of complex SQL queries</li>
<li>Adapts to various RDBMSes</li>
</ul>
</blockquote>
<p>文档里面还列出了很多例子，从简单的select * from users 到复杂点的joins table，我猜是因为我接触Rails的时间不长，反正是从来没用过这东西。</p>
<p>Arel.sql(raw_sql) 这个类方法的源代码如下：</p>
<pre><code class="Ruby">def self.sql raw_sql
  Arel::Nodes::SqlLiteral.new raw_sql
end
</code></pre>
<p>也就是新建了一个Arel::Nodes::SqlLiteral实例，而Arel::Nodes::SqlLiteral为什么是安全的呢？用Arel::Nodes::SqlLiteral 把raw_sql包起来的用意是什么？估计也能猜到，防攻击啥的。果然，Google了下，发现说是可以防止<strong>SQL注入</strong>的情况。</p>
<p>有些复杂了，脑子暂时消化不了。</p>
<p>此外，文档中有关<a href="https://www.rubydoc.info/github/rails/rails/ActiveRecord%2FConnectionAdapters%2FDatabaseStatements:sanitize_limit"><strong>sanitize_limit</strong></a> 部分也有提到SQL injection的问题。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.rubydoc.info/github/rails/arel">Arel</a></p>
<p><a href="https://groups.google.com/forum/#!topic/rubyonrails-core/UGZmPT1nDX4">A “strict Arel” mode for ActiveRecord to prevent SQL injection vulnerabilities</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
        <tag>ErrorTracking</tag>
      </tags>
  </entry>
  <entry>
    <title>ssh-keygen踩坑</title>
    <url>/posts/error-recording-on-ssh-keygen/</url>
    <content><![CDATA[<p>记录下这周发布的时候遇到了一个奇葩问题。</p>
<span id="more"></span>

<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>使用<code>ssh-keygen -t ecdsa -b 521</code> 新生成了一对key，更新了服务器的authorized_keys，登录正常，但是cap deploy时，一直报错：</p>
<pre><code>Net::SSH::Exception: Cannot decode private key of type ecdsa-sha2-nistp521
</code></pre>
<p>即使按照提示，安装了指定的gem 也没有效果。</p>
<pre><code>gem &#39;ed25519&#39;
gem &#39;bcrypt_pbkdf&#39;
</code></pre>
<p>本机 OpenSSH 版本: 8.1。</p>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>简单提一下中间的解决过程。</p>
<p>最开始的时候，采取了重新生成key的方式，bits 改为 256：</p>
<pre><code>ssh-keygen -t ecdsa -b 256
</code></pre>
<p>结果：无效。</p>
<p>然后在老大的忽悠下，重装了系统。「成功满足了他老人家看机子不爽，孜孜不倦建议重装的诉求。」</p>
<p>重装后问题依然存在。</p>
<p>鉴于老大可以正常发布，对比了private key，得出的结论是format 不一致。</p>
<p>本机上private key 的format 使用的是 OpenSSH private key，也就是私钥的第一行是</p>
<pre><code>-----BEGIN OPENSSH PRIVATE KEY-----
</code></pre>
<p>而老大的则是OpenSSL format，也就是private key 第一行以<code>-----BEGIN EC PRIVATE KEY-----</code> 打头。</p>
<p>搜<a href="https://www.openssh.com/releasenotes.html">OpenSSH Release Notes</a> ，change log 中提到了，7.8+版本后默认生成的private key format 是OpenSSH，如果需要生成OpenSSL的PEM format，指定format为 PEM 即可。</p>
<pre><code>ssh-keygen -t ecdsa -b 521 -m PEM
</code></pre>
<p>随后部署，OK。「但感觉还是懵逼的，服务器上sshd版本问题？只支持PEM format ？」</p>
<h4 id="有关ssh-keygen"><a href="#有关ssh-keygen" class="headerlink" title="有关ssh-keygen"></a>有关ssh-keygen</h4><p>问题解决后，补一补 ssh-keygen 的小知识。</p>
<p>ssh-keygen 可以根据不同的算法生成key，使用 <code>option -t</code> 可以指定生成的key的type(rsa, dsa, ecdsa and ed25519) .</p>
<pre><code> -t dsa | ecdsa | ed25519 | rsa
</code></pre>
<p>默认使用的是rsa-sha2-512。</p>
<pre><code>The available RSA signature variants are “ssh-rsa” (SHA1 signatures, not recommended), “rsa-sha2-256”, and “rsa-sha2-512” (the default)
</code></pre>
<p>四种算法 dsa | ecdsa | ed25519 | rsa 的对比，参考<a href="https://www.ssh.com/ssh/keygen/">SSH-KEYGEN - GENERATE A NEW SSH KEY</a></p>
<blockquote>
<p>rsa:</p>
<p>an old algorithm based on the difficulty of factoring large numbers. A key size of at least 2048 bits is recommended for RSA; 4096 bits is better.Choosing a different algorithm may be advisable. It is quite possible the RSA algorithm will become practically breakable in the foreseeable future. All SSH clients support this algorithm.</p>
<p>dsa:</p>
<p>an old US government Digital Signature Algorithm. It is based on the difficulty of computing discrete logarithms. A key size of 1024 would normally be used with it. DSA in its original form is no longer recommended.【不推荐使用】</p>
<p>ecdsa:</p>
<p>a new Digital Signature Algorithm standarized by the US government, using elliptic curves. This is probably a good algorithm for current applications. Only three key sizes are supported: 256, 384, and 521 (sic!) bits. We would recommend always using it with 521 bits, since the keys are still small and probably more secure than the smaller keys (even though they should be safe as well). Most SSH clients now support this algorithm.【可以使用，推荐521bits】</p>
<p>ed25519:</p>
<p>this is a new algorithm added in OpenSSH. Support for it in clients is not yet universal. Thus its use in general purpose applications may not yet be advisable.【新算法，支持不广泛，可以尝试使用】</p>
</blockquote>
<p>例子：</p>
<pre><code>ssh-keygen -t rsa -b 4096
ssh-keygen -t dsa
ssh-keygen -t ecdsa -b 521
ssh-keygen -t ed25519
</code></pre>
<p>生成的key，可以指定comment，比如：</p>
<pre><code>ssh-keygen -t rsa -b 4096 -C &#39;your_email@example.com&#39;
</code></pre>
<p>这样生成的key 中comment 是指定的邮箱，而不是有关本机的用户信息。</p>
<p>默认情况下，使用ssh-keygen 生成的public 和 private key，会分别设置访问权限为644和600，这也是为什么，把本地的public key 添加到服务器后，需要自己手动 chmod， 给 authorized_keys 设置 644，而本机生成时则不用。</p>
<p>最后，说一个根据private key 生成 public key的小技巧。</p>
<p>如果你不小心丢了public key「虽然概率极低」，可以根据 private key 重新生成，比如：</p>
<pre><code>key=~/.ssh/id_ecdsa
ssh-keygen -yf $key &gt; $key.pub
</code></pre>
<p>不过需要多一句的是，根据 private key 重新生成的public key 中，comment 默认为空。我试过使用 -C 来指定 comment，但是无效，comment 依然为空，不过comment不影响使用key的正常使用，可以pass。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.ssh.com/ssh/keygen/">SSH-KEYGEN - GENERATE A NEW SSH KEY</a></p>
<p><a href="https://man.openbsd.org/ssh-keygen.1">ssh-keygen</a></p>
<p><a href="https://www.amazon.com/UNIX-Linux-System-Administration-Handbook/dp/0134277554">Unix and Linux System Administration Handbook </a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>ErrorTracking</tag>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title>Postgresql the database system is starting up</title>
    <url>/posts/error-recording-postgresql-the-database-system-is-starting-up/</url>
    <content><![CDATA[<p>踩坑 postgresql。</p>
<span id="more"></span>

<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>执行<code>rake db: migrate</code>时，中断，再次执行<code>rake db: migrate</code>时，报错：</p>
<pre><code>psql: could not connect to server: Connection refused
    Is the server running on host &quot;localhost&quot; (::1) and accepting
    TCP/IP connections on port 5432?
</code></pre>
<h4 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h4><p>重启posgresql：</p>
<pre><code>brew services restart postgresql
</code></pre>
<p>显示：</p>
<pre><code>Stopping `postgresql`... (might take a while)
==&gt; Successfully stopped `postgresql` (label: homebrew.mxcl.postgresql)
==&gt; Successfully started `postgresql` (label: homebrew.mxcl.postgresql)
</code></pre>
<p>再次运行：</p>
<pre><code>rake db:migrate
</code></pre>
<p>报错：</p>
<pre><code>psql: could not connect to server: Connection refused
    Is the server running on host &quot;localhost&quot; (::1) and accepting
    TCP/IP connections on port 5432?
</code></pre>
<p>改成手动启动：</p>
<pre><code>postges -D /usr/local/var/postgres/
</code></pre>
<p>报错：</p>
<pre><code>FATAL:  pre-existing shared memory block (key 5432001, ID 65536) is still in use
HINT:  If you&#39;re sure there are no old server processes still running, remove the shared memory block or just delete the file &quot;postmaster.pid&quot;.
</code></pre>
<p>切换到/usr/local/var/postgres 下，删除postmaster.pid 文件，然后重启：</p>
<pre><code class="postgresql">postgres -D /usr/local/var/postgres/
</code></pre>
<p>重启后，再次运行：</p>
<pre><code class="rail">rake db:migrate
</code></pre>
<p>报错：</p>
<pre><code>PG::ConnectionBad: FATAL:  the database system is starting up
</code></pre>
<p>Google后，尝试修改了postgresql.conf文件，将hot_standby 设置为on，重启Postgresql，继续执行<code>rake db:migrate</code>, 依然报错：</p>
<pre><code>PG::ConnectionBad: FATAL:  the database system is starting up
</code></pre>
<p><strong>最后的解决方法：</strong></p>
<p>简单粗暴：删除文件夹 /usr/local/var/postgres，卸载并重装PostgreSQL，重新导入数据。</p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
        <tag>ErrorTracking</tag>
      </tags>
  </entry>
  <entry>
    <title>ErrorTracking - uploading files with form_tag</title>
    <url>/posts/error-recording-uploading-files-with-form-tag/</url>
    <content><![CDATA[<p>小白基础知识栽跟斗。</p>
<span id="more"></span> 

<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>表单中上传文件时遇到的一个问题：</p>
<p>正常情况下，上传文件后，传递的params应该是这样：</p>
<pre><code>&quot;attachments_attributes&quot;=&gt;[&#123;&quot;file&quot;=&gt;#&lt;ActionDispatch::Http::UploadedFile:0x007f9fcd2b4188 @tempfile=#Tempfile:/var/folders/w4/qw3_jsfs0572hmqcl34v9xx00000gn/T/RackMultipart20180918-7216-12k5se6.jpg, @original_filename=&quot;sunset.jpg&quot;, @content_type=&quot;image/jpeg&quot;, @headers=&quot;Content-Disposition: form-data; name=&quot;attachments_attributes[file]&quot;; filename=&quot;sunset.jpg&quot;\r\nContent-Type: image/jpeg\r\n&quot;&gt;&#125;]
</code></pre>
<p>但是我的却是这样：</p>
<pre><code>&quot;attachments_attributes&quot;=&gt;[&#123;&quot;file&quot;=&gt; &quot;sunset.jpg&quot;&#125;]
</code></pre>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>解决方法其实就在ROR文档中。【果然，文档要细细读啊！】</p>
<p>在<a href="https://guides.rubyonrails.org/form_helpers.html">action view form helpers</a>中明明白白提到了：</p>
<p><img src="/var/folders/w4/qw3_jsfs0572hmqcl34v9xx00000gn/T/abnerworks.Typora/image-20180919092904541.png" alt="image-20180919092904541"></p>
<p>代码中使用了form_tag，如果需要上传文件，必须添加multipart: true。</p>
<p>当form_tag添加了<code>multipart: true</code> ，等同于：</p>
<pre><code class="ruby">form_tag(&#39;/upload&#39;, multipart: true)
# =&gt; &lt;from action =&quot;/upload&quot;, enctype=&quot;multipart/form-data&quot; method=&quot;post&quot;&gt;
</code></pre>
<p>而当表单中含有上传文件的控件时，必须使用**enctype=”multipart/form-data”**。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://guides.rubyonrails.org/form_helpers.html">action view form helpers</a></p>
<p><a href="https://apidock.com/rails/ActionView/Helpers/FormTagHelper/form_tag">form_tag</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
        <tag>ErrorTracking</tag>
      </tags>
  </entry>
  <entry>
    <title>ErrorTracking - 升级package.json依赖包</title>
    <url>/posts/error-recording-when-upgrade-dependencies/</url>
    <content><![CDATA[<p>最近老大布置了个任务，升级JS库，升级的过程中遇到了一些问题，记录下。</p>
<span id="more"></span> 

<h4 id="问题1："><a href="#问题1：" class="headerlink" title="问题1："></a>问题1：</h4><p>在package.json中更新版本后，执行<code>yarn install</code>, 报错：</p>
<pre><code>node-pre-gyp ERR! Tried to download(undefined): https://fsevents-binaries.s3-us-west-2.amazonaws.com/v1.1.2/fse-v1.1.2-node-v64-darwin-x64.tar.gz
</code></pre>
<p>本地Node 10.6.9, npm 6.4.1.</p>
<p>打开<a href="https://fsevents-binaries.s3-us-west-2.amazonaws.com,list里面确实没有这个版本的fsevents/">https://fsevents-binaries.s3-us-west-2.amazonaws.com，list里面确实没有这个版本的fsevents</a>.</p>
<h4 id="解决"><a href="#解决" class="headerlink" title="解决:"></a>解决:</h4><p>Google后，发现fsevents<a href="https://github.com/strongloop/fsevents/issues/196">#196</a> 中有提到类似的问题。</p>
<p>解决方法也很简单，下载符合版本要求的node，可以找到fsevents的下载包，这里我下载了node@8，版本号：8.12.0.</p>
<p>终端执行：</p>
<pre><code class="shell">node -v
brew unlink node
brew search node
brew install node@8 ##这里选择node@8，如果已经有node@8,则无须安装
brew link node@8
</code></pre>
<p>再次执行<code>yarn install</code>, OK。</p>
<h4 id="问题2"><a href="#问题2" class="headerlink" title="问题2:"></a>问题2:</h4><p>执行<code>bin/webpack-dev-server</code> 报错：</p>
<pre><code>Cannot find module &#39;webpack-cli/bin/config-yargs&#39;
</code></pre>
<p>本地webpack 3.12.0, 想要升级webpack-dev-server至最新版3.1.9.</p>
<h4 id="解决-1"><a href="#解决-1" class="headerlink" title="解决:"></a>解决:</h4><p>Google，在<a href="https://github.com/webpack/webpack-dev-server/releases">webpack-dev-server release</a>v3.0.0中，明确指出了 webpack-dev-server 3.x 支持 webpack 4.x，不再支持旧版本webpack.</p>
<pre><code>Breaking change: webpack v4 is now supported. Older versions of webpack are not supported.
</code></pre>
<p>两种解决方法：升级webpack为v4+ 或者 降级 webpack-dev-server 为v2+.</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://github.com/strongloop/fsevents/issues/196">Pre-built binaries not found for fsevents@1.1.3 and node@9.3.0</a></p>
<p><a href="https://github.com/mzgoddard/jest-webpack/issues/27">cannot find module ‘webpack/bin/config-yargs’</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>ErrorTracking</tag>
      </tags>
  </entry>
  <entry>
    <title>ErrorTracking - Rails 本地无法访问subdomain lvh.me</title>
    <url>/posts/error-recording-visit-lvh-me-on-rails/</url>
    <content><![CDATA[<p>遇到的一个非常奇葩的错误，记录下。</p>
<span id="more"></span>

<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>chrome访问页面：</p>
<pre><code>http://lvh.me:3000
</code></pre>
<p> 查看终端rails s，没有任何报错，也没有任何请求。</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1g3q5c5k68nj31de0pajsj.jpg"></p>
<p>以为是浏览器问题，换Safari，依然无法访问，</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1g3q5c73fs0j31ck0psgn7.jpg"></p>
<p>用 postman 访问<code>api.lvh.me:3000</code>，也是一样挂掉了。</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1g3q5c7jpqfj31dg0hc412.jpg"></p>
<p>但是如果将lvh.me换成localhost，则上述问题都不存在了，一切正常。</p>
<p>既然访问localhost:3000正常，难道 lvh.me 没有按照预设被解析成localhost ？</p>
<p>Google到这篇<a href="https://gist.github.com/indiesquidge/b836647f851179589765">Subdomaining Localhost with Rails 5</a>，试着给chrome换代理，然后就可以访问了。</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1g3q5c6ht6rj31qw0bwjvm.jpg"></p>
<p>考虑到Postman里面报错显示有一条 Proxy configured incorrectly。</p>
<p>初步判断是 lvh.me 走了代理导致的，设置lvh.me不走代理即可，考虑到不可能每一个浏览器都做这样的处理，Google了下，可以设置下系统代理。</p>
<h4 id="最终解决方法："><a href="#最终解决方法：" class="headerlink" title="最终解决方法："></a>最终解决方法：</h4><p>Mac下，打开 system preferences =&gt; network =&gt; advanced =&gt; Proxies， 在下方的Bypass proxy settings for these Hosts &amp; Domains，添加上<code>, *.lvh.me</code>，点击OK 退出，然后点击 apply 即可。</p>
<p>此时，所有的访问请求都正常了。</p>
<p>如果chrome依然无法显示页面，退出chrome，重新打开chrome即可。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="http://fionavoss.blog/2018/10/25/subdomains-in-rails/">Testing subdomains in Ruby on Rails, with and without lvh.me</a></p>
<p><a href="https://gist.github.com/indiesquidge/b836647f851179589765">Subdomaining Localhost with Rails 5</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
        <tag>ErrorTracking</tag>
      </tags>
  </entry>
  <entry>
    <title>ErrorTracking - nuxt document is not defined</title>
    <url>/posts/error-tracking-nuxt-document-is-not-defined/</url>
    <content><![CDATA[<p>在nuxt中添加plugins时，遇到的问题，Google了大半天才解决，记录下以备忘。</p>
<span id="more"></span> 

<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>自定义plugins，里面引用了jquery，比如pluginA.js：</p>
<pre><code class="javascript">// plugins/pluginA.js
import $ from &#39;jquery&#39;
export default function(&#123; app &#125;) &#123;
  .....
  $(&#39;body&#39;).append(&quot;&lt;div&gt;hello&lt;/div&gt;&quot;)
  .....
&#125;
</code></pre>
<p>修改<code>nuxt.config.js</code>文件，将pluginA.js 加入到plugings中：</p>
<pre><code class="javascript">// nuxt.config.js

plugins: [
   &#39;~/plugins/pluginA&#39;
]
</code></pre>
<p>重启后，一直报错：</p>
<blockquote>
<p>document is not defined</p>
</blockquote>
<p>或者</p>
<blockquote>
<p>jQuery requires a window with a document</p>
</blockquote>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>官网<a href="https://nuxtjs.org/faq/window-document-undefined/">window or document undefined?</a> 部分给到了解释：</p>
<blockquote>
<p>This is due to the server-side rendering. If you need to specify that you want to import a resource only on &gt; &gt; the client-side.</p>
</blockquote>
<p>查看文档<a href="https://nuxtjs.org/guide/plugins">plugins</a> ， 在 <a href="https://nuxtjs.org/guide/plugins/#client-side-only">Client-side only</a>部分给到了解决方法，使用option：<code>ssr: false</code></p>
<p>修改nuxt.config.js文件：</p>
<pre><code class="javascript">// nuxt.config.js

plugins: [
   &#123; src: &#39;~/plugins/pluginA&#39;, ssr: false &#125;
]
</code></pre>
<p>重启，OK.</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://nuxtjs.org/guide/plugins/#client-side-only">plugins Client-side only</a></p>
<p><a href="https://nuxtjs.org/faq/window-document-undefined/">window or document undefined?</a></p>
<p><a href="https://cmty.app/nuxt/nuxt.js/issues/c7001">Use jquery error “jQuery requires a window with a document”!</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Nuxt</tag>
        <tag>ErrorTracking</tag>
      </tags>
  </entry>
  <entry>
    <title>有关load中的参数true</title>
    <url>/posts/explain-true-function-in-load/</url>
    <content><![CDATA[<p>再探Ruby中的load。</p>
<span id="more"></span> 

<p>Ruby中的load method用来加载文件，也就是将另一个ruby文件中的代码加载进来了。</p>
<p>《Ruby元编程》中提到，使用load时，可能会出现<strong>常量</strong>污染当前程序的命名空间的问题，添加了true这个参数后，Ruby会创建一个匿名模块，用它作为命名空间来容纳加载文件中定义的<strong>所有常量</strong>，从而避免污染的问题，但是书中并没有给出例子来详细说明。</p>
<p>来看两个例子感受下：</p>
<p>同一个目录下，存在两个文件，a.rb, b.rb，a中加载了b.rb文件。</p>
<pre><code class="ruby"># b.rb
## 只定义了一个普通的常量Y
Y = &quot;hello&quot;
</code></pre>
<p>a.rb中加载b.rb</p>
<pre><code class="Ruby"># a.rb
load &#39;./b.rb&#39;

Y = &quot;hi&quot;

p Y
#=&gt; warning: already initialized constant Y
</code></pre>
<p>此时，执行a.rb，会报错，显示：warning: already initialized constant Y</p>
<p>也就是加载进来的常量Y与a.rb中的常量Y重了，系统报错显示已经初始化了Y。</p>
<p>如果添加了true，则输出”hi”。</p>
<pre><code class="Ruby"># a.rb
load &#39;./b.rb&#39;, true

Y = &quot;hi&quot;

p Y
#=&gt; hi
</code></pre>
<p>这里Y是一个常规的常量，ruby中类名，模块名也是常量，如果加载同名的类／模块会出现什么情况？</p>
<p>修改下b.rb文件：</p>
<pre><code class="Ruby"># b.rb
module Mymodule
    def hi
        p &quot;method hi in b.rb&quot;
    end
end
</code></pre>
<p>修改下a.rb文件：</p>
<pre><code class="Ruby"># a.rb
load &#39;./b.rb&#39;

class Mymodule
    def hello
        p &quot;hello&quot;
    end
end

Mymodule.new.hello

#=&gt; Mymodule is not a class
</code></pre>
<p>可以看到，加载后，执行a.rb时，报错，显示Mymodule is not a class，因为此时加载进来了一个同名的Mymodule，它是一个module，而a.rb文件中，定义了一个同名的Mymodule类，这个类其实并没有创建成功，这里稍微提一下，执行a.rb时，报错不是发生在执行Mymodule.new.hello时，而是在定义Mymodule这个类的地方报错。</p>
<p>如果添加上true，就正常了。</p>
<pre><code class="Ruby"># a.rb
load &#39;./b.rb&#39;, true

class Mymodule
    def hello
        p &quot;hello&quot;
    end
end

Mymodule.new.hello

#=&gt; hello
</code></pre>
<p>这里，你可能会疑惑，添加了true之后，原本来自b.rb中那个Y，module Mymodule去了哪里？书中提到，<strong>Ruby会创建一个匿名模块，用它作为命名空间来容纳加载文件中定义的所有常量， 加载完成后，该模块会被销毁</strong>，也就是等同于他们根本就没有加载进来了？怎么知道它们真的没有加载进来？</p>
<p>可以通过<strong>Module的类方法constants</strong>来判断，该方法返回当前顶层程序中的所有常量。</p>
<p>修改下b.rb ，改回原来的样子：</p>
<pre><code class="Ruby"># b.rb

Y = &quot;hello&quot;
</code></pre>
<p>修改下 a.rb:</p>
<pre><code class="Ruby"># a.rb
# 未加载b.rb

p Module.constants

#=&gt; [:Integer, :Float, :String, :Array, :Hash, :NilClass, :STDERR, :STDIN, :NIL, :Delegator, :STDOUT, :ARGF, :SimpleDelegator, :UncaughtThrowError, :FileTest, :File, :GC, :Fiber, :FiberError, :Rational, :ObjectSpace, :Gem, :DidYouMean, :Complex.......]

p Module.constants.count
#=&gt; 117

p Module.constants.include? :Y
#=&gt; false
</code></pre>
<p>加载b.rb，无true：</p>
<pre><code class="Ruby"># a.rb
load &#39;./b.rb&#39;

p Module.constants

#=&gt; [:Integer, :Float, :String, :Array, :Hash, :NilClass, :STDERR, :STDIN, :NIL, :Delegator, :STDOUT, :ARGF, :SimpleDelegator, :UncaughtThrowError, :FileTest, :File, :GC, :Fiber, :FiberError, :Rational, :Y, :ObjectSpace, :Gem, :DidYouMean, :Complex.......]

p Module.constants.count
#=&gt; 118

p Module.constants.include? :Y
#=&gt; true
</code></pre>
<p>此时<strong>Y</strong>加载进来了，常量总数加1。</p>
<p>加载b.rb，有true：</p>
<pre><code class="Ruby"># a.rb
load &#39;./b.rb&#39;, true

p Module.constants

#=&gt; [:Integer, :Float, :String, :Array, :Hash, :NilClass, :STDERR, :STDIN, :NIL, :Delegator, :STDOUT, :ARGF, :SimpleDelegator, :UncaughtThrowError, :FileTest, :File, :GC, :Fiber, :FiberError, :Rational, :ObjectSpace, :Gem, :DidYouMean, :Complex.......]

p Module.constants.count
#=&gt; 117

p Module.constants.include? :Y
#=&gt; false
</code></pre>
<p>输出结果与未加载b.rb完全一致。</p>
<p>也就是书中说的那样，添加true后，<strong>Ruby会创建一个匿名模块，用它作为命名空间来容纳加载文件中定义的所有常量， 加载完成后，该模块会被销毁</strong>。</p>
<p>等同于<strong>load添加true后，所有的常量都没有加载进来</strong>。当然这里的常量，包括类名，模块名。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://book.douban.com/subject/26575429/">Ruby元编程(第2版)</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>观《背靠背，脸对脸》</title>
    <url>/posts/film-back-to-back-face-to-face/</url>
    <content><![CDATA[<p>这是一部94年的作品，共两个多小时，看完就一个感觉，这部小长篇拍得真的是好。</p>
<span id="more"></span> 

<p>电影一开场，镜头是一个拎着公事包的男人进家门，跟自己的老父亲唠嗑，老父亲在补着鞋，墙上挂着一副黑白照片，算是交代了男人的母亲已离世，不知道为什么，他们说话的这个场景让我感觉特别有那个时代的味道，莫名觉得很舒服，老父亲边忙活着边跟儿子说“昨天下午李会计的娘来修鞋，说你八成要当馆长。” 故事便从这里开始了。</p>
<p>大致的剧情简单交代下。刚刚进门的男人是某地文化馆的代馆长，王双立，因为做了好几年的代馆长，而此时又正值馆长任选，他原本以为自己胜券在握，连民意测验的时候，写的都是自己的名字，随后为了巴结现任的冷局长，王双立安排了一场公开招聘，想要“名正言顺”地让冷局长的女儿冷冰冰进入文化馆工作，这场公开招聘最后的结果还挺逗的，因为冷冰冰没有来参加应聘，在王双立的提前安排下，所有的参赛人员都拿到了相同的分数，最后结果算是作废，没有人录取。从这个细节看，我感到王双立挺适合从政的。</p>
<p>值得一提的是，在那场公开招聘中，场外的围观群众中出现了两个人，一个是年事已高的老马，他就是即将上任的馆长「扮演老马的是雷恪生，他主演过的电影《大捷》也是相当好看」，另一个则是小阎，冷局长的秘书，在后面老马下台后，他成了馆长，故事的最后，已有家室的他跟馆里的一个妹子私奔了。</p>
<p>招聘会结束后，新馆长上任，需要住所，王双立提出李会计有私房，可以让他搬出去，额，这一波操作真是6，之前馆长一职没有定论，王特意问过李会计，结果他闭口不谈，这下把他的房子供出去，一方面解决了新馆长的住处，让冷局长觉得他办事有力，一方面也让李事先就对新馆长不爽，为后面老马上任提前树敌了。当然更重要的，我觉得他是气李会计没有提前跟他通气，有点小鸡肚肠，公报私仇的味道。李会计后面得知消息，问王他们是怎么知道自己有私房的事情的？王回答说上午小阎陪老马来馆里看过了，很明显，他撒谎了，巧妙地设了个圈。</p>
<p>老马上任后，王双立利用工程一事给老马制造了麻烦，中间各种细节不表，最后老马的下台则是基于一次摄影展的照片，这张照片谁选的呢？王双立，看到这里的时候，真心觉得这人真的是太工于心计了。</p>
<p>好笑的是，费劲心思弄走了老马，王双立的馆长梦并没有成真，小阎上任了，继续开始新一轮的打怪。我觉得这个剧在这一点的安排上特别好玩，好比你特别想吃一颗糖，挖空了心思想要拿到，在你以为触手可及时，偏偏让别人把它拿走了。中间他和小阎闹了别扭，还插入了他父亲修坏了小阎鞋的一段，想到他之前欺负老马，这回却让小阎这个后生给欺负了，也算是一物降一物？对小阎这个人物我并没有什么好感。其实越看到后面，越觉得王双立虽然过于心计，但还是很适合做馆长的，他能把事情给办成了，有能力，比如建歌舞厅那件事，还能照顾到他人的一些感受 ，擅长处理复杂的人际关系，不给自己树敌，个人生活上也不胡搞瞎搞，对媳妇好，对父亲孝顺，整个事件中，他想要的不过是正馆长那个职位，并没有什么要害人的心思。后面他被气昏了住院，出院后，馆里负责摄影的猴子找到他，拿着拍到的不雅照片，说要举报小阎，让王重新回到馆里，他却劝他不要这么做，还撕毁了照片，告诉猴子，以后把镜头对准正面，我突然觉得这时的他真的挺讨人喜欢的。</p>
<p>看的时候，发现承包建筑工程的那位石经理，有点面熟，特意去查了下演员表，竟然是张嘉译。不得不说，张嘉译大叔年轻的时候，活脱脱的小鲜肉一枚。</p>
<p>网上有人说这是部近代版的官场现形记，我没有看过晚清这本《官场现形记》，不下结论，我只觉得不管什么环境，保持善良是根本，很多外在的事物会考验你，左右你，让你看不清，让你错把不重要的东西当成了宝，作出损害他人的事情，但最终，你面对的还是自己的内心。</p>
<p>又跑题了，总之，这是部好电影，两个多小时，说了个很精彩的故事，推荐。</p>
]]></content>
      <categories>
        <category>Film</category>
      </categories>
      <tags>
        <tag>Film</tag>
      </tags>
  </entry>
  <entry>
    <title>观《剑雨》</title>
    <url>/posts/film-reign-of-assassins/</url>
    <content><![CDATA[<p>很久没看到这样好看的武侠片了，刷完意犹未尽，全程无尿点，刷完看了下，竟是2010年的作品，如果放在现在，定然大卖。</p>
<span id="more"></span> 

<p>忍不住要剧透了。</p>
<p>故事发生在明朝，800年前，天竺人罗摩渡海来中原弘法，净身入梁武帝宫中说法，后渡江，在九华山面壁十九年，练就绝世武功，死后数年，遗体被盗，并被分成上下两部，江湖传闻，谁拿到遗体，就能练就绝世武功，称霸武林，一时江湖风云骤起。当时，其一半的遗体为当朝首辅张海端所有，著名的暗杀组织黑石，对遗体蠢蠢欲动，其首领转轮王，带领手下三名高手细雨，雷彬，彩戏师连绳，血洗了太师府，混乱中，细雨夺走了遗体，不知所踪，随后转轮王悬赏重金买细雨人头，细雨一路遭众江湖人士追杀，全身而退后，她找到了名医李鬼手， 易容化名为曾静，隐居市井，过上了普通百姓的生活。在这里，她遇到了以跑腿为生的江阿生【类似现在送快递的小哥】，两人互生情愫，结为夫妻。而与此同时，转轮王也找到了一位细雨的替代品：叶绽青。</p>
<p>这里要提一下，在易容前，细雨向李鬼手讲述了夺走遗体那晚发生的事情：在她过桥出城的时候，遇到了一身重伤的张人凤，张海端的儿子，两人交手时，细雨些许迟疑，张人凤被刺伤，落桥。也是在这里，细雨遇到了陆竹，而这个带发修行的高手，用佛法和剑道，外搭自己一条命，点化了细雨。【这段讲述极为重要，为后面的诸多地方埋下了伏笔】</p>
<p>贼喜欢陆竹教细雨四招的那段，行云流水，拍的真TM好看。</p>
<p>婚后半年，一次两人去钱庄取钱，遇上危险，细雨为救阿生，不得已出手，暴露了行踪，转轮王随后集结了手下雷彬，彩戏师和叶绽青，来与细雨谈判，为了救自己的丈夫，细雨答应了转轮王的要求，交出自己拿到的那部分遗体，同时和雷彬，彩戏师合作，帮助他拿到遗体的另一部分。在他们合力抢夺另一份遗体时，黑石内乱，彩戏师连绳想要拿到遗体，内乱中，细雨被转轮王重伤，连绳被杀。</p>
<p>重伤逃出的细雨回到家中，叮嘱阿生离开京城，阿生将重伤晕倒的细雨放在床上，此时，雷彬和叶绽青赶来，阿生不慌不忙取出藏在地板下面的剑，原来他就是当年那个落桥的张人凤，他没有死，醒来后被救起，并在李鬼手那里换了张脸。阿生杀死了雷彬，偷走了遗体，并与转轮王相约城外决战。而逃走的叶绽青最终被转轮王活埋。至于转轮王得到遗体的目的，其实挺狗血的。弄到头，竟然是为了这个，我擦嘞。</p>
<p>决战前，细雨醒来，知道了阿生的真实身份，原来她是害他家破人亡之人，两人交手，细雨施计让阿生假死，独自一人赴约，在城外与转轮王决战，最终细雨身受重伤，转轮王中剑而亡，阿生醒来，两人和好。</p>
<p>片中有几处挺让人感动的。</p>
<blockquote>
<p>易容后的细雨，找到了见痴师父，问师父陆竹的那句“愿化身石桥，受五百年风吹，五百年日晒，五百年雨打“是何意，师父说了阿难的典故，然后转头说了句：“他对你很好啊”。</p>
<p>每次落雨时，阿生都会快步跑到细雨的摊位，说：“正好路过，我来帮你收拾。”</p>
<p>阿生坐在桌前啃着细雨给他买的那份豆皮。</p>
<p>雷彬拖着重伤，奄奄一息回到自己家中，看着熟睡中的妻儿，吃那一口面的满足。</p>
<p>细雨满身血迹，看着倒地的阿生，吐出那句：“我愿化身石桥，受五百年风吹，日晒，雨打。”</p>
<p>阿生抱起受伤的细雨：</p>
<p>“走吧，我们回家吧”</p>
<p>“回家后，你写一封休书给我吧”</p>
<p>“说什么傻话，以后的日子还长着呢”</p>
</blockquote>
<p>裂墙推荐。</p>
]]></content>
      <categories>
        <category>Film</category>
      </categories>
      <tags>
        <tag>Film</tag>
      </tags>
  </entry>
  <entry>
    <title>观《一一》</title>
    <url>/posts/film-yiyi/</url>
    <content><![CDATA[<p>杨德昌导演的最后一部长篇电影。</p>
<span id="more"></span> 

<p>第一次知道这个导演还是看《牯岭街少年杀人事件》，当时其实是冲着张震去看的，看完后，便去搜了这部片子的导演，随后知道了《一一》，刷完，被圈粉。</p>
<p>这周末下暴雨，脑子里莫名想起片子里的一个镜头，八岁的洋洋在打雷的雨天，摘下帽子，放下书包，脱了鞋，小小的人儿，一头扎进了泳池。当然，还有结尾处，那段经典。他照着本子写的话，一句句读给婆婆听，大多数人看到这里，大抵都会泪目吧。</p>
<p>趁着雨夜，索性再刷了一次，电影时长近3个小时，像是一个人跟你慢慢说了个故事，等到故事说完了，你才意识到原来已经过了近三个小时。</p>
<p>即使是三刷，也依然是一部一点也不枯燥的电影。</p>
<p>故事很简单，但是内容却一点都不简单，就不剧透了。有人说，看完这部片子好像走完了一生，我没有那么深刻的体会，我只是单纯觉得，像是有人拉开了幕布，你花三个小时完全沉浸在另一个世界里，等到闭幕时，心下舒坦，别无其他，这就够了。</p>
<p>杨导已不再，真希望有更多这样类似的好电影，让人心甘情愿花上三个小时，四个小时，安安静静听故事。</p>
<p>电影中不少对白很有意思，摘录下：</p>
<blockquote>
<p>他书好像读得多了点，对钱没那么在乎。</p>
</blockquote>
<blockquote>
<p>其实这样自言自吾对我来说蛮难的，我这样讲你不要生气，我觉得好像在拜拜。除了不知道对方是不是能够听得到之外，对我自己所讲的话是不是真心的好像也没什么把握。不过讲实话原本自己很有把握的一些事，现在看一看好像觉得少的可怜。</p>
</blockquote>
<blockquote>
<p>爸比，你看到的我看不到，你看到的我也看不到啊，我怎么知道你在看什么呢？爸比，我们是不是只能知道一半的事情啊？我们只能看到前面，看不到后面，这样不就有一半的事情看不到了吗？</p>
</blockquote>
<blockquote>
<p>人是不可能让另外一个人去教他怎么活下去，怎么过日子。</p>
</blockquote>
<blockquote>
<p>你不在的时候，我有个机会去过了一段年轻时候的日子。本来以为，我再活一次的话，也许会有什么不一样。结果……还是差不多，没什么不同。只是突然觉得，再活一次的话，好像……真的没那个必要，真的没那个必要。</p>
</blockquote>
<blockquote>
<p>突然之间，所有那些音乐我都听懂了。</p>
</blockquote>
<blockquote>
<p>你看这么些年，我这么辛苦，我这么努力，嘿，我从早忙到晚，你知道不知道，我一点都不快乐。<br>做的都不是自己喜欢做的事，怎么会快乐呢？</p>
</blockquote>
<blockquote>
<p>婆婆，我不知道的事情太多了，所以，你知道我以后想做什么吗？我要去告诉别人他们不知道的事情，给别人看他们看不到的东西。我想，这样一定天天都很好玩。</p>
</blockquote>
<blockquote>
<p>婆婆，我好想你，尤其是我看到那个还没有名字的小表弟，就会想起你常跟我说：你老了。我很想跟他说：我也觉得……我也老了。</p>
</blockquote>
]]></content>
      <categories>
        <category>Film</category>
      </categories>
      <tags>
        <tag>Film</tag>
      </tags>
  </entry>
  <entry>
    <title>用flex置底footer</title>
    <url>/posts/footer-always-on-the-buttom-with-flex/</url>
    <content><![CDATA[<p>看过别人写的一些footer置底的文章，试了一些，发现了一个特别简单的置底方式，不用考虑footer的高度，也不用设置padding-bottom啥的，用flex，两步即可。</p>
<span id="more"></span> 

<p>以下以Rails为例：</p>
<h5 id="一、设置html部分"><a href="#一、设置html部分" class="headerlink" title="一、设置html部分"></a>一、设置html部分</h5><p><code>application.html.erb</code>中的内容：</p>
<pre><code class="Html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    .....
  &lt;/head&gt;

  &lt;body&gt;
    &lt;div class=&quot;content&quot;&gt;
      &lt;div class=&quot;container-fluid&quot;&gt;
        &lt;div class=&quot;row&quot;&gt;
          &lt;%= render &quot;common/navbar&quot;%&gt;
          &lt;%= yield %&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;%= render &quot;common/footer&quot;%&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h4 id="二、设置CSS部分"><a href="#二、设置CSS部分" class="headerlink" title="二、设置CSS部分"></a>二、设置CSS部分</h4><p><code>application.scss</code>中填入：</p>
<pre><code class="Css">html &#123;
    height: 100%;
&#125;
body &#123;
  min-height: 100%;                                   // footer固定底部
  display: flex;                                      // footer固定底部
  flex-direction: column;                             // footer固定底部                       
&#125;
.content &#123;
 flex: 1;
&#125;
</code></pre>
<p>OK！不管你的footer样式如何，高度几许，都可以完美实现置底。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://segmentfault.com/a/1190000004453249">将footer固定在页面底部的实现方法</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
      </tags>
  </entry>
  <entry>
    <title>写在Blog四年</title>
    <url>/posts/four-years-anniversary/</url>
    <content><![CDATA[<p>竟过去四年了.</p>
<span id="more"></span>

<p>要煽情下.</p>
<p>17年搭这个Blog的时候, 还是个连HTTP是什么都不甚清楚的门外汉.</p>
<p>四年过去了, 码了点字, 虽然离当初自己设想的产出差距很大, 但是, 没办法, 谁让作者是个懒散的家伙呢? 哈哈.</p>
<p>有些东西, 你自己都说不清楚为什么会喜欢, 甚至会在平淡的日子里, 认为已经对其无感了, 直到某一天, 再次因为它而喜悦的时候, 才明白原来真的是有光的.</p>
<p>是你喜欢的, 就够了.</p>
<p>至于那段长达几个月没有产出的日子, 受到了《On Writing Well》的一丢丢影响, 看作者列出的一些写作规范, 会感觉自己写的东西好💩️, 外加看了些自己关注的博主, 陷入了同他人对比的大坑里面, 啧啧, 人家这才叫文章质量, 瞅瞅你这写得………..</p>
<p>好吧, 努力写得不那么S…….</p>
<p>也努力勤快点, 指不定哪天量变引起质变啥的………</p>
<p>不管怎样, 后面的日子里, 请继续这份简单的喜欢吧.</p>
<p>一直喜欢, 一直练习, 然后无法割舍.</p>
<p>最后, 谢谢.</p>
<p>谢谢你曾让我心动, 并将一如既往令我心动.</p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>Life</tag>
      </tags>
  </entry>
  <entry>
    <title>clone git repos with submodules</title>
    <url>/posts/git-clone-repos-with-submodules/</url>
    <content><![CDATA[<p>踩坑 git submodules。</p>
<span id="more"></span> 

<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>当你需要clone的repos中，含有submodules时，我们会用到<code>git clone —recursive</code>这个命令，我今个也遇到了，然后很不幸地掉坑了，一直无法成功clone，Google后，搞定！现附上解答细节。</p>
<h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><p>先来认识下git中的子模块submodule。</p>
<p>A <strong>submodule</strong> in a git repository is like a sub-directory which is really a separate git repository in its own right. This is a useful feature when you have a project in git which depends on a particular versions of other projects。</p>
<p>我的理解是当你的repos需要依赖于第三方的repos时，可以用submodule的方式，把这些repos作为你的子模块引入进来使用，而这些repos本身仍是独立的。</p>
<p>「添加submodule可以使用命令：<code>git submodule add</code> 后面加上URL即可。」</p>
<p>以clone<a href="https://github.com/strongqa/howitzer_example_cucumber">howitzer_example_cucumber</a>为例。可以看到有四个文件长得不大一样，这些其实就是submodule。</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fmue1wst1nj306i0dat95.jpg"></p>
<p>如果你直接clone, 使用命令：</p>
<pre><code>git clone git@github.com:strongqa/howitzer_example_cucumber.git
</code></pre>
<p>你会发现clone到本地后，那些submodule的文件存在，但里面没有任何文件。</p>
<p>这时就需要添加``–recursive<code> </code>这个选项，<a href="https://github.com/strongqa/howitzer_example_cucumber">howitzer_example_cucumber</a>文档下也列出了命令：</p>
<pre><code>git clone --recursive git@github.com:strongqa/howitzer_example_cucumber.git
</code></pre>
<p>终端输入后，报错：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fmuf22enbcj30s303s74w.jpg"></p>
<p>没有clone成功，显示<code>Permission denied (publickey)</code></p>
<p>google了一下，大部分人都是说修改你的ssh, 可我发现clone其他的repos没问题啊，说明我的ssh没毛病，clone带有submodule的却出问题，被拒绝，肯定跟submodule有关， 应该有其他方法。在stack overflow: <a href="https://stackoverflow.com/questions/39286354/git-clone-recursive-fails/47977557#47977557">git clone –recursive fails</a>上找到了最方便的解答。</p>
<p><strong>非常直接：使用https格式</strong></p>
<p>终端输入：</p>
<pre><code>git clone --recursive https://github.com/strongqa/howitzer_example_cucumber
</code></pre>
<p>搞定！</p>
<p>PS. 看了其他文档，发现<strong>还有个方法</strong>，使用<code>git submodule init</code> , <code>git submodule update</code>.</p>
<p> 亲测有效，一并附上：</p>
<p>还是clone上面的repos，终端输入：</p>
<pre><code>git clone https://github.com/strongqa/howitzer_example_cucumber
cd howitzer_example_cucumber
git submodule init
git submodule update
</code></pre>
<p>OK  !!</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97">Git 工具 - 子模块</a></p>
<p><a href="https://stackoverflow.com/questions/39286354/git-clone-recursive-fails/47977557#47977557">git clone –recursive fails</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>git常用命令及报错记录</title>
    <url>/posts/git-commands-summary/</url>
    <content><![CDATA[<p>学 Git 笔记。</p>
<span id="more"></span> 

<h4 id="全局设置"><a href="#全局设置" class="headerlink" title="全局设置:"></a>全局设置:</h4><pre><code>git config —global user.name “your name”
git config —global user.email your.emailaddress@example.com
</code></pre>
<p>初始化：</p>
<pre><code>git init
</code></pre>
<p>将档案加入git 中（track files）：</p>
<pre><code>git add &lt;filename&gt;
</code></pre>
<p>当前目录全部track：</p>
<pre><code>git add .
git commit -m “信息”
</code></pre>
<h4 id="分支部分："><a href="#分支部分：" class="headerlink" title="分支部分："></a>分支部分：</h4><p>新建：</p>
<pre><code>git checkout -b &lt;branch_name&gt;
</code></pre>
<p>合并：</p>
<pre><code>git checkout master
git merge &lt;branch_name&gt;
</code></pre>
<p>重命名：</p>
<ul>
<li><p>非当前分支:</p>
<pre><code>git branch -m &lt;oldname&gt; &lt;newname&gt;
</code></pre>
</li>
<li><p>当前分支：</p>
<pre><code>git branch -m &lt;newname&gt;
</code></pre>
</li>
</ul>
<p>删除：</p>
<pre><code>git branch -D &lt;branch_name&gt;
</code></pre>
<p>查看所有分支：</p>
<pre><code>git branch
</code></pre>
<h4 id="Origin更换："><a href="#Origin更换：" class="headerlink" title="Origin更换："></a>Origin更换：</h4><p>本地项目新建后，去除旧链接，建立新链接，在终端输入：</p>
<pre><code>git remote -v
git remote rm origin
git remote -v
git remote add origin git@github.com:你的github用户名/your-project
git push -u origin master
</code></pre>
<h4 id="其他："><a href="#其他：" class="headerlink" title="其他："></a>其他：</h4><p>取消stage：</p>
<pre><code>git reset HEAD &lt;file&gt;
</code></pre>
<p>撤销commits :</p>
<pre><code>git revert HEAD
</code></pre>
<p>修改commits：</p>
<pre><code>git commit --amend
</code></pre>
<p>对于需要删除的commit，遵循向前的原则，继续修改，然后commit，而不是删除之前的commit</p>
<p>取消git init:</p>
<pre><code>rm -rf .git
</code></pre>
<h4 id="报错记录："><a href="#报错记录：" class="headerlink" title="报错记录："></a>报错记录：</h4><h5 id="Updates-were-rejected"><a href="#Updates-were-rejected" class="headerlink" title="Updates were rejected"></a>Updates were rejected</h5><p>将本地的repos push到GitHub上时，使用<code>git push origin master</code>，报错：</p>
<pre><code>error: failed to push some refs to &#39;https://github.com/XXX/YYY.git&#39;
hint: Updates were rejected because the remote contains work that you do
hint: not have locally. This is usually caused by another repository pushing
hint: to the same ref. You may want to first integrate the remote changes
hint: (e.g., &#39;git pull ...&#39;) before pushing again.
hint: See the &#39;Note about fast-forwards&#39; in &#39;git push --help&#39; for details.
</code></pre>
<p>这时，在终端执行如下代码：</p>
<pre><code>git push -f origin master
</code></pre>
<h5 id="error-src-refspec-master-does-not-match-any"><a href="#error-src-refspec-master-does-not-match-any" class="headerlink" title="error: src refspec master does not match any."></a>error: src refspec master does not match any.</h5><p>新建了new project后，与GitHub上的origin相关联，运行如下代码后，报错：</p>
<pre><code>git remote add origin https://github.com/XXX/YYY.git
git push -u origin master

error: src refspec master does not match any.
error: failed to push some refs to &#39;https://github.com/XXX/YYY.git
</code></pre>
<p>这是由于目前的project中，并没有git add任何文件，也没有任何commit，类似git版本控制中没有任何东西，是空的，所以会报错，解决方法也很简单，终端运行如下代码：</p>
<pre><code>git add .
git commit -m &quot;new project created&quot;
git push -u origin master
</code></pre>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Github Action 打包IOS项目踩坑</title>
    <url>/posts/github-actions-fastlane-ios-application/</url>
    <content><![CDATA[<p>折腾了好些天, 最终成功编译打包 IOS应用 上传到 TestFlight , 记录下中途踩的坑.</p>
<span id="more"></span>

<p>题外话:</p>
<p>Github Action 官方给到的 MacOS 的 Per-minute rate 是 Linux 的10倍, 老大说把闲置的一台 Mac mini 用上, 所以后面改用了 self-hosted runner. 省了笔琐碎银子, 也方便了 Debug…..</p>
<p>主要的坑是两步验证 和 KeyChain问题.</p>
<h4 id="两步验证"><a href="#两步验证" class="headerlink" title="两步验证"></a>两步验证</h4><p>苹果官方强制要求两步验证登录 Apple 开发者帐号, 但是使用 Github actions 在非交互模式下, 你是无法输入验证码的, Fastlane 官方提供了解决方法: <a href="https://docs.fastlane.tools/app-store-connect-api/">App Store Connect API</a></p>
<p>按照文档提示配置下, 没啥问题. 这里简单提下我的做法.</p>
<p>在App Store Connect 中获取到 key_id, issuer_id, key(.p8文件的内容)</p>
<p>在Fastlane文件中添加如下代码:</p>
<pre><code class="kotlin">lane :beta do |options|
  app_store_connect_api_key(
    key_id: ENV[&#39;ASCAPI_KEY_ID&#39;],
    issuer_id: ENV[&#39;ASCAPI_ISSUER_ID&#39;],
    key_filepath: &#39;authkey.p8&#39;,
    duration: 1200, # optional (maximum 1200)
    in_house: false # optional but may be required if using match/sigh
  )
  match(type: &quot;appstore&quot;)

  enable_automatic_code_signing
  gym(scheme: &quot;Leaf&quot;) # Build your app
  pilot
  .....
end
</code></pre>
<p>调用 <code>app_store_connect_api_key</code> 后, 需要认证的 Action, 比如pilot, 会自动加载 <code>Actions.lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]</code>. 所以务必将 <code>app_store_connect_api_key</code> 放在所有需认证的 Action 之前.</p>
<p>这里 ENV 的变量 <code>ASCAPI_KEY_ID</code>,  <code>ASCAPI_ISSUER_ID</code> 都可以设置在 Github 的 secrets 中.</p>
<p>而文件 <code>authkey.p8</code> 可以使用 <code>gpg</code> 加密解密.</p>
<p>本地终端执行:</p>
<pre><code class="shell">gpg -c --armor authkey.p8
</code></pre>
<p>会要求输入 passphrase, 最后生成文件 authkey.p8.asc.  这个 passphrase 需要添加到 secrets 中, 后续解密要用到.</p>
<p>在<code>.gitignore</code> 中添加 authkey.p8, 忽略该文件, 将 authkey.p8.asc 文件提交.</p>
<p>然后在 github action 的 Workflow 配置文件中解密:</p>
<pre><code class="yaml">- name: decrypt auth file
  run: |
    gpg -d --passphrase $&#123;&#123; secrets.DEPLOY_ENC_KEY &#125;&#125; --batch authkey.p8.asc &gt; authkey.p8
</code></pre>
<p>这里 secrets 的 DEPLOY_ENC_KEY 就是刚刚加密时用的 passphrase .</p>
<p>如果觉得麻烦, 也可以将 key_filepath 改成 key 参数, 把 authkey.p8 中的内容贴到 secrets 中也可以. 具体可参看官方文档:</p>
<pre><code class="kotlin">  app_store_connect_api_key(
    key_id: ENV[&#39;ASCAPI_KEY_ID&#39;],
    issuer_id: ENV[&#39;ASCAPI_ISSUER_ID&#39;],
    key: ENV[&#39;ASCAPI_KEY&#39;],
    duration: 1200, # optional (maximum 1200)
    in_house: false # optional but may be required if using match/sigh
  )
</code></pre>
<h4 id="Keychain-问题"><a href="#Keychain-问题" class="headerlink" title="Keychain 问题"></a>Keychain 问题</h4><p>这个是花时间最久的地方,  遇到坑了.</p>
<p>首先在 Self-hosted runner 中, 跑一次编译打包, 一路下来, 成功发布到了TestFlight.</p>
<p>但使用 Github Action 时, 报错:</p>
<pre><code>▸ Running script &#39;[CP] Embed Pods Frameworks&#39;
** ARCHIVE FAILED **


The following build commands failed:
    PhaseScriptExecution [CP]\ Embed\ Pods\ Frameworks /Users/***/Library/Developer/Xcode/DerivedData/Leaf-acuongxlhifqldeauyqugojdtjev/Build/Intermediates.noindex/ArchiveIntermediates/Leaf/IntermediateBuildFilesPath/Leaf.build/Release-iphoneos/Leaf.build/Script-46D1B8D72193B7966B5CC35AB1794FCF.sh
(1 failure)
[17:40:06]: Exit status: 65
</code></pre>
<p> match 通过, 但 build app 报错.</p>
<p>改用 SSH 远程执行命令, 去打包, 报了同样的错误. 也就是在非交互模式下, build 失败, 交互模式下,build 成功.</p>
<p>Google 了半天, 基本都说是 key-chain 的问题.</p>
<p>有的解决方法中, 提到了使用 Fastlane 官方的 <a href="https://docs.fastlane.tools/actions/setup_ci/">setup_ci</a>  action, 可以创建临时的key-chain. 尝试了下, 没有效果.</p>
<p>最后的解决方法参考了<a href="https://imtx.me/blog/how-to-unlock-macos-keychain-with-remote-login/">远程终端登录下如何解锁 macOS Keychain</a> .</p>
<p>Self-hosted runner 需要运行 <code>./run.sh</code> 来监听Workflow,  tmux 建 Session , 开两个Window, 一个跑   <code>./run.sh</code> , 另一个Window中, 执行</p>
<pre><code class="shell">security unlock-keychain login.keychain
</code></pre>
<p>会提示输入用户的登录密码, 输入即可.</p>
<p>在 Github Action 中再次执行 Workflow,  OK.</p>
<p>当然, 也可以直接在 Workflow配置文件中添加如下步骤 [ 在跑 fastlane 步骤之前]:</p>
<pre><code class="yaml">- run: security unlock-keychain -p $&#123;&#123; secrets.PASSWD &#125;&#125; ~/Library/Keychains/login.keychain
</code></pre>
<p>PASSWD 为用户的登录密码.</p>
<p>OK.</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考:"></a>参考:</h4><ul>
<li><a href="https://docs.fastlane.tools/app-store-connect-api/">fastlane Using App Store Connect API</a></li>
<li><a href="https://imtx.me/blog/how-to-unlock-macos-keychain-with-remote-login/">远程终端登录下如何解锁 macOS Keychain</a></li>
</ul>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>IOS</tag>
      </tags>
  </entry>
  <entry>
    <title>你好啊, 小羊</title>
    <url>/posts/hello-little-sheep/</url>
    <content><![CDATA[<p>花了一两个月的时间, 把去年下半年至今刷的一些书给稍微整理了下.</p>
<span id="more"></span>


<p>一些尚未整理的, 怕也只能留待年底的时候再填坑了.</p>
<p>刷书的过程是快乐的, 整理的过程却不尽然.</p>
<p>不过最后整理完的感觉是舒服的.</p>
<p>这样的后果, 自然是CS方面的书都没啃完, APUE没刷到尾, CSAPP开了个头, Algorithm4光看不上手……</p>
<p>有得有失.</p>
<p>不过该填的坑, 还是要填的, 毕竟关乎吃饭 : P.</p>
<p>慢一点就慢一点吧, 最重要的是保有最初的那份好奇.</p>
<p>说点其他的.</p>
<p>五一小长假, 回老家待了几天.</p>
<p>过得很舒心.</p>
<p>5号那天下午, 天气很好, 跑去大坝上, 满眼是绿草地, 不远处有两只羊在躺着晒太阳. 壮着胆子走近, 小一点的那只起身嚼草, 大点的那只, 竟然站起来凑近了我, 可惜我太怂, 伸出手本想摸它额头, 结果犹豫了下, 又缩回去 , 它倒是很主动, 向前咬住了我的鞋子, 嚼了嚼, 松开了, 哈哈.</p>
<p>那一刻莫名觉得很开心, 大概是太久没这么跟小动物玩了.</p>
<p>想起Naval说的那句 “to do things for their own sake.”</p>
<p>是啊, 人生是一连串的霎那, doing things for the sheer fun of it.</p>
<p>小羊, 很高兴认识你啊, 下次回家有机会遇见, 摸摸你额头好不好?</p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>Life</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo报错记录</title>
    <url>/posts/hexo-error-recording/</url>
    <content><![CDATA[<p>hexo 升级踩坑。</p>
<span id="more"></span> 

<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>终端执行：</p>
<pre><code>hexo new XXXX
</code></pre>
<p>出现报错：</p>
<pre><code>NODE_MODULE_VERSION 48. This version of Node.js requires
Error: The module &#39;/usr/local/lib/node_modules/hexo-cli/node_modules/dtrace-provider/build/Release/DTraceProviderBindings.node&#39;
was compiled against a different Node.js version using
NODE_MODULE_VERSION 48. This version of Node.js requires
NODE_MODULE_VERSION 64. Please try re-compiling or re-installing
the module (for instance, using `npm rebuild` or `npm install`).
</code></pre>
<p>其中：Node 10.1.0, npm 5.6.0 , hexo 3.7.1</p>
<p>虽然这样的提示并不影响使用，但是每次都出现这么一长串，真的是有点受不了，于是决定解决它，没成想竟然是个坑。记录下解决过程。</p>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>按照提示，使用<code>npm rebuild</code> ，rebuild过程中出现了各种报错，最后还输出了这么一句<code>This is probably not a problem with npm</code>, 不是npm，难道是hexo?</p>
<p>随后Google，在hexo issues里找到了这篇<a href="https://github.com/hexojs/hexo/issues/2534">#2534</a>。尝试着用里面提到的方法：</p>
<pre><code>rm -rvf node_modules
npm install
</code></pre>
<p><code>npm install</code>时出错，后面我又<code>npm install</code>了一次，OK，没有报错，但是奇怪的是执行<code>hexo g -d</code> 依然会出现上面的报错，说明问题还是没有解决。</p>
<p>于是执行了这样的命令：</p>
<pre><code>npm update hexo
npm update -g hexo-cli
</code></pre>
<p>没有报错，应该是OK了，稍稍踏实了，再次执行<code>hexo g -d</code>，结果 还是报错，比上次更为严重：</p>
<p>hexo已经挂了。</p>
<p>显示<code>Cannot find module &#39;highlight.js/lib/languages/shell&#39;</code> .</p>
<p>既然找不到highlight， 那就安装一个吧！终端执行：</p>
<pre><code>npm install highlight.js --save
</code></pre>
<p>出现报错：</p>
<pre><code>node-pre-gyp ERR! Tried to download(404): https://fsevents-binaries.s3-us-west-2.amazonaws.com/v1.1.1/fse-v1.1.1-node-v64-darwin-x64.tar.gz
node-pre-gyp ERR! Pre-built binaries not found for fsevents@1.1.1 and node@10.1.0 (node-v64 ABI) (falling back to source compile with node-gyp)
node-pre-gyp http 404 status code downloading tarball https://fsevents-binaries.s3-us-west-2.amazonaws.com/v1.1.1/fse-v1.1.1-node-v64-darwin-x64.tar.gz
</code></pre>
<p>发现fsevents在之前的报错中也有出现过，难道是fsevents与node版本不兼容？Google后找到了这篇：</p>
<p><a href="https://github.com/strongloop/fsevents/issues/181">Install on OS X fails as prebuilt binary seems to be missing from S3 </a></p>
<p>上面提到了1.1.1版本存在bug，升级到1.2+，好，死马当活马医，<code>npm i fsevents</code> ，装了最新的fsevents, 1.2.3.</p>
<p>终端再次执行<code>hexo g -d</code>， OK，没有出现上诉报错了，一切正常!</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://github.com/hexojs/hexo/issues/2534">NODE_MODULE_VERSION 46. This version of Node.js requires NODE_MODULE_VERSION 51. Please try re-compiling or re-installing</a></p>
<p><a href="https://github.com/strongloop/fsevents/issues/181">Install on OS X fails as prebuilt binary seems to be missing from S3 </a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>ErrorTracking</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo图床迁移及页面404修复</title>
    <url>/posts/hexo-images-migration-and-page-404-error/</url>
    <content><![CDATA[<p>趁着放假，整了下hexo，顺带把之前遇到的一些问题一起倒腾了下，记录下两个比较费时的问题及相应解决方法。</p>
<span id="more"></span> 

<h4 id="图床迁移"><a href="#图床迁移" class="headerlink" title="图床迁移"></a>图床迁移</h4><p>问题描述：</p>
<p>图片无法显示：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/Snip20190606_14.png"></p>
<p>解决方法：</p>
<p>图片链接没有问题，在空白页面可以访问，在blog上无法访问，显示403，forbidden。用的是微博的图床，Google了后，找到了解决方法。</p>
<p>参考<a href="https://www.playpi.org/2019042701.html">解决微博图床防盗链的问题</a>， 作者写得非常详细，基本按照作者说的步骤来，没啥毛病，稍微卡住的地方在使用插件<a href="https://github.com/PicGo/picgo-plugin-pic-migrater">picgo-plugin-pic-migrater</a> 的时候，后面发现是自己手贱设置了代理导致。另，作者推荐了图片压缩软件Iimage，这里我用了<a href="https://imageoptim.com/mac">ImageOptim</a>，小巧方便，推荐。</p>
<h4 id="部分页面出现404"><a href="#部分页面出现404" class="headerlink" title="部分页面出现404"></a>部分页面出现404</h4><p>问题描述：</p>
<p>本地正常，但是部署后，发现<strong>部分页面</strong>出现404。</p>
<p>注意，这里是部分页面，大多数的页面都是可以正常访问的，导致该问题出现的原因，极有可能是GitHub上文件名和本地的文件名存在大小写差异。</p>
<p>解决方法：</p>
<p>第一个想法就是git mv，可惜尝试后，完全无效，改过后，终端显示.deploy_git (untracked content)。</p>
<p>好在Google到了这篇文章 <a href="http://timnew.me/blog/2014/08/20/hexo-file-name-escape-issue-and-solution/">Hexo file name escape issue and solution</a>，作者给出的方法简单粗暴，但是没关系，有效就好😁。</p>
<p>终端执行：</p>
<pre><code class="shell">cd .deploy_git
git rm -rf *
git add .
git commit -m &quot;clean all files&quot;
cd ..
hexo clean
hexo g -d
</code></pre>
<p>此时，GitHub上的文件已经完全同本地新生成的.deploy_git下的文件一样，完美解决。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.playpi.org/2019042701.html">解决微博图床防盗链的问题</a></p>
<p><a href="https://github.com/Molunerfinn/PicGo">PIcGo</a></p>
<p><a href="https://github.com/PicGo/picgo-plugin-pic-migrater">picgo-plugin-pic-migrater</a> </p>
<p><a href="http://timnew.me/blog/2014/08/20/hexo-file-name-escape-issue-and-solution/">Hexo file name escape issue and solution</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>ErrorTracking</tag>
      </tags>
  </entry>
  <entry>
    <title>一款超好用的图片预览插件Magnify</title>
    <url>/posts/how-add-jquery-plugin-magnify-on-rails/</url>
    <content><![CDATA[<p>粉 Magnify。</p>
<span id="more"></span> 

<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>在找图片预览的jQurey plugin时发现了这个<a href="https://nzbin.github.io/magnify/">Magnify</a>，真的是好用，官方效果图：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1foa0vblhsmg30sb0ihb29.gif"></p>
<p>在项目中用它来做图片预览，很赞！</p>
<p>具体的使用方法，<a href="https://nzbin.github.io/magnify/">Magnify</a> 的Usage部分已经有详细的说明，不过在Rails 中，怎么用呢？这个问题其实就是如何在Rails中使用jQurey plugin。</p>
<h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><p>很简单，三步即可。</p>
<p>一、下载相关的JS和CSS文件，并包含在Rails项目中对应的文件夹下</p>
<p>在magnify对应的 <a href="https://github.com/nzbin/magnify">GitHub repo</a> 中，下载文件<code>jquery.magnify.css</code>, <code>jquery.magnify.js</code>或者<code>jquery.magnify.min.css</code>, <code>jquery.magnify.min.js</code>(推荐后者)：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1foa1ckl4c3j30ac06qwey.jpg"></p>
<p>下载后，将<code>jquery.magnify.js</code>放在app/assets/javascripts目录下，<code>jquery.magnify.css</code>放在app/assets/stylesheets目录下。</p>
<p>二、修改<code>application.scss</code>文件：</p>
<pre><code class="Ruby">......
+ @import &quot;jquery.magnify&quot;;
.....
</code></pre>
<p>修改<code>application.html.erb</code>文件,  在<head>中添加：</p>
<pre><code class="Html">......
&lt;head&gt;
  ......
+  &lt;link href=&quot;https://cdn.bootcss.com/font-awesome/4.7.0/css/font-awesome.min.css&quot; rel=&quot;stylesheet&quot;&gt;
&lt;/head&gt;
.....
</code></pre>
<p>三、HTML部分</p>
<p>图片展示部分的代码:</p>
<pre><code class="html">&lt;a data-magnify=&quot;gallery&quot; href=&quot;image_large_url&quot;&gt;
&lt;img src=&quot;image_small_url&quot;&gt;
&lt;/a&gt;
</code></pre>
<p>或者</p>
<pre><code class="Html">&lt;img data-magnify=&quot;gallery&quot; src=&quot;image_small_url&quot; data-src=&quot;image_large_url&quot;&gt;
</code></pre>
<p>这里：image_large_url指的是图片对应的大图的URL，image_small_url是小图的URL，当然也可以直接换成图片。</p>
<p>类似这样：</p>
<pre><code class="Html">&lt;a data-magnify=&quot;gallery&quot; href=&quot;big.jpg&quot;&gt;
  &lt;img src=&quot;small.jpg&quot;&gt;
&lt;/a&gt;
</code></pre>
<p>ok，搞定，开始一饱眼福吧！</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://nzbin.github.io/magnify/">magnify</a></p>
<p>另，推荐<a href="http://photoswipe.com/">photoswipe</a>， 也超好用的，可以试一试。</p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Magnify</tag>
      </tags>
  </entry>
  <entry>
    <title>使用href或onclick来调用javascript</title>
    <url>/posts/how-to-call-javascript-through-href-or-onclick/</url>
    <content><![CDATA[<p>小白 JS 基础知识补充。</p>
<span id="more"></span> 

<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>今天才知道原来javascript是可以通过href 或者onclick来调用的，还能传递参数，用过后，删掉之前那堆无用的Ajax代码和文件，瞬间觉得这个方法真的好cool，好好用啊， 好比那路痴绕了一个大圈子到达目的地后，发现原来已有一条踩好的捷径。【请无视小白的激动】</p>
<p>记录下使用href 或者onclick来调用javascript的用法，加深理解。</p>
<h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><p>分无参和有参：</p>
<ul>
<li><p>无参</p>
<p>以一个简单的alert为例，可以这么写【href】：</p>
<pre><code class="Html">&lt;a href=&#39;javascript: dosomething();&#39;&gt;click me&lt;/a&gt;

&lt;script&gt;
    function dosomething()&#123;
        alert(&quot;hello, world!&quot;);
    &#125;
&lt;/script&gt;
</code></pre>
<p>上面的代码还可以这么写【onclick】：</p>
<pre><code class="Html">&lt;a href=&#39;#&#39; onclick=&quot;javascript: dosomething()&quot;&gt;click me&lt;/a&gt;

&lt;script&gt;
    function dosomething()&#123;
        alert(&quot;hello, world!&quot;);
    &#125;
&lt;/script&gt;
</code></pre>
<p>或者这样：</p>
<pre><code class="Html">&lt;a href=&#39;#&#39; onclick=&quot;dosomething()&quot;&gt;click me&lt;/a&gt;

&lt;script&gt;
    function dosomething()&#123;
        alert(&quot;hello, world!&quot;);
    &#125;
&lt;/script&gt;
</code></pre>
<p>这样也行：</p>
<pre><code class="html">&lt;a href=&#39;#&#39; onclick=&quot;javascript: while (true) &#123; alert(&quot;hello, world!&quot;); break javascript; &#125;&quot;&gt;click me&lt;/a&gt;
</code></pre>
<p>也可以这样：</p>
<pre><code class="Html">&lt;a href=&#39;#&#39; onclick=&quot;foo: while (true) &#123; alert(&quot;hello, world!&quot;); break foo; &#125;&quot;&gt;click me&lt;/a&gt;
</code></pre>
<p>还能这样：</p>
<pre><code class="Html">&lt;a href=&#39;#&#39; onclick=&quot;foo: while (true) &#123; alert(&quot;hello, world!&quot;); break foo; &#125;&quot;&gt;click me&lt;/a&gt;
</code></pre>
<p>使用onclick时，tag也可以是span，button等，比如：</p>
<pre><code class="Html">&lt;span onclick=&quot;foo: while (true) &#123; alert(&quot;hello, world!&quot;); break foo; &#125;&quot;&gt;click me&lt;/span&gt;
</code></pre>
<p>这里提一下，在搜索相关用法的时候，发现对于onclick， javascript:其实是可以不用添加的，它的作用只是一个label的作用，而且在IE下，使用<code>onclick=&quot;javascript: JsFunc()&quot;</code>还会报错，参见这篇文章<a href="https://crisp.tweakblogs.net/blog/the-useless-javascript-pseudo-protocol.html">The useless javascript: pseudo-protocol</a>。</p>
<p>此外，逛stack overflow时，还人提到onclick这种调用JS的方式”is a bad practice”.</p>
<p>参见<a href="https://stackoverflow.com/questions/134845/which-href-value-should-i-use-for-javascript-links-or-javascriptvoid0">Which “href” value should I use for JavaScript links, “#” or “javascript:void(0)”?</a></p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79ly1fouoief80vj30j9060gn2.jpg"></p>
<p>有一种刚刚挖到宝，然后别人告知你这是一堆废铁的赶脚……</p>
</li>
<li><p>有参</p>
<p>有参和无参的函数调用基本一样，只是多了参数。</p>
<p>看例子方便理解 ，比如传递了一个user的name[rails]：</p>
<pre><code class="Html">&lt;a href=&#39;javascript: dosomething(&#39;&lt;%= @user.name %&gt;&#39;);&#39;&gt;click me&lt;/a&gt;

&lt;script&gt;
    function dosomething(username)&#123;
        alert(&quot;hello, &quot; + username );
    &#125;
&lt;/script&gt;
</code></pre>
<p>onclick的方式来调用也一样：</p>
<pre><code class="html">&lt;a href=&#39;#&#39; onclick=&#39;dosomething(&#39;&lt;%= @user.name %&gt;&#39;);&#39;&gt;click me&lt;/a&gt;

&lt;script&gt;
    function dosomething(username)&#123;
        alert(&quot;hello, &quot; + username );
    &#125;
&lt;/script&gt;
</code></pre>
<p>一点感想：</p>
<p>我觉得这种调用JS的方式，最好的地方是传递参数，当你用Ajax只是为了将参数传递给JS时，这真的是很方便的一种解决方法。我之前苦恼怎么传递参数给JS，Ajax是用来在不刷新页面的情况下，更新页面的某一部分，但它也可以用来传递参数，通过用Ajax，好比绕了个弯，去逛了一趟controller，在controller里面把那些需要的参数都整出来，再将它们回传给到 js.erb文件，在js.erb中写JS来实现需求。事后反思为什么我第一时间想到Ajax而不是href 或 onclick的方式，因为我根本不知道这种用法【怪自己太小白】，而Ajax是我用过的，熟悉的，继而想到人们在处理问题的时候，总是偏向于用以往的经验去解决，那些过往的经验就好比你的工具，当你的工具库很小的时候，这样做的弊端就是避开了寻找更好的方法去更高效地解决问题的机会，同时也意味着你失去了扩充工具库的机会。</p>
</li>
</ul>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://crisp.tweakblogs.net/blog/the-useless-javascript-pseudo-protocol.html">The useless javascript: pseudo-protocol</a></p>
<p><a href="https://stackoverflow.com/questions/1070760/javascript-function-in-href-vs-onclick/11348403#11348403">JavaScript function in href vs. onclick</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>Rails中如何删除数据表？</title>
    <url>/posts/how-to-drop-a-table-on-rails/</url>
    <content><![CDATA[<p>Rails 基础知识补充。</p>
<span id="more"></span> 

<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>先看个场景：</p>
<p>当你运行<code>rake db:migrate</code>时，终端报错：</p>
<pre><code>SQLite3::SQLException: table &quot;XXXX&quot; already exists……
</code></pre>
<p>这种情况下，多半由于你重建了tableXXXX导致，针对这种情况，一般有两种方法可以解决：</p>
<ul>
<li>查看你需要migrate的代码，是否存在重建tableXXXX的情况，如果有，注释掉，然后再run <code>rake db:migrate</code>；</li>
<li>删除掉数据库中已经存在的table XXXX，再run <code>rake db:migrate</code>， 重建新的table XXXX。 「特别是当你对先前建的table并不满意时」</li>
</ul>
<p>第一种很好办，没啥可说的，看第二种具体怎么做。</p>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>以table projects为例，含字段title，description。</p>
<p>两种方法：</p>
<p>一个简单粗暴的方式是<code>rails c</code>，打开rails console，运行：</p>
<pre><code class="shell">ActiveRecord::Migration.drop_table(:projects) #将projects换成你要删除的表名
</code></pre>
<p>另一个方式先注释掉需要migration的代码，然后新建一个migration：<code>rails g migration Dropprojects</code></p>
<p>在生成的<code>xxxxxx_Dropprojects.rb</code>中填入以下内容：</p>
<pre><code class="Ruby">class Dropprojects &lt; ActiveRecord::Migration
  def change
    drop_table :projects do |t|
      t.string :title, null: false
      t.text :description, null: false
      t.timestamps null: false
    end
  end
end
</code></pre>
<p>终端run <code>rake db:migrate</code>， 成功删除， 这应该算是比较 “officials” 的做法了。</p>
<p>删除后，再取消你先前注释的需要migration的代码，运行<code>rake db:migrate</code>， 重建新的table。</p>
<p>此外，当你在Rails中添加了一个table XXXX，发现后续并不需要这个table了，也可以通过上诉的方式删除它。</p>
<p>当然，大部分情况下，不建议动数据库的，因为多个table之间可能存在关联，删除可能引发潜在的问题。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="http://api.rubyonrails.org/classes/ActiveRecord/Migration.html">Active Record Migrations</a></p>
<p><a href="https://stackoverflow.com/questions/4020131/rails-db-migration-how-to-drop-a-table">Rails DB Migration - How To Drop a Table?</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在测试中debug?</title>
    <url>/posts/how-to-debug-with-RSpec/</url>
    <content><![CDATA[<p>做测试的时候，案例未通过，满屏飘红是常有的事，所以在测试中debug就显得很有必要，为便于阐述，以我自己做的一个events_controller 的测试为例，看看如何debug。</p>
<span id="more"></span> 

<h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><p>一个测试报错了，而提示又不足以让你立马get到点，比如在做controller的单位测试时，验证create这个method，出错：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fkqyujzh4nj30o704bgm8.jpg"></p>
<p>很显然，event没有成功写入数据库，如何debug？</p>
<p>首先，你可能想单独跑这一个案例，其他的注释掉。</p>
<p>比较粗暴的方法是注解掉其他的测试案例，只留下你要纠正的那个，另一个方法是用<code>:focus =&gt; true</code>。</p>
<p>两步走：</p>
<ul>
<li><p>编辑<code>spec/rails_helper.rb</code>， 加入两行设定：</p>
<pre><code class="Ruby">  RSpec.configure do |config|
  ......

+  config.filter_run :focus =&gt; true
+  config.run_all_when_everything_filtered = true
</code></pre>
</li>
<li><p>修改你的test文件，比如针对上面的报错，我的文件是<code>spec/controllers/events_controller_spec.rb</code>, 在未通过的案例中，加入了<code>:focus =&gt; true</code></p>
<p>​</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fkqz77tr3uj30eh076jsg.jpg"></p>
</li>
</ul>
<p>终端运行<code>rspec spec/controllers/events_controller_spec.rb</code>, 将会只运行这一个实例。</p>
<p>「需要注意的是，测试通过后，记得把<code>:focus =&gt; true</code> 移除。」</p>
<p>确认只有这个案例运行后，接下来，我们用byebug下断点，检查下为什么event没有存入数据库。</p>
<p>在<code>app/controllers/events_controller.rb</code>中，create部分，加入byebug：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fkqzl4lewgj30i505p0tc.jpg"></p>
<p>终端再次运行<code>rspec spec/controllers/events_controller_spec.rb</code>， 会发现程序停在那里了:</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fkqzmdxoxdj30u6093q4v.jpg"></p>
<p>这时就可以检查变量了。比如我输入@event查看各个字段的赋值情况，发现eventlogo没有赋值成功，fix it。</p>
<p>最后输入<code>continue</code>, 程序就会继续执行下去。</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fkr0525em2j30u60ab0uv.jpg"></p>
<h4 id="the-End"><a href="#the-End" class="headerlink" title="the End"></a>the End</h4><p>Happy debugging! ：P</p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>RSpec</tag>
      </tags>
  </entry>
  <entry>
    <title>获取cucumber中每一个step的logger信息</title>
    <url>/posts/how-to-get-logger-info-of-every-step-in-cucumber/</url>
    <content><![CDATA[<p>承接上一个 Cucumber。</p>
<span id="more"></span> 

<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>此文承接上一个<a href="https://luciaca.cn/2018/01/10/cucumber-does-not-go-to-afterstep-when-step-failed/">cucumber does not go to afterstep when the step failed</a>中提到的，不管step的result是什么，都执行某个操作，那么，如果想要输出每个step的logger信息，怎么办？</p>
<blockquote>
<p>你可能会问，cucumber执行时，会输出每一步的执行情况，为什么还要获取这些logger？应用的场景其实还是有的，比如你需要将每一步的logger保存到指定文件然后进行汇总统计，又或者调用这些logger信息新建实例等等。</p>
</blockquote>
<p>具体实现方面，我用了一个比较笨的方法，拼接了各种信息，最终的效果是这样子的：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fncl1wcxojj30q706qtah.jpg"></p>
<blockquote>
<ul>
<li><p>当step通过时，输出step的name，含关键字：Given/When/Then；</p>
</li>
<li><p>当step未通过时，输出提示信息；</p>
<p>你可以看到我输出的logger info，与cucumber自带的输出内容是一样的。</p>
</li>
</ul>
</blockquote>
<p>当然，我相信这个问题一定有更好的解决方法，但目前全网搜索，没找到特别惊喜的解答。</p>
<p>先附上我小白式的破解方法。</p>
<h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><p>依然采用了test step finished event。</p>
<p>在<code>features/support</code>下新建<code>event.rb</code>文件，放入以下内容：</p>
<pre><code class="Ruby">require &#39;logger&#39;
$logger = Logger.new(STDOUT)

AfterConfiguration do |config|
  config.on_event :test_step_finished do |event|
    name = event.test_step.text
    if name != &quot;AfterStep hook&quot; &amp;&amp; name != &quot;Before hook&quot; &amp;&amp; name != &quot;After hook&quot;
      keyword = event.test_step.source.last.keyword
      status = event.result.to_sym.to_s
      step = keyword + name

      # logger info
      if status == &quot;passed&quot;
        $logger.info(&quot;\n&quot; +  step + &quot;\n&quot;)
      else
        exception_message = event.attributes.last.exception.message
        exception_class =  event.attributes.last.exception.class
        file_line = event.attributes.last.exception.backtrace[-2]
        # 用sub将出错的文件地址转化为相对地址
        file_line.sub! Dir.pwd, &quot;.&quot;
        step_line = event.attributes.last.exception.backtrace.last
        message =  step + &quot;\n&quot; + exception_message + &quot;(&quot; + exception_class.to_s + &quot;)\n&quot; +  file_line + &quot;\n&quot; + step_line
        $logger.info(&quot;\n&quot; + message + &quot;\n&quot; )
      end
    end
  end
end
</code></pre>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fnclx8jwzaj30ni0bymyp.jpg"></p>
<p>这里，分步走。</p>
<ul>
<li>先获取step的name，根据name筛选出我们需要的step，比如点击登陆选项，输入邮箱密码等，然后获取关键字keyword【Given/When/Then】，组成完整的一个step描述。同时获取step的状态，也就是result。</li>
<li>根据step的status来确定logger的内容，passed则输出keyword + name即可，不是passed，则获取出错的信息message，出错的类型class，出错的文件地址，出错的step 地址，然后输出信息即可。</li>
</ul>
<p>【这里，我给$logger.info传递了换行符”\n”，仅仅是为了输出的时候好看点而已，可以忽略。】</p>
<p>OK,很简单是不是？但是整个的求解过程还是比较纠结的，主要这方面的资料并不多，戳这里可以了解下cucumber 的<a href="http://www.rubydoc.info/gems/cucumber/1.3.19/Cucumber/Ast/Step#exception-instance_method">step exception</a>。</p>
<h4 id="The-End"><a href="#The-End" class="headerlink" title="The End"></a>The End</h4><p>stack overflow上只找到了<a href="https://stackoverflow.com/questions/29146107/how-can-i-have-ruby-logger-log-for-each-line-of-execution">How can I have ruby logger log for each line of execution?</a></p>
<p>提问者接受了这个答案，抱歉，我是真的没看懂通过这个答案要怎么去解决那个问题。</p>
<p>如果有看懂解答的，请吱个声，下方留言或<a href="https://stackoverflow.com/questions/29146107/how-can-i-have-ruby-logger-log-for-each-line-of-execution">这里走一走</a>。</p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Cucumber</tag>
      </tags>
  </entry>
  <entry>
    <title>how to get better at things you care about</title>
    <url>/posts/how-to-get-better-at-things-you-care-about/</url>
    <content><![CDATA[<p>TED：<a href="https://www.ted.com/talks/eduardo_briceno_how_to_get_better_at_the_things_you_care_about">how to get better at things you care about</a></p>
<span id="more"></span>

<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1ftigz39kylj317g0mw406.jpg"></p>
<h4 id="Reason"><a href="#Reason" class="headerlink" title="Reason"></a>Reason</h4><p>Why we don’t  improve much despite our hard work?</p>
<p>we tend to spend almost all of our time in the performance zone.</p>
<h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h4><p>Spending more time on learning zone.</p>
<h4 id="How"><a href="#How" class="headerlink" title="How"></a>How</h4><ul>
<li>believe and understand that we can improve [growth mindset]</li>
<li>we must want to improve at that particular skill</li>
<li>we must have an idea about how to improve [doing deliberate practice]</li>
<li>we must be in a low-stakes situation</li>
</ul>
<p>Real confidence is about modeling ongoing learning.</p>
]]></content>
      <categories>
        <category>Learning</category>
      </categories>
      <tags>
        <tag>Talks</tag>
      </tags>
  </entry>
  <entry>
    <title>如何获取cucumber中step的name？</title>
    <url>/posts/how-to-get-step-name-in-cucumber/</url>
    <content><![CDATA[<p>用cucumber测试时，有一个需求，就是提取每个step的name，以及对应的scenario和feature的name。</p>
<span id="more"></span> 

<p>Google了不少，也试过几个前人提供的方法， 屡屡败北，在坑里挣扎了两天， 发现这方面的资料其实还是挺少的，特别是ruby这块，记录下这趟比较揪心的求解过程，给需要的提供个参考。「我揪心就好了，大伙就别再揪心了。」</p>
<h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><p><a href="https://github.com/cucumber/cucumber/wiki/Hooks">cucumber hooks</a> 中提到了多个hook，包括before，after，但是对于step hooks，只有一个AfterStep， 看AfterStep 的用法：</p>
<pre><code class="Ruby">AfterStep do |scenario|
  # Do something after each step.
end
</code></pre>
<p>官方文档是这么写的，可是你会发现根本不是那么回事。「吐槽下：文档没有及时更新让人很是心塞啊」</p>
<p>在你的<code>feature/support</code>目录下，新建一个文件<code>hooks.rb</code>,  添加如下内容：</p>
<pre><code class="Ruby">Before do |scenario|
  # do something before scenario
end

AfterStep do |scenario|
    puts scenario.methods
    puts scenario.class
  # Do something after each step.
end
</code></pre>
<p>终端运行<code>cucumber</code>的时候，你会发现AfterStep中根本不是scenario，得到的是这样的结果：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fn4lejzw3uj30pt06un03.jpg"></p>
<p>这里可以看到它的class是<code>Cucumber::Core::Test::Result::Passed</code>， method里面也没有任何name,text之类。那么，每次afterstep后，返回的<code>Cucumber::Core::Test::Result::Passed</code>是个什么鬼？是个step？</p>
<p>看源码：<a href="http://www.rubydoc.info/github/cucumber/cucumber-ruby-core/Cucumber/Core/Test/Result/Passed">Class: Cucumber::Core::Test::Result::Passed</a>,  cucumber中每个step运行后，其实有7种情况：</p>
<pre><code>[:failed, :flaky, :skipped, :undefined, :pending, :passed, :unknown]
</code></pre>
<p>而passed只是其中的一个type，它不是一个step。看cucumber的doc，可以找到<a href="http://www.rubydoc.info/github/cucumber/cucumber-ruby-core/Cucumber/Core/Test/Step">step</a>， 里面的text字段，这正是我们想要的：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fn4lu77docj30qx0hzack.jpg"></p>
<p>可是如何获取到step呢？</p>
<p>你Google后会发现有一些可能”有用”的解决方法，列出几个我觉得特别的：</p>
<ul>
<li>最奇葩的解答：<a href="https://stackoverflow.com/questions/29952911/how-can-i-access-a-cucumber-step-name-in-the-step-definition">How can I access a Cucumber step name in the step definition?</a></li>
</ul>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fn4mmez9oej30j008jjsl.jpg"></p>
<p>​    「竟然直接在step definition里面添加argument，然后在每个step里面添加一行代码 ‘puts step_name ‘, 且            不说这种方法能不能正常运行，你这样每个step都加，成千上万的steps，手都要断吧？」</p>
<ul>
<li><p>有坑的解答：<a href="https://groups.google.com/forum/#!topic/cukes/TQLcKQqLsjw">Get current step within step</a></p>
<p><a href="https://groups.google.com/forum/#!topic/cukes/TQLcKQqLsjw">Cukes</a> 上，一个叫Marc Divins的人也遇到这个问题，未解决，身为cucumber backers之一的Matt Wynneg给出了custom formatter的解决建议,  这方法已试过，failed。</p>
</li>
<li><p>版本问题的坑：<a href="https://asyoulook.com/computers%20&%20internet/ruby-get-current-step-form-scenario-outline/1394372">get current step from scenario outline</a></p>
<p>这里面用到了Cucumber::Ast::Scenario， 这个在cucumber3.0下运行会报错，无法识别，这是其一，其二是在AfterStep中调用的scenario并没有定义，会报错。</p>
</li>
</ul>
<p>OK，不废话了，直接上解答：</p>
<p>在新建好的<code>features/support/hooks.rb</code> 中，添加如下内容：</p>
<pre><code class="Ruby">Before do |scenario|
  $step_index = 0
  $stop_count = scenario.test_steps.count
  @scenario = scenario
end

AfterStep do |step|
  if $step_index &lt; $stop_count
    puts &quot;steps: #&#123;@scenario.test_steps[$step_index].text&#125;\n&quot;
  end
  $step_index += 2
end
</code></pre>
<p>运行一个feature试试：</p>
<pre><code>cucumber features/xxxx.feature
</code></pre>
<p>每个step之后，都会输出了AfterStep中定义的<code>&quot;steps: #&#123;@scenario.test_steps[$step_index].text&#125;\n&quot;</code></p>
<p>类似这样：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fn4n9a82sbj30ey044aaj.jpg"></p>
<p>说明：</p>
<p>代码上的<code>$step_index += 2</code>， 给step_index累加了2，而不是1， 是因为每输出一个step，后面会跟一个<code>aferstep hook</code>，为了不输出<code>aferstep hook</code>字段，所以累加2。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://github.com/cucumber/cucumber-ruby/issues/450">add step to AfterStep</a></p>
<p><a href="https://zsoltfabok.com/blog/2012/09/cucumber-jvm-hooks/">cucumber JVM:Hooks</a></p>
<p>P.S.</p>
<p>这次的求解过程，更深刻地感受到一句话的正确性：<strong>不要盯着锁找答案，钥匙在别处</strong>。</p>
<p>P.P.S</p>
<p>Happy coding  and bye bug  : )</p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Cucumber</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在cucumber的example中传递Array</title>
    <url>/posts/how-to-pass-array-in-examples/</url>
    <content><![CDATA[<p>实际上，还是传递字符……</p>
<span id="more"></span> 

<p>看下面的例子👇</p>
<h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><p>当你想要在examples中传递一个Array时，要怎么做？直接传递？我们试试。</p>
<p>背景如下：</p>
<p>在文件<code>search.feature</code>中，search_terms的数据是一个数组[ ‘chocolate’ , ‘Nigella Lawson’]：</p>
<pre><code class="Ruby">Scenario Outline:
When I search for &quot;&lt;search_terms&gt;&quot;
Then I should get a list of &quot;&lt;recipe_title&gt;&quot;
Examples:
        | search_terms | recipe_title |
        | [ &#39;chocolate&#39; , &#39;Nigella Lawson&#39;] | White chocolate and mintmousse |
</code></pre>
<p>对应的step文件，如<code>search_step.rb</code>，内容：</p>
<pre><code class="Ruby">When(/^I search for &quot;([^&quot;]*)&quot;$/) do |terms|
  search_terms = terms
  ......
end

Then(/^I should get a list of &quot;([^&quot;]*)&quot;$/) do |recipe_title|
  ......
end
</code></pre>
<p>这时如果直接在终端运行cucumber会报错，因为你的search_terms传递的是一个array。</p>
<p>在 <a href="http://thread.gmane.org/gmane.comp.programming.tools.cucumber/9315">Cucumber:10316 -  Passing arrays in tables</a>中有位mswinson提到了这个问题，然后有位叫Andy的回复了他。【蛮好玩的，有兴趣的可以看看。】</p>
<p>解决方法就是<strong>避开Array，传递String，用“，”来区分各个element，然后在step definitions中用<code>split(/, /)</code>将其转换为Array</strong>。</p>
<p>比如上面的这个例子，可以这么来：</p>
<p>修改文件<code>search.feature</code>内容：</p>
<pre><code class="Ruby"> Scenario Outline:
 When I search for &quot;&lt;search_terms&gt;&quot;
 Then I should get a list of &quot;&lt;recipe_title&gt;&quot;

 Examples:
         | search_terms | recipe_title |
         | chocolate , Nigella Lawson| White chocolate and mintmousse |
</code></pre>
<p>在对应的step文件中， 使用<code>search_terms = terms.split(/, /)</code>。</p>
<pre><code class="Ruby">When(/^I search for &quot;([^&quot;]*)&quot;$/) do |terms|
  search_terms = terms.split(/, /) ## 这时search_terms就是一个array了
  ......
end

Then(/^I should get a list of &quot;([^&quot;]*)&quot;$/) do |recipe_title|
  ......
end
</code></pre>
<p>OK，完成。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="http://thread.gmane.org/gmane.comp.programming.tools.cucumber/9315">Cucumber:10316 -  Passing arrays in tables</a></p>
<p>嗯，就这么简单，可我还是想把它写出来，硬生生整出了一篇文章来……</p>
<p>enjoy ：D</p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Cucumber</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在cucumber中运行指定的feature？</title>
    <url>/posts/how-to-run-the-feature-you-want/</url>
    <content><![CDATA[<p>运行指定的feature。</p>
<span id="more"></span> 

<h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><p>只运行指定的feature时，有两种方法。</p>
<ul>
<li>可以类似RSpec那样，指定文件位置 ，比如 <code>cucumber features/your_feature.feature</code></li>
<li>可以添加tag</li>
</ul>
<p>比如：</p>
<pre><code class="Ruby">@approved @car_buy

　　Feature: Car Buy

        　　@wip

        　　Scenario: Buy a car in store
</code></pre>
<p>　　一个Scenario会继承指定给Feature的tags，所以在上面的例子中，Scenario有三个tags：@approved @car_buy @wip.  </p>
<p>调用时，使用<code>cucumber  --tags tag_name</code>。</p>
<p>比如运行feature，终端输入：</p>
<pre><code>cucumber  --tags @car_buy
</code></pre>
<p>使用tag的好处是可以细化到scenario。比如上例， 就可以使用命令：</p>
<pre><code>cucumber –tags @wip
</code></pre>
<p>来运行你想要的那部分Scenario.</p>
<p>插一句：cucumber默认加载<code>features/support/.</code>. 即support下的所有文件。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="http://www.cnblogs.com/puresoul/archive/2011/12/28/2305160.html">cucumber 入门之Gherkin</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Cucumber</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue中实作全选功能</title>
    <url>/posts/how-to-select-all-checkbox-in-vue/</url>
    <content><![CDATA[<p>Select All in Vue。</p>
<span id="more"></span> 

<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>参考<a href="https://codepen.io/jh-thank-you/pen/qjVWOj">Vue js 2.x - Select All Checkbox</a>, 完成了全选的功能。</p>
<p>先上效果图：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fzpimt4e8cg30uo0brmxp.gif"></p>
<p><a href="https://codepen.io/jh-thank-you/pen/qjVWOj">Vue js 2.x - Select All Checkbox</a>的原代码:</p>
<p>HTML:</p>
<pre><code class="html">&lt;script src=&quot;https://cdn.jsdelivr.net/vue/latest/vue.js&quot;&gt;&lt;/script&gt;

&lt;div id=&quot;app&quot;&gt;
  &lt;h4&gt;User&lt;/h4&gt;
    &lt;div&gt;
      &lt;table&gt;
        &lt;tr&gt;
          &lt;th&gt;Name&lt;/th&gt;
          &lt;th&gt;Select All&lt;input type=&quot;checkbox&quot; @click=&quot;selectAll&quot; v-model=&quot;allSelected&quot;           &lt;/th&gt;
        &lt;/tr&gt;
        &lt;tr v-for=&quot;user in users&quot;&gt;
          &lt;td&gt;&#123;&#123; user.name &#125;&#125;&lt;/td&gt;
          &lt;td&gt;&lt;input type=&quot;checkbox&quot; v-model=&quot;userIds&quot; @click=&quot;select&quot; :value=&quot;user.id&quot;&gt;              &lt;/td&gt;
        &lt;/tr&gt;
      &lt;/table&gt;
    &lt;/div&gt;
  &lt;span&gt;Selected Ids: &#123;&#123; userIds &#125;&#125;&lt;/span&gt;
&lt;/div&gt;
</code></pre>
<p>JS:</p>
<pre><code class="js">// taken from https://jsfiddle.net/okv0rgrk/3747/

new Vue(&#123;
    el: &#39;#app&#39;,
    data: &#123;
        users: [
            &#123; &quot;id&quot;: &quot;Shad&quot;, &quot;name&quot;: &quot;Shad&quot; &#125;,
            &#123; &quot;id&quot;: &quot;Duane&quot;, &quot;name&quot;: &quot;Duane&quot; &#125;,
            &#123; &quot;id&quot;: &quot;Myah&quot;, &quot;name&quot;: &quot;Myah&quot; &#125;,
            &#123; &quot;id&quot;: &quot;Kamron&quot;, &quot;name&quot;: &quot;Kamron&quot; &#125;,
            &#123; &quot;id&quot;: &quot;Brendon&quot;, &quot;name&quot;: &quot;Brendon&quot; &#125;
        ],
        selected: [],
        allSelected: false,
        userIds: []
    &#125;,
    methods: &#123;
        selectAll: function() &#123;
            this.userIds = [];

            if (this.allSelected) &#123;
                for (user in this.users) &#123;
                    this.userIds.push(this.users[user].id.toString());
                &#125;
            &#125;
        &#125;,
        select: function() &#123;
            this.allSelected = false;
        &#125;
    &#125;
&#125;)
</code></pre>
<p>参考的这份代码里面，有个小小的bug，就是当选中所有的子选项时，全选没有被选中。</p>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>点击子选项的时候，调用的是select函数，初步的想法是修改select函数，当选中的选项userIds等于users中的所有的ids即可。</p>
<pre><code class="js">// 修改select
select: function() &#123;
    if (this.userIds.length == this.users.length) &#123;
        this.allSelected = true;
    &#125; else &#123;
        this.allSelected = false;
    &#125;
&#125;
</code></pre>
<p>发现修改后，没有任何效果，此处有个坑:</p>
<pre><code class="html">&lt;input type=&quot;checkbox&quot; v-model=&quot;userIds&quot; @click=&quot;select&quot; :value=&quot;user.id&quot;&gt;
</code></pre>
<p>这里v-model的userIds，其实对应的是checked之后的值，也就是点击完最后一个子选项时，调用select函数，此时<code>this.userIds.length = this.users.length - 1</code>， 解决方法也很简单，修改click事件为change事件即可。这样调用select时，userIds已经更新。</p>
<p>改进后的代码：</p>
<p>HTML:</p>
<pre><code class="html">&lt;script src=&quot;https://cdn.jsdelivr.net/vue/latest/vue.js&quot;&gt;&lt;/script&gt;

&lt;div id=&quot;app&quot;&gt;
  &lt;h4&gt;User&lt;/h4&gt;
    &lt;div&gt;
      &lt;table&gt;
        &lt;tr&gt;
          &lt;th&gt;Name&lt;/th&gt;
          &lt;th&gt;Select All&lt;input type=&quot;checkbox&quot; @click=&quot;selectAll&quot; v-model=&quot;allSelected&quot;           &lt;/th&gt;
        &lt;/tr&gt;
        &lt;tr v-for=&quot;user in users&quot;&gt;
          &lt;td&gt;&#123;&#123; user.name &#125;&#125;&lt;/td&gt;
          &lt;td&gt;&lt;input type=&quot;checkbox&quot; v-model=&quot;userIds&quot; @change=&quot;select&quot; :value=&quot;user.id&quot;&gt;              &lt;/td&gt;
        &lt;/tr&gt;
      &lt;/table&gt;
    &lt;/div&gt;
  &lt;span&gt;Selected Ids: &#123;&#123; userIds &#125;&#125;&lt;/span&gt;
&lt;/div&gt;
</code></pre>
<p>JS:</p>
<pre><code class="JS">// taken from https://jsfiddle.net/okv0rgrk/3747/

new Vue(&#123;
    el: &#39;#app&#39;,
    data: &#123;
        users: [
            &#123; &quot;id&quot;: &quot;Shad&quot;, &quot;name&quot;: &quot;Shad&quot; &#125;,
            &#123; &quot;id&quot;: &quot;Duane&quot;, &quot;name&quot;: &quot;Duane&quot; &#125;,
            &#123; &quot;id&quot;: &quot;Myah&quot;, &quot;name&quot;: &quot;Myah&quot; &#125;,
            &#123; &quot;id&quot;: &quot;Kamron&quot;, &quot;name&quot;: &quot;Kamron&quot; &#125;,
            &#123; &quot;id&quot;: &quot;Brendon&quot;, &quot;name&quot;: &quot;Brendon&quot; &#125;
        ],
        selected: [],
        allSelected: false,
        userIds: []
    &#125;,
    methods: &#123;
        selectAll() &#123;
            this.userIds = [];

            if (this.allSelected) &#123;
                for (user in this.users) &#123;
                    this.userIds.push(this.users[user].id.toString());
                &#125;
            &#125;
        &#125;,
        select() &#123;
          if (this.userIds.length == this.users.length) &#123;
            this.allSelected = true
          &#125; else &#123;
            this.allSelected = false;
          &#125;
        &#125;
    &#125;
&#125;)
</code></pre>
<p>Google时，看到有使用自定义组件的方式来实现全选功能的：<a href="https://segmentfault.com/a/1190000006811318">用Vue实现一个全选指令</a>，照着在nuxt下实作了下，发现坑有些多，作罢，后续解决了再补上。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://codepen.io/jh-thank-you/pen/qjVWOj">Vue js 2.x - Select All Checkbox</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Ideas sharing - 001</title>
    <url>/posts/ideas-sharing-001/</url>
    <content><![CDATA[<blockquote>
<p>If ideas come slowly, be patient.</p>
<p>If they come suddenly, in a rush, don’t try to slow down the process and develop any one of them, simple jot them all down.</p>
<p>​                                                                    - 《Beyond feelings》</p>
</blockquote>
<span id="more"></span> 

<p>受《Beyond feelings》的影响，决定练习下ideas。争取后面能坚持记录下当周的“胡思乱想” ：）</p>
<p>总量差不多20个吧。</p>
<ul>
<li>带有闹钟效应的床，定好了起床的闹钟，如果到点了没有起床，床就会坍塌或者漏水，让你不得不起床。【这换床得多频繁？】</li>
</ul>
<ul>
<li>嗅觉感应器，比如你闻到了一种花香，很是欣喜，就可以用它记录下来，这样以后想要再闻到，它可以随时复现。</li>
</ul>
<ul>
<li>提醒联系app，获取你的认同，得到你的好友列表，记录下你和朋友之间的来往，然后定期提醒你哪些朋友很久没有联系了，需要联系一下。</li>
</ul>
<ul>
<li>账单记录表，上传你的账单，它会自动记录下所有的账单消费，每月给到你完整记录。【在地铁上瞅到一位大叔对着账单一笔笔敲进一个APP软件时想到的】</li>
</ul>
<ul>
<li>可收缩的小枕头。一款可携带式的枕头，不使用的时候非常小，当你觉得困的时候，拿出来，按下操作按钮，它就会膨胀，然后就可以美美睡一觉，睡醒后，再次按按钮，就变得很小。</li>
</ul>
<ul>
<li>一个声音转换器，入耳式，可以将别人的声音转换成任何你喜欢的声音，比如说，领导喷你的时候，你就可以把他的声音切换成你爱豆的声音，那么就好比在听歌，多好！</li>
</ul>
<ul>
<li>不进水的眼镜，平时可以戴，游泳的时候也可以戴，这样每次游泳就不用戴泳镜了。</li>
</ul>
<ul>
<li>一个叫用户如何赖床不迟到的小萌宠，记录用户的睡眠数据，根据上班时间和用户的睡眠质量，告诉用户还可以再赖床多久</li>
</ul>
<ul>
<li>一个按摩颈椎的小物件，准确定位你颈椎的酸疼区</li>
</ul>
<ul>
<li>一个可以让物体失重的神奇贴，贴在上面就失重了，这样就不用担心电脑背着太重了，拯救颈椎啊。</li>
</ul>
<ul>
<li>一款可以迅速修复晒黑的皮肤的乳液，再也不怕晒伤了</li>
</ul>
<ul>
<li>饿了么可以根据客户的外卖历史，智能推荐早饭，午饭，下午茶，晚饭，并且根据客户的反馈改进推荐算法，这样的话，用户粘性会不会更强？虽然我不用饿了么</li>
</ul>
<ul>
<li>定时关机的app，可以设置当使用了多久的手机后，手机会关机，主要是为了防止用户花太多的时间在手机上，而忽略了更重要的事。比如刷小视频一个小时后，手机自动关机，且规定时间内无法开机。【这样一款霸气的app一定不敢上架】</li>
</ul>
<ul>
<li>体重／体脂率提醒app，每天提醒你当前体重／体脂率多少，需要配合怎样的运动才能达到标准体重，昨天吃了什么导致体重上涨，下次如何避免，每次当你想要吃高热量的食物时，发出提醒。【作为一个胖子，我可能会很讨厌这款app】</li>
</ul>
<ul>
<li>小熊玩偶，不是那种会说话的玩偶，安安静静，白白的，像ice bear的北极熊，可以根据你的设定变换size。冬天的时候，可以设置成较大的size，抱着睡觉，暖暖，夏天的时候，可以设置成很小的size，塞进衣柜不占用空间。</li>
</ul>
<ul>
<li>一款穿衣推荐的镜子，当你试穿一件衣服的时候，你站在镜子面前，通过全方位的摄像，它会记录下你前后左右的试穿效果，然后针对你的试穿作出评价，给到建议，甚至告诉你店里哪一件会更适合你。【这样店里的营业员就可能要失业了】</li>
</ul>
<ul>
<li>代码解读器，让它浏览某个GitHub上的开源repos，然后给到你解读，告诉你这个库用来做什么，如何实现，实现的思路是什么，这种解决思路还可以用在哪里，用了哪些工具，哪一段代码写得非常好等等诸如此类。</li>
</ul>
<ul>
<li>定时消失的书，这种书只能是电子书了，购买的电子书，可以设置多久就会自动消失，强制要求及时阅读。</li>
</ul>
<ul>
<li>单一的kindle交易平台，将自己不再使用的kindle上架进行交易。【拯救吃灰的kindle】</li>
</ul>
<ul>
<li>外卖集中箱。类似快递的最后100米，可以放在各种蜜蜂箱里，发信息通知取件人，外卖也可以统一送到某个固定点，让点餐人自己去取，这样应该可以节省很多外卖人员的时间。</li>
</ul>
<ul>
<li>止困提神糖。当人想要睡觉的时候，吃一颗就好了，满血复活。</li>
</ul>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>Ideas</tag>
      </tags>
  </entry>
  <entry>
    <title>Ideas sharing - 002</title>
    <url>/posts/ideas-sharing-002/</url>
    <content><![CDATA[<p>感觉选了一个特别苦逼的练习，有时大半天都想不出一个idea，光在那里发呆，看着一片空白的typora，胡思乱想，如果有一个idea生成器该多好，然后思绪开始各种飘，也许吃点东西会更容易想出来，嗯，然后专注啃零食，也许吃点水果更健康……</p>
<p>祈祷下周还能整出003来。</p>
<span id="more"></span> 

<hr>
<p>Let ideas flying.</p>
<ul>
<li>防雨鞋，下雨的时候，按一下鞋子上的按钮，会形成一层透明保护层，保证鞋不会被雨打湿</li>
</ul>
<ul>
<li>电量传输，手机快要没电的时候，又没有充电的地方，类似蓝牙传文件，可以使用蓝牙与另一个手机完成连接，然后传送电量</li>
</ul>
<ul>
<li>音乐辨识头像，根据用户的听歌记录和喜好，生成专属头像</li>
</ul>
<ul>
<li>肢体语言翻译app，无法言语的人，可以通过跟别人比划手势来交流，但是正常人可能并不知道如何解读，用这个肢体语言app对着别人做的手势，会翻译出对应的含义，同时录入自己想说的话，它会转换成肢体语言，给别人看【呃，既然这样，他们为什么不通过打字来交流呢？】</li>
</ul>
<ul>
<li>租房订阅，根据用户的设置，房间的大小，区域，价位，然后定时推送符合或者基本符合的租房信息</li>
</ul>
<ul>
<li>印有二维码的T恤，如果想让更多人认识你，可以让别人扫一下你的二维码，就可以获取到你的故事，了解你的喜恶。</li>
</ul>
<ul>
<li>代码记录，记录下你敲代码的速度和容易出错的地方，提醒你下次应该如何改进</li>
</ul>
<ul>
<li>坐姿提醒贴，贴在你的颈椎处，如果发现坐姿不正确，发出警告，纠正坐姿。</li>
</ul>
<ul>
<li>线下超市扫码买单，用户自己拿完商品，打开超市对应的app，对着商品的二维码扫一扫，商品直接添加到购物车，结算，完成买单，走人，再也不用排队了。【亚马逊有过这种结算方式，比这更高级】</li>
</ul>
<ul>
<li>一颗可以无限次发芽的种子，给到阳光，水，土壤就可以发芽，生长，开花，最后叶落归根，还是一颗种子，明年可以继续发芽，开花，结果，循环往复。【希望它结的是人参果】</li>
</ul>
<ul>
<li>红糖馒头生成器，给机器里，添加红糖和面粉，水，稍等一些时间，就可以吃到热腾腾的红糖馒头。【我一定是吃多了】</li>
</ul>
<ul>
<li>瘦胳膊神器，类似手套，戴上，启动，它会带动双臂开始各种摇摆，瘦胳膊同时兼减缓久坐。【减肥是人类永久的话题】</li>
</ul>
<ul>
<li>atom快捷键智能提醒，太多的快捷键你记不住，没关系，atom记录下你的使用习惯，当你下次作出同样的操作时，弹窗，告诉你可以用哪个快捷键。</li>
</ul>
<ul>
<li>美景即时体验，选择你想要看的美景，比如欧洲的某个小岛，中国的某个古镇，戴上眼镜，AR即时呈现此时的那个地方，是什么样子。</li>
</ul>
<ul>
<li>奶茶自制机，给到茶，牛奶，糖，即可，它会自己煮好茶，然后做出一杯美味的奶茶</li>
</ul>
<ul>
<li>鞋子自清洁器，这个机器最好别那么大容量，是比较迷你的，使用时，放入清洁液，然后将脏脏的鞋子放进去，点击开始即可，几分钟后，鞋子干干净净。</li>
</ul>
<ul>
<li>不会脱落的船袜，套上去之后，不会时不时脱落。</li>
</ul>
<ul>
<li>先秦上古时期古文语音版，类似音乐app，但是很纯粹，没广告没评论没小视频，只有先秦各大家的作品，塞上耳机，上下班路上可以听。</li>
</ul>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>Ideas</tag>
      </tags>
  </entry>
  <entry>
    <title>Ideas sharing - 003</title>
    <url>/posts/ideas-sharing-003/</url>
    <content><![CDATA[<p>昨晚9点不到就睡了，简直了，I want to marry my bed.</p>
<p>这周基本已经停了这项练习，真的是很有难度，决定不给自己平添焦虑，填上这最后一篇，暂时say bye。</p>
<span id="more"></span> 

<hr>
<ul>
<li>变色的杯子，根据水温，杯子中饮品的成分，自动变换颜色，这样会让饮品变得更好喝?</li>
</ul>
<ul>
<li>卷寿司神器，包寿司的时候，新手容易卷不好，把海苔放进去，然后放入米饭和食材，它会自动帮你卷好寿司。</li>
</ul>
<ul>
<li>过敏源提醒设备，类似手环，用户输入自己的过敏源，一旦检测到用户可能在接近过敏源时，发出警告，以防用户产生过敏。【从此，远离芥末】</li>
</ul>
<ul>
<li>美食推荐，不同于一般的app推荐，场景如下，你在看一部电影，里面有美食场景，你可能对某款美食特别钟意，按下暂停键，截图，上传到app，它会告诉你，你所在的附近哪里有这款美食或者类似的美食，并推荐商家及用户评价，如果没有，它也会智能推荐与之味道相似的可替代食品。</li>
</ul>
<ul>
<li>哼歌记录。当你哼歌时，可以开启记录，它会记录下你哼过的歌，时长，音色，音调，同时记录下你爱哼的歌，每月／季度／年智能播放你的哼歌记录，相当于一个哼歌的时间记录仪。</li>
</ul>
<ul>
<li>夜路鼓励灯，走夜路的时候，如果害怕，可以打开这个，它除了照明，还会语音播报，告诉你前方路况，还有多久就到家了，还会播放各种笑话逗你，转移注意力。</li>
</ul>
<ul>
<li>漂游心情笺，每个人都可以在里面随手写一段话或者提个问题，发出去，然后他人随机阅读，每一个回复该笺的人，如果得到该笺主人的点赞，就会获得一定的奖励。</li>
</ul>
<ul>
<li>点子客栈，一间收集好点子的客栈，对于提出好点子的顾客，可享用美食</li>
</ul>
<ul>
<li>会唱歌的饮料，扫码瓶身，会播放音乐，只要你跟着音乐哼，唱完后，瓶子自动开启，享用。</li>
</ul>
<ul>
<li>模拟插花app，模拟插花，给到素材，自己去组合。</li>
</ul>
<ul>
<li>呼吸监测手链，检查你的呼吸情况，告诉你如何调整呼吸。</li>
</ul>
<ul>
<li>一款通过踩单车就能充电的手机，把手机放在单车的某个位置，踩单车产生的动力可以给手机充电。</li>
</ul>
<ul>
<li>防水的键盘，永远不用担心饮料或者茶水溅到键盘上就得去修了。</li>
</ul>
<ul>
<li>显示屏可以收缩的笔记本，用双手拉显示屏两边，拉大显示屏，同时保证成像精度不受损，这样就可以不用买显示器了。</li>
</ul>
<ul>
<li>表情包生成器应用，上传一张人脸图片，即可生成一系列基于该人脸图片的表情包。</li>
</ul>
<ul>
<li>屏幕清洁仪，类似女孩们用的洁面仪，不过这个是用来清洁电脑屏幕和键盘的，按一下开关，开始清扫屏幕和键盘，像是一个迷你的智能扫地机。</li>
</ul>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>Ideas</tag>
      </tags>
  </entry>
  <entry>
    <title>用has_scope实现Rails API筛选</title>
    <url>/posts/implement-Rails-API-filtering/</url>
    <content><![CDATA[<p>做接口的时候，遇到了筛选的问题，不知如何去处理，Google了下，发现了个很简单的解法，实测有效，附上。</p>
<span id="more"></span> 

<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>现有model product，category,  schema中信息如下：</p>
<pre><code class="ruby">Table name products

id          :integer
title       :string
description :string
price       :float
category_id :integer

Table name  categories
id          :integer
title       :string
</code></pre>
<p><code>app/models/product.rb</code>中：</p>
<pre><code class="ruby">class Product &lt; ActiveRecord::Base
  belongs_to :category
  ......
end
</code></pre>
<p><code>app/models/category.rb</code>中：</p>
<pre><code class="ruby">class Category &lt; ActiveRecord::Base
  has_many :products
  ......
end
</code></pre>
<p><code>app/controllers/api/v1/products_controller.rb</code>中：</p>
<pre><code class="ruby">class Api::V1::ExperiencesController &lt; Api::V1::BaseController
# GET /api/v1/products
  def index
    @products = Product.all
    render json: @products
  end
end
</code></pre>
<p>现在需要得到指定category的products，类似这样：<code>/api/v1/products?category=1</code>，得到category是1的所有products。以及给定价格区间的products，类似这样：<code>/api/v1/products?price[from]=100&amp;price[to]=999</code></p>
<p>如何实现？</p>
<p>试试<a href="https://github.com/plataformatec/has_scope">has_scope</a></p>
<h4 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h4><p>三步走</p>
<ul>
<li><p>安装<a href="https://github.com/plataformatec/has_scope">has_scope</a> gem</p>
<p>gemfile中添加：</p>
<pre><code class="Ruby">gem &#39;has_scope&#39;
</code></pre>
<p>终端bundle，服务器重启。</p>
</li>
<li><p>在model中添加scope</p>
<p>修改<code>app/models/product.rb</code>：</p>
<pre><code class="ruby">class Product &lt; ActiveRecord::Base
  belongs_to :category

 + scope :category, -&gt; (category_id) &#123; where(category_id: category_id) &#125;
 + scope :price, -&gt; (from, to) &#123; where(&quot;price &gt;= ? AND price &lt;= ?&quot;, from, to) &#125;
  ......

end
</code></pre>
</li>
<li><p>在controller中添加has_scope</p>
<p>修改<code>app/controllers/api/v1/products_controller.rb</code>：</p>
<pre><code class="ruby">class Api::V1::ExperiencesController &lt; Api::V1::BaseController
  + has_scope :category, only: :index
  + has_scope :price, using: [:from, :to], only: :index

# GET /api/v1/products
  def index
  -  @products = Product.all
  +  @products = apply_scopes(Product).includes(:category).all
      # using includes(:category), fix N+1 query problem
    render json: @products
  end
end
</code></pre>
<p>好，大功告成，用postman测试下，确认正常，cool！</p>
</li>
</ul>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://gist.github.com/mamantoha/9c0aec7958c7636cebef">Rails API Filtering and Sorting</a></p>
<p><a href="https://github.com/plataformatec/has_scope">has_scope</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
        <tag>API</tag>
      </tags>
  </entry>
  <entry>
    <title>在Nuxt项目中引入fontawesome</title>
    <url>/posts/import-fontawesome-to-nuxt-project/</url>
    <content><![CDATA[<p>在nuxt中引入fontawesome的方法跟引入其他外部库基本一样，因为初次接触nuxt，所以引入fontawesome时，参考网上的各种vue fontaswesome的文章，一直无法显示，踩坑不少，最后才意识到我是要在nuxt里面引入啊。</p>
<p>记录下最后的解决方法，没准能给同我一般的nuxt小白节省点时间。</p>
<span id="more"></span> 

<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>Yarn:</p>
<pre><code class="shell">// 套件
yarn add nuxt-fontawesome

// package，不收费
yarn add @fortawesome/free-solid-svg-icons
yarn add @fortawesome/free-regular-svg-icons
yarn add @fortawesome/free-brands-svg-icons
</code></pre>
<p>Npm:</p>
<pre><code class="shell">// 套件
npm i nuxt-fontawesome

// package，不收费
npm i @fortawesome/free-solid-svg-icons
npm i @fortawesome/free-regular-svg-icons
npm i @fortawesome/free-brands-svg-icons
</code></pre>
<p>备：<a href="https://github.com/vaso2/nuxt-fontawesome">Nuxt Font Awesome</a> 中使用了官方提供的 <a href="https://github.com/FortAwesome/vue-fontawesome/blob/master/UPGRADING.md">vue-fontawesome</a>。</p>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><ul>
<li><p>新建plugin</p>
<p>在plugins目录下，新建文件：<code>font-awesome.js</code>，放入以下内容：</p>
<pre><code class="js">import Vue from &#39;vue&#39;
import &#123; FontAwesomeIcon &#125; from &#39;@fortawesome/vue-fontawesome&#39;

Vue.component(&#39;font-awesome-icon&#39;, FontAwesomeIcon)
Vue.config.productionTip = false
</code></pre>
<p>这里，引入了FontAwesomeIcon，同时通过Vue.component，生成可供使用的组件，组件的标签为font-awesome-icon。Vue.config.productionTip设置为false，表示关闭生产模式下给出的提示。</p>
</li>
<li><p>配置nuxt.config.js</p>
<p>在<code>nuxt.config.js</code>文件中，在plugins，module部分分别添加如下代码：</p>
<pre><code class="js">plugins: [
 &#39;xxxx&#39;,
  // 引入我们刚刚新增的文件font-awesome.js
 &#39;~/plugins/font-awesome&#39;
]

.....

modules: [
 &#39;xxxxx&#39;,
  // 引入我们新增的套件nuxt-fontawesome
  &#39;nuxt-fontawesome&#39;
]

....
/*
 ** FontAwesome module configuration 配置FontAwesome
 */
 fontawesome: &#123;
   // See https://github.com/vaso2/nuxt-fontawesome
   // 这里设置了组建的标签为fa
   // 如果不设置，则默认为在font-awesome.js中，生成的：font-awesome-icon
   component: &#39;fa&#39;,
   imports: [
     &#123;
       set: &#39;@fortawesome/free-solid-svg-icons&#39;,
       icons: [&#39;fas&#39;]
     &#125;,
     &#123;
       set: &#39;@fortawesome/free-regular-svg-icons&#39;,
       icons: [&#39;far&#39;]
     &#125;,
     &#123;
       set: &#39;@fortawesome/free-brands-svg-icons&#39;,
       icons: [&#39;fab&#39;]
     &#125;
   ]
 &#125;,
.......
</code></pre>
<p>这里，把三个免费的package都添加进来了。如果需要添加收费的pro版本，则是这样：</p>
<pre><code class="js"> /*
  ** FontAwesome module configuration
  */
  fontawesome: &#123;
    // See https://github.com/vaso2/nuxt-fontawesome
    component: &#39;fa&#39;,
    imports: [
      &#123;
        set: &#39;@fortawesome/pro-regular-svg-icons&#39;,
        icons: [&#39;faAdjust&#39;]
      &#125;
    ]
  &#125;
</code></pre>
<p>[当然，这里set的库，都是之前通过npm / yarn 已经安装过的 ，具体参考：<a href="https://github.com/vaso2/nuxt-fontawesome">Nuxt Font Awesome</a>]</p>
</li>
</ul>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>设定完成，就可以使用了，以一个简单的fontawesome icon 为例：</p>
<pre><code class="html">&lt;i class=&quot;fas fa-music&quot;&gt;&lt;/i&gt;
</code></pre>
<p>在vue页面中引用上述music的icon时，这样写：</p>
<pre><code class="html">### 如果设置中，额外设置了component: &#39;fa&#39;:
&lt;fa :icon=&quot;[&#39;fas&#39;, &#39;music&#39;]&quot; /&gt;

### 如果没有设置component
&lt;font-awesome-icon :icon=&quot;[&#39;fas&#39;, &#39;music&#39;]&quot; /&gt;
</code></pre>
<p>OK！</p>
<p>更多使用参考<a href="https://github.com/vaso2/nuxt-fontawesome">Nuxt Font Awesome</a>。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>推荐： <a href="https://www.hellosanta.com.tw/blog/how-to-use-fontawesome-5-to-nuxt-project">【Nuxt教學】實作引用 Fontawesome 5 到Nuxt專案</a></p>
<p><a href="https://github.com/vaso2/nuxt-fontawesome">Nuxt Font Awesome</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Nuxt</tag>
      </tags>
  </entry>
  <entry>
    <title>将sql文件导入rails数据库中</title>
    <url>/posts/import-sql-file-to-rails-database/</url>
    <content><![CDATA[<p>虽然这是个很小白的问题，但还是决定写下来，毕竟还是在坑里折腾了些时间。</p>
<span id="more"></span> 

<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>如题所诉，现有一份sql文件，需要导入了rails中，比如你新建好了model user ,但是对应的数据表是空的，</p>
<p>数据库用的是mysql， 要求导入sql文件后，进入rails console，查询User.all， 会出现导入的数据。</p>
<h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><p>拿到数据库的时候，直接Google，很快就可以看到各种解答，有些走rails console， 或者使用task来执行。</p>
<p>类似这样，运行sql文件：</p>
<pre><code>ActiveRecord::Base.connection.execute(IO.read(&quot;your_sql_file.sql&quot;))
</code></pre>
<p>我便沿着这个坑开始走，不过奇怪的是，运行时没报错，但进入rails console，执行 User.count, 得到的结果却是0，根本没有导入数据。</p>
<p>最后发现其实很简单，不走rails console的路线，直接通过mysql导入即可。</p>
<p>进入mysql:</p>
<pre><code>mysql -u user_name -p
</code></pre>
<p>user_name是你的用户名，然后它会让你输入密码。如果想要免密码，比如你忘记了密码，可以这样：</p>
<pre><code>mysql.server stop
mysql.server start --skip-grant-tables
</code></pre>
<p>然后进入mysql:</p>
<pre><code>mysql
</code></pre>
<p>选择你的数据库：</p>
<pre><code>use your_database_name;
</code></pre>
<p>导入：</p>
<pre><code>source /path/to/your_sql_file.sql
</code></pre>
<p>OK!!</p>
<p>可以进入rails console检查一下你的数据是否已经导入到指定的数据库中。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://stackoverflow.com/questions/48211032/import-sql-file-into-rails-database">Import SQL file into Rails database</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>在nuxt项目中引入fontawesome和echarts</title>
    <url>/posts/import-fontawesome-and-echarts-in-nuxt-project/</url>
    <content><![CDATA[<p>nuxt中正确的引包方式。</p>
<span id="more"></span> 

<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>之前在nuxt里面引入fontawesome的时候，用的是别人封装好的组件<a href="https://github.com/vaso2/nuxt-fontawesome">nuxt-fontawesome</a>，还写了<a href="https://luciaca.cn/2018/11/28/import-fontawesome-to-nuxt-project/">在Nuxt项目中引入fontawesome</a>记录下来操作方法，后面引入Echarts的时候，也是引用封装好的组件<a href="https://github.com/ElemeFE/v-charts">v-charts</a>， 结果老大review代码的时候，全部否定，改用引入原生的fontawesome 和echarts，修改后，代码看着清晰简单，记录下。</p>
<h4 id="引入fontawesome"><a href="#引入fontawesome" class="headerlink" title="引入fontawesome"></a>引入fontawesome</h4><p>参考官网上的<a href="https://fontawesome.com/start">setup</a>，先安装。</p>
<p>npm:</p>
<pre><code>npm install --save-dev @fortawesome/fontawesome-free
</code></pre>
<p>Yarn:</p>
<pre><code>yarn add --dev @fortawesome/fontawesome-free
</code></pre>
<p>安装后，在assets/stylesheets目录下，新增文件<code>fontawesome.scss</code>：</p>
<pre><code class="scss">@import &#39;@fortawesome/fontawesome-free/css/all.css&#39;;
</code></pre>
<p>最后配置下<code>nuxt.config.js</code>。</p>
<p>在<code>nuxt.config.js</code>的css 部分，添加如下代码：</p>
<pre><code class="js">  css: [
    ......
    &#39;~assets/stylesheets/fontawesome.scss&#39;
  ],
</code></pre>
<p>修改配置后，重启。</p>
<p>大功告成，直接在页面使用即可，比如添加一个音乐的icon：</p>
<pre><code class="html">&lt;i class=&quot;fas fa-music&quot;&gt;&lt;/i&gt;
</code></pre>
<h4 id="引入echarts"><a href="#引入echarts" class="headerlink" title="引入echarts"></a>引入echarts</h4><p>安装：</p>
<p>npm:</p>
<pre><code>npm install echarts --save
</code></pre>
<p>Yarn:</p>
<pre><code>yarn add echarts
</code></pre>
<p>安装后，在需要使用Echarts的组件中，引入echarts，设置好配置项即可。</p>
<p>以<code>index.vue</code>为例，组件中使用了柱状图：</p>
<pre><code class="vue">## pages/xxx/index.vue
&lt;template&gt;
  &lt;div id=&quot;echart&quot; /&gt;
&lt;/template&gt;

&lt;script&gt;
import echarts from &#39;echarts&#39;

    export default &#123;
        mounted() &#123;
            const barChartElement = this.$el.querySelector(&quot;#echart&quot;)
            const barChart = echarts.init(barChartElement)
            const options = &#123;
                title: &#123;
                    text: &#39;柱形图示例&#39;
                &#125;,
                tooltip: &#123;&#125;,
                legend: &#123;
                    data:[&#39;含糖量&#39;]
                &#125;,
                xAxis: &#123;
                    data: [&quot;苹果&quot;,&quot;橙子&quot;,&quot;西瓜&quot;,&quot;菠萝&quot;,&quot;雪梨&quot;,&quot;柿子&quot;]
                &#125;,
                yAxis: &#123;&#125;,
                series: [&#123;
                    name: &#39;含糖量&#39;,
                    type: &#39;bar&#39;,
                    data: [5, 20, 36, 10, 10, 20]
                &#125;]
            &#125;
            barChart.setOption(options)
        &#125;
    &#125;  
&lt;/script&gt;
</code></pre>
<p>各个图表的详细配置可以参考<a href="https://echarts.baidu.com/tutorial.html#5%20%E5%88%86%E9%92%9F%E4%B8%8A%E6%89%8B%20ECharts">Echarts文档</a>。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://fontawesome.com/start">Font Awesome</a></p>
<p><a href="https://echarts.baidu.com/index.html">Echarts</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Nuxt</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac 安装 link-grammar 踩坑</title>
    <url>/posts/install-old-version-of-link-grammar-on-mac-os/</url>
    <content><![CDATA[<p>发现原来 homebrew 还能这么玩，记录下。</p>
<span id="more"></span>

<h4 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h4><p>项目中用到了gem <a href="https://github.com/ged/linkparser">linkparser</a>,  安装该gem前，要求安装 <a href="https://www.abisource.com/projects/link-grammar/#download">link-grammar</a>。</p>
<p>常规思路就是 homebrew。</p>
<p>Mac本地安装link-grammar, 使用brew：</p>
<pre><code class="shell">brew install link-grammar
</code></pre>
<p>安装了最新版本的link-grammar ,  5.8.0.</p>
<p><code>bundle install</code> 时，依然报错，查看 <a href="https://github.com/ged/linkparser">linkparser</a> 已经多年未更新，大概率是 link-grammar 版本太新导致。</p>
<pre><code class="shell">brew search link-grammar
</code></pre>
<p>Formulae 只有最新的，没有其他版本。</p>
<p>只能换个思路，手动编译安装下。</p>
<p>去官网查看link-grammar的<a href="https://www.abisource.com/downloads/link-grammar/">所有历史版本</a>,  选择安装5.6.2，下载了source code， 按照<a href="https://github.com/opencog/link-grammar">link-grammar</a>中给出的操作步骤进行安装，编译时，出现了各种莫名其妙的坑。</p>
<h4 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h4><p>卡了几个小时后，还是求助头头，他给到的解决方法依然是homebrew,  速度地解决了问题。</p>
<p>具体如下：</p>
<p>去homebrew core 的 <a href="https://github.com/Homebrew/homebrew-core">github 主页</a>，搜索 link-grammar。</p>
<p>找到后，点击history：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/Xnip2020-05-29_14-04-37.jpg"></p>
<p>显示 commit history 太长，建议去本地执行 git log 查看历史记录。</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/image-20200529140639526.png"></p>
<p>在本地，切换到 homebrew-core 目录下：</p>
<pre><code class="shell">cd /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core
</code></pre>
<p>执行：</p>
<pre><code class="shell">git log 947ad05b46800d3c4d000881dc0240978720add4 -- Formula/link-grammar.rb
</code></pre>
<p>会有点慢，稍等下，会看到历史的commit：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/image-20200529141005712.png"></p>
<p>把对应的commit copy 下来，替换link-grammar最新commit的id，看到了 5.6.2版本。</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/Xnip2020-05-29_14-14-54.jpg"></p>
<p>点击 Raw, 拿到 URL，本地终端执行：</p>
<pre><code>brew install https://raw.githubusercontent.com/Homebrew/homebrew-core/947ad05b46800d3c4d000881dc02409s78720add4/Formula/link-grammar.rb
</code></pre>
<p>OK， 安装完成。</p>
<p> 执行 <code>bundle install</code>,  Bingo!</p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
      </tags>
  </entry>
  <entry>
    <title>用GCP搭建SSserver</title>
    <url>/posts/install-ss-server-on-google-cloud-platform/</url>
    <content><![CDATA[<p>翻墙小白的SS搭建笔记。</p>
<span id="more"></span> 
<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>按照网上的这篇<a href="http://godjose.com/2017/06/14/new-article/">用Google Cloud Platform搭建Shadowsocks服务教程</a> 来搭建小飞机服务，但是操作的过程中踩了点坑，这里记录下在服务器上搭建的详细过程， 以备下次少踩点坑。</p>
<p>有关申请GCP和创建实例的步骤，这里略去，以下操作步骤基于Ubuntu 18.04.2，主要的命令语句参考<a href="http://godjose.com/2017/06/14/new-article/">用Google Cloud Platform搭建Shadowsocks服务教程</a>。</p>
<h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><p>创建实例后，点击VM实例页面中的SSH按钮，连接到服务器。</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1g2u38httrvj31g00f0mzc.jpg"></p>
<p>登录服务器后，先获取 root 权限：</p>
<pre><code>sudo -i
</code></pre>
<p>更新系统：</p>
<pre><code>apt update
apt upgrade
</code></pre>
<h4 id="启用BBR"><a href="#启用BBR" class="headerlink" title="启用BBR"></a>启用BBR</h4><p>BBR 由 Google 开发，供 Linux 内核的 TCP 协议栈使用，具体我也不甚了解，可以简单理解为它能加速网络传输速度。</p>
<p>好了，启用吧。</p>
<p>写入配置：</p>
<pre><code>echo &quot;net.core.default_qdisc=fq&quot; &gt;&gt; /etc/sysctl.conf

echo &quot;net.ipv4.tcp_congestion_control=bbr&quot; &gt;&gt; /etc/sysctl.conf
</code></pre>
<p>配置生效：</p>
<pre><code>sysctl -p
</code></pre>
<p>校验：</p>
<pre><code>lsmod | grep bbr
</code></pre>
<p>看到输出类似<code>tcp_bbr  20480 </code> 这样的内容，则表明启用成功了。</p>
<h4 id="搭建SS-Server"><a href="#搭建SS-Server" class="headerlink" title="搭建SS Server"></a>搭建SS Server</h4><p>SS Server的安装可以参考官方文档：<a href="https://github.com/shadowsocks/shadowsocks/blob/master/README.md">shadowsocks</a>.</p>
<p>更新软件包：</p>
<pre><code>apt-get update
</code></pre>
<p>安装python-pip：</p>
<pre><code>apt-get install python-pip
</code></pre>
<p>使用 pip 安装 SS server：</p>
<pre><code>pip install shadowsocks
</code></pre>
<p>安装成功后，创建配置文件：</p>
<pre><code>vi /etc/shadowsocks.json
</code></pre>
<p>在文件中添加以下内容：</p>
<pre><code>&#123;
    &quot;server&quot;:&quot;0.0.0.0&quot;,
    &quot;server_port&quot;:8388,
    &quot;local_address&quot;: &quot;127.0.0.1&quot;,
    &quot;local_port&quot;:1080,
    &quot;password&quot;:&quot;password&quot;,
    &quot;timeout&quot;:300,
    &quot;method&quot;:&quot;aes-256-cfb&quot;
&#125;
</code></pre>
<p>这里：server_port， password对应的是之后你在Shadowsocks客户端上配置的端口和密码，请自定义。</p>
<p>保存文件后，启动SS server：</p>
<pre><code>ssserver -c /etc/shadowsocks.json -d start
</code></pre>
<p>看到输出started，则表示启动成功。</p>
<p>但是很不幸，我执行这一步时，启动报错，显示：</p>
<blockquote>
<p>undefined symbol EVP_CIPHER_CTX_cleanup shadowsocks start failed</p>
</blockquote>
<p>参考这篇<a href="http://tplove.info/post/21/">ShadowSocks2.8.2启动报错”undefined symbol EVP_CIPHER_CTX_cleanup”</a>， 作者指出是由于openssl升级导致，按照文章指示，做了如下操作：</p>
<p>编辑<code>/usr/local/lib/python2.7/dist-packages/shadowsocks/crypto/openssl.py</code> 文件：</p>
<p>【这里文件地址可能不大一样，你可以使用find找到<code>shadowsocks/crypto/openssl.py</code>文件】</p>
<p>使用 vi 打开文件，将文件中所有<strong>EVP_CIPHER_CTX_cleanup</strong>都修改为<strong>EVP_CIPHER_CTX_reset</strong>。</p>
<p>作者在文中很贴心的指出共有两处，在第52行和111行，感谢作者的分享。</p>
<p>修改完成后，重新启动SS server即可。</p>
<p>更多SS server相关命令，参考<a href="https://github.com/shadowsocks/shadowsocks/wiki">shadowsocks wiki</a>.</p>
<h4 id="设置开机自启"><a href="#设置开机自启" class="headerlink" title="设置开机自启"></a>设置开机自启</h4><p>创建脚本文件：</p>
<pre><code>vi /etc/init.d/shadowsocks
</code></pre>
<p>添加如下内容：</p>
<pre><code class="shell">#!/bin/sh

start()&#123;
　　　ssserver -c /etc/shadowsocks.json -d start
&#125;
stop()&#123;
　　　ssserver -c /etc/shadowsocks.json -d stop
&#125;
case &quot;$1&quot; in
start)
　　　start
　　　;;
stop)
　　　stop
　　　;;
reload)
　　　stop
　　　start
　　　;;
*)
      echo &quot;Usage: $0 &#123;start|reload|stop&#125;&quot;
      exit 1
　　　;;
esac
</code></pre>
<p>为该文件添加可执行权限：</p>
<pre><code>chmod +x /etc/init.d/shadowsocks
</code></pre>
<p>新建shadowsocks.conf:</p>
<pre><code>vi /etc/init/shadowsocks.conf
</code></pre>
<p>添加如下内容：</p>
<pre><code>start on (runlevel [2345])stop on (runlevel [016])pre-start script
/etc/init.d/shadowsocks start
end script

post-stop script
/etc/init.d/shadowsocks stop
end script
</code></pre>
<p>执行：</p>
<pre><code>update-rc.d shadowsocks defaults
</code></pre>
<p>开机自启设置完成。</p>
<p>如果开机自启没有成功，请检查下<code>/etc/init.d/shadowsocks</code> 文件，确保脚本中不存在语法错误，比如中文符号。</p>
<h4 id="防火墙配置"><a href="#防火墙配置" class="headerlink" title="防火墙配置"></a>防火墙配置</h4><p>写这个是因为当时按照教程搭建完SS server后，发现还是翻不了墙，又不知道哪里出了问题，领导帮忙debug了下，修改了防火墙规则，问题解决。</p>
<p>在GCP 主页中，选择菜单 <strong>VPC 网络</strong> =&gt;<strong>防火墙规则</strong>， <strong>创建防火墙规则</strong>:</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1g2utgj3mtaj30u00zwdkd.jpg"></p>
<h4 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h4><pre><code>less /var/log/shadowsocks.log
</code></pre>
<p>如果日志上没有访问记录，可以考虑查看防火墙状态：</p>
<pre><code>ufw status
</code></pre>
<p>或者查看端口情况：</p>
<pre><code>netstat -anp
</code></pre>
<p>判断问题出在哪里。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="http://godjose.com/2017/06/14/new-article/">用Google Cloud Platform搭建Shadowsocks服务教程</a></p>
<p><a href="http://tplove.info/post/21/">ShadowSocks2.8.2启动报错”undefined symbol EVP_CIPHER_CTX_cleanup”</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Shadowsocks</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac下安装虚拟机跑window10</title>
    <url>/posts/install-windows-10-in-vm-that-installed-on-mac/</url>
    <content><![CDATA[<p>N年前装过一次，不记得了，这次又折腾了次，记录下具体步骤。</p>
<span id="more"></span> 

<h4 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h4><ul>
<li><p>下载 <a href="https://www.microsoft.com/en-us/software-download/windows10ISO">window 10 ISO</a>, 推荐下载 64-bit</p>
</li>
<li><p>下载 <a href="https://www.virtualbox.org/wiki/Downloads">virtual box</a></p>
</li>
<li><p>打开下载好的VirtualBox 安装文件，按照指示安装即可</p>
</li>
<li><p>安装好 VirtualBox 后，在 launchpad 中找到 VirtualBox, 打开后，新建一个 VM实例，这里选Windows 10 64-bit</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1g4fvjq7605j318i0pqdl2.jpg" alt="image-20190627163250101"></p>
</li>
<li><p>选择 memory size, 点击 continue即可。</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1g4fvjqr8zpj31260mm0vm.jpg" alt="image-20190627163543078"></p>
</li>
<li><p>Hard disk:</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1g4fvjoc7taj310w0ksn1a.jpg" alt="image-20190627163742261"></p>
</li>
<li><p>hard disk file type:</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1g4fvjp92odj31740rgdjp.jpg" alt="image-20190627163810912"></p>
<p>点击Continue即可。</p>
</li>
<li><p>将下载的 window 10 ISO 添加到新建的VM实例中</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1g4fvjouzr4j30zj0u00ym.jpg" alt="image-20190627164403672"></p>
<p>弹出的窗口中，选择 <strong>choose disk</strong>，添加 下载的 window 10 ISO 即可。</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1g4fvjo4fkmj31460r2jwj.jpg" alt="image-20190627175852503"></p>
</li>
<li><p>最后开启新建的VM实例，会看到如下的 Windows 界面，按照步骤安装即可，enjoy。</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1g4fvjps509j310h0u0q96.jpg" alt="image-20190627165729643"></p>
</li>
</ul>
<h4 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h4><p>打开 VirtualBox dmg 文件时，安装失败，报错：The installation failed。</p>
<p>参考 <a href="https://medium.com/@DMeechan/fixing-the-installation-failed-virtualbox-error-on-mac-high-sierra-7c421362b5b5">Fixing ‘The Installation Failed’ VirtualBox Error on Mac High Sierra</a>。</p>
<p>打开 system Preferences -&gt; Security &amp; Privacy，当前界面中会有一行类似这样的文字：</p>
<pre><code>System software from developer “Oracle America, Inc.” was blocked
</code></pre>
<p>旁边有一个按钮 allow，点击即可。</p>
<p>【忘记截图了，补上的图里面已经没有报错信息，大致位置在allow apps downloaded from  下面，如果没有出现这句话，建议重启 Mac】</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1g4fvjr65m3j30y70u0776.jpg" alt="image-20190627162200081"></p>
<h4 id="更新-2019-06-29-："><a href="#更新-2019-06-29-：" class="headerlink" title="更新[2019-06-29]："></a>更新[2019-06-29]：</h4><p>用的时候才发现开个网页都卡到怀疑人生。<br>果断弃坑，换了<a href="https://www.vmware.com/">VMware</a>, 推荐<a href="https://www.vmware.com/products/fusion/fusion-evaluation.html">VMware Fusion</a>，可试用一个月，安装起来也很简单，傻瓜式操作，这里就不细说了。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.extremetech.com/computing/198427-how-to-install-windows-10-in-a-virtual-machine">How to install Windows 10 in a virtual machine</a></p>
<p> <a href="https://medium.com/@DMeechan/fixing-the-installation-failed-virtualbox-error-on-mac-high-sierra-7c421362b5b5">Fixing ‘The Installation Failed’ VirtualBox Error on Mac High Sierra</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>VM</tag>
      </tags>
  </entry>
  <entry>
    <title>Introduction to jQuery_1</title>
    <url>/posts/introduction-to-jQuery-module1/</url>
    <content><![CDATA[<p>Module 1.</p>
<span id="more"></span> 

<h4 id="Before-Start"><a href="#Before-Start" class="headerlink" title="Before Start"></a>Before Start</h4><p>The following contents are the notes I took when learning  jQuery on Edx.</p>
<p>Mainly for  front-End Web developers, check <a href="https://courses.edx.org/courses/course-v1:Microsoft+DEV208x+4T2017/course/">here</a> to get more details.</p>
<p>BTW, This class is supported by Microsoft. If you are a Linux fan, hope it would not make you uncomfortable( cause I am a little uncomfortable about it at first.) : D</p>
<h4 id="CONTENTS"><a href="#CONTENTS" class="headerlink" title="CONTENTS"></a>CONTENTS</h4><p>Three parts:</p>
<ul>
<li>Adding jQuery to web pages</li>
<li><a href="https://lupeipei.github.io/2017/10/06/introduction-to-jquery-module2-1/">Managing content, events and effects</a></li>
<li><a href="https://lupeipei.github.io/2017/10/08/introduction-to-jquery-module3-1/">Asynchronous operations and Ajax calls</a></li>
</ul>
<p>DOM: Document Object Model.</p>
<p>jQuery : the most popular javaScript library. designed to bring additional power to JS.</p>
<p>Let’s start!</p>
<h4 id="Module1-Adding-jQuery-to-web-pages"><a href="#Module1-Adding-jQuery-to-web-pages" class="headerlink" title="Module1 : Adding jQuery to web pages"></a>Module1 : Adding jQuery to web pages</h4><ul>
<li><p><strong>Getting started with jQuery</strong></p>
<ul>
<li>use Visual Studio</li>
<li>getting started with <a href="https://code.visualstudio.com/">Visual Studio Code</a></li>
</ul>
</li>
<li><p><strong>Adding jQuery to a page</strong></p>
<p> a simple example to start:</p>
<pre><code class="javascript">// you can use either of them:

$(document).ready(function() &#123;
    // code here
&#125;);

$(function() &#123;
    // code here
&#125;);
</code></pre>
</li>
<li><p><strong>Using CSS selectors with jQuery</strong></p>
<ul>
<li><p>Common CSS selectors</p>
<pre><code class="javascript">$(&#39;h1&#39;) // selects all h1 elements
$(&#39;.class-name&#39;) // selects all elements with a class of class-name
$(&#39;#demo&#39;) // selects all elements with an id of demo
</code></pre>
</li>
<li><p>Attribute based selectors</p>
<pre><code class="javascript">// selects all elements with an attribute matching the specified value
$(&#39;[demo-attribute=&quot;demo-value&quot;]&#39;)

// selects all h1 elements with an attribute matching the specified value
$(&#39;h1[demo-attribute=&quot;demo-value&quot;]&#39;)

// If you wish to find all elements where the value **starts** with a string, use the ^= operator.
$(&#39;[class^=&quot;col&quot;]&#39;)

// If you wish to find all elements where the value **contains** a string, use the *= operator.
$(&#39;[class*=&quot;md&quot;]&#39;)
</code></pre>
</li>
<li><p>Positional selectors</p>
<ul>
<li><p><strong>Parent/child relationships</strong></p>
<p>Consider the following script:</p>
<pre><code class="javascript">// Selects all a elements that are direct descendants nav element
$(&#39;nav &gt; a&#39;)
</code></pre>
<p>In the following HTML, the first link would be selected, but not the second. This is because the first link is a <strong>direct child</strong>, but the second is inside of a <code>div</code>element.</p>
<pre><code class="Html">&lt;nav&gt;
    &lt;a href=&quot;#&quot;&gt;(First) This will be selected&lt;/a&gt;
    &lt;div&gt;
        &lt;a href=&quot;#&quot;&gt;(Second) This will not be selected&lt;/a&gt;
    &lt;/div&gt;
&lt;/nav&gt;
</code></pre>
</li>
<li><p><strong>Descendants</strong></p>
<p>Examples:</p>
<pre><code class="Html">// Selects all a elements that are descendants nav element
// The elements can appear anywhere inside of the element listed first
$(&#39;nav a&#39;)

//this is an example to show the difference,if you use $(&#39;nav a&#39;), the first and the second will be selected both, if you use $(&#39;nav &gt; a&#39;), only the first one will be selected.
&lt;nav&gt;
    &lt;a href=&quot;#&quot;&gt;(First) This will be selected&lt;/a&gt;
    &lt;div&gt;
        &lt;a href=&quot;#&quot;&gt;(Second) This will be selected&lt;/a&gt;
    &lt;/div&gt;
&lt;/nav&gt;
</code></pre>
</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Navigating the DOM with jQuery</strong></p>
<ul>
<li><p>Parent /child relationships</p>
<p>Four methods: <code>children</code> ,<code>find</code>, <code>parent</code>, <code>parents</code></p>
<ul>
<li>with<code> children</code>, it’s gonna be just the direct children.</li>
<li><code>find</code> will walk the entire hierarchy down, but it needs a selector.</li>
<li><code>parent</code> will be the immediate parent.</li>
<li>And <code>parents</code>, plural, will walk up the entire chain.</li>
</ul>
</li>
<li><p>Siblings</p>
<ul>
<li><p><code>prev</code> and <code>next</code></p>
<blockquote>
<p><code>prev()</code>: To move to the prior element</p>
<p><code>next()</code>: To move to the next element</p>
</blockquote>
</li>
<li><p><code>prevAll</code> and <code>nextAll</code></p>
<blockquote>
<p><code>prevAll</code> and <code>nextAll</code> will select all siblings prior or after the element. Both methods also accept a CSS selector to limit the items.</p>
</blockquote>
</li>
<li><p><code>prevUntil</code> and <code>nextUntil</code></p>
<blockquote>
<p><code>prevUntil</code> and <code>nextUntil</code> select all prior or following elements up to, but <strong>not including</strong> the element that matches the selector.</p>
</blockquote>
</li>
</ul>
</li>
<li><p>Selecting items by position</p>
<ul>
<li><p>Finding the index of an item</p>
<pre><code class="javascript">//index method will return the zero based (ordinal) location of the item, or -1 if the item isn&#39;t found.

var currentElement = $(&#39;some selector&#39;);
var parent = $(&#39;some selector&#39;);
var index = parent.children().index(currentElement);
</code></pre>
</li>
<li><p>Finding an item by its position</p>
<pre><code class="javascript">//using the get method
var parent = $(&#39;some selector&#39;);
var element = parent.children().get(index);
</code></pre>
<p>One important note about <code>get</code> is it returns a JavaScript DOM object, <strong>not</strong> a jQuery object.</p>
<p>In order to call jQuery methods on the object, you must convert it to a jQuery object.</p>
<p>Examples below:</p>
<pre><code class="javascript">var parent = $(&#39;some selector&#39;);
var domobject = parent.children().get(index); // DOM object
var jQueryObject = $(parent.children().get(index)); // jQuery object
</code></pre>
</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Getting started with DOM manipulation</strong></p>
<ul>
<li><p>Adding and removing classes</p>
<ul>
<li><p>Adding a class to an element is just as easy as calling <code>addClass</code></p>
<pre><code class="javascript">currentElement.addClass(&#39;class-name&#39;);
</code></pre>
</li>
<li><p>Removing a class from an element is just as easy as calling <code>removeClass</code>. If the element in question was not already decorated with the class you’re trying to remove, the method will simply return.</p>
<pre><code class="javascript">currentElement.removeClass(&#39;class-name&#39;);
</code></pre>
</li>
</ul>
</li>
<li><p>Working with attributes</p>
<ul>
<li><p>reading an attribute value</p>
<pre><code class="javascript">alert($(&#39;selector&#39;).attr(&#39;attribute-name&#39;));
</code></pre>
</li>
<li><p>modifying an attribute value</p>
<pre><code class="javascript">$(&#39;selector&#39;).attr(&#39;attribute-name&#39;, &#39;new value&#39;);
</code></pre>
</li>
<li><p>removing an attribute value</p>
<pre><code class="javascript">$(&#39;selector&#39;).removeAttr(&#39;attribute-name&#39;);
</code></pre>
</li>
</ul>
</li>
<li><p>Modifying content</p>
<ul>
<li><p><code>text()</code>: get to replace the existing text in an element</p>
</li>
<li><p><code>html()</code>: get to replace the existing HTML in an element</p>
</li>
<li><p>the different between <code>text()</code>  and <code>html()</code> is whether or not it’s gonna allow for HTML.</p>
<p>Examples:</p>
<pre><code class="javascript">// update the text
$(item).text(&#39;&lt;h1&gt;Hello, world!!&lt;/h1&gt;&#39;); //output: &lt;h1&gt;Hello, world!!&lt;/h1&gt;

// update the html
$(item).text(&#39;&lt;h1&gt;Hello, world!!&lt;/h1&gt;&#39;);//output: Hello, world!!
</code></pre>
<p>you can say that HTML will allow you to modify HTML, Text is going to be for text only.</p>
</li>
</ul>
</li>
<li><p>Basic event handlers</p>
<p>like click event, more details in <a href="https://lupeipei.github.io/2017/10/06/introduction-to-jquery-module2-1/">Module 2</a></p>
<p>Inside of the event handler code, you can access the object that raised the event by using <code>this</code>.</p>
<pre><code class="javascript">//examples
//click event
//raised when the item is clicked
$(item).click(function() &#123;
    alert(&#39;clicked!!&#39;);
&#125;);

// hover event
// raised when the user moves their mouse over the item
$(item).hover(function() &#123;
    alert(&#39;hover!!&#39;);
&#125;);

// mouseout
// raised when the user moves their mouse away from an item
$(item).mouseout(function() &#123;
    alert(&#39;mouse out&#39;);
&#125;);
</code></pre>
</li>
</ul>
</li>
</ul>
<p>This is Module1 all about. More <a href="https://courses.edx.org/courses/course-v1:Microsoft+DEV208x+4T2017/course/">details</a>.</p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>JQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>Introduction to jQuery_2</title>
    <url>/posts/introduction-to-jquery-module2-1/</url>
    <content><![CDATA[<p>Module 2.1.</p>
<span id="more"></span> 

<h4 id="Before-Start"><a href="#Before-Start" class="headerlink" title="Before Start"></a>Before Start</h4><p>The following contents are the notes I took when learning  jQuery on Edx.</p>
<p>Mainly for  front-End Web developers, check <a href="https://courses.edx.org/courses/course-v1:Microsoft+DEV208x+4T2017/course/">here</a> to get more details.</p>
<h4 id="CONTENTS"><a href="#CONTENTS" class="headerlink" title="CONTENTS"></a>CONTENTS</h4><p>Three parts:</p>
<ul>
<li><a href="https://lupeipei.github.io/2017/10/05/introduction-to-jQuery-module1/">Adding jQuery to web pages</a></li>
<li>Managing content, events and effects</li>
<li><a href="https://lupeipei.github.io/2017/10/08/introduction-to-jquery-module3-1/">Asynchronous operations and Ajax calls</a></li>
</ul>
<h4 id="Module2-Managing-content-events-and-effects"><a href="#Module2-Managing-content-events-and-effects" class="headerlink" title="Module2 : Managing content, events and effects"></a>Module2 : Managing content, events and effects</h4><p>Module2 includes six parts:</p>
<ul>
<li>Event handlers</li>
<li>Modifying elements</li>
<li>Registering event handlers</li>
<li>Adding new elements</li>
<li>Animations</li>
<li>Removing, replacing and cloning</li>
</ul>
<p>Let’s get to know something about the first three parts.</p>
<ul>
<li><p><strong>Event handlers</strong></p>
<p>Event object:</p>
<blockquote>
<p>Beyond just the object that raised the event, jQuery (and JavaScript) also pass an <code>event</code> object to the event handler.</p>
<p>This object can be used to determine additional information, such as where the mouse was when the user performed the operation.</p>
</blockquote>
<p>Example:</p>
<pre><code class="javascript">// Write out the x/y coordinates of the mouse on click
$(&#39;button&#39;).click(function(e) &#123;
    $(&#39;#output&#39;).text(e.pageX + &#39;x&#39; + e.pageY);
&#125;);
</code></pre>
<ul>
<li><p><code>Click</code></p>
<p>Example:</p>
<pre><code class="javascript">$(&#39;#target&#39;).click(function() &#123; alert(&#39;hello, world!&#39;); &#125;);
</code></pre>
</li>
<li><p><code>dbclick</code></p>
<p> raised when the user double clicks on an element.</p>
<p>Example:</p>
<pre><code class="javascript">$(&#39;#target&#39;).dbclick(function()&#123; alert(&#39;hello, world!&#39;); &#125;);
</code></pre>
</li>
<li><p>Forms : blur, change, focus</p>
<ul>
<li><p><code>blur</code></p>
<p>raised when a form element loses what’s known as focus. often used for validation.</p>
<p>Example:</p>
<pre><code class="javascript">$(&#39;#target&#39;).blur(function() &#123;
    // retrieve the value using val
    var value = $(&#39;#target&#39;).val();
    alert(value);
&#125;)
</code></pre>
</li>
<li><p><code>change</code></p>
<p>raised whenever an element is modified.<strong>limited</strong> to <code>input</code>, <code>textarea</code> and <code>select</code> elements only.</p>
<p>Example:</p>
<pre><code class="javascript">$(function() &#123;
  $(&#39;#parent&#39;).change(function() &#123;
    var value = $(&#39;#parent&#39;).val();
    $(&#39;#child&#39;).empty();
    $(&#39;#child&#39;).append(&#39;&lt;option&gt;1 - &#39; + value + &#39;&lt;/option&gt;&#39;);
    $(&#39;#child&#39;).append(&#39;&lt;option&gt;2 - &#39; + value + &#39;&lt;/option&gt;&#39;);
  &#125;)
&#125;);
</code></pre>
</li>
<li><p><code>focus</code></p>
<p>the opposite of <code>blur</code>. raised when the user clicks, taps, or tabs into a particular control, typically because they want to change its value.</p>
<p>Example:</p>
<pre><code class="Html">&lt;!-- sample HTML --&gt;
&lt;div&gt;
    &lt;label for=&quot;phone&quot;&gt;Phone&lt;/label&gt;
    &lt;input type=&quot;text&quot; id=&quot;phone&quot; /&gt;
    &lt;span id=&quot;phone-help&quot;&gt;&lt;/span&gt;
&lt;/div&gt;

// sample JavaScript
$(&#39;#phone&#39;).focus(function() &#123;
    // Control has focus. Display help
    $(&#39;#phone-help&#39;).text(&#39;Please enter your phone number as all digits&#39;);
&#125;).blur(function() &#123;
    // Control lost focus. Clear help
    $(&#39;#phone-help&#39;).text(&#39;&#39;);
&#125;);
</code></pre>
</li>
</ul>
</li>
<li><p>Mouse movement</p>
<ul>
<li><p><code>mouseenter</code>, <code>mouseleave</code></p>
<p><code>mouseenter</code> is raised whenever the user moves their mouse over an element.</p>
<p><code>mouseleave</code> is raised when the user moves their mouse away from an element.</p>
<p>Example:</p>
<pre><code class="Html">&lt;!-- sample HTML --&gt;
&lt;div&gt;
    &lt;span id=&quot;target&quot;&gt;Basic data&lt;/span&gt;
    &lt;span id=&quot;target-help&quot;&gt;&lt;/span&gt;
&lt;/div&gt;

// sample JavaScript
$(&#39;#target&#39;).mouseenter(function() &#123;
    $(&#39;#target-help&#39;).text(&#39;More data&#39;);
&#125;).mouseleave(function() &#123;
    $(&#39;#target-help&#39;).text(&#39;&#39;);
&#125;);
</code></pre>
</li>
<li><p><code>hover</code></p>
<p>equivalent to both the <code>mouseenter</code> and <code>mouseleave</code> events. The first parameter <code>hover</code> accepts is for <code>mouseenter</code>, or when the hover begins, and the second parameter is for <code>mouseout</code>.</p>
<p>Example:</p>
<pre><code class="javascript">$(&#39;#target&#39;).hover(function() &#123;
    // mouseenter
    $(&#39;#target-help&#39;).text(&#39;More data&#39;);
&#125;, function() &#123;
    // mouseleave
    $(&#39;#target-help&#39;).text(&#39;&#39;);
&#125;);
</code></pre>
<p>​</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Modifying elements</strong></p>
<ul>
<li><p>Replacing element HTML and text</p>
<ul>
<li><p><code>val</code></p>
<p>for read the value, like to say retrieve the value of an input control, you can use <code>val()</code></p>
<pre><code>var value = $(&#39;#some-input-control&#39;).val();
</code></pre>
<p>also, you can set the value. use <code>val(new-value)</code></p>
<p>Example: set a textbox to a blank value</p>
<pre><code class="javascript">// Empty a textbox
$(&#39;#some-textbox&#39;).val(&#39;&#39;);
</code></pre>
</li>
<li><p><code>html</code></p>
<p>you have saw it in Module1.</p>
<p>Example:</p>
<pre><code class="javascript">// write text out to the screen
// this will be displayed as
// &lt;strong&gt;value&lt;/strong&gt;
// the text value will not be bolded

$(&#39;#output&#39;).text(&#39;value&#39;);
</code></pre>
</li>
<li><p><code>text</code></p>
<p>Example:</p>
<pre><code class="javascript">// write text out to the screen
// this will be displayed as value
// with the word bolded

$(&#39;#output&#39;).html(&#39;value&#39;);
</code></pre>
</li>
</ul>
</li>
<li><p>Working with attribute and classes</p>
<ul>
<li><p><code>attr</code></p>
<p>To retrieve the value of an attribute, simply call <code>attr(name)</code>.</p>
<p>To change the value of an attribute, simply call <code>attr(name, newValue)</code>.</p>
</li>
<li><p><code>addClass</code> and <code>removeClass</code></p>
<p>You have known it in Module1. Besides, one nice thing about <code>removeClass</code> is it will not throw an error if the class doesn’t exist.</p>
</li>
</ul>
</li>
<li><p>Working with styles</p>
<ul>
<li><p><code>css</code></p>
<p>To retrieve the value of a CSS property,  call <code>css(property)</code>.</p>
<p>To set a property, call <code>css(property, newValue)</code></p>
<p>Example:</p>
<pre><code class="javascript">// Retrieve an item&#39;s color
var color = $(&#39;#target&#39;).css(&#39;color&#39;);

// Change an item&#39;s color to red
$(&#39;#target&#39;).css(&#39;color&#39;, &#39;red&#39;);
</code></pre>
<p>To set multiple properties,  create a JavaScript object with the property/value pairs, and then pass the object into the <code>css</code> function.</p>
<p>Example:</p>
<pre><code class="javascript">var style = &#123;
    color: &#39;red&#39;,
    backgroundColor: yellow
&#125;;

$(&#39;#target&#39;).css(style);
</code></pre>
</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Registering event handlers</strong></p>
<ul>
<li><p>Dynamic event handlers</p>
<ul>
<li><p><code>on</code>, <code>off</code></p>
<p>Both <code>on</code> and <code>off</code> share the same syntax:</p>
<p><code>$(&#39;selector&#39;).on/off(&#39;events&#39;, &#39;selector (optional)&#39;, function)</code></p>
<p>Here, <code>events</code>: A space separated list of the events you wish to register, such as <code>&#39;click&#39;</code> or <code>&#39;click mouseenter&#39;</code></p>
<p> BTW, Obviously if you need to <strong>dynamically choose the event</strong>, or if you need <strong>multiple events for the same event handler</strong>, using <code>on</code> is your only choice.</p>
<p>In additon, <code>on</code> offers one more feature, known as delegation.</p>
</li>
</ul>
</li>
<li><p>Delegation</p>
<p>Registering an event handler using <code>delegate</code>,  is similar to <code>on</code>, with one major difference: New elements will automatically have the event handler applied.</p>
<p>The <code>delegate</code> syntax:</p>
<p><code>$(selector).delegate(selector, events, eventHandler)</code></p>
<p>Example:</p>
<pre><code class="Html">&lt;!-- sample HTML --&gt;
&lt;button&gt;Click&lt;/button&gt;
&lt;div id=&quot;placeholder&quot;&gt;&lt;/div&gt;

//JS
$(function() &#123;
    // document.ready (on load)

    // register a click event handler with all button elements, except new button
    //$(&#39;button&#39;).click(function() &#123; alert(&#39;hello&#39;); &#125;);
    // new button will also be raised
    $(document).delegate(&#39;button&#39;, &#39;click&#39;, function() &#123; alert(&#39;hello&#39;); &#125;);

    // create a new button
    $(&#39;#placeholder&#39;).html(&#39;&lt;button&gt;New button&lt;/button&gt;&#39;);
&#125;);
</code></pre>
<p>With jQuery 1.7, <code>delegate</code> is superseded by <code>on</code>.</p>
<p><strong>One important thing to note</strong> is the order of parameters for <code>on</code> and <code>delegate</code>.</p>
<p>With <code>on</code>, you list the events first and the selector second. With <code>delegate</code>, it’s selector followed by events.</p>
<p>Example:</p>
<pre><code class="javascript">// Delegation (note the order of parameters)
$(document).on(&#39;click&#39;, &#39;button&#39;, function() &#123;alert(&#39;hello&#39;); &#125;);

// Semantically the same as above
// (note the order of parameters)
$(document).delegate(&#39;button&#39;, &#39;click&#39;, function() &#123; alert(&#39;hello&#39;); &#125;);
</code></pre>
</li>
<li><p>Single execution</p>
<ul>
<li><p><code>one</code></p>
<p><code>one</code> shares a similar syntax with <code>on</code>, only there is no delegation option.</p>
<p>The event only execute once.</p>
<p>Example:</p>
<pre><code class="Html">&lt;!-- sample HTML --&gt;
&lt;button id=&quot;single&quot;&gt;This only works once&lt;/button&gt;
&lt;div id=&quot;output&quot;&gt;&lt;/div&gt;

//JS
$(function() &#123;
    $(&#39;#single&#39;).one(&#39;click&#39;, function() &#123;
        $(&#39;#output&#39;).text(&#39;You clicked on the button&#39;);
    &#125;);
&#125;);
</code></pre>
</li>
</ul>
</li>
<li><p>Triggering events</p>
<p>Raise the event programatically, like to click on a button to refresh data.</p>
<p><code>trigger</code> and <code>triggerHandler</code> allow you to provide the name of the event as a parameter.</p>
<p><code>trigger</code> will execute for <strong>all elements</strong> in the collection,</p>
<p>while <code>triggerHandler</code> only executes the handler for <strong>the first element</strong>.</p>
<p>Example:</p>
<pre><code class="Html">&lt;!-- sample HTML --&gt;
&lt;button type=&quot;button&quot; id=&quot;first&quot;&gt;First button&lt;/button&gt;
&lt;button type=&quot;button&quot; id=&quot;Second&quot;&gt;Second button&lt;/button&gt;
&lt;button type=&quot;button&quot; id=&quot;trigger&quot;&gt;trigger&lt;/button&gt;
&lt;button type=&quot;button&quot; id=&quot;trigger-handler&quot;&gt;triggerHandler&lt;/button&gt;

//JS
$(function() &#123;
    $(&#39;button&#39;).click(function() &#123;
        // display the id of the button
        alert(this.id);
    &#125;);

    $(&#39;#trigger&#39;).click(function() &#123;
        // Would alert every button&#39;s id
        // including the last two
        $(&#39;button&#39;).trigger(&#39;click&#39;);
    &#125;);

    // Would alert &quot;first&quot;
    $(&#39;#trigger-handler&#39;).click(function() &#123;
        // Would alert &quot;first&quot;
        $(&#39;button&#39;).triggerHandler(&#39;click&#39;);
    &#125;);
&#125;);
</code></pre>
<p>This is the first three parts of Module2 all about. More <a href="https://courses.edx.org/courses/course-v1:Microsoft+DEV208x+4T2017/course/">details</a>.</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>JQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>Introduction to jQuery_3</title>
    <url>/posts/introduction-to-jquery-module2-2/</url>
    <content><![CDATA[<p>Module 2.2.</p>
<span id="more"></span> 

<h4 id="Before-Start"><a href="#Before-Start" class="headerlink" title="Before Start"></a>Before Start</h4><p>The following contents are the notes I took when learning  jQuery on Edx.</p>
<p>Mainly for  front-End Web developers, check <a href="https://courses.edx.org/courses/course-v1:Microsoft+DEV208x+4T2017/course/">here</a> to get more details.</p>
<h4 id="CONTENTS"><a href="#CONTENTS" class="headerlink" title="CONTENTS"></a>CONTENTS</h4><p>Three parts:</p>
<ul>
<li><a href="https://lupeipei.github.io/2017/10/05/introduction-to-jQuery-module1/">Adding jQuery to web pages</a></li>
<li>Managing content, events and effects</li>
<li><a href="https://lupeipei.github.io/2017/10/08/introduction-to-jquery-module3-1/">Asynchronous operations and Ajax calls</a></li>
</ul>
<h4 id="Module2-Managing-content-events-and-effects"><a href="#Module2-Managing-content-events-and-effects" class="headerlink" title="Module2 : Managing content, events and effects"></a>Module2 : Managing content, events and effects</h4><p>Module2 includes six parts:</p>
<ul>
<li>Event handlers</li>
<li>Modifying elements</li>
<li>Registering event handlers</li>
<li>Adding new elements</li>
<li>Animations</li>
<li>Removing, replacing and cloning</li>
</ul>
<p>Let’s get to know something about the last three parts of Module2.</p>
<ul>
<li><p><strong>Adding new elements</strong></p>
<ul>
<li><p>Internal DOM manipulation</p>
<p><code>append</code>, <code>appendTo</code>, <code>prepend</code> and <code>prependTo</code>.</p>
<p>Remember that the element you target will become the <strong>container</strong> for the new element. So using <code>append</code> will add a new element <strong>inside</strong> the target, not after the element.</p>
<ul>
<li> <code>prepend</code> and <code>prependTo</code></li>
</ul>
<p>  Add new content to the <strong>begining</strong> of the contents of a target.</p>
<p>  Example:</p>
<p>  ```Html</p>
  <!-- starting HTML -->
  <div id="target">
      <div>existing content</div>
  </div>

<p>  //executed either of the lines of JavaScript below<br>  // prepend is called on the target, and accepts the new content as the parameter<br>  $(‘#target’).prepend(‘<div>New content</div>‘);</p>
<p>  //or you can use prependTo<br>  // prependTo is called on the new content, and accepts the target as the parameter<br>  $(‘<div>New content</div>‘).prependTo(‘#target’);</p>
</li>
</ul>
</li>
</ul>
<pre><code>  &lt;!-- ending HTML --&gt;
  &lt;div id=&quot;target&quot;&gt;
      &lt;div&gt;New content&lt;/div&gt;
      &lt;div&gt;existing content&lt;/div&gt;
  &lt;/div&gt;
  ```

- `append` and `appendTo`

  Add new content to the **end** of the contents of a target.

  Example:

  ```Html
  &lt;!-- starting HTML --&gt;
  &lt;div id=&quot;target&quot;&gt;
      &lt;div&gt;existing content&lt;/div&gt;
  &lt;/div&gt;

  //executed either of the lines of JavaScript below
  // append is called on the target, and accepts the new content as the parameter
  $(&#39;#target&#39;).append(&#39;&lt;div&gt;New content&lt;/div&gt;&#39;);

  // appendTo is called on the new content, and accepts the target as the parameter
  $(&#39;&lt;div&gt;New content&lt;/div&gt;&#39;).appendTo(&#39;#target&#39;);

  &lt;!-- ending HTML --&gt;
  &lt;div id=&quot;target&quot;&gt;
      &lt;div&gt;existing content&lt;/div&gt;
      &lt;div&gt;New content&lt;/div&gt;
  &lt;/div&gt;
  ```
</code></pre>
<ul>
<li><p>External DOM manipulation</p>
<p><code>after</code>, <code>insertAfter</code>, <code>before</code>, and <code>insertBefore</code></p>
<ul>
<li><p><code>after</code> and <code>insertAfter</code></p>
<p>Add new content after the target.</p>
<p>Example:</p>
<pre><code class="Html">&lt;!-- starting HTML --&gt;
&lt;div id=&quot;target&quot;&gt;
    &lt;div&gt;existing content&lt;/div&gt;
&lt;/div&gt;

//executed either of the lines of JavaScript below
// after is called on the target, and accepts the new content as a parameter
$(&#39;target&#39;).after(&#39; New content&#39;);

// insertAfter is called on the new content, and accepts the target as a parameter
$(&#39; New content&#39;).insertAfter(&#39;#target&#39;);

&lt;!-- ending HTML --&gt;
&lt;div id=&quot;target&quot;&gt;
    &lt;div&gt;existing content&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;New content&lt;/div&gt;
</code></pre>
</li>
<li><p><code>before</code> and <code>insertBefore</code></p>
<p>Add new content before the target.</p>
<p>Example:</p>
<pre><code class="Html">&lt;!-- starting HTML --&gt;
&lt;div id=&quot;target&quot;&gt;
    &lt;div&gt;existing content&lt;/div&gt;
&lt;/div&gt;

//executed either of the lines of JavaScript below
// before is called on the target, and accepts the new content as a parameter
$(&#39;target&#39;).before(&#39;New content&#39;);

// insertBefore is called on the new content, and accepts the target as a parameter
$(&#39;New content&#39;).insertBefore(&#39;#target&#39;);

&lt;!-- ending HTML --&gt;
&lt;div&gt;New content&lt;/div&gt;
&lt;div id=&quot;target&quot;&gt;
    &lt;div&gt;existing content&lt;/div&gt;
&lt;/div&gt;
</code></pre>
</li>
</ul>
</li>
<li><p>Wrapping content</p>
<p>To manipulate the DOM by surrounding existing content with a new element.</p>
<ul>
<li><p><code>wrap</code></p>
<p>wraps <strong>each item</strong> with the element passed into the function.</p>
<p>Example:</p>
<pre><code class="Html">&lt;!-- starting HTML --&gt;
&lt;div id=&quot;target&quot;&gt;
    &lt;div class=&quot;demo&quot;&gt;Item one&lt;/div&gt;
    &lt;div class=&quot;demo&quot;&gt;Item two&lt;/div&gt;
&lt;/div&gt;

//JS
$(&#39;.demo&#39;).wrap(&#39;&lt;section&gt;&lt;/section&gt;&#39;);

&lt;!-- ending HTML --&gt;
&lt;div id=&quot;target&quot;&gt;
    &lt;section&gt;
        &lt;div class=&quot;demo&quot;&gt;Item one&lt;/div&gt;
    &lt;/section&gt;
    &lt;section&gt;
        &lt;div class=&quot;demo&quot;&gt;Item two&lt;/div&gt;
    &lt;/section&gt;
&lt;/div&gt;
</code></pre>
</li>
<li><p><code>wrapAll</code></p>
<p> returned content with one new element.</p>
<p>Example:</p>
<pre><code class="Html">&lt;!-- starting HTML --&gt;
&lt;div id=&quot;target&quot;&gt;
    &lt;div class=&quot;demo&quot;&gt;Item one&lt;/div&gt;
    &lt;div class=&quot;demo&quot;&gt;Item two&lt;/div&gt;
&lt;/div&gt;

//JS
$(&#39;.demo&#39;).wrapAll(&#39;&lt;section&gt;&lt;/section&gt;&#39;);

&lt;!-- ending HTML --&gt;
&lt;div id=&quot;target&quot;&gt;
    &lt;section&gt;
        &lt;div class=&quot;demo&quot;&gt;Item one&lt;/div&gt;
        &lt;div class=&quot;demo&quot;&gt;Item two&lt;/div&gt;
    &lt;/section&gt;
&lt;/div&gt;
</code></pre>
</li>
<li><p><code>wrapInner</code></p>
<p>Operates on the children of the target, rather than on the target itself.</p>
<p>Example:</p>
<pre><code class="Html">&lt;!-- starting HTML --&gt;
&lt;div id=&quot;target&quot;&gt;
    &lt;div class=&quot;demo&quot;&gt;Item one&lt;/div&gt;
    &lt;div class=&quot;demo&quot;&gt;Item two&lt;/div&gt;
&lt;/div&gt;

//JS
$(&#39;#target&#39;).wrapInner(&#39;&lt;section&gt;&lt;/section&gt;&#39;);

&lt;!-- ending HTML --&gt;
&lt;div id=&quot;target&quot;&gt;
    &lt;section&gt;
        &lt;div&gt;Item one&lt;/div&gt;
        &lt;div&gt;Item two&lt;/div&gt;
    &lt;/section&gt;
&lt;/div&gt;
</code></pre>
</li>
</ul>
</li>
<li><p><strong>Animations</strong></p>
<ul>
<li><p><code>hide</code>, <code>show</code>, <code>toggle</code></p>
<p><code>hide</code> causes something to disappear from the screen;</p>
<p><code>show</code> causes something to appear;</p>
<p><code>toggle</code>, on the other hand, determines the current status of the item in question and changes it.</p>
<p> jQuery controls visibility by using the <code>display</code> property in CSS.</p>
<p>Example:</p>
<pre><code class="Html">&lt;!-- HTML --&gt;
&lt;div id=&quot;target&quot;&gt;Show or hide&lt;/div&gt;
&lt;button type=&quot;button&quot; id=&quot;btn-toggle&quot;&gt;Toggle&lt;/button&gt;

//JS
$(function() &#123;
    $(&#39;#btn-toggle&#39;).click(function() &#123;
        // animation will take one second
        $(&#39;#target&#39;).toggle(1000);
    &#125;);
&#125;);
</code></pre>
<p>More:</p>
<pre><code class="Html">&lt;!-- HTML --&gt;
&lt;style&gt;
    .hidden &#123; display: none; &#125;
&lt;/style&gt;
&lt;form&gt;
    &lt;div&gt;
        &lt;label&gt;Name:&lt;/label&gt;
        &lt;input type=&quot;text&quot; /&gt;
    &lt;/div&gt;
    &lt;button type=&quot;button&quot; id=&quot;show-additional-information&quot;&gt;
        Show additional information
    &lt;/button&gt;
    &lt;div id=&quot;additional-information&quot; class=&quot;hidden&quot;&gt;
        &lt;label&gt;Additional information:&lt;/label&gt;
        &lt;input type=&quot;text&quot; /&gt;
    &lt;/div&gt;
&lt;/form&gt;

//JS
$(function() &#123;
    $(&#39;#show-additional-information&#39;).click(function() &#123;
        $(&#39;#additional-information&#39;).show(750);
    &#125;);
&#125;);
</code></pre>
</li>
<li><p>fading and sliding</p>
<ul>
<li><p><code>fadeIn</code>, <code>fadeOut</code>, <code>fadeToggle</code></p>
<p>The fading functions perform their work by both modifying the CSS <code>display</code> property, and animates the item by modifying its <code>opacity</code>.</p>
<p><code>fadeIn</code> and <code>fadeOut</code> will display and hide an item respectively.</p>
<p><code>fadeToggle</code> will reverse the current state of the item.</p>
</li>
<li><p> <code>slideDown</code>, <code>slideUp</code> , <code>slideToggle</code></p>
</li>
</ul>
<p>  The sliding functions perform their work by both modifying the CSS <code>display</code> property, and animates the item by modifying its <code>position</code>.</p>
</li>
</ul>
</li>
<li><p><strong>Removing, replacing and cloning</strong></p>
<ul>
<li><p>Removing and replacing items</p>
<ul>
<li><p><code>remove</code> and <code>empty</code></p>
<p>Both completely delete items from the DOM.</p>
<p> <code>remove</code> deletes the item you target.</p>
<p> <code>empty</code> deletes the contents of the item you target.</p>
<p>Example:</p>
<pre><code class="Html">&lt;div id=&quot;target&quot;&gt;
    &lt;div&gt;Some cool content&lt;/div&gt;
    &lt;div&gt;Some more cool content&lt;/div&gt;
&lt;/div&gt;

//JS
//the resulting HTML would be, well, nothing. The entire contents of the sample are removed
$(function() &#123;
    $(&#39;#target&#39;).remove();
&#125;

//deletes the contents of the target, so the resulting HTML would be as &lt;div id=&quot;target&quot;&gt;&lt;/div&gt;

$(function() &#123;
    $(&#39;#target&#39;).empty();
&#125;
</code></pre>
</li>
<li><p><code>replaceAll</code> and <code>replaceWith</code></p>
<p> replace existing content with new content.</p>
<p>Example:</p>
<pre><code class="Html">&lt;!-- starting HTML --&gt;
&lt;div id=&quot;target&quot;&gt;
    &lt;div&gt;Some cool content&lt;/div&gt;
    &lt;div&gt;Some more cool content&lt;/div&gt;
&lt;/div&gt;

//JS. execute either of them
// replaceWith replaces the content on the left with the new content in the parameter
$(&#39;#target&#39;).replaceWith(&#39;&lt;div&gt;NEW content&lt;/div&gt;&#39;);

// replaceAll replaces the target in the parameter with the content on the left
$(&#39;&lt;div&gt;NEW content&lt;/div&gt;&#39;).replaceAll(&#39;#target&#39;);

&lt;!-- ending HTML --&gt;
&lt;div&gt;NEW content&lt;/div&gt;
</code></pre>
</li>
</ul>
</li>
<li><p>Cloning</p>
<ul>
<li><code>clone</code></li>
</ul>
<p><code>clone</code> allows you to make a copy of jQuery objects.</p>
<p>Let’s say you were building a page to allow an administrator to create email addresses and passwords. You’d like to ensure the administrator can create as many accounts as they would like on one page, and be able to send up all of the information to the server <strong>in one round trip</strong>, rather than using Ajax calls or submitting the form for each account.</p>
<p>code:</p>
<pre><code class="Html">&lt;!-- HTML --&gt;
&lt;button type=&quot;button&quot; id=&quot;add-line&quot;&gt;Add new line&lt;/button&gt;
&lt;div id=&quot;container&quot;&gt;
    &lt;div class=&quot;user-entry&quot;&gt;
        &lt;label&gt;Email:&lt;/label&gt;
        &lt;input type=&quot;email&quot; /&gt;
        &lt;label&gt;Password:&lt;/label&gt;
        &lt;input type=&quot;password&quot; /&gt;
    &lt;/div&gt;
&lt;/div&gt;

//JS
 $(function() &#123;
     $userForm = $(&#39;.user-entry&#39;).clone;
    $(&#39;#add-line&#39;).click(function() &#123;
        $(&#39;#container&#39;).append($userForm.clone());
    &#125;);
 &#125;);
</code></pre>
<p><strong>Attention:</strong></p>
<p>When you’re working with an object, JavaScript passes a reference to the object, not a copy of the object. This would mean that we’ve added in a pointer to the clone we created earlier, <strong>not</strong> a brand new copy. The end result is that if we did not call <code>clone()</code> a second time, we’d be trying to add <strong>the exact same object</strong> into the container again, <strong>not</strong> a brand new copy. By calling <code>clone()</code> again, we pass in a copy of our user form, rather than a pointer to the one we already used.</p>
<ul>
<li><p>Cloning and animations</p>
<p>Combinnig cloning and animations.</p>
<p>Example:</p>
<pre><code class="Html">&lt;!-- HTML --&gt;
&lt;button type=&quot;button&quot; id=&quot;add-line&quot;&gt;Add new line&lt;/button&gt;
&lt;div id=&quot;container&quot;&gt;
  &lt;div class=&quot;user-entry&quot;&gt;
    &lt;label&gt;Email:&lt;/label&gt;
    &lt;input type=&quot;email&quot; /&gt;
    &lt;label&gt;Password:&lt;/label&gt;
    &lt;input type=&quot;password&quot; /&gt;
  &lt;/div&gt;
&lt;/div&gt;

//JS
$(function() &#123;
    $userForm = $(&#39;.user-entry&#39;).clone();
    $userForm.css(&#39;display&#39;, &#39;none&#39;);
    $(&#39;#add-line&#39;).click(function() &#123;
        var newUserForm = $userForm.clone();
        $(&#39;#container&#39;).append($newUserForm);
        newUserForm.show(1000);
    &#125;);
&#125;);
</code></pre>
<p>This is  Module2 all about. More <a href="https://courses.edx.org/courses/course-v1:Microsoft+DEV208x+4T2017/course/">details</a>.</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>JQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>Introduction to jQuery_4</title>
    <url>/posts/introduction-to-jquery-module3-1/</url>
    <content><![CDATA[<p>Module 3.1.</p>
<span id="more"></span> 

<h4 id="Before-Start"><a href="#Before-Start" class="headerlink" title="Before Start"></a>Before Start</h4><p>The following contents are the notes I took when learning  jQuery on Edx.</p>
<p>Mainly for  front-End Web developers, check <a href="https://courses.edx.org/courses/course-v1:Microsoft+DEV208x+4T2017/course/">here</a> to get more details.</p>
<h4 id="CONTENTS"><a href="#CONTENTS" class="headerlink" title="CONTENTS"></a>CONTENTS</h4><p>Three parts:</p>
<ul>
<li><a href="https://lupeipei.github.io/2017/10/05/introduction-to-jQuery-module1/">Adding jQuery to web pages</a></li>
<li><a href="https://lupeipei.github.io/2017/10/06/introduction-to-jquery-module2-1/">Managing content, events and effects</a></li>
<li>Asynchronous operations and Ajax calls</li>
</ul>
<h4 id="Module3-Asynchronous-programming-and-Ajax"><a href="#Module3-Asynchronous-programming-and-Ajax" class="headerlink" title="Module3 : Asynchronous programming and Ajax"></a>Module3 : Asynchronous programming and Ajax</h4><p>Module3 includes five parts:</p>
<ul>
<li>Using promises</li>
<li>Web workers</li>
<li>Using deferred</li>
<li>JavaScript Object Notation</li>
<li>Calling the server</li>
</ul>
<p>Uh, When I first learned it , I felt it was a little difficult for me to get the point, and now, I still have the feeling.</p>
<p>Let’s get to know something about the first three parts.</p>
<p><strong>A promise</strong> is an object returned by functions in jQuery that take a long or variable amount of time. By using a promise, you can ensure your code executes whenever the operation completes, be notified of its success or failure, or potentially receive updates about an operation’s progress.</p>
<p><strong>A deferred object</strong> allows you to create your own long running operations, allowing developers to use the same patterns provided by the promise object, and be updated when your operation completes.</p>
<p> <strong>web worker</strong>, an HTML5 feature allowing web developers to simulate threads in a web browser.</p>
<ul>
<li><p>promises</p>
<ul>
<li><p>Long running operations</p>
<p>Any jQuery function that runs over a long period of time, such as an animation, or communicates with a remote server, such as Ajax calls, returns a <strong>promise</strong>.</p>
</li>
<li><p>promises events</p>
<ul>
<li><p><code>done</code></p>
<p>raised when the operation completes successfully.</p>
<p>accepts one or more event handler functions.</p>
<p>Example:</p>
<pre><code class="javascript">// code to obtain promise object
promise.done(function(data) &#123;
    // data will contain the data returned by the operation
&#125;);
</code></pre>
</li>
<li><p> <code>fail</code></p>
</li>
</ul>
<p>  raised when the operation has completed with an error.</p>
<p>  accepts one or more event handler functions.</p>
<p>  Example:</p>
<pre><code class="javascript">// code to obtain promise object
promise.fail(function(data) &#123;
    // data will contain the data returned by the operation
&#125;);
</code></pre>
<ul>
<li> <code>progress</code></li>
</ul>
<p>  raised when the operation raises an alert about its current state.</p>
<p>  Not all operations raise <code>progress</code> events.</p>
<p>  accepts one or more event handler functions.</p>
<p>  Example:</p>
<pre><code class="javascript">// code to obtain promise object
promise.progress(function(data) &#123;
    // data will contain the data returned by the operation
&#125;);
</code></pre>
<ul>
<li><p>Chaining</p>
<p>add <code>done</code> and <code>fail</code> (and potentially <code>progress</code>) event handlers by chaining the method calls as demonstrated below :</p>
<pre><code class="javascript">// code to obtain promise object
promise.done(function(data) &#123;
    // success
&#125;).fail(function(data) &#123;
    // failure
&#125;);
</code></pre>
</li>
<li><p><code>then</code></p>
<p>a single function allowing you to register <code>done</code>, <code>fail</code>, and <code>progress</code> event handlers in one call.</p>
<p>The sample below is identical to the chaining demonstration above.</p>
<pre><code class="javascript">// code to obtain promise object
promise.then(function(data) &#123;
    // success
&#125;, function(data) &#123;
    // failure
&#125;);
</code></pre>
</li>
</ul>
</li>
</ul>
</li>
<li><p>Web workers</p>
<ul>
<li><p>Creating a web worker</p>
<p>made up of two components:</p>
<blockquote>
<p> the parent or calling script, and the worker or executing script.</p>
</blockquote>
<p><strong>does not</strong> have direct access to the calling environment or the UI.</p>
<p>use a messaging system to pass information to and from the worker.</p>
<ul>
<li><p>Creating the worker script</p>
<p>To create a web worker, you create a separate JavaScript file.</p>
<p>The code in the file <strong>will execute immediately</strong> when the worker object is created from the calling script.</p>
<p><code>self</code> : represents the worker. <code>self</code> , has one function named  <code>postMessage</code> and one event <code>message</code>.</p>
<p><code>postMessage</code>  is used to send data to the calling environment.</p>
<p><code>message</code> is raised when the calling script has sent a message to the worker.</p>
<pre><code class="javascript">// send a signal back to the calling script
self.postMessage(&#39;hello from the worker!&#39;);

// Receive a message from the calling environment
self.addEventListener(&#39;message&#39;, function(e) &#123;
    // the data property will contain the data passed from the calling script
&#125;);
</code></pre>
</li>
</ul>
</li>
<li><p>calling a web worker</p>
<ul>
<li><p>calling a web worker</p>
<p>to check to see if the brower supports web workers</p>
<pre><code class="javascript">// Test if the browser supports web workers
if(Worker == null) &#123;
    alert(&#39;You need to upgrade your browser!&#39;);
&#125; else &#123;
    // do your work here
&#125;
</code></pre>
</li>
<li><p>creating an instance of the Worker object</p>
<pre><code class="javascript">var worker = new Worker(&#39;script-location.js&#39;);

// Register event handler
worker.addEventListener(&#39;message&#39;, function(e) &#123;
    $(&#39;#output&#39;).append(&#39;&lt;li&gt;&#39; + e.data + &#39;&lt;/li&gt;&#39;);
&#125;);

worker.postMessage(&#39;Started!&#39;);
</code></pre>
<p>​</p>
</li>
</ul>
</li>
<li><p>Designing your web workers</p>
<ul>
<li><p>creating a web worker that accepts status messages</p>
<p>Code:</p>
<pre><code class="javascript">// worker.js

self.addEventListener(&#39;message&#39;, function(e) &#123;
    if(e.data === &#39;START&#39;) &#123;
        // Start message received.
        // Begin work
        startWork();
    &#125; else if (e.data === &#39;STOP&#39;) &#123;
        // Stop message received.
        // Perform cleanup and terminate
        stopWork();
    &#125; else &#123;
        // A different message has been received
        // This is data that needs to be acted upon
        processData(e.data);
    &#125;
&#125;);

function startWork() &#123;
    // code to start performing work here
    // send a message to the calling page
    // worker has started
    self.postMessage(&#39;STARTED&#39;);
&#125;

function stopWork() &#123;
    // cleanupp code here
    // stop the worker
    self.postMessage(&#39;STOPPED&#39;);
    self.close();
&#125;

function processData(data) &#123;
    // perform the work on the data
    self.postMessage(&#39;Processed &#39; + data);
&#125;
</code></pre>
</li>
<li><p>calling a web worker that accepts messages</p>
<p>If you were using the worker that’s been designed above, you would use it by following a couple of basic steps.</p>
<ol>
<li>Create an instance of <code>Worker</code>, passing in the script.</li>
<li>Add the event handler for the <code>message</code> event. Ensure the event handler can respond to the status messages and normal data.</li>
<li>When you’re ready to start the worker’s work, call <code>postMessage(&#39;START&#39;);</code></li>
<li>When you’re done, send the stop message by calling <code>postMessage(&#39;STOP&#39;);</code></li>
</ol>
<p>Code:</p>
<pre><code class="javascript">// inside of HTML file

var worker = new Worker(&#39;worker.js&#39;);

worker.addEventListener(&#39;message&#39;, function(e) &#123;
    if(e.data === &#39;STARTED&#39;) &#123;
        // worker has been started
        // sample: update the screen to display worker started
        $(&#39;#output&#39;).append(&#39;&lt;div&gt;Worker started&lt;/div&gt;&#39;);
    &#125; else if(e.data === &#39;STOPPED&#39;) &#123;
        // worker has been stopped
        // cleanup work (if needed)
        // sample: update the screen to display worker stopped
        $(&#39;#output&#39;).append(&#39;&lt;div&gt;Worker stopped&lt;/div&gt;&#39;);
    &#125; else &#123;
        // Normal message. Act upon data as needed
        // Sample: display data on screen
        $(&#39;#output&#39;).append(&#39;&lt;div&gt;&#39; + e.data + &#39;&lt;/div&gt;&#39;);
    &#125;
&#125;);

// When you&#39;re ready, send the start message
worker.postMessage(&#39;START&#39;);

// Send data as needed
worker.postMessage(&#39;sample data&#39;);

// Stop worker when you&#39;re done
worker.postMessage(&#39;STOP&#39;);
</code></pre>
</li>
</ul>
</li>
</ul>
</li>
<li><p>Using deferred</p>
<ul>
<li><p>Deferred</p>
<p><code>Deferred</code> and <code>promise</code> seem very similar.The difference between the two is who uses which.</p>
<p><code>Deferred</code> is used to create, and manage, a <code>promise</code> object.</p>
<p>A <code>promise</code> object is returned by a long running operation, and only allows you to register event handlers.</p>
<p><code>Deferred</code> is the <strong>server</strong> side.  When <strong>create</strong> a long running function that will be called by other developers, you’ll use <code>Deferred</code>to return a <code>promise</code>.</p>
<p><code>promise</code> is the <strong>client</strong> side. When you <strong>call</strong> a long running function, it will return a <code>promise</code>.</p>
</li>
<li><p>When to use Deferred</p>
<p>when you are creating a function that will <strong>take an unusual amount of time</strong>, say one that will be working with graphics, you will want to use <code>Deffered</code> to return a <code>promise</code> to the caller.</p>
</li>
<li><p>Breaking down using Deferred</p>
<p>The basic steps are as follows.</p>
<ol>
<li>Create an instance of deferred: var deferred = $.Deferred();</li>
<li>Start your asynchronous operation, typically using a worker</li>
<li>Add the appropriate code to detect success and send the success signal: deferred.resolve()</li>
<li>Add the appropriate code to detect failure and send the failure signal: deferred.reject()</li>
<li>Return the promise: return deferred.promise();</li>
</ol>
<pre><code class="javascript">function beginProcessing() &#123;
    // Create deferred object &amp; make sure it&#39;s going to be in scope
    var deferred = new $.Deferred();

    // Create our worker (just like before)
    var worker = new Worker(&#39;./Scripts/deferred.js&#39;);

    // Register the message event handler
    worker.addEventListener(&#39;message&#39;, function (e) &#123;
        // simple messaging - if the worker is ready it&#39;ll send a message with READY as the text
        if (e.data === &#39;READY&#39;) &#123;
            // No UI code
            // Progress notification
            deferred.notify(&#39;Worker started&#39;);
        &#125; else if(e.data === &#39;COMPLETED&#39;) &#123;
            // processing is done
            // No UI code
            // Completed notification
            deferred.resolve(&#39;Worker completed&#39;);

            worker.terminate();
        &#125;
    &#125;);

    return deferred.promise();
&#125;
</code></pre>
</li>
</ul>
</li>
</ul>
<hr>
<p>  学这一章的时候，作为一个前端小白，我的内心响起一个声音：尼玛这都是什么鬼？</p>
<p>  说人话,附上我对这三个概念的理解：</p>
<p>  欢迎拍砖，皮厚不怕疼：P</p>
<p>  promise是一个需要运行很长时间的jQuery函数会返回的东东，告诉caller，函数的运行状态，caller可以根据状态来执行相应代码。</p>
<p>  Worker是用来在进程中插一脚的东东，通过message来传递状态，什么时候开始运行worker script，什么时候结束。</p>
<p>  Deferred呢？用来生成，管理promise。</p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>JQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>Introduction to jQuery_5</title>
    <url>/posts/introduction-to-jquery-module3-2/</url>
    <content><![CDATA[<p>Module 3.2.</p>
<span id="more"></span> 

<h4 id="Before-Start"><a href="#Before-Start" class="headerlink" title="Before Start"></a>Before Start</h4><p>The following contents are the notes I took when learning  jQuery on Edx.</p>
<p>Mainly for  front-End Web developers, check <a href="https://courses.edx.org/courses/course-v1:Microsoft+DEV208x+4T2017/course/">here</a> to get more details.</p>
<h4 id="CONTENTS"><a href="#CONTENTS" class="headerlink" title="CONTENTS"></a>CONTENTS</h4><p>Three parts:</p>
<ul>
<li><a href="https://lupeipei.github.io/2017/10/05/introduction-to-jQuery-module1/">Adding jQuery to web pages</a></li>
<li><a href="https://lupeipei.github.io/2017/10/06/introduction-to-jquery-module2-1/">Managing content, events and effects</a></li>
<li>Asynchronous operations and Ajax calls</li>
</ul>
<h4 id="Module3-Asynchronous-programming-and-Ajax"><a href="#Module3-Asynchronous-programming-and-Ajax" class="headerlink" title="Module3 : Asynchronous programming and Ajax"></a>Module3 : Asynchronous programming and Ajax</h4><p>Module3 includes five parts:</p>
<ul>
<li>Using promises</li>
<li>Web workers</li>
<li>Using deferred</li>
<li>JavaScript Object Notation</li>
<li>Calling the server</li>
</ul>
<p>Let’s get to know something about JSON and Ajax.</p>
<ul>
<li><p>JavaScript Object Notation</p>
<ul>
<li><p>JSON syntax</p>
<p>A JSON object uses a notation that’s similar to that of a JavaScript object.</p>
<p>Example:</p>
<pre><code class="javascript">//create a JavaScript object
var person = &#123;
    firstName: &#39;Christopher&#39;,
    lastName: &#39;Harrison&#39;
&#125;

//create a JSON object
var person = &#123;
    &#39;firstName&#39;: &#39;Christopher&#39;,
    &#39;lastName&#39;: &#39;Harrison&#39;
&#125;
</code></pre>
<p>Create a more complex object:</p>
<pre><code class="javascript">var person = &#123;
    &#39;firstName&#39;: &#39;Christopher&#39;,
    &#39;lastName&#39;: &#39;Harrison&#39;,
    &#39;email&#39;: &#123;
        &#39;address&#39;: &#39;charrison@adventure-works.com&#39;,
        &#39;type&#39;: &#39;business&#39;
    &#125;    
&#125;
</code></pre>
<p>Create a object with array:</p>
<pre><code class="javascript">var person = &#123;
    &#39;firstName&#39;: &#39;Christopher&#39;,
    &#39;lastName&#39;: &#39;Harrison&#39;,
    &#39;emailAddresses&#39;: [
        &#123;
            &#39;address&#39;: &#39;charrison@adventure-works.com&#39;,
            &#39;type&#39;: &#39;business&#39;
        &#125;,
        &#123;
            &#39;address&#39;: &#39;charrison@fineartschool.net&#39;,
            &#39;type&#39;: &#39;home&#39;
        &#125;
    ]
&#125;
</code></pre>
</li>
<li><p>Serializing objects</p>
<p>JavaScript provides a native utility for <strong>converting objects to JSON</strong> (serializing), and <strong>converting JSON strings to objects</strong> (deserializing).</p>
<ul>
<li><p>Serializing an object:<code> JSON.stringify</code></p>
<pre><code class="javascript">// Create an instance of Object, a basic JavaScript object
var person = new Object();

// add properties
person.firstName = &#39;Christopher&#39;;
person.lastName = &#39;Harrison&#39;;

// serialize
var jsonString = JSON.stringify(person);
</code></pre>
</li>
<li><p>Deserializing JSON: <code>JSON.parse</code></p>
<pre><code class="javascript">// Deserialize a JSON string
var newPerson = JSON.parse(jsonString);

// access properties as normal
$(&#39;#first-name-display&#39;).text(newPerson.firstName);
$(&#39;#last-name-display&#39;).text(newPerson.lastName);
</code></pre>
</li>
</ul>
</li>
</ul>
</li>
<li><p>Calling the server</p>
<ul>
<li><p>Introducing Ajax</p>
<p>Typically, when we make a call to the server, we need to refresh the entire page.</p>
<p>as developers, we’d like to be able to incorporate server-side resources into our pages, allowing us to <strong>update individual portions of the page with new data, rather than updating the entire page</strong>.</p>
<ul>
<li><p>Asynchronous JavaScript and XML (Ajax)</p>
<p>Ajax is a set of technologies that act together to make it easier for developers to make calls to server resources from JavaScript.</p>
</li>
<li><p>Basic data retrieval</p>
<p><code>get</code> : The most basic Ajax operation we can perform using jQuery.</p>
<p> <code>get</code> contacts the <strong>URL</strong> we provide, and passes the string the server returns into the parameter we’ll use for our event handler.</p>
<p>Example:</p>
<pre><code class="javascript">$.get(
    &#39;some-url&#39;, // The URL to call
    function(data) &#123; // Success event handler
        // The data parameter contains the string
        $(&#39;#output&#39;).text(data);
    &#125;
);
</code></pre>
</li>
<li><p>jQuery Ajax and promises</p>
<p>All jQuery Ajax calls return a jQuery <strong>promise</strong>.</p>
<p> So, you can use <code>done</code> for your success event handler, and <code>fail</code> to catch any errors. The two code samples perform the same operations.</p>
<p>Example:</p>
<pre><code class="javascript">// Option one (pass the success function as a parameter)
$.get(&#39;some-url&#39;, function(data) &#123; $(&#39;#output&#39;).text(data); &#125;);

// Option two (use the done function of the promise)
$.get(&#39;some-url&#39;).done(function(data) &#123; $(&#39;#output&#39;).text(data); &#125;);
</code></pre>
</li>
</ul>
</li>
<li><p>Retrieving JSON objects</p>
<ul>
<li><p><code>getJSON</code></p>
<p>To retrieve a JSON object, you can use <code>getJSON</code>.</p>
<p><code>getJSON</code> accepts several parameters, but the most common two that you’ll provide are the URL you need to call, and an event handler for success.</p>
<p>Because getJSON is expecting JSON data, it automatically deserializes the object, meaning you do not need to call JSON.parse.</p>
<p>Example:</p>
<pre><code class="javascript">$.getJSON(&#39;/api/Demo&#39;, function (person) &#123;
    $(&#39;#first-name&#39;).val(person.firstName);
    $(&#39;#last-name&#39;).val(person.lastName);
&#125;);
</code></pre>
</li>
</ul>
</li>
<li><p>Making server calls</p>
<p>If you’re new to making server calls through JavaScript or other technologies, you might have a few questions about <strong>how you’re supposed to know where the data is, what URLs you should use</strong>, etc.</p>
<ul>
<li><p>Finding the right URL</p>
<p>Most commonly you’ll be calling your own server and accessing your own organization’s data.</p>
<p>Then the answer becomes even easier:</p>
<p>talk to the developer who created the server side code that you need to call. They can provide all of the information you need.</p>
</li>
<li><p>Verbs</p>
<p>HTTP offers several “verbs”, with the two most common being GET and POST.</p>
<p>GET and POST in HTTP terms are about how to <strong>send data</strong> to the server, not a determination of the server sending you data.</p>
<p>GET limits us to <strong>sending data in the URL only</strong>.</p>
<p>POST on the other hand allows us to <strong>send data</strong> <strong>both in the URL, but also in what’s known as the header</strong>.The header is information that’s sent behind the scenes from the client to the server, and can be used to send almost any type of data, including binary data.</p>
</li>
<li><p>HTTP and REST APIs</p>
<p> HTTP provides several verbs, including GET, POST, PUT and DELETE.</p>
<p>GET will retrieve objects,</p>
<p>POST will create a new object,</p>
<p>PUT will update an existing object,</p>
<p>DELETE will delete an object.</p>
<p>Building upon those common operations, the W3C has established a specification called <a href="https://en.wikipedia.org/wiki/Representational_state_transfer">REST</a>. REST provides for various standards to provide even more consistency when making server calls.</p>
</li>
</ul>
</li>
<li><p>Posting data</p>
<p>If the service you’re using follows standard REST practices, you’ll notice that you can create a new object by calling POST.</p>
<p>Or, if you’re trying to upload a binary object, such as an image, you’re forced to use POST, as GET won’t allow that type of data to be uploaded.</p>
<ul>
<li><p><code>post</code></p>
<p>Like getJSON, it also passes the JSON object returned by the server into the parameter for the event handler. And, just like all of the Ajax calls we’ve seen, <code>post</code> also returns a promise.</p>
<p>Example:</p>
<pre><code class="javascript">// get the data we need to send
var person = &#123; firstName: &#39;Christopher&#39;, lastName: &#39;Harrison&#39; &#125;;

// Call POST

$.post(&#39;URL&#39;, // Pass in the URL you need to access
    person, // Pass in the data to send via POST
    function(data) &#123;
        // success event handler
        // parameter contains value returned by server
    &#125;
);
</code></pre>
</li>
</ul>
</li>
<li><p>Ajax events</p>
<ul>
<li><p>Start events</p>
<p>The two starting events are <code>ajaxStart</code> and <code>ajaxSend</code>.</p>
<p><code>ajaxStart</code> is raised when the <strong>first</strong> Ajax call is being made.</p>
<p><code>ajaxSend</code> is raised <strong>each time</strong> an Ajax call is made.</p>
</li>
<li><p>Completion events</p>
<p>jQuery Ajax offers two main events when each Ajax call is finished, <code>ajaxSuccess</code>, which is raised when a call succeeds,</p>
<p><code>ajaxError</code>, which is raised when a call fails.</p>
<p><code>ajaxComplete</code> is raised when <strong>each</strong> Ajax call completes, regardless of success or failure.</p>
<p> <code>ajaxStop</code> is raised when <strong>all</strong> calls are completed.</p>
<p>Example:</p>
<pre><code class="javascript">$(document).ajaxSend(function () &#123;
    // raised when a call starts
    $(&#39;#status&#39;).append(&#39;&lt;div&gt;Call started&lt;/div&gt;&#39;);
&#125;).ajaxComplete(function () &#123;
    // raised when a call completes
    $(&#39;#status&#39;).append(&#39;&lt;div&gt;Call completed&lt;/div&gt;&#39;);
&#125;);
</code></pre>
</li>
</ul>
</li>
<li><p>Dynamically loading data</p>
<ul>
<li><p>Loading HTML</p>
<p><code>load</code> will call the URL provided, obtain the HTML, and place it in the targeted item.</p>
<pre><code class="javascript">$(&#39;#target&#39;).load(&#39;some-url.html&#39;);
</code></pre>
</li>
<li><p>Loading and executing JavaScript</p>
<p><code>getScript</code>  downloads <strong>and executes</strong> the script when it’s called.</p>
<pre><code class="javascript">$.getScript(&#39;some-url.js&#39;);
</code></pre>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>This is  Module3 all about. More <a href="https://courses.edx.org/courses/course-v1:Microsoft+DEV208x+4T2017/course/">details</a>.</p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>JQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>内网穿透神器Ngrok</title>
    <url>/posts/introduction-to-ngrok/</url>
    <content><![CDATA[<p>简直就是个神器！</p>
<span id="more"></span> 

<p>设想一下，你在本地开发的rails项目，想要临时整个demo给别人看，但是你没买域名，没买服务器，怎么破？</p>
<p>用Ngrok ！</p>
<h4 id="Ngrok是什么？"><a href="#Ngrok是什么？" class="headerlink" title="Ngrok是什么？"></a>Ngrok是什么？</h4><p>官网定义：</p>
<blockquote>
<p>ngrok is a reverse proxy that creates a secure tunnel from a public endpoint to a locally running web service. ngrok captures and analyzes all traffic over the tunnel for later inspection and replay.</p>
</blockquote>
<p>一个反向代理，用于创建从公共端点到本地运行的Web服务之间的安全隧道，还可以捕获和分析隧道上的所有流量，以供后期的检查和回放。</p>
<p>一图胜千言：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fq0r49j6wwj30m80dugpv.jpg"></p>
<h4 id="Download"><a href="#Download" class="headerlink" title="Download"></a>Download</h4><p>直接去官网下载：<a href="https://ngrok.com/download">https://ngrok.com/download</a></p>
<p>Windows下直接双击压缩包安装，Linux和Mac OSX 使用命令：</p>
<pre><code>unzip /path/to/ngrok.zip
</code></pre>
<p>使用<code>./ngrok help</code> 可以查看ngrok的所有命令。</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fq0t1023iej30pe0ghju4.jpg"></p>
<p>官网有非常详细的使用说明，直接查阅即可。</p>
<h4 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h4><p>非常简单，告诉ngrok，哪个端口是用来访问web应用的即可。</p>
<p>以一个简单的rails 项目为例。</p>
<ul>
<li><p>访问你本地的rails项目，浏览器打开：<a href="http://localhost:3000/">http://localhost:3000/</a></p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fq0pl7m3egj30zd0bj758.jpg"></p>
</li>
</ul>
<ul>
<li><p>使用Ngrok，打开http tunnel on port 3000, 终端输入：</p>
<pre><code>./ngrok http 3000
</code></pre>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fq0pnjjd44j30p705y3zi.jpg"></p>
<p>此时，访问<a href="http://b2aac9bf.ngrok.io或https//b2aac9bf.ngrok.io%EF%BC%9A">http://b2aac9bf.ngrok.io或https://b2aac9bf.ngrok.io：</a></p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fq0pp2z43aj30zc0c8gmn.jpg"></p>
<p>从内网到公网的完美过渡！别人也可以访问了。</p>
<p>第一次看到这种操作的我，表示Ngrok真的是太酷了！！</p>
</li>
</ul>
<h4 id="install-your-AUTHTOKEN"><a href="#install-your-AUTHTOKEN" class="headerlink" title="install your AUTHTOKEN"></a>install your AUTHTOKEN</h4><p>没有登录的情况下，session的有效期默认只有8小时，注册下，登录后，在你的dashboard(<a href="https://dashboard.ngrok.com)中可以看到authtoken/">https://dashboard.ngrok.com)中可以看到AUTHTOKEN</a>.</p>
<p>终端运行：</p>
<pre><code>./ngrok authtoken YOUR_AUTHTOKEN
</code></pre>
<p>成功后会出现：Authtoken saved to configuration file的信息。</p>
<h4 id="Open-inspector"><a href="#Open-inspector" class="headerlink" title="Open inspector"></a>Open inspector</h4><p>如果想要查看request details，可以在浏览器打开<a href="http://localhost:4040/">http://localhost:4040/</a> 👇</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fq0q3j8tx6j30z50icdjb.jpg"></p>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>Ngrok允许 custom subdomain， custom domains等，but not for free account : (</p>
<p>Ngrok的另一个常用的情景是微信本地调试，以后用到再写写这块 :  P</p>
<p>Natapp也是内网穿透的利器，它有免费使用的隧道提供，但是需要实名认证，戳<a href="https://natapp.cn/">官网</a>了解更多。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://ngrok.com/docs">ngrok docs</a></p>
<p><a href="https://github.com/inconshreveable/ngrok">ngrok</a></p>
<p><a href="http://www.54php.cn/default/211.html">Ngrok NatApp 微信本地化调试利器</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Ngrok</tag>
      </tags>
  </entry>
  <entry>
    <title>写在第100篇</title>
    <url>/posts/it-is-100-now/</url>
    <content><![CDATA[<p>不知不觉100篇了，又小小的迈进了一步。</p>
<span id="more"></span> 

<p>这样的节点，应该闲扯淡。</p>
<p>大脑切换至随机模式。</p>
<p>遇见一群牛逼的小伙伴是一件很开心的事，让你知道自己还很烂，还有很多不足，然后不敢瞎得瑟。</p>
<p>4月初的时候，在rubygem上publish了人生的第一个gem，真的是开心到飞起。回想去年的4月初，我在这里push了第一篇文章，时光如梭。</p>
<p>有时候会想，也许是因为人，而不是语言本身让程序员感到快乐，有人，有交流，有帮派，然后，有故事。</p>
<p>那天翻到17年rubyChina上有关函数式编程functional programming的分享，当时还很newbie的我，一脸懵逼，对着现场那些大牛的PPT，咔咔咔，拍了一堆，现在竟然能看懂那几页proc的代码，这种感觉真好。</p>
<p>喜欢上一门小众语言，是一件高风险的事情，但自得其乐，也是件开心事儿。</p>
<p>感谢生命中那些鼓励过我的人，鼓励真的是个稀缺品。</p>
<p>努力成为一个值得他人鼓励，同时也懂得给予他人鼓励的人。</p>
<p>没有转行前，对于coding，那感觉就是“庐山烟雨浙江潮，未到千般恨不消”，如今自己成了码农，是不是应该会觉得“到得还来别无事，庐山烟雨浙江潮”呢？呃，好像并没有，这庐山烟雨不错，在山下搭个棚定居吧。</p>
<p>克氏曾说过一个例子，你看到一朵花，你觉得很美，你只是单纯觉得很美，并没有想要拥有它，那么你是愉悦的，一旦想要拥有，并开始有了痛苦。他的主张是无欲吗？不是，是放慢速度，从看见事物，到映射内心，反观内心对于事物的反应，是单纯的喜欢，不带索取，还是想要一味占有，看清自己对于事物的态度，看清了也就知道了，孔子的“随心所欲不逾矩”，真的是相当有境界了。</p>
<p>Untouchable。</p>
<p>有段时间迷上了《we bare bears》，独爱ice bear，呆萌而全能的boy。</p>
<p>戒了可乐，换上茶，偶尔想念二氧化碳。</p>
<p>便利店的寿司比我做的好吃多了。</p>
<p>味全的谷物牛奶依然好喝。</p>
<p>下雨的时候，空气很赞，天晴的时候，阳光很赞，心上没有烦心事，一切都是美好的。</p>
<p>躺在树下吹吹风。</p>
<p>上午从驾校回来修bug，不知过了多久，突然觉得周围暗了下来，抬头，不觉竟已天黑，原来已是傍晚时分，然后发觉肚饿，换鞋，出门觅食，填饱回来继续coding，这一天过得很快，也很特别，那是2017.09.29。</p>
<p>想到那句很美的话：There is a crack in everything, that’s how the light gets in。</p>
<p>学着接受自己的笨拙。</p>
<p>愿谦卑，敬畏，勇敢。</p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>Life</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编中的转移指令</title>
    <url>/posts/jump-commands-in-assembly-language/</url>
    <content><![CDATA[<p>记录下jmp, jcxz, loop, ret, retf, call等转移指令的概念和使用。</p>
<span id="more"></span>

<h4 id="jmp-指令"><a href="#jmp-指令" class="headerlink" title="jmp 指令"></a>jmp 指令</h4><p>概念：</p>
<p>无条件转移指令，可以只修改IP，或者同时修改CS 和 IP。</p>
<p>指令格式：</p>
<p>分为三种：</p>
<ul>
<li><p>jmp 标号</p>
</li>
<li><p>jmp 16位寄存器/reg</p>
</li>
<li><p>jmp 内存单元地址</p>
</li>
</ul>
<p>其中， jmp 标号 又细分为：</p>
<ul>
<li><p>jmp short 标号</p>
<blockquote>
<p>段内短转移，修改IP</p>
<p>8位位移，范围为-128～127。</p>
<p>如果jmp 后的那条指令的IP地址与标号处的IP地址相距超过127个字节，会出现越栈。</p>
</blockquote>
</li>
<li><p>jmp near ptr 标号</p>
<blockquote>
<p>段内近转移，修改IP， 与jmp short 标号 非常相近。</p>
<p>16位位移，范围为-32768～32767。</p>
</blockquote>
</li>
<li><p>jmp far ptr 标号</p>
<blockquote>
<p>段间转移，远转移。</p>
<p>其中，（CS）= 标号所在段的段地址，（IP）= 标号在段中的偏移地址</p>
<p>在debug 模式下使用u命令可以比较清晰的看到CS和IP的值。</p>
</blockquote>
</li>
</ul>
<p>jmp 内存单元地址 也细分为：</p>
<ul>
<li><p>jmp word ptr 内存单元地址</p>
<blockquote>
<p>段内转移。</p>
<p>（IP）= （内存单元地址）</p>
</blockquote>
</li>
<li><p>jmp dword ptr 内存单元地址</p>
<blockquote>
<p>段间转移。</p>
<p>（CS）= （内存单元地址 + 2），（IP）= （内存单元地址）</p>
</blockquote>
</li>
</ul>
<h4 id="jcxz-指令"><a href="#jcxz-指令" class="headerlink" title="jcxz 指令"></a>jcxz 指令</h4><p>概念：</p>
<p>有条件转移指令，<strong>所有的有条件转移指令都是短转移</strong>。</p>
<p>指令格式：</p>
<pre><code>jcxz 标号
</code></pre>
<p>相当于：</p>
<pre><code>if ((cx)==0) jmp short 标号;
</code></pre>
<p>另有与cmp 组合使用的条件转移指令：je, jne, jb, jnb, ja, jna等。</p>
<h4 id="loop-指令"><a href="#loop-指令" class="headerlink" title="loop 指令"></a>loop 指令</h4><p>概念：</p>
<p>循环指令，<strong>所有的循环转移指令都是短转移</strong>。</p>
<p>指令格式：</p>
<pre><code>loop 标号
</code></pre>
<p>相当于：</p>
<pre><code>(cx)--;
if ((cx)!=0) jmp short 标号；
</code></pre>
<h4 id="ret-指令-amp-retf-指令"><a href="#ret-指令-amp-retf-指令" class="headerlink" title="ret 指令 &amp; retf 指令"></a>ret 指令 &amp; retf 指令</h4><p>概念：</p>
<p>两者都是转移指令，ret 用栈中的数据修改IP的内容，从而实现近转移。retf 用栈中的数据修改 CS 和 IP的内容，从而实现远转移。</p>
<p>指令格式：</p>
<pre><code>ret
retf
</code></pre>
<p>执行 ret 相当于：</p>
<pre><code>pop IP
</code></pre>
<p>执行 retf 相当于：</p>
<pre><code>pop IP
pop CS
</code></pre>
<h4 id="call-指令"><a href="#call-指令" class="headerlink" title="call 指令"></a>call 指令</h4><p>概念：</p>
<p>转移指令，CPU 执行 call 指令时，进行两步操作：先将当前的IP或CS压栈，随后转移。</p>
<p>指令格式：</p>
<p>同jmp 一样，分为三种：</p>
<ul>
<li><p>call 标号</p>
</li>
<li><p>call 16位寄存器/reg</p>
<blockquote>
<p>相当于：</p>
<pre><code>push IP
jmp 16位reg
</code></pre>
</blockquote>
</li>
<li><p>call 内存单元地址</p>
</li>
</ul>
<p>其中，call 标号 细分为：</p>
<ul>
<li><p>call 标号</p>
<blockquote>
<p>相当于：</p>
<pre><code>push IP
jmp near ptr 标号
</code></pre>
<p>同ret 正好对应入栈出栈。</p>
</blockquote>
</li>
<li><p>call far ptr 标号</p>
<blockquote>
<p>相当于：</p>
<pre><code>push CS
push IP
jmp far ptr 标号
</code></pre>
<p>同retf 正好对应入栈出栈。</p>
</blockquote>
</li>
</ul>
<p>同样，对应jmp, call 内存单元地址 细分为：</p>
<ul>
<li><p>call word ptr 内存单元地址</p>
<blockquote>
<p>段内转移。</p>
<p>相当于：</p>
<pre><code>push IP
jmp word ptr 内存单元地址
</code></pre>
</blockquote>
</li>
<li><p>call dword ptr 内存单元地址</p>
<blockquote>
<p>段间转移。</p>
<p>相当于：</p>
<pre><code>push CS
push IP
jmp dword ptr 内存单元地址
</code></pre>
</blockquote>
</li>
</ul>
<p>通常 可以使用call 和 ret 来实现子程序机制，比如：</p>
<pre><code class="assembly">assume cs:code

code segment
  start: ......
         ......
         call sub
         ......
         ......
         mov ax, 4c00h
         int 21h
    sub: ......
         ......
         ret
code ends
end start
</code></pre>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://book.douban.com/subject/25726019/">汇编语言</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Assembly</tag>
      </tags>
  </entry>
  <entry>
    <title>Webpack学习笔记</title>
    <url>/posts/learn-webpack/</url>
    <content><![CDATA[<p>Webpack 学习笔记。</p>
<span id="more"></span> 

<h4 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h4><p>官方给到的解释：</p>
<blockquote>
<p> webpack is a <em>static module bundler</em> for modern JavaScript applications.</p>
</blockquote>
<p>它是一款针对JS应用的静态模块打包工具，当使用webpack处理应用程序时，它会在内部建一个依赖关系图，这个图能映射应用需要的每一个module并生成一个或多个bundles。</p>
<p>2018.3.12，Webpack4.0 正式发布，<a href="https://medium.com/@TheLarkInn?source=post_header_lockup">Sean T. Larkin</a> 在当天发表了文章<a href="https://medium.com/webpack/webpack-4-released-today-6cdb994702d4">webpack 4: released today!!</a>， 列出了新版的变动。通过查看<a href="https://github.com/webpack/webpack/releases">releases</a>可以得到changelog， 目前的最新版本是<a href="https://github.com/webpack/webpack/releases/tag/v4.8.3">4.8.3</a>。</p>
<p>使用webpack来打包module时，需要设定配置文件，默认的配置文件是<code>webpack.config.js</code>，不过对于4.0及以上的版本，webpack已经不再强制要求配置文件了。针对需要设定的属性，有其相对应的默认值。</p>
<p>在使用webpack前，有必要了解一些重要的概念。</p>
<h4 id="几个重要的概念"><a href="#几个重要的概念" class="headerlink" title="几个重要的概念"></a>几个重要的概念</h4><ul>
<li><p>Entry</p>
<p>entry用于告诉webpack从哪个文件开始创建内部的依赖关系图，默认情况下是<code>./src/index.js</code>。 我们也可以在配置文件<code>webpack.config.js</code>中自定义，比如：</p>
<pre><code class="Js">module.exports = &#123;
  entry: &#39;./path/file.js&#39;  
&#125;;
</code></pre>
<p>entry可以有多个，比如：</p>
<pre><code class="Js">const config = &#123;
    entry: &#123;
        pageOne: &#39;./src/pageOne/index.js&#39;,
        pageTwo: &#39;./src/pageTwo/index.js&#39;,
        pageThree: &#39;./src/pageThree/index.js&#39;
    &#125;
&#125;;
module.exports = config;
</code></pre>
<p>这里设置了三个entries，告诉webpack要生成三个独立的内部依赖图。</p>
</li>
<li><p>Output</p>
<p>output用于告诉webpack，打包编译后的文件放在哪里。主要通过给filename和path赋值的方式来指定。</p>
<p>看个例子：</p>
<pre><code class="Js">const config = &#123;
    output: &#123;
        filename: &#39;bundle.js&#39;,
        path: &#39;/home/project/public/assets&#39;
    &#125;
&#125;;
module.exports = config;
</code></pre>
<p>这里告诉webpack，最后的输出文件是bundle.js， 存放在<code>&#39;/home/project/public/assets&#39;</code>下。</p>
<p>上面提到了entry可以有多个，但是output只能有一个，不能配置多个。那么如何让每一个entry都有一个output文件而不是混合在一起呢？官方给到了一个这样的例子做参考：</p>
<pre><code class="Js">&#123;
    entry: &#123;
        app: &#39;./src/app.js&#39;,
        search: &#39;./src/search.js&#39;,
    &#125;,
    output: &#123;
        filename: &#39;[name].js&#39;,
        path: __dirname + &#39;/dist
    &#125;
&#125;
</code></pre>
<p>这样会在<code>/dist</code>下面输出两个打包后的文件，<code>./dist/app.js</code>, <code>./dist/search.js</code>.</p>
</li>
<li><p>Loaders</p>
<p>loaders用于告诉webpack，不同的文件需要用什么加载器进行处理，比如把其他非JS文件，如TS，转换成JS，或者import一些CSS文件。loader好比在导入或者加载文件时，对文件进行了一次预处理，使之符合打包要求。</p>
<p>设定loaders有三种方式：</p>
<ul>
<li><p>在配置文件中设定</p>
<p>比如需要加载css,转换ts文件，可以这么用：</p>
<p>先在本地安装对应的loaders：</p>
<pre><code>npm install --save-dev css-loader
npm install --save-dev ts-loader
</code></pre>
<p>然后在配置文件中指定用哪个loader处理哪些文件：</p>
<pre><code class="Js">module.exports = &#123;
  module: &#123;
      rules: [
        &#123; test: /\.css$/, use: &#39;css-loader&#39; &#125;,
        &#123; test: /\.ts$/, use: &#39;ts-loader&#39; &#125;
      ]
  &#125;  
&#125;;
</code></pre>
<p>这里告诉webpack，用css-loader处理<code>.css</code>文件，用ts-loader处理<code>.ts</code>文件。</p>
</li>
<li><p>在<code>import</code>中声明</p>
<p>比如：</p>
<pre><code>import Styles from &#39;style-loader!css-loader?modules!./styles.css&#39;;
</code></pre>
<p>这里用style-loader和css-loader来处理modules和<code>./styles.css</code>。</p>
</li>
<li><p>使用命令行</p>
<p>看官方给出的例子：</p>
<pre><code>webpack --module-bind jade-loader --module-bind &#39;css=style-loader!css-loader&#39;
</code></pre>
<p>这里告诉webpack，用jade-loader处理<code>.jade</code> 文件, 用style-loader和css-loader处理<code>.css</code>文件。</p>
<p>官方还给到了loader <a href="https://webpack.js.org/loaders/">列表</a>以及如何<a href="https://webpack.js.org/api/loaders/">write your own loader</a>。</p>
</li>
</ul>
</li>
<li><p>Plugins</p>
<p>loader可以用来转换某些类型的module，而plugin则用来扩展webpack的功能，比如优化bundle，管理assets。</p>
<p><a href="https://webpack.js.org/api/plugins/">Tapable</a>可以提供简单的plugin接口，官方还给出了如何自己写一个plugin的教程<a href="https://webpack.js.org/contribute/writing-a-plugin/">write a plugin</a>.</p>
<p>在使用某个plugin之前，需要用<code>require()</code>来将它先添加到plugins 数组中。调用时，则需要使用<code>new</code>来创建一个plugin的实例。</p>
<p>看个官方给到的例子：</p>
<pre><code class="Js">const HtmlWebpackPlugin = require(&#39;html-webpack-plugin&#39;);
const webpack = require(&#39;webpack&#39;);
const config = &#123;
    module: &#123;
        rules: [
            &#123;test: /\.txt$\/, use: &#39;raw-loader&#39;&#125;
        ]
    &#125;,
    plugins: [
      new  HtmlWebpackPlugin(&#123;template: &#39;./src/index.html&#39;&#125;);     
    ]
&#125;;
module.exports = config;
</code></pre>
<p>这里使用html-webpack-plugin这个plugin，将会自动生成一个index.html文件。</p>
<p><a href="https://webpack.js.org/plugins/">戳这里</a>查看目前的plugin list。</p>
</li>
<li><p>Mode</p>
<p>mode用于告诉webpack， 根据mode指定的环境来启用webpack的内置优化，其实是启用了对应每个环境下的默认plugins，mode默认值是production，即生产环境。</p>
<p>mode的取值可以为production，development，或者none。取值为none就是不用任何默认的plugin来优化。</p>
<p>可以通过命令行或者config文件来设置mode：</p>
<ul>
<li><p>配置文件</p>
<pre><code class="Js">module.exports = &#123;
    mode: &#39;development&#39;
&#125;;
</code></pre>
</li>
<li><p>命令行</p>
<pre><code>webpack --mode=development
</code></pre>
</li>
</ul>
</li>
</ul>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>分本地安装和全局安装：</p>
<ul>
<li><p>global installation</p>
<pre><code>npm install --global webpack
</code></pre>
<p>全局安装会让你固定在特定版本的webpack，对于使用不同版本webpack的项目而言，不是件好事。</p>
</li>
<li><p>local installation</p>
<pre><code>npm install --save-dev webpack
</code></pre>
<p>这会在本地安装最新版的webpack，如果需要安装指定版本，可以执行：</p>
<pre><code>npm install --save-dev webpack@&lt;version&gt; ## version是版本号
</code></pre>
</li>
</ul>
<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><p>启动：</p>
<pre><code>webpack
</code></pre>
<p>让webpack 时时编译：</p>
<pre><code>webpack --build
</code></pre>
<p>自定义配置文件：</p>
<pre><code>webpack --config yourconfig.js
</code></pre>
<h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p>如果你也是和我一样的JS新手，在了解Webpack前，有必要对模块及模块化打包进行更为清晰的了解。推荐阅读<a href="https://medium.freecodecamp.org/@preethikasireddy?source=post_header_lockup">Preethi Kasireddy</a>的这两篇<a href="https://medium.freecodecamp.org/javascript-modules-a-beginner-s-guide-783f7d7a5fcc">JavaScript Modules: A Beginner’s Guide</a>，<a href="https://medium.freecodecamp.org/javascript-modules-part-2-module-bundling-5020383cf306">JavaScript Modules Part 2: Module Bundling</a>， 对于理解JS中的module 以及为何要bundle module有很大帮助，文中还对比了下webpack与Browserify, RequireJS等其他module bundle的差异，很有启发性。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://webpack.js.org/">webpack 官网</a></p>
<p><a href="https://medium.com/webpack/webpack-4-released-today-6cdb994702d4">webpack 4: released today!!</a></p>
<p><a href="https://medium.freecodecamp.org/javascript-modules-a-beginner-s-guide-783f7d7a5fcc">JavaScript Modules: A Beginner’s Guide</a></p>
<p><a href="https://medium.freecodecamp.org/javascript-modules-part-2-module-bundling-5020383cf306">JavaScript Modules Part 2: Module Bundling</a></p>
<p><a href="https://github.com/wangning0/Autumn_Ning_Blog/blob/master/blogs/3-12/webpack.md">Webpack学习之路</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>label的for属性</title>
    <url>/posts/learning-label-for/</url>
    <content><![CDATA[<p>Web知识补充。</p>
<span id="more"></span> 

<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>最近跟着老大学到了一个新技能，label标签的for属性，对于前端菜鸟来说，看到使用label for后，点击文本就可以选中单选框radio，还是很激动的，记录下label for的使用。</p>
<h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><p>w3school里面有相关的解释:<a href="http://www.w3school.com.cn/tags/att_label_for.asp">label 标签的for属性</a>，这里通过一两个例子来感受一下。</p>
<p>代码如下：</p>
<pre><code class="html">&lt;form&gt;
  &lt;h5&gt;What&#39;s your main focus for today?&lt;/h5&gt;
  &lt;input type=&quot;radio&quot; name=&quot;things&quot; id=&quot;song&quot;&gt;
  &lt;label for=&quot;song&quot;&gt;Sing a song&lt;/label&gt;
  &lt;br&gt;
  &lt;input type=&quot;radio&quot; name=&quot;things&quot; id=&quot;coding&quot;&gt;
  &lt;label for=&quot;coding&quot;&gt;Coding&lt;/label&gt;
  &lt;br&gt;
  &lt;input type=&quot;radio&quot; name=&quot;things&quot; id=&quot;shopping&quot;&gt;
  &lt;label for=&quot;shopping&quot;&gt;go shopping&lt;/label&gt;
&lt;/form&gt;
</code></pre>
<p>对应的页面效果如下：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fthnyy2z3pg30cf05vjrb.gif"></p>
<p>只要点击对应的文本，即可选中选项。这样看，好像没什么特别的，我们来点不一样的。</p>
<p>写一个boolean类型的例子，比如用来判断某句话是不是对的。</p>
<p>先看最终实现的页面效果：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fthp4rvq4pg30cf05vdft.gif"></p>
<p>对应的html代码如下：</p>
<pre><code class="html">&lt;form&gt;
  &lt;h4&gt;请判断以下语句是否正确？&lt;/h4&gt;
  &lt;div class=&quot;d-flex&quot;&gt;
    &lt;div class=&quot;form-boolean&quot;&gt;
      &lt;input type=&quot;radio&quot; name=&quot;statement&quot; id=&quot;statement-yes&quot; class=&quot;input-yes&quot; value=&quot;1&quot;&gt;
      &lt;input type=&quot;radio&quot; name=&quot;statement&quot; id=&quot;statement-no&quot; class=&quot;input-no&quot; value=&quot;0&quot;&gt;
      &lt;label for=&quot;statement-no&quot; class=&quot;form-checkbox label-yes&quot;&gt;
        &lt;span class=&quot;radio-value&quot;&gt;Y&lt;/span&gt;
      &lt;/label&gt;

      &lt;label for=&quot;statement-yes&quot; class=&quot;form-checkbox label-no&quot;&gt;
        &lt;span class=&quot;radio-value&quot;&gt;N&lt;/span&gt;
      &lt;/label&gt;

      &lt;label for=&quot;statement-yes&quot; class=&quot;form-checkbox label-empty&quot;&gt;
        &lt;span class=&quot;radio-value&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;
    &lt;/div&gt;
    &lt;div&gt;太阳每天都从东边升起来&lt;/div&gt;
  &lt;/div&gt;
&lt;/form&gt;
</code></pre>
<p>对应的CSS部分【重头戏其实在CSS这里】：</p>
<pre><code class="scss">.d-flex &#123;
  display: flex;
&#125;

.form-checkbox &#123;
  color: #3c763d;
  border-color: #3c763d;
  background-color: #dff0d8;
  border-radius: 10%;
  display: inline-block;
  cursor: pointer;
  padding: 0.4em;
  margin-top: -0.2em;
  text-align: center;
  line-height: 1.0;
  width: 1em;
  height: 1em;

  .radio-value &#123;
    display: block;
  &#125;
&#125;

.form-boolean &#123;
  input &#123;
    display: none;
  &#125;

  input:checked ~ .label-empty &#123;
    display: none;
  &#125;

  .label-yes, .label-no &#123;
    display: none;
  &#125;

  .input-yes:checked ~ .label-yes &#123;
    display: block;
  &#125;

  .input-no:checked ~ .label-no &#123;
    display: block;
  &#125;
&#125;
</code></pre>
<p>我们下面从零开始，一步步来。</p>
<p>因为是boolean型，在未选择之前，应该有三种状态：</p>
<p>没选，一个空的框，含Y的一个框，含N的一个框。我们先画出三个框来：</p>
<pre><code class="html">&lt;form&gt;
  &lt;h4&gt;请判断以下语句是否正确？&lt;/h4&gt;
  &lt;div class=&quot;d-flex&quot;&gt;
    &lt;div class=&quot;form-boolean&quot;&gt;
      &lt;label class=&quot;form-checkbox label-yes&quot;&gt;
        &lt;span class=&quot;radio-value&quot;&gt;Y&lt;/span&gt;
      &lt;/label&gt;

      &lt;label class=&quot;form-checkbox label-no&quot;&gt;
        &lt;span class=&quot;radio-value&quot;&gt;N&lt;/span&gt;
      &lt;/label&gt;

      &lt;label class=&quot;form-checkbox label-empty&quot;&gt;
        &lt;span class=&quot;radio-value&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;
    &lt;/div&gt;
    &lt;div&gt;太阳每天都从东边升起来&lt;/div&gt;
  &lt;/div&gt;
&lt;/form&gt;
</code></pre>
<p>设置下form-checkbox， radio-value 的CSS，让框好看点：</p>
<pre><code class="scss">.d-flex &#123;
  display: flex;
&#125;

.form-checkbox &#123;
  color: #3c763d;
  border-color: #3c763d;
  background-color: #dff0d8;
  border-radius: 10%;
  display: inline-block;
  cursor: pointer;
  padding: 0.4em;
  margin-top: -0.2em;
  text-align: center;
  line-height: 1.0;
  width: 1em;
  height: 1em;

  .radio-value &#123;
    display: block;
  &#125;
&#125;
</code></pre>
<p>页面的效果：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fthped4faaj30to09qgm8.jpg"></p>
<p>这时，你去点击，会发现什么都没有发生，我们需要借助CSS的:checked来做点变化。</p>
<p>【插播下:checked的相关知识。</p>
<p>在<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:checked">mozilla</a>上对于:checked的解释是：</p>
<p>页面上任何处于选中状态的radio, checkbox 或select元素中的option HTML元素。</p>
<p>比如<code>input[type=&quot;radio&quot;]:checked</code>  表示页面上的所有选中的radio按钮，<code>input[type=&quot;checkbox&quot;]:checked</code>表示页面上的所有选中的checkbox按钮 ，<code>option:checked</code>表示页面上的所有选中的select的选项。】</p>
<p>现在页面上没有input，我们加上input，同时添加上label的for属性。</p>
<pre><code class="html">&lt;form&gt;
  &lt;h4&gt;请判断以下语句是否正确？&lt;/h4&gt;
  &lt;div class=&quot;d-flex&quot;&gt;
    &lt;div class=&quot;form-boolean&quot;&gt;
      &lt;input type=&quot;radio&quot; name=&quot;statement&quot; id=&quot;statement-yes&quot; class=&quot;input-yes&quot; value=&quot;1&quot;&gt;
      &lt;input type=&quot;radio&quot; name=&quot;statement&quot; id=&quot;statement-no&quot; class=&quot;input-no&quot; value=&quot;0&quot;&gt;
      &lt;label for=&quot;statement-no&quot; class=&quot;form-checkbox label-yes&quot;&gt;
        &lt;span class=&quot;radio-value&quot;&gt;Y&lt;/span&gt;
      &lt;/label&gt;

      &lt;label for=&quot;statement-yes&quot; class=&quot;form-checkbox label-no&quot;&gt;
        &lt;span class=&quot;radio-value&quot;&gt;N&lt;/span&gt;
      &lt;/label&gt;

      &lt;label for=&quot;statement-yes&quot; class=&quot;form-checkbox label-empty&quot;&gt;
        &lt;span class=&quot;radio-value&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;
    &lt;/div&gt;
    &lt;div&gt;太阳每天都从东边升起来&lt;/div&gt;
  &lt;/div&gt;
 &lt;/form&gt;
</code></pre>
<p>这时，通过label for，我们点击N或者空框时，第一个radio会被选中，点击Y时，第二个radio会被选中。这里给空框也指定了一个for，默认是选择yes。【后面CSS部分，我们就会知道这里空框的for值的选择，决定了第一次点击的时候，出现的是Y还是N，这里我们选了Y。】</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fthq2dgonzg30cf05vgln.gif"></p>
<p>离目标已经很近了！</p>
<p>我们先设置下两个radio不可见，同时，初始状态时，只有空框。</p>
<p>CSS中添加如下代码：</p>
<pre><code class="SCSS">.form-boolean &#123;
  input &#123;
    display: none;
  &#125;

  .label-no, .label-yes &#123;
    display: none;
  &#125;
&#125;
</code></pre>
<p>这里用form-boolean包了一层，这样，设置的CSS，是针对form-boolean 选择器中的input。</p>
<p>此时的页面效果：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fthqypbrbbj30kg07q0t8.jpg"></p>
<p>但是你会发现，点击空框，没有任何反应，因为我们隐藏了Y和N。那么要怎么把Y和N唤出来？</p>
<p>前面我们已经设置了点击空框时，第一个input radio其实是被选中的，所有我们可以使用：checked唤出Y，同时Y出现的时候，空框隐藏。CSS添加如下代码：</p>
<pre><code class="scss">.form-boolean &#123;
 ........

  input:checked ~ .label-empty &#123;
    display: none;
  &#125;

  .input-yes:checked ~ .label-yes &#123;
    display: block;
  &#125;
&#125;
</code></pre>
<p>这时的页面效果：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fthr0ybiyyg30cf05v3yk.gif"></p>
<p>如果<code>~</code>不清楚，可以参考这篇<a href="https://luciaca.cn/2018/07/18/css-symbol-compare/">CSS中’&gt;’,’+’,’～’符号的区别</a>.</p>
<p>还剩最后一步，点击Y时，更换成N。依然还是使用:checked，.form-boolean里面添加如下代码：</p>
<pre><code class="scss">.form-boolean &#123;
  .......
 .input-no:checked ~ .label-no &#123;
   display: block;
 &#125;
&#125;
</code></pre>
<p>此时的页面效果：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fthp4rvq4pg30cf05vdft.gif"></p>
<p>最后.form-boolean 部分完整的CSS：</p>
<pre><code class="scss">.form-boolean &#123;
  input &#123;
    display: none;
  &#125;

  .label-no, .label-yes &#123;
    display: none;
  &#125;

  input:checked ~ .label-empty &#123;
    display: none;
  &#125;

  .input-yes:checked ~ .label-yes &#123;
    display: block;
  &#125;

  .input-no:checked ~ .label-no &#123;
    display: block;
  &#125;
&#125;
</code></pre>
<p>OK!  </p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:checked">:checked</a></p>
<p><a href="http://www.w3school.com.cn/tags/att_label_for.asp">label 标签的for属性</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>学习Selenium webdriver - ruby篇</title>
    <url>/posts/learning-selenium-webdriver-ruby-version/</url>
    <content><![CDATA[<p>被selenium webdriver中的定位虐过，决定过一遍这方面的知识点，记录下踩过的坑。</p>
<span id="more"></span> 

<p>好，来认识下selenium webdriver及其使用。</p>
<h4 id="几个概念"><a href="#几个概念" class="headerlink" title="几个概念"></a>几个概念</h4><ul>
<li><p><strong>Selenium</strong></p>
<blockquote>
<p>Selenium is a set of different software tools each with a different approach to supporting test automation.</p>
<p>一套用于进行浏览器自动化测试的开源工具集。selenium的一个重要特性是支持所有主流浏览器（chrome，Firefox，IE，Safari）。</p>
<p>selenium产生于2004年，由Jason Huggins开发，起因是他为了解决每次更新应用时，需要手动测试带来的低效，他通过开发一个JavaScript的library，实现与页面进行交互，从而可以在多个浏览器之间实现测试自动化。而这个library最终成为了后来selenium的内核（Selenium Core）。</p>
<p>selenium test支持的语言： Java， C#， Javascript，python，ruby</p>
</blockquote>
</li>
</ul>
<ul>
<li><p><strong>Webdriver</strong></p>
<blockquote>
<p>06年，Google的一位工程师Simon Stewart开始着手一个项目，由于Selenium的起源是一个 JavaScript的library，Simon希望开发出一个可以直接与浏览器进行交互的测试工具，通过使用浏览器和操作系统的原生methods，以避免来自JavaScript环境的限制， 这个项目就是WebDriver，这也是webdriver的由来。</p>
<p>你可以理解成它是一个开源项目，可以让用户编写各种操作代码，这些代码可以在主流浏览器上运行，与页面进行交互。</p>
</blockquote>
</li>
</ul>
<ul>
<li><p><strong>Selenium Webdriver</strong></p>
<blockquote>
<p>08年，Selenium 与 Webdriver联姻，二者merge了。merge的原因？Simon Stewart的原话：</p>
<p>‘’Why are the projects merging? Partly because WebDriver addresses some shortcomings in selenium (by being able to bypass the JS sandbox, for example. And we’ve got a gorgeous API), partly because selenium addresses some shortcomings in WebDriver (such as supporting a broader range of browsers) and partly because the main selenium contributors and I felt that it was the best way to offer users the best possible framework’‘</p>
<p>我简单地理解成各有千秋，互补增强。</p>
</blockquote>
</li>
</ul>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>基本用法其实就是定位到页面指定的元素，然后对元素进行操作，比如单击、滚动、输入等等。</p>
<p>看一段简单的ruby代码：</p>
<pre><code class="Ruby"># require selenium-webdriver module
require &quot;selenium-webdriver&quot;
# 打开一个Firefox的浏览器，也可以打开chrome，IE，将:firefox换成:chrome, :ie
driver = Selenium::WebDriver.for :firefox
# 打开网页
driver.navigate.to &quot;http://www.google.com&quot;
# 定位元素
element = driver.find_element(:name, &#39;q&#39;)
# 对元素进行操作
element.send_keys &quot;Hello Selenium WebDriver!&quot;
element.submit
</code></pre>
<h4 id="定位及操作"><a href="#定位及操作" class="headerlink" title="定位及操作"></a>定位及操作</h4><p>find_element: 查找匹配到的第一个元素</p>
<p>find_elements: 查找匹配到的所有元素</p>
<p>在Selenium webdriver中，主要有以下几类：</p>
<ul>
<li><p><strong>ID</strong></p>
<p>通过ID来定位元素，ID是唯一的，通常较少变动，所以可以很准确地定位到指定元素。</p>
<p>比如：</p>
<pre><code class="Ruby">element = driver.find_element(:id, &quot;username&quot;)
element.send_keys(&quot;admin&quot;)
driver.find_element(:id, &quot;submit&quot;).click
</code></pre>
</li>
<li><p><strong>Name</strong></p>
<p>Name也是比较常用的定位方式</p>
<pre><code class="Ruby">element = driver.find_element(:name, &quot;username&quot;)
driver.find_element(:name, &quot;comment&quot;).send_keys(&quot;my comments&quot;)
</code></pre>
</li>
<li><p><strong>Link Text</strong></p>
<p>只用于超链接元素的定位</p>
<pre><code class="ruby">driver.find_element(:link_text, &quot;Cancel&quot;).click
driver.find_element(:link, &quot;Login&quot;)
</code></pre>
</li>
<li><p><strong>Partial Link Text</strong></p>
<p>selenium 允许通过一部分的超链接文本来定位某个超链接，比如:</p>
<pre><code class="ruby"># 点击到“cancel” 或者“Cancel”链接
driver.find_element(:partial_link_text, &quot;ancel&quot;).click
</code></pre>
</li>
<li><p><strong>XPath</strong></p>
<p>Xpath 几乎可以定位到页面上的任何一个元素。XPath是XML path的简称，它有两种用法：</p>
<ul>
<li>绝对路径,  用”/“, 例如：<code>/html/body/table[1]</code></li>
<li>相对路径，用”//“</li>
</ul>
<p>例如：</p>
<pre><code class="ruby">driver.find_element(:xpath, &quot;//*[@id=&#39;div2&#39;]/input[@type=&#39;checkbox&#39;]&quot;).click
driver.find_element(:xpath,&quot;//input[@value=&#39;Sign in&#39;]&quot;)
driver.find_element(:xpath, &quot;//a[@href=&#39;/logout&#39;]&quot;).click
</code></pre>
<p>一般不推荐用绝对路径，因为一旦页面结构发生变化，该路径随之失效。</p>
</li>
<li><p><strong>Tag Name</strong></p>
<p>通过元素的标签名称来查找元素,不过这种方法找到的元素通常不止一个。</p>
<pre><code class="ruby">driver.find_element(:tag_name, &quot;body&quot;)
driver.find_element(:tag_name, &quot;body&quot;).text
# 查看button的个数
button_elems = driver.find_elements(:tag_name, &quot;button&quot;)
button_elems.count
</code></pre>
</li>
<li><p><strong>Class Name</strong></p>
<p>这是利用元素的css样式表所引用的类名称来进行查找，不过当某个元素含有多个类时，不可以使用多个类来查找。</p>
<p>例如如下的HTML：</p>
<pre><code class="Html">&lt;a href=&quot;back.html&quot; class=&quot;btn btn-default&quot;&gt;Cancel&lt;/a&gt;
&lt;input type=&quot;submit&quot; class=&quot;btn btn-deault btn-primary&quot;&gt;Submit&lt;/input&gt;
</code></pre>
<p>对应的元素定位：</p>
<pre><code class="Ruby">driver.find_element(:class, &quot;btn-primary&quot;).click # Submit button
driver.find_element(:class, &quot;btn&quot;).click # Cancel link
</code></pre>
<p>这里Cancel和Submit都有”btn”这个class，find_element会返回匹配到的第一个元素，所以<code>driver.find_element(:class, &quot;btn&quot;).click</code> 点击的是cancel这个button。</p>
<p>但是不允许指定多个class，下面这样的用法是错误的：</p>
<pre><code class="ruby">driver.find_element(:class, &quot;btn btn-deault btn-primary&quot;).click
</code></pre>
<p>如果想要定位带有多个class的元素，怎么办？可以使用CSS Selector。</p>
</li>
<li><p><strong>CSS Selector</strong></p>
<p>定位ID为login的元素下面的text，可以这么写：</p>
<pre><code class="ruby">driver.find_element(:css, &quot;#login &gt; input[type=&#39;text&#39;]&quot;).click
</code></pre>
<p>当需要指定多个属性值时，可以逐一加在后面，比如：</p>
<pre><code class="ruby">driver.find_element(:css, &quot;#login &gt; input[type=&#39;text&#39;][name = &#39;username&#39;]&quot;)
</code></pre>
<p>而上面多个class的情况，可以这么写：</p>
<pre><code class="ruby">driver.find_element(:css, &quot;input.btn.btn-deault.btn-primary&quot;).click
</code></pre>
</li>
</ul>
<p><strong>小结：</strong></p>
<p>看过一些前辈写的相关文章，里面提到定位的一些原则，比如：Xpath很强大，但是非常费时，需要扫描整个网页来定位，尽量少用。Css selector与xpath比较类似，但是执行速度要更快，有ID的尽量用ID，别浪费。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.protechtraining.com/content/selenium_tutorial-locators">Selenium Tutorial: Locators</a></p>
<p><a href="http://docs.seleniumhq.org/docs/">Selenium Documentation</a></p>
<p>另，推荐一个小册子：<a href="https://leanpub.com/selenium-recipes-in-ruby">Selenium WebDriver Recipes in Ruby</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Selenium</tag>
      </tags>
  </entry>
  <entry>
    <title>learning styles</title>
    <url>/posts/learning-styles/</url>
    <content><![CDATA[<p>TEDx Talks: <a href="https://www.youtube.com/watch?v=855Now8h5Rs&t=2s">Learning styles &amp; the importance of critical self-reflection | Tesia Marshik</a></p>
<span id="more"></span>

<h4 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h4><p>The most common learning styles people hear and believe:</p>
<blockquote>
<p>some of us are auditory learners.</p>
<p>some of us are more visual learners.</p>
<p>some of us are more tactile or kinesthetic learners,  where we learn best by actually doing things or engaging in physical activities.</p>
</blockquote>
<p>learning styles are actually wrong. they don’t exist.</p>
<p>There are still no evidence that matching teaching styles to supposed learning styles or students’ preferences actually makes a difference.</p>
<p>what can be done when learning styles are wrong?</p>
<ul>
<li><p>Most of what you learn is stored in terms of <strong>meaning</strong>.</p>
<blockquote>
<p>rereading your note or just rewriting your notes tend to be not very effective.</p>
<p>In order to retain information, we have to <strong>organize it in a way that’s meaningful</strong>. <strong>make connections</strong> to it.</p>
<p>connecting it to our experiences or coming up with our own examples or thinking of how we’re learning something in one class, and how that <strong>relates</strong> to what else we know.</p>
<p>Researches by Chase &amp; Simon in 1973 shows us further evidence that <strong>we store information in terms of meaning</strong>, not according to a sensory mode.</p>
</blockquote>
</li>
<li><p>The best way to teach or learn something depends on the content itself.</p>
</li>
<li><p>Many things can be taught/learned using multiple sense.</p>
<p>incorporating multiple sensory experiences into one lesson <strong>makes it more meaningful</strong>.</p>
</li>
</ul>
<p>a lot of people believe it doesn’t make it true.</p>
<p>information bias:</p>
<p>people don’t like to be wrong, so when people have this belief, or any belief, we tend to look for information that fits our beliefs, and we ignore information that doesn’t fit our beliefs. we look for evidence to support whatever it is we think.</p>
<p>「So is it even harder for people to accept new beliefs which against their old ones? Thanks for 《 beyond feelings》, I am glad to know new beliefs, love the feeling of abandoning my old, false opinions and embracing those new ideas.」</p>
<p>Why not believe in  learning styles?</p>
<p>Two reasons that people should stop believing and spreading learning styles：</p>
<ul>
<li>we are wasting valuable time and resources, valuable educational resources.</li>
<li>labeling yourself as a learner can not only be misleading, but it can be dangerous.</li>
</ul>
<h4 id="thoughts"><a href="#thoughts" class="headerlink" title="thoughts"></a>thoughts</h4><p>简单总结下自己从中get到的点：</p>
<ul>
<li>赋予所学的东西以意义</li>
<li>善用连接来组织知识点</li>
<li>努力避开信息偏好的坑</li>
</ul>
]]></content>
      <categories>
        <category>Learning</category>
      </categories>
      <tags>
        <tag>Talks</tag>
      </tags>
  </entry>
  <entry>
    <title>家住长江边</title>
    <url>/posts/living-by-changjiang-river/</url>
    <content><![CDATA[<p>这里是长江边的一个小镇。</p>
<p>跟所有的小镇一样，平淡而宁静。</p>
<span id="more"></span> 

<p>小镇的夜晚，一抬头，满天星，一闪一闪，干干净净，真好看。</p>
<p>傍晚的时候，夕阳很美，你若有兴致，塞上耳机，出门，上大坝，大坝两边是青草地，风一吹，阵阵青草味扑来，真真是好闻。</p>
<p>大坝下面有家电影院，应该是这附近唯一的一家影院，环境不错，看的人也多，记得提前买票。</p>
<p>如果想要扔扔篮球，可以去附近的中学，那里有个篮球场，操场挺大，还可以跑跑步。</p>
<p>楼下有家饼店，一对夫妻开的，见人总是笑呵呵的，他们家的雪菜饼卖得很好。</p>
<p>偷懒不想做早饭的时候，可以下楼买两个解解馋，很近，骑单车过去不到5分钟，不过要起早，7点以后估计饼就卖完了。</p>
<p>离那家饼店不远，有一家蛋糕店，很传统，各式各样的糕点排在门店前面，没什么装饰，像小作坊，可是生意很好。</p>
<p>有一次踩单车路过，瞥见店长穿了件23号球衣，上面写着James，瞬间对这家蛋糕店很有好感。</p>
<p>还是那条街，有家面馆叫友达，老板忒实在，很大碗面，加一些鱼豆腐，味道很好，不过因为分量特别足，从来没有吃完过。</p>
<p>旁边也有一些快餐店，卖汉堡可乐，不过不推荐，你会失望的。</p>
<p>如果你的单车出了问题，去街角的那家，修车的是个白发爷爷，人很亲切，技术很赞，服务很贴心。</p>
<p>早上醒来的时候，你除了听到鸟鸣声，偶尔还会伴有篮球入筐的声音，那是楼下的消防队开始练球了，不要气他们扰了你的好梦，原谅他们，相信我，他们打的很铁。</p>
<p>放晴的日子，天很蓝，有云，抬头，尼玛，这天真好看。</p>
<p>我的废话说完了，去敲代码。</p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>Life</tag>
      </tags>
  </entry>
  <entry>
    <title>SSH免密码登录远端服务器</title>
    <url>/posts/login-server-without-password/</url>
    <content><![CDATA[<p>小白踩坑SSH。</p>
<span id="more"></span> 

<h4 id="吐个糟先"><a href="#吐个糟先" class="headerlink" title="吐个糟先"></a>吐个糟先</h4><p>前段时间开始学习Linux云服务器部署运维，在免密码登录那块卡了很久，一直没找到原因，删除实例，重新生成SSH key，折腾了几次，每次都以为这次没问题了，结果登录的时候，擦，还是要求输入密码，你说糟心不？索性先搁浅了起来，前几天又来找虐，试了两次，竟然成功登录了，小激动啊！</p>
<p>记录下免密码登录的整个操作流程，庆祝下，也给没踩坑的参考下。</p>
<h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><p>远端登入如果每次都要输入密码，还是挺麻烦的，不过，别担心，聪明的前辈们早就想到解决办法啦！用非对称加密的方式来实现免密码登录。那，具体怎么玩？</p>
<p><strong>步骤：</strong></p>
<p>机器A： 本地的Mac</p>
<p>机器B： 远端Linux服务器</p>
<p>Step1、在<strong>本地机器A</strong>检查是否已经生成id_rsa.pub</p>
<ul>
<li><p>终端运行<code>cat ~/.ssh/id_rsa.pub</code></p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fk9qp21kn2j30lt021gmk.jpg"></p>
<ul>
<li><p>如果存在该文件，终端运行：<code>ssh-keygen -p</code>, 将passphrase重新设置为空，直接按Enter即可，这一步很重要，不然的话，即使你设置了免密码登录，还是要每次都输入passphrase才可以登录到远端服务器。</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fk9qp2mmr8j30gz02t3yy.jpg"></p>
</li>
<li><p>如果不存在该文件，需要先生成，终端运行：<code>ssh-keygen -t rsa</code>,  就会生成公钥 <code>~/.ssh/id_rsa.pub</code> 以及密钥 <code>~/.ssh/id_rsa</code>啦。同样的，一直按Enter，不要设置passphrase。</p>
</li>
</ul>
</li>
</ul>
<p>Step2、在<strong>机器B</strong>添上本地的公钥</p>
<ul>
<li><p>登录远端服务器后，新建authorized_keys</p>
<pre><code>mkdir ~/.ssh
touch ~/.ssh/authorized_keys
</code></pre>
</li>
<li><p>将公钥贴进远端服务器的authorized_keys中</p>
<p>在A上运行：<code>cat ~/.ssh/id_rsa.pub</code>， 复制本机的公钥</p>
<p>回到B上，运行：<code>nano ~/.ssh/authorized_keys</code>, 把公钥贴进去</p>
</li>
<li><p>设置机器B上的文件权限</p>
<p>运行：</p>
<pre><code>chmod 700 ~/.ssh
chmod 644 ~/.ssh/authorized_keys
</code></pre>
<p>有的参考文档要求设置成600，试了下，644，600，保证owner是可读写可执行，而其他用户和群组的最大权限是可读即可。</p>
</li>
</ul>
<p>可以了！很简单是不是？试试看，退出重新登录下，不用敲密码啦！</p>
<h4 id="The-end"><a href="#The-end" class="headerlink" title="The end"></a>The end</h4><p> BTW，我之前的问题是passphrase没有设置为空，另外SSH文件复制时也出错，后面重新生成才解决的。</p>
<p>看了一些有关SSH免登录的操作说明，有一篇挺干货的。推荐：</p>
<p><a href="https://my.oschina.net/magicalSam/blog/1466144">Mac、Linux 上实现SSH免密码登陆到Linux服务器</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>单个Rails APP中多数据库的处理</title>
    <url>/posts/manage-multiple-database-in-a-single-rails-app/</url>
    <content><![CDATA[<p>学习 为Rails 配置外部数据库。</p>
<span id="more"></span> 

<h4 id="场景描述"><a href="#场景描述" class="headerlink" title="场景描述"></a>场景描述</h4><p>Rails中，有model user和 article，article与user的关系是一对多，现在需要针对每一个User，列出所有ta发布的文章，而 article的数据来源于另一个外部的数据库，比如 works 。</p>
<p>怎么处理？</p>
<p>用establish_connection。</p>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>拆解成两步：</p>
<ul>
<li>为外部数据库建配置文件</li>
<li>为model和外部数据库建立连接</li>
</ul>
<p>具体如下：</p>
<p>Step1、 新增文件<code>config/works_database.yml</code>，内容如下：</p>
<pre><code class="Iml"># using another database
default: &amp;default
  adapter: mysql2
  encoding: utf8
  username: root
  password:
  host: localhost
  pool: 5

development:
  &lt;&lt;: *default
  database: works_development

test:
  &lt;&lt;: *default
  database: works_test

production:
  &lt;&lt;: *default
  database: works_production
</code></pre>
<p>这里，假定数据库works_development是已经存在的，其实就是场景描述中的works数据库。</p>
<p>Step2、创建initializer去读取配置文件并存入环境变量中</p>
<p>在config/initializers/下，新增文件<code>works_database.rb</code>，内容如下：</p>
<pre><code>WORKS_DB = YAML.load_file(File.join(Rails.root.join(&#39;config&#39;,&#39;works_database.yml&#39;)))[Rails.env.to_s]
</code></pre>
<p>这样，我们外部数据库的配置信息就会存储在WORKS_DB中了。</p>
<p>Step3、 创建一个基类来处理数据库的连接</p>
<p>新建文件<code>app/models/works_database.rb</code>，放入以下内容：</p>
<pre><code class="Ruby">class WorksDatabase &lt; ApplicationRecord
  self.abstract_class = true
  establish_connection WORKS_DB
end
</code></pre>
<p>establish_connection是ActiveRecord::Base的一个类方法，由于WorksDatabase继承自ApplicationRecord，所以可以直接调用，它的作用就是用于连接数据库的。</p>
<p>Step4、 将需要连接到WORKS_DB的model都继承自WorksDatabase</p>
<p>修改<code>app/models/article.rb</code>：</p>
<pre><code class="Ruby">class Article &lt; WorksDatabase
  belongs_to :user
end
</code></pre>
<p>OK !</p>
<p>Step 3 和Step 4其实可以合并成一步，直接在<code>app/models/article.rb</code>中修改成如下：</p>
<pre><code class="Ruby">class Article &lt; ActiveRecord::Base
  belongs_to :user
  establish_connection WORKS_DB
end  
</code></pre>
<p>但是这种一般在只有一个或少数几个model需要用到外部数据库时使用的较多，当存在多个models的时候，则推荐用baseclass的方式，把establish_connection封装起来，其他类直接继承该基类即可。即遵守DRY原则。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="http://www.thegreatcodeadventure.com/managing-multiple-databases-in-a-single-rails-application/">Managing Multiple Databases in a Single Rails Application</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac更换用户名后丢失管理员权限</title>
    <url>/posts/mac-admin-recreate/</url>
    <content><![CDATA[<p>手贱的代价。</p>
<span id="more"></span> 

<h4 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h4><p>周末手贱，换了Mac的用户名，导致用户没有了root权限，点击<strong>系统偏好设置-用户与群组</strong> 下面的解锁按钮，会弹出窗口，要求输入 用户名和密码，输入后一直报错，显示管理员的账号和密码不正确。第一反应就是Google下，看到了一些解决方案，但又不敢乱折腾，于是跑去店里问了下工作人员，说是需要重装系统，因为没有预约，便被安排在那里等着，招待我的那个妹子说如果有客户取消预约，就让工程师来给我装，可想而知，这样的几率有多低，果然，等了很久都没有人，于是决定自己去Genius Bar 天才吧下个预约单先，看到了在线协助，试了试，按照工程师的步骤一步步来，惊喜的是，结局很完美。</p>
<p>记录下解决方法，以便他人参考，下次遇到就可以自己处理，不用去店里白白等啦。</p>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>三步即可：</p>
<ul>
<li><p>设备重启，启动时，按住“command + S”， 进入单一用户模式，会出现类似终端的界面，依次输入如下三个命令：</p>
<pre><code class="shell">/sbin/mount -uw
rm /var/db/.AppleSetupDone
reboot
</code></pre>
<p>随后电脑会重启，但也有可能不重启，我遇到的便是没有重启，要求输入用户登陆的密码，输入即可，随后设备自动重启了。如果一直没有重启，请手动重启。</p>
</li>
<li><p>创建一个新的管理员账号</p>
<p>reboot后，会进入类似于装机时的界面，让你选择语言和区域，这就是在创建一个新的管理员账号了，按照步骤走即可。</p>
</li>
<li><p>提升原来账号的权限为管理员</p>
<p>添加了新的管理员账号后，点击<strong>系统偏好设置</strong>-<strong>用户与群组</strong>，解开左下角的锁（使用新的管理员账号的密码），点击自己的用户账号，最后点击右侧的“<strong>允许用户管理这台电脑</strong>”。</p>
<p>OK！也可以直接删除掉自己的用户账号，用新的管理员账号。</p>
</li>
</ul>
<h4 id="后记："><a href="#后记：" class="headerlink" title="后记："></a>后记：</h4><p>没事不要瞎改用户名，没事不要瞎改用户名，没事不要瞎改用户名。</p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>travis CI：非node项目下指定node版本</title>
    <url>/posts/manage-travis-node-version/</url>
    <content><![CDATA[<p>在travis CI中配置指定版本的node。</p>
<span id="more"></span> 

<p>分两种情况：</p>
<h4 id="纯-node-js-项目"><a href="#纯-node-js-项目" class="headerlink" title="纯 node.js 项目"></a>纯 node.js 项目</h4><p>node是唯一的依赖，查看官网<a href="https://docs.travis-ci.com/user/languages/javascript-with-nodejs/">building a javascript and Node.js project</a>，在<code>.travis.yml</code>中添加：</p>
<pre><code class="yaml">language: node_js
node_js:
  - &quot;8&quot;
  - &quot;6&quot;
</code></pre>
<p>如果需要安装指定版本的nodejs，需要借助于<code>.nvmrc</code>，具体操作见官网，这里主要看非node项目下，如何配置指定版本的node。</p>
<h4 id="非node项目，项目中依赖node"><a href="#非node项目，项目中依赖node" class="headerlink" title="非node项目，项目中依赖node"></a>非node项目，项目中依赖node</h4><p>比如Rails项目，language为ruby，这时就不能使用上面的方式来设置。</p>
<p>那么如何设置？</p>
<p>在docs里面没有搜到，参考了这篇文章<a href="https://austinpray.com/ops/2015/09/20/change-travis-node-version.html">Travis CI: Node Version Management on Non-Node Projects</a>，搞定。</p>
<p>具体如下：</p>
<p>在<code>.travis.yml</code>中添加：</p>
<pre><code class="yaml">env:
  - TRAVIS_NODE_VERSION=&quot;8.12.0&quot;

install:
  - rm -rf ~/.nvm &amp;&amp; git clone https://github.com/creationix/nvm.git ~/.nvm &amp;&amp; (cd ~/.nvm &amp;&amp; git checkout `git describe --abbrev=0 --tags`) &amp;&amp; source ~/.nvm/nvm.sh &amp;&amp; nvm install $TRAVIS_NODE_VERSION
  - npm install
</code></pre>
<p>这里做了这么几件事：</p>
<ul>
<li>设置了环境变量TRAVIS_NODE_VERSION， 指定版本号，这里指定的是8.12.0。</li>
<li><code>rm -rf ~/.nvm</code> 删除服务器上原来的nvm</li>
<li><code>git clone https://github.com/creationix/nvm.git ~/.nvm</code>, 从GitHub上拉取nvm</li>
<li>cd ~/.nvm &amp;&amp; git checkout <code>git describe --abbrev=0 --tags</code>  切换到最新版的nvm</li>
<li>source ~/.nvm/nvm.sh  执行nvm.sh文件</li>
<li>nvm install $TRAVIS_NODE_VERSION 安装指定版本node</li>
</ul>
<p>OK。</p>
<p>后面老大给了更好的解决方法，附上：<br>在<code>.travis.yml</code>中添加：</p>
<pre><code class="yaml">env:
  - TRAVIS_NODE_VERSION=&quot;8.12.0&quot;

install:
  - nvm install TRAVIS_NODE_VERSION
  - nvm alias default TRAVIS_NODE_VERSION
  - npm install
</code></pre>
<p>果然，简单多了。不得不说，小白还有很长的路要走。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://austinpray.com/ops/2015/09/20/change-travis-node-version.html">Travis CI: Node Version Management on Non-Node Projects</a></p>
<p><a href="https://docs.travis-ci.com/user/languages/javascript-with-nodejs/">building a javascript and Node.js project</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>RSpec中的metadata</title>
    <url>/posts/metadata-in-RSpec/</url>
    <content><![CDATA[<p>之前看shared_context那块，对使用metadata来调用shared_context不是很理解，Google下相关文档，终于整明白了，记录下metadata的定义和使用。</p>
<span id="more"></span> 

<h4 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h4><p>官网上V3.8 的rspec-core中<a href="https://relishapp.com/rspec/rspec-core/v/3-8/docs/metadata">metadata</a>部分，含三部分current_example, described class, User-defined metadata，但是没有明确的定义metadata[也可能是我没找到……]。</p>
<p><a href="https://www.tutorialspoint.com/rspec/rspec_metadata.htm">tutorials point</a>针对metadata给到的定义：</p>
<pre><code>data about your describe, context and it blocks.
</code></pre>
<p><a href="https://pragprog.com/book/rspec3/effective-testing-with-rspec-3">Effective Testing with RSpec 3</a> 在chapter8中提到Metadata解决了RSpec中的一个特殊问题：</p>
<blockquote>
<p> Keep information about the context your specs are running in</p>
</blockquote>
<p>类似一个信息存储盒，里面存储了如下信息：</p>
<ul>
<li>Example configuration(for example, marked as skipped or pending)</li>
<li>Source code locations</li>
<li>Status of the previous run</li>
<li>How one example runs differently than others</li>
</ul>
<p>可以把metadata看成一个带着example group相关信息的hash对象。</p>
<p>Metadata中默认的keys包括：</p>
<blockquote>
<p> :description, :full_description, :described_class, :file_path, :example_group, :last_run_status ……..</p>
</blockquote>
<p>想要查看metadata的内容，需要通过当前的example来调用metadata这个method，而example对象的引用，可以通过 it, subject, let , before, after, around 后接block来获取。</p>
<p>看个简单的例子感受下。</p>
<p>安装Rspec后，在rails项目中随意跑一个example，比如：</p>
<pre><code class="ruby">## spec/metadata_spec.rb

require &#39;rails_helper&#39;

RSpec.describe :hash do
  it &quot;hello&quot; do |example|
    pp example.metadata
  end
end
</code></pre>
<p>执行后，输出如下结果：</p>
<pre><code class="ruby">&#123;:block=&gt;
  #&lt;Proc:0x007fcd83b1dc28@/Users/xxxx/xxx/spec/metadata_spec.rb:4&gt;,
 :description_args=&gt;[&quot;hello&quot;],
 :description=&gt;&quot;hello&quot;,
 :full_description=&gt;&quot;hash hello&quot;,
 :described_class=&gt;:hash,
 :file_path=&gt;&quot;./spec/metadata_spec.rb&quot;,
 :line_number=&gt;4,
 :location=&gt;&quot;./spec/metadata_spec.rb:4&quot;,
 :absolute_file_path=&gt;&quot;/Users/xxxx/xxx/spec/metadata_spec.rb&quot;,
 :rerun_file_path=&gt;&quot;./spec/metadata_spec.rb&quot;,
 :scoped_id=&gt;&quot;1:1&quot;,
 ...........
 :last_run_status=&gt;&quot;unknown&quot;&#125;
</code></pre>
<p>这里输出的都是metadata默认的内容，你也可以自定义metadata。</p>
<p>Rspec官网上举了一些例子，这里看一个简单的，给你的example加上tag fast：</p>
<pre><code class="ruby">## spec/metadata_spec.rb

require &#39;rails_helper&#39;

RSpec.describe :hash do
  it &quot;hello&quot;, fast: true do |example|
    pp example.metadata
  end
end

## 也可以写成it &quot;hello&quot;, :fast do  |example|, Rspec默认缺省的value为true
</code></pre>
<p>执行后，会发现输出结果中有<code>:fast=&gt;true</code>。</p>
<p>如果是在RSpec.describe中添加fast，则内嵌的所有example的metadata中都会带有<code>:fast=&gt;true</code>。</p>
<h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><p>通过metadata可以给example或者example group添加同样的metadata，这样执行时，可以选择执行匹配要求的example了，此外也可以将module批量include到指定的example group中【后面会提到】。</p>
<p>那么，如何实现批量添加呢？</p>
<p>使用Rspec的<a href="https://www.rubydoc.info/github/rspec/rspec-core/RSpec%2FCore%2FConfiguration:define_derived_metadata">config.define_derived_metadata</a>。</p>
<p>看两个场景：</p>
<ul>
<li>给某个目录下的所有example group都添加上同一个metadata</li>
<li>有条件地添加特定的metadata</li>
</ul>
<p><strong>指定目录下的所有example group都添加上同一个metadata</strong></p>
<p>用过Rspec都知道，所有spec/controllers下的文件，都不需要添加type: :controller 这个metadata，RSpec会给所有该目录下的example group默认添加上type: :controller,这个是怎么实现的呢？</p>
<p>像这样：</p>
<pre><code class="ruby">### spec/spec_helper.rb

RSpec.configure do |config|
  config.define_derived_metadata(file_path: /spec\/controllers/) do |meta|
    meta[:type] = :controller
  end
end
</code></pre>
<p>再比如：给spec/unit下的所有example group都添加上focus这个tag。</p>
<pre><code class="ruby">### spec/spec_helper.rb

RSpec.configure do |config|
  config.define_derived_metadata(file_path: /spec\/unit/) do |meta|
    meta[:focus] = true
  end
end
</code></pre>
<p><strong>有条件地添加特定的metadata</strong></p>
<p>这里看一个实用性的例子，有关<a href="https://relishapp.com/rspec/rspec-core/docs/expectation-framework-integration/aggregating-failures">aggregate_failures</a>【没用过aggregate_failures？参考部分附上了aggregate_failure的简单说明，可有助理解】。</p>
<p>要求除了已经添加aggregate_failures为false的example group，所有其他的example group都将aggregate_failure设置为true。</p>
<p>比如在clazz_a和clazz_b中，添加了aggregate_failures为false， 现在希望除了clazz_a和clazz_b外，其他都默认指定aggregate_failures为true。</p>
<pre><code class="ruby">### spec/models/clazz_a_spec.rb
RSpec.descirbe :clazz_a, aggregate_failures: false do
  context &quot;xxx&quot; do
    ......
  end
end

### spec/models/clazz_b_spec.rb
RSpec.descirbe :clazz_b, aggregate_failures: false do
  context &quot;xxx&quot; do
    ......
  end
end
</code></pre>
<p>实现的方式也很简单：</p>
<pre><code class="ruby">### spec/spec_helper.rb

RSpec.configure do |config|
  config.define_derived_metadata do |meta|
    meta[:aggregate_failures] = true unless meta.key?(:aggregate_failures)
  end
end
</code></pre>
<p>如果example group中已经添加了aggregate_failures，则pass，否则添加aggregate_failures为true。</p>
<p>Cool!</p>
<h4 id="back-to-shared-context"><a href="#back-to-shared-context" class="headerlink" title="back to shared_context"></a>back to shared_context</h4><p>回到之前困惑的shared_context 中。</p>
<p>我们知道，通过使用include_context “xxx” 可以调用定义的shared_context，同样，也可以通过给example添加metadata来调用。</p>
<p>比如：</p>
<pre><code class="ruby">#### spec/support/shared_stuff.rb

RSpec.shared_context &quot;shared stuff&quot; do
  let(:h) &#123; &#123; :hello =&gt; &quot;world&quot; &#125; &#125; ## 没啥意义的context，仅仅用来举例
end
RSpec.configure do |config|
  config.include_context &quot;shared stuff&quot;, include_shared: true
end
</code></pre>
<p>使用时，只要给example group添加上<code>include_shared: true</code>这个metadata即可, 效果等同于调用了<code>include_context &quot;shared stuff&quot;</code>。</p>
<pre><code class="ruby">#### spec/shared_stuff_example.rb

require &#39;rails_helper&#39;
require &quot;support/shared_stuff.rb&quot;

RSpec.describe &quot;this is an example&quot;, :include_shared do
  it &#123; expect(h[:hello]).to eq &quot;world&quot; &#125;
end
</code></pre>
<p>执行，pass。</p>
<p>上面的例子，可以理解为所有添加了<code>include_shared： true</code>的example group 都执行了<code>include_context &quot;shared stuff&quot;</code> ,事实上，确实如此。</p>
<p>再看一个更常见的例子：</p>
<p>我们在一个module Signin中定义了一些实现不同用户登录的methods【比如sgin_in_admin, sign_in_guest……】，现在希望在spec/controller下的所有example group中都可以调用这些method的。</p>
<p>使用metadata可以这样实现：</p>
<pre><code class="ruby">### spec/support/sign_in.rb

module SignIn
  ..... ### methods
end

RSpec.configure do |config|
  config.include SignIn, type: :controller
end
</code></pre>
<p>这样，所有metadata中type为controller的example group便都会执行<code>include SignIn</code>了。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://relishapp.com/rspec/rspec-core/docs/metadata">Rspec core metadata</a></p>
<p><a href="https://relishapp.com/rspec/rspec-core/docs/example-groups/shared-context">Rspec core shared context</a></p>
<p><a href="https://pragprog.com/book/rspec3/effective-testing-with-rspec-3">Effective Testing with RSpec 3</a></p>
<p>附：</p>
<p>这里简单说明下aggregate_failure是干嘛用的。常规情况下，当执行一组exceptions时，在执行到第一个失败的exception后程序就跳出这个example了，不会继续执行后面的exception，直接开始执行下一个example，而通过aggregate_failure，程序会执行完该组所有的exceptions，然后列出所有failures的exceptions，再去执行下一个example。</p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>RSpec</tag>
      </tags>
  </entry>
  <entry>
    <title>STI数据迁移之self.inheritance_column</title>
    <url>/posts/migrate-on-sti/</url>
    <content><![CDATA[<p>数据迁移中遇到的一个问题。</p>
<span id="more"></span> 

<h4 id="场景："><a href="#场景：" class="headerlink" title="场景："></a>场景：</h4><p>看个例子：</p>
<pre><code class="ruby">### app/models/company.rb
class Company &lt; ActiveRecord::Base
  ……
end

### app/models/firm.rb
class Firm &lt; Company
  ……
end
</code></pre>
<p>在company中，有一个字段type，按照惯例，会开启单表继承STI功能，Firm不再只是Company的一个普通的子类subclass，它与Company共享着同一个表单。</p>
<p>这时，需要给company添加了一个attribute，比如 creator，同时迁移数据，firm中的creator内容，需要单独调用form中的方法get_creator：</p>
<pre><code class="ruby">class AddCreatorToCompanies &lt; ActiveRecord::Migration[5.2]
  class Company &lt; ActiveRecord::Base; end

  def change
    add_column :companies, :creator, :string

    Comany.where(type: &quot;Firm&quot;).find_each do |firm|
      firm.update(creator: firm.get_creator)
    end
  end
end
</code></pre>
<p>执行时，终端报错，显示：</p>
<pre><code>Invalid single-table inheritance type: Firm is not a subclass of AddCreatorToCompanies::Company.
</code></pre>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>在Company中添加  <strong>self.inheritance_column</strong>，触发单表继承STI。</p>
<pre><code class="ruby">class AddCreatorToComanies &lt; ActiveRecord::Migration[5.2]
  class Company &lt; ActiveRecord::Base
    self.inheritance_column = &quot;_type&quot;
  end

  def change
    add_column :companies, :creator, :string
    ……
  end
end
</code></pre>
<p>再次执行即可。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://api.rubyonrails.org/classes/ActiveRecord/Inheritance.html">Single table inheritance</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
      </tags>
  </entry>
  <entry>
    <title>Ruby中Array 的一些常用方法</title>
    <url>/posts/methods-of-Array-in-Ruby/</url>
    <content><![CDATA[<p>工作中常常要处理Array，索性把ruby 中Array的一些常用方法小结一下，加深印象。</p>
<span id="more"></span> 

<p>先来看看Array中除去继承自Object之外的，有多少public methods</p>
<pre><code class="Ruby">(Array.instance_methods - Object.instance_methods).count
# 输出:
120
# ruby版本为 2.3.1
</code></pre>
<h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><ul>
<li><p>建立空数组：</p>
<pre><code class="Ruby">[]
Array.new
</code></pre>
</li>
<li><p>使用%w, %i 创建非空数组</p>
<p><strong>创建不包含空白的字符串数组，可用%w</strong></p>
<pre><code class="Ruby">%w(Ruby Python Scheme)
# 输出:
[&quot;Ruby&quot;, &quot;Python&quot;, &quot;Scheme&quot;]
</code></pre>
<p><strong>创建元素为符号的数组，可用%i</strong></p>
<pre><code class="Ruby">%i(Ruby Python Scheme)
# 输出:
[:Ruby, :Python, :Scheme]
</code></pre>
</li>
<li><p>数组的大小</p>
<pre><code class="Ruby">[4, 8, 15, 16, 23, 42].count
[4, 8, 15, 16, 23, 42].size
[4, 8, 15, 16, 23, 42].length
# 输出:
6
6
6
</code></pre>
</li>
<li><p>将string转化为array</p>
<p> split</p>
<pre><code class="Ruby">&quot;a, b, c, d&quot;.split(&quot;, &quot;)
# 输出:
[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]
</code></pre>
</li>
<li><p>将array转化为string</p>
<p>join</p>
<pre><code class="Ruby">[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;].join(&quot;, &quot;)
# 输出:
&quot;a, b, c, d&quot;
</code></pre>
</li>
<li><p>将hash 转化为array</p>
<p>to_a</p>
<pre><code class="Ruby">table = &#123;:&quot;color1&quot; =&gt; &quot;blue&quot;, :&quot;color2&quot; =&gt; &quot;red&quot;&#125;
table.to_a
# 输出:
[[:color1, &quot;blue&quot;], [:color2, &quot;red&quot;]]

table.to_a.flatten
# 输出:
[:color1, &quot;blue&quot;, :color2, &quot;red&quot;]
</code></pre>
</li>
<li><p>在数组中提取元素</p>
<p>index从0开始，index为正时，从array的第一个元素开始，index为负时，从最后一个元素开始</p>
<pre><code class="Ruby">[1, 2, 3, 4, 5][2]
# 输出:
3

[1, 2, 3, 4, 5][-1]
# 输出:
5
</code></pre>
</li>
<li><p>给数组添加元素</p>
<p>在尾部添加&lt;&lt;  or push</p>
<pre><code class="Ruby">[1, 2, 3, 4, 5] &lt;&lt; &quot;woot&quot;
# 输出: [1, 2, 3, 4, 5, &quot;woot&quot;]

[1, 2, 3, 4, 5].push(&quot;woot&quot;)
# 输出: [1, 2, 3, 4, 5, &quot;woot&quot;]
</code></pre>
<p>在开头添加 unshift</p>
<pre><code class="Ruby">[1, 2, 3, 4, 5].unshift(0)
# 输出:
[0, 1, 2, 3, 4, 5]
</code></pre>
</li>
<li><p>连接数组concat ／ +</p>
<pre><code class="Ruby">[1, 2, 3, 4, 5].concat([6, 7])
# 输出:
[1, 2, 3, 4, 5, 6, 7]

[1, 2, 3, 4, 5] + [6, 7]
# 输出:
[1, 2, 3, 4, 5, 6, 7]
</code></pre>
</li>
<li><p>数组转换map, collect</p>
<pre><code class="Ruby">[1, 2, 3, 4, 5].map &#123;|x| x * 3&#125;
# 输出:
[3, 6, 9, 12, 15]

[1, 2, 3, 4, 5].collect &#123;|x| x + 2 &#125;
# 输出:
[3, 4, 5, 6, 7]
</code></pre>
</li>
<li><p>获取分散的数组values_at</p>
<pre><code class="Ruby">[1,2,3,4,5,6].values_at(1,2,4)
# 输出:
[2, 3, 5]
</code></pre>
</li>
<li><p>筛选特定的元素 select</p>
<pre><code class="Ruby">[1,2,3,4,5,6].select &#123;|number| number % 2 == 0&#125;
# 输出:
[2, 4, 6]
</code></pre>
</li>
<li><p>删除元素 delete</p>
<pre><code class="Ruby">a = [1,3,5,4,6,7]
a.delete(5) # 注意这里delete的参数是元素，不是index
# 输出:
5

a
# 输出:
[1, 3, 4, 6, 7]
</code></pre>
<p>删除指定index的元素delete_at 【破坏性修改】</p>
<pre><code class="Ruby">a = [1,3,5,4,6,7]
a.delete_at(5)
# 输出:
7

a
# 输出:
[1,3,5,4,6]
</code></pre>
<p>删除符合要求的delete_if【破坏性修改】, reject</p>
<pre><code class="Ruby">[1,2,3,4,5,6,7,8,9].delete_if&#123;|x| x % 2 == 0&#125;
# 输出:
[1, 3, 5, 7, 9]

[1,2,3,4,5,6,7,8,9].reject&#123;|x| x % 2 == 0&#125;
# 输出:
[1, 3, 5, 7, 9]
</code></pre>
<p>删除所有nil元素compact</p>
<pre><code class="Ruby">a = [nil, 4, nil, 8, 15, 16, nil, 23, 42, nil]
a.compact
# 输出:
[4, 8, 15, 16, 23, 42]
</code></pre>
<p>删除指定部分slice</p>
<pre><code class="Ruby">a = [1,3,5,4,6,7]
a.slice(1,2)
# 输出:
[3, 5]

a.slice!(1,2)
# 输出:
[3, 5]

a
# 输出:
[1, 4, 6, 7]
</code></pre>
<p>删除第X个元素shift, 默认是第一个【破坏性修改】</p>
<pre><code class="Ruby">a = [1,2,3,4,5,6,7,8,9]
a.shift
# 输出:
1

a
# 输出:
[2, 3, 4, 5, 6, 7, 8, 9]

a.shift(2)
# 输出:
[2, 3]

a
# 输出:
[ 4, 5, 6, 7, 8, 9]
</code></pre>
<p>删除最后X个元素pop ，默认是最后一个【破坏性修改】</p>
<pre><code class="Ruby">a = [1,2,3,4,5,6,7,8,9]
a.pop
# 输出:
9

a
# 输出:
[1,2,3,4,5,6,7,8]

a.pop(3)
# 输出:
[6,7,8]

a
# 输出:
[1,2,3,4,5]
</code></pre>
<p>ruby中method后面带有！符号的都是具有破坏性的修改, 但是那些没有带！尾巴的也不是那么友好，比如上面的shift， pop。 那么可有办法保护我们的array？有滴，上freeze</p>
<p>freeze可以禁止具有破坏性的方法来修改对象。</p>
<pre><code class="Ruby">a = [1,2,3,4,5,6,7,8,9]
a.freeze
a.pop
# 输出:
# can&#39;t modify frozen Array

a
# 输出:
[1,2,3,4,5,6,7,8,9]
</code></pre>
</li>
<li><p>去除重复元素uniq</p>
<pre><code class="Ruby">a = [1,3,5,4,6,7,1,3,7]
a.uniq
# 输出:
[1, 3, 5, 4, 6, 7]
</code></pre>
</li>
<li><p>平坦化数组flatten</p>
<p>前面出现过，再多看些例子：</p>
<pre><code class="Ruby">[4, [8], [15], [16, [23, 42]]].flatten
# 输出:
[4, 8, 15, 16, 23, 42]
</code></pre>
<p>不传递参数时，默认是完全平坦化，传递参数，则平坦化层级X，例如：</p>
<pre><code class="Ruby">[4, [8], [15], [16, [23, [42, 43]]]].flatten(1)
# 输出:
[4, 8, 15, 16, [23, [42, 43]]]

[4, [8], [15], [16, [23, [42, 43]]]].flatten(2)
# 输出:
[4, 8, 15, 16, 23, [42, 43]]

[4, [8], [15], [16, [23, [42, 43]]]].flatten(3)
# 输出:
 [4, 8, 15, 16, 23, 42, 43]
</code></pre>
</li>
<li><p>获取某个元素的出现次数count</p>
<p>count前面已经出现过，用于计算数组的长度，不带参数，如果传递参数给到count，则返回该元素在数组中出现的次数。</p>
<pre><code class="Ruby">[42, 8, 15, 16, 23, 42].count(42)
# 输出:
2
</code></pre>
</li>
<li><p>排序sort</p>
<pre><code class="Ruby">a = [1, 3, 5, 4, 6, 7]
a.sort
# 输出:
 [1, 3, 4, 5, 6, 7]
</code></pre>
<p>使用块来指定排序规则：</p>
<pre><code class="Ruby">a = [&quot;ruby&quot;, &quot;python&quot;, &quot;C&quot;, &quot;C++&quot;, &quot;java&quot;]
a.sort
# 输出:
[&quot;C&quot;, &quot;C++&quot;, &quot;java&quot;, &quot;python&quot;, &quot;ruby&quot;]    # 默认按照首字母排序

a.sort &#123;|a, b| a.length &lt;=&gt; b.length&#125;
# 输出:
[&quot;C&quot;, &quot;C++&quot;, &quot;ruby&quot;, &quot;java&quot;, &quot;python&quot;]   # 按照字符长度来排序
</code></pre>
<p>同样的，sort！方法具有破坏性。</p>
<h4 id="The-End"><a href="#The-End" class="headerlink" title="The End"></a>The End</h4><p>先整这么多，用到新的再补上，嘿哈</p>
</li>
</ul>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>有关Array中元素的移位问题</title>
    <url>/posts/move-elements-in-array/</url>
    <content><![CDATA[<p>周五遇到的一个元素移位问题，最后老大很漂亮地解决了，现在回头看，觉得很有必要记录下。</p>
<span id="more"></span> 

<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>场景类似这样：</p>
<p>给到一个数组A，数组B，B是A中连续几个元素的无序组合，比如 A= [2, 4, 5, 1, 9, 0]， B= [5, 9, 1]，B是A中5，1，9 这三个连续的值无序组合成的， 现在需要生成一个新的数组，将B在A中原先的对应元素5，1， 9位置前移或者后移。</p>
<p>比如前移一个，生成[2, 5, 1, 9, 4, 0]，后移一个，生成[2, 4,  0, 5, 1, 9]，如果5已经是第一个元素，则不做前移，9如果是最后一个元素，则不做后移。</p>
<p>这里有一个前提条件，A中没有重复的元素，也就是A.uniq == A 。</p>
<h4 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h4><p>解决思路如下：【盗用下老大的思路：P】</p>
<p>遍历A中的元素，如果该元素属于B，则塞进一个新的数组中，不属于B，则单独生成一个单一元素的数组，然后把这些生成的新数组组合起来，最后生成一个大的数组，这个内嵌数组的大数组长这样：[[2], [4], [5, 1, 9], [0]]， 这样只需要针对大数组进行元素互换即可。</p>
<p>我这表达可能还不够清晰，看代码实现吧！</p>
<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>定义一个method reorder，这里我们用step来表示移位，step为正，则向前移动step步，step为负，则向后移动step步，有关参数部分的检验，这里略去。</p>
<pre><code class="ruby">def reorder(current, part ,step)
  order_index = nil
  new_order = []
  current.each do |item|
    if part.include?(item)
      if order_index
        new_order[order_index] &lt;&lt; item
      else
        new_order &lt;&lt; [item]
        order_index = new_order.count - 1
      end
    else
      new_order &lt;&lt; [item]
    end
  end

  new_index = order_index + step

  if new_index &gt;= 0 &amp;&amp; new_index &lt; current.count
    new_order[order_index], new_order[new_index] = new_order[new_index], new_order[order_index]
  end
  new_order.flatten!
end
</code></pre>
<p>基本跟思路走的。</p>
<p>用一两个例子测试一下：</p>
<pre><code class="ruby">a = [65, 34, 47, 29, 72, 74, 15, 52, 90, 23, 31, 56, 89, 3, 85, 55, 57, 27, 20]

b1 = [90, 23, 31, 15, 52]
b2 = [57]
b3 = [65]
b4 = [20]

p reorder(a, b1, 2)

=&gt; [65, 34, 47, 29, 15, 52, 90, 23, 31, 72, 74, 56, 89, 3, 85, 55, 57, 27, 20]

p reorder(a, b2, -2)

=&gt; [65, 34, 47, 29, 72, 74, 15, 52, 90, 23, 31, 56, 89, 3, 85, 55, 27, 20, 57]

p reorder(a, b3, 1)

=&gt; [65, 34, 47, 29, 72, 74, 15, 52, 90, 23, 31, 56, 89, 3, 85, 55, 57, 27, 20]

p reorder(a, b4, -1)

=&gt; [65, 34, 47, 29, 72, 74, 15, 52, 90, 23, 31, 56, 89, 3, 85, 55, 57, 27, 20]
</code></pre>
<p>b1是a中[15, 52, 90, 23, 31]这5个元素无序组合而成，reorder(a, b1, 2) ，则需要将这5个元素往前移动两位，通过最后生成的新数组，可以看到确实移动了两位，15前面的72，74都移动到了31的后面。</p>
<p>b2是含单一元素的数组，一样适用。</p>
<p>b3, b4是特例，分别是a的第一个和最后一个元素，第一个元素无法向前移动一位，最后一个元素也无法向后移动一位，所以生成的new_order与a一样。</p>
<p>OK！</p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue中嵌套slot的使用</title>
    <url>/posts/nested-slot-usage/</url>
    <content><![CDATA[<p>源于工作中一次组件的重构，这里重新写一个例子来练习下嵌套 slot 的使用。</p>
<span id="more"></span> 

<p>嵌套 slot 需要使用到 v-slot 命令，使用该命令需要确保Vue 版本为 2.6.0 +。</p>
<p>完整的代码可见：<a href="https://gist.github.com/Lupeipei/6175463e9c36eac662ec8261ae969963">TodoExamples</a>.</p>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><h5 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h5><p>现有一个 ToDoList 组件，其子组件 ToDoItem， 组件内容分别如下：</p>
<pre><code class="vue">&lt;!-- ToDoItem.vue --&gt;

&lt;template&gt;
  &lt;li&gt;
    &lt;span class=&quot;text-muted mr-1&quot;&gt;&#123;&#123; item.id &#125;&#125;.&lt;/span&gt; &#123;&#123; item.title &#125;&#125;
  &lt;/li&gt;
&lt;/template&gt;

&lt;script&gt;
export default &#123;
  props: [ &#39;item&#39; ]
&#125;
&lt;/script&gt;

&lt;!-- ToDoList.vue --&gt;

&lt;template&gt;
  &lt;ul&gt;
    &lt;ToDoItem v-for=&quot;item in items&quot; :key=&quot;item.id&quot; :item=&quot;item&quot; /&gt;
  &lt;/ul&gt;
&lt;/template&gt;

&lt;script&gt;
import ToDoItem from &#39;./ToDoItem&#39;

export default &#123;
  components: &#123; ToDoItem &#125;,
  props: [ &#39;items&#39; ]
&#125;
&lt;/script&gt;
</code></pre>
<p>在 schedule 中调用 ToDoList 组件：</p>
<pre><code class="vue">&lt;!-- schedule.vue --&gt;

&lt;template&gt;
  &lt;div class=&quot;container&quot;&gt;
    &lt;div class=&quot;row&quot;&gt;
      &lt;div class=&quot;col-md-6 offset-md-3&quot;&gt;
        &lt;ToDoList :items=&quot;items&quot; /&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
import ToDoList from &#39;~/components/ToDoList&#39;
import _ from &#39;lodash&#39;

export default &#123;
  components: &#123; ToDoList &#125;,
  data() &#123;
    return &#123;
      items: [
        &#123; id: 1, title: &#39;todo item 1&#39; &#125;,
        &#123; id: 2, title: &#39;todo item 2&#39; &#125;,
        &#123; id: 3, title: &#39;todo item 3&#39; &#125;,
        &#123; id: 4, title: &#39;todo item 4&#39; &#125;
      ],
      finished: [ 4, 2 ]
    &#125;
  &#125;
&#125;
&lt;/script&gt;
</code></pre>
<p>页面效果如下：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79ly1g2fosn7ml9j314u0fm3yz.jpg"></p>
<p>在 schedule 中，有一个数组 finished，里面存放了已经完成的 item 的 ID，现在需要在已经完成的 item 后打上☑️。</p>
<p>实现如下效果：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79ly1g2fouo0ugpj30ug0fcmxk.jpg"></p>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>要实现上述效果，有多个方法，这里采用嵌套 slot 的方式来解决。</p>
<p>主要思路：通过在 slot 上绑定属性， 让 schedule 层可以访问到 ToDoItem 中的 item，然后通过判断 item 是否在 finished 中出现，决定是否将☑️插入到组件 ToDoItem 中。</p>
<p>具体操作如下：</p>
<ul>
<li><p>给ToDoItem 添加具名插槽 after，同时将组件中的 item 作为 slot 的一个特性绑定上去：</p>
<p>【将 item 绑定在 slot 上，是为了让父级组件 ToDoList 中的插槽可以访问到该组件中的 item】</p>
<pre><code class="vue">&lt;!-- ToDoItem.vue --&gt;

&lt;template&gt;
  &lt;li&gt;
    &lt;span class=&quot;text-muted mr-1&quot;&gt;&#123;&#123; item.id &#125;&#125;.&lt;/span&gt; &#123;&#123; item.title &#125;&#125;
    &lt;slot name=&quot;after&quot; :item=&quot;item&quot; /&gt;
  &lt;/li&gt;
&lt;/template&gt;

&lt;script&gt;
export default &#123;
  props: [ &#39;item&#39; ]
&#125;
&lt;/script&gt;
</code></pre>
</li>
<li><p>在 ToDoList 组件中，引用 ToDoItem 的地方，嵌套 slot，修改 <code>ToDoList.vue</code> 如下：</p>
<pre><code class="vue">&lt;!-- ToDoList.vue --&gt;

&lt;template&gt;
  &lt;ul&gt;
    &lt;ToDoItem v-for=&quot;item in items&quot; :key=&quot;item.id&quot; :item=&quot;item&quot;&gt;
      &lt;template v-slot:after=&quot;&#123; item &#125;&quot;&gt;
        &lt;slot name=&quot;todo-item-after&quot; :item=&quot;item&quot; /&gt;
      &lt;/template&gt;
    &lt;/ToDoItem&gt;
  &lt;/ul&gt;
&lt;/template&gt;

&lt;script&gt;
import ToDoItem from &#39;./ToDoItem&#39;

export default &#123;
  components: &#123; ToDoItem &#125;,
  props: [ &#39;items&#39; ]
&#125;
&lt;/script&gt;
</code></pre>
<p>这里给 ToDoList 添加了一个具名插槽：todo-item-after，同时将 子组件 ToDoItem 中的具名插槽 after 所绑定的特性 item 绑定到 todo-item-after 上，这样外层的 schedule 就可以访问到 ToDoItem 中的 item了。</p>
</li>
<li><p>修改 <code>schedule.vue</code>，添加函数 isFinished 用于判断是否需要显示☑️：</p>
<pre><code class="vue">&lt;!-- schedule.vue --&gt;

&lt;template&gt;
  &lt;div class=&quot;container&quot;&gt;
    &lt;div class=&quot;row&quot;&gt;
      &lt;div class=&quot;col-md-6 offset-md-3&quot;&gt;
        &lt;ToDoList :items=&quot;items&quot;&gt;
          &lt;template v-slot:todo-item-after=&quot;&#123; item &#125;&quot;&gt;
            &lt;i v-if=&quot;isFinished(item)&quot; class=&quot;fas fa-check&quot; /&gt;
          &lt;/template&gt;
        &lt;/ToDoList&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
import ToDoList from &#39;~/components/ToDoList&#39;
import _ from &#39;lodash&#39;

export default &#123;
  components: &#123; ToDoList &#125;,
  data() &#123;
    return &#123;
      items: [
        &#123; id: 1, title: &#39;todo item 1&#39; &#125;,
        &#123; id: 2, title: &#39;todo item 2&#39; &#125;,
        &#123; id: 3, title: &#39;todo item 3&#39; &#125;,
        &#123; id: 4, title: &#39;todo item 4&#39; &#125;
      ],
      finished: [ 4, 2 ]
    &#125;
  &#125;,
  methods: &#123;
    isFinished(item) &#123;
      return _.includes(this.finished, item.id)
    &#125;
  &#125;
&#125;
&lt;/script&gt;
</code></pre>
<p>如此，便完成了。</p>
</li>
</ul>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://cn.vuejs.org/v2/guide/components-slots.html">插槽</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>无条件</title>
    <url>/posts/no-condition/</url>
    <content><![CDATA[<p>谢谢侬。</p>
<span id="more"></span>

<p>年末的时候，网易云一年一度的听歌报告，显示我的年度歌手是陈奕迅，看着这报告，心里笑着：嗯，年年都是你，以后也是你……</p>
<p>突然就想写点有关陈医生的东西。</p>
<p>人真是奇怪的动物。</p>
<p>大学时代的我，还处在无法理解为什么会有人喜欢陈奕迅的阶段，觉得真的是奇葩，那感觉大概就好像我姑姑后来知道我竟然喜欢陈奕迅时，满脸写着匪夷所思一般。那时候《浮夸》很火，常常一个不经意，在操场，或宿舍，或教室，你总能听到一两首他的歌，而当时的我，只觉得就像是一个疯子在嘶吼，毫无美感可言。</p>
<p>哪料到日后会生生打脸。</p>
<p>不过好玩的是，带我入坑的第一首粤语歌，并不是Eason的作品，而是张学友翻唱的那首《小城大事》。</p>
<p>毕竟，那时啃着苹果开演唱会的他，随意自然，实在是不得不让人印象深刻。</p>
<p>被歌神的声音迷倒后，果断开始听学友的歌，那时H也正好在听，便给我推荐了好几首，可惜听了好些，总觉得哪里不对劲，然后就想着，粤语里面唱歌最牛逼的，除了学友，还有谁？哦，陈奕迅！</p>
<p>从此，歌单里便是满满的陈胖子。</p>
<p>当时得知我开始听陈医生，H一脸不屑，说她早已过了听陈医生的年纪。哎，没法子，我一直都这么后知后觉：P</p>
<p>后面的事便很自然了。</p>
<p>去看的第一场演唱会，是陈医生的。当时 T 还笑称我叛变，连360度无死角的力宏都不爱了。</p>
<p>我还记得那次提前到场，看到很多Eason粉，其中有一个妹子，酷酷的，穿着一件大大的白T恤，背面印着“若你喜欢怪人，其实我很美“。嗯，有人拍照时，妹子记得插袋。</p>
<p>也是在那个时候，突然想学吉他，想唱Eason的歌，恰好那时同事里有一位广东的小姐姐，便厚着脸皮央求她一句句教我《沙龙》里面那些词的发音。</p>
<p>可惜最后辜负了小姐姐的一番用心，歌倒是会唱了，发音还是一言难尽 ：P</p>
<p>也还记得当时认识的M，土生土长的广东人，初中开始弹吉他，算半个老吉他手，可惜迷的不是Eason，而是邓紫棋，现在想来，印象深刻的还是那首自弹自唱的《泡沫》， H有段时间总说这首歌听得人心疼。</p>
<p>听陈医生后，开始慢慢接触很多其他的粤语歌手，然后也开始喜欢听杨千嬅，也会去八卦这两人的故事，会去关注林夕，像其他吃瓜群众一样感慨着为何痴情总是被辜负，也会听着《陀飞轮》被黄伟文的填词惊艳到……</p>
<p>不过严格来说，现在的我应该都不算是陈胖子的粉，至少不是铁粉，没有了去看演唱会的欲望，也没有买唱片的冲动，只是单纯地，偶尔想听听他的歌而已，不过这偶尔的频率有些高罢了。</p>
<p>呃，写着写着词穷了。</p>
<p>对乐理一窍不通的我，好像除了说他的歌好听之外，也找不到其他的词来赞美了。</p>
<p>但还是会听很久很久，算半个粉了。</p>
<p>想起那首《歌颂》。</p>
<p>感谢世上总有歌，把心境道破。</p>
]]></content>
      <categories>
        <category>Music</category>
      </categories>
      <tags>
        <tag>Music</tag>
      </tags>
  </entry>
  <entry>
    <title>读《10倍写作术》</title>
    <url>/posts/notes-of-10-times-writing-techniques/</url>
    <content><![CDATA[<p>一位日本自由撰稿人写的关于如何快速写商务类, 实用性文章的指南.</p>
<span id="more"></span>

<p>读完就一个感觉. 我可以弃坑, 把这个时间用来刷《半泽直树》的……</p>
<p>但书中某些方法还是可以参考的. 整本书脉络也很清晰, 所以规规矩矩整理了下要点, 梳理了下.</p>
<p>素材写作速成五步曲：</p>
<ul>
<li>确定写作目的和读者</li>
<li>搜集素材</li>
<li>组织素材</li>
<li>一口气写完</li>
<li>推敲, 修改</li>
</ul>
<h4 id="弄清写作理由"><a href="#弄清写作理由" class="headerlink" title="弄清写作理由"></a>弄清写作理由</h4><p><strong>从表面目的中挖掘出真正目的.</strong></p>
<p>一定要养成在收集素材之前, 确认文章的真正写作目的的习惯.</p>
<p>找到写作的真正目的, 然后收集正确的素材.</p>
<p>比如: 希望这篇文章的读者感受到什么</p>
<h4 id="确定读者群"><a href="#确定读者群" class="headerlink" title="确定读者群"></a>确定读者群</h4><p>确定文章的读者是谁, 不选偏题的素材</p>
<p>如果无法确定读者, 比如博客, 宣传文案, 如何定位?</p>
<p>选择你希望来读的那个人, 想象他/她会喜欢的素材.</p>
<ul>
<li>我想把这件事告诉他/她</li>
<li>那家伙肯定想知道这个</li>
</ul>
<p><strong>提前设定特别的读者</strong>, 是为了不会选择离题的素材.</p>
<p>写出面向任意读者的”有趣”文章</p>
<blockquote>
<p>了解目标群体感兴趣的内容, 比如去大型的网络新闻门户上, 找到与自己的目标读者相一致的报道, 读一读, 了解目标群体, 然后选取读者更感兴趣的素材. [但是感觉这类, 有些不靠谱, 如果你想要的是高质量的读者群, 应当去读这些人会去读的文章]</p>
</blockquote>
<p>值得一提的是, 写作时, 作者本身也是被观察的对象.</p>
<h4 id="收集素材"><a href="#收集素材" class="headerlink" title="收集素材"></a>收集素材</h4><p>花大量时间收集大量素材</p>
<p>对于突然浮现在脑海的素材, 一定要毫无遗漏地 真实地记录下来. , 因为健忘是人类的本能,</p>
<p>笔记不限于看到的, 听到的东西, 调用触觉, 嗅觉, 味觉等, 最大限度地获取信息.</p>
<p>记录自己的体验, 内心的感受和见解. 因为自己的感觉, 也是素材的一种.</p>
<p>有些素材早已经在大脑中悄悄储存,  通过运动,跑步, 让大脑放松的方式, 比如闲聊来引出素材.</p>
<p>通过联想, 将素材和素材之间建立关联.</p>
<p>让别人采访自己, 也是很好的收集素材的方法.</p>
<h4 id="配置素材"><a href="#配置素材" class="headerlink" title="配置素材"></a>配置素材</h4><p>可视化收集的素材.</p>
<p>通过想象读者和你面对面, 将主旨直接传递给他, 来确定素材的顺序.</p>
<p>开头要能吸引人.</p>
<p>收尾的时候, 写出/重申结论即可.</p>
<h4 id="执笔一气呵成"><a href="#执笔一气呵成" class="headerlink" title="执笔一气呵成"></a>执笔一气呵成</h4><p>多写, 然后删减, 遇到不确定的, 先不要去查询, 继续写, 写完修改优化.</p>
<p>让文章流畅易读的要点:</p>
<ul>
<li>缩短句子</li>
<li>注意节奏感</li>
<li>使用引号强调重点</li>
<li>减少不必要的连接词</li>
<li>用转接词来展开 [呼应节奏感]</li>
<li>尽量使用简单易懂的词语 [说人话]</li>
<li>真实 [没人喜欢塑料花]</li>
</ul>
<p>阅读好的文章, 学习好文章如何把握节奏, 一口气顺畅读完.</p>
<h4 id="推敲"><a href="#推敲" class="headerlink" title="推敲"></a>推敲</h4><p>提前动笔写, 可以留出充足的时间来提高初稿的质量.</p>
<p>完成初稿后, 缓一缓, 哪怕等一杯咖啡的时间, 也可以客观冷静地审读.</p>
<p>推敲的两个要点:</p>
<ul>
<li>文章通顺易读</li>
<li>文章清晰易懂</li>
</ul>
<p>检查整理逻辑与素材配置是否合适, 调整文章节奏, 检查错别字.</p>
<p>以”读者一无所知”为写作前提, 容易写出清晰易懂的文章, [感觉还是要看具体的读者群]</p>
<p>彻底消除”文章晦涩难懂”的方法:</p>
<blockquote>
<p><strong>尽量不使用形容词, 而是将目光转移向素材, 写出想用形容词表达的具体内容</strong>.</p>
<p>比如:</p>
<p>今天开心 =&gt; 为什么开心? 因为什么事情开心? =&gt; 吃便当, 一个饭团掉到地上, 滚到草丛里, 好搞笑.</p>
</blockquote>
<h4 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h4><p>一边看素材, 一边总结素材枝干的方法, 找出汇总”叶”的”枝干”, 梳理出文章的整体架构.</p>
<p>有意识地强调素材.</p>
<p>删减文章的正确姿势:</p>
<blockquote>
<p> 审视读者和目的, 根据素材的重要性, 进行删减.</p>
</blockquote>
<p>作者如何五天完成一本书:</p>
<blockquote>
<p>拆解: 一本书大约10万字, 5天写10万字, 就是一天写10篇2000字的初稿.</p>
</blockquote>
<p>管理素材的方法: 便条素材管理法</p>
<blockquote>
<p> 对照书的目录和文件, 给素材文件贴上便条, 用目录上对应的关键字进行标识</p>
</blockquote>
<p>这种分类方法, 也可以应用在长文章上, 把文章适当分成几个部分, 规定各部分颜色, 然后把相应颜色的便条贴在素材文件上.</p>
<h4 id="个人体会"><a href="#个人体会" class="headerlink" title="个人体会"></a>个人体会</h4><p>看书名的时候, 觉得应该是本口水书.</p>
<p>不过看篇幅短, 索性刷了下. 意外的惊喜是作者提到了他的减肥方法.</p>
<p>RIZAP减肥: 低糖分饮食法 + 一周两次, 一次50分钟的肌肉锻炼 =&gt; 作者两个月, 瘦了7.2公斤, 体脂率从25% 下降到 17%.</p>
<p>最近体重飙升, 考虑试试.</p>
]]></content>
      <categories>
        <category>Reading</category>
      </categories>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>读《被讨厌的勇气》</title>
    <url>/posts/notes-of-Courage-to-be-Disliked/</url>
    <content><![CDATA[<p>一本有关个体心理学的书.</p>
<span id="more"></span>

<p> 整本书通过一个哲人和青年的五夜长谈来介绍了阿德勒思想的一些核心观点.</p>
<p>来重温下这段高质量的深度交流.</p>
<h4 id="核心观点"><a href="#核心观点" class="headerlink" title="核心观点"></a>核心观点</h4><p>阿德勒心理学的一个基本概念:  “人的烦恼皆源于人际关系。”</p>
<p>阿德勒心理学针对人际关系, 提出了关于人的行为方面和心理方面的目标。</p>
<p>行为方面的目标:</p>
<blockquote>
<ul>
<li>自立</li>
<li>与社会和谐共处</li>
</ul>
</blockquote>
<p>支持这种行为的心理方面的目标:</p>
<blockquote>
<ul>
<li>“我有能力”的意识</li>
<li>“人人都是我的伙伴”的意识</li>
</ul>
</blockquote>
<p>阿德勒心理学是如何看待整个人际关系的?</p>
<blockquote>
<p>阿德勒心理学认为人际关系的起点是课题分离, 终点是”共同体感觉” .</p>
<p>把他人看作伙伴并能够从中感到”自己有位置“的状态，就叫共同体感觉。</p>
<p>共同体感觉(social-interest)是幸福的人际关系的最重要的指标。社会的最小单元是”我和你”, 只要有两个人存在，就会产生社会、产生共同体。</p>
<p>以”我和你”为起点,  把对自己的执著（self-interest）变成对他人的关心（social-interest）。</p>
<p>这需要从以下三点做起：</p>
<ul>
<li><p>自我接纳</p>
<p>真诚地接受不能交换的“这个我”, 接纳自我.</p>
<p>自我接纳容易与自我肯定混淆.</p>
<blockquote>
<p>自我接纳是指假如做不到就诚实地接受这个”做不到的自己“，然后尽量朝着能够做到的方向去努力，不对自己撒谎。</p>
<p>自我肯定是明明做不到但还是暗示自己说”我能行“或者”我很强“，也可以说是一种容易导致优越情结的想法，是对自己撒谎的生活方式。</p>
</blockquote>
<p>做到自我接纳, 需要有分清“能够改变的“和”不能改变的“的智慧.</p>
<p>不去关注”无法改变的“，而是去关注”可以改变的” 。我们无法改变”被给予了什么“。但是，关于”如何去利用被给予的东西“，我们却可以用自己的力量去改变。</p>
<p>真正做到了自我接纳, 就自然拥有了甘于平凡的勇气.</p>
</li>
<li><p>他者信赖</p>
<p>这里的信赖是指无条件地相信. 即对他人寄予无条件的信赖。</p>
<p>无条件地相信他人可能会被欺骗, 被利用. 但只有我们选择了无条件的信赖，才可以构筑更加深厚的关系。</p>
<p>阿德勒心理学并没有基于道德价值观去主张“要无条件地信赖他人”。无条件的信赖是搞好人际关系和构建横向关系的一种“手段”。如果你并不想与那个人搞好关系的话，也可以用手中的剪刀彻底剪断关系，因为剪断关系是你自己的课题。</p>
<p>那么, 选择了无条件信赖他人的人, 要如何克服对背叛的恐惧感?</p>
<p>只要能够接受真实的自己并看清“自己能做到的”和“自己做不到的”，也就可以理解背叛是他人的课题，继而也就不难迈出迈向他者信赖的步伐了.</p>
</li>
<li><p>他者贡献</p>
<p>对作为伙伴的他人给予影响、作出贡献.</p>
<p>他者贡献并不是自我牺牲。相反，阿德勒把为他人牺牲自己人生的人称作“过度适应社会的人”，并对此给予警示。</p>
<p>他者贡献可以是看不见的贡献, 判断你的贡献是否起作用的不是你，那是他人的课题，是你无法干涉的问题. 只要能够产生“我对他人有用”的主观感觉即“贡献感”也可以。</p>
<p>幸福即贡献感.</p>
<p>值得注意的是, 人们追求他人的认可, 也是获取贡献感的一种手段. 但通过认可欲求获得的贡献感没有自由。而真正的幸福基于自由.</p>
</li>
</ul>
</blockquote>
<p>再谈共同体:</p>
<blockquote>
<p>共同体包含宇宙, 过去和未来，甚至从生物到非生物, 可以认为其范围无限大.</p>
<p>所以当我们在人际关系中遇到困难或者看不到出口的时候，首先应该考虑的是”<strong>倾听更大共同体的声音</strong>“这一原则。</p>
<p>同时, 我们也有选择共同体的自由. 以”我和你“的关系来进行说明，如果是因为你的反对就能崩塌的关系，那么这种关系从一开始就没有必要缔结，由自己主动舍弃也无所谓。活在害怕关系破裂的恐惧之中，那是为他人而活的一种不自由的生活方式。</p>
</blockquote>
<h4 id="有关自卑"><a href="#有关自卑" class="headerlink" title="有关自卑"></a>有关自卑</h4><p>阿德勒心理学有关自卑的观点.</p>
<p>自卑如何产生?</p>
<blockquote>
<p>人是作为一种无力的存在活在这个世界上。并且，人希望摆脱这种无力状态，继而就有了普遍欲求. 阿德勒称其为追求优越性. 人处于追求优越性这一“希望进步的状态”之中，树立某些理想或目标并努力为之奋斗。同时，对于无法达成理想的自己就会产生一种自卑感。</p>
</blockquote>
<p>但无论是追求优越性还是自卑感，都不是病态，而是一种能够促进健康、正常的努力和成长的刺激.</p>
<p>因为<strong>健全的自卑感不是来自与别人的比较，而是来自与“理想的自己”的比较.</strong></p>
<p>区分自卑感与自卑情结:</p>
<blockquote>
<p>自卑情结是指把自己的自卑感当作某种借口使用的状态。具体就像“我因为学历低所以无法成功”或者“我因为长得不漂亮所以结不了婚”之类的想法.</p>
</blockquote>
<p>如何弥补自己缺失的部分?</p>
<blockquote>
<p>最健全的姿态应该是想要通过努力和成长去弥补欠缺部分，例如刻苦学习、勤奋练习、努力工作等。</p>
<p>不正确地处理自卑感可能会导致产生优越情结:</p>
<blockquote>
<p>虽然苦于强烈的自卑感，但却没有勇气通过努力或成长之类的健全手段去进行改变。即便如此，又无法接受“无能的自己”。如此一来，人就会想要用更加简便的方法来进行补偿。表现得好像自己很优秀，继而沉浸在一种虚假的优越感之中。[这样的例子遍地都是, 比如我要是努力也能xxxx]</p>
<p>另一种则是, 通过把自卑感尖锐化来实现异常优越感的模式。这种人其实是想要借助不幸来显示自己“特别”，他们想要用不幸这一点来压住别人, 可能发展成夸耀不幸.</p>
</blockquote>
</blockquote>
<h4 id="人生课题"><a href="#人生课题" class="headerlink" title="人生课题"></a>人生课题</h4><p>人生三个课题: 工作, 交友, 爱. 都可以归结为人际关系.</p>
<p>从人际关系的深度来看, 爱深过交友, 交友深过工作, 而交友正因为没有了工作关系那样的强制力，所以也就更加难以开始和发展. 爱的课题则是三个课题中最难的, 包含与恋人和家人的关系.</p>
<p>真正的爱是什么样子的呢?</p>
<blockquote>
<p>当人能够感觉到”与这个人在一起可以无拘无束“的时候，才能够体会到爱。既没有自卑感也不必炫耀优越性，能够保持一种<strong>平静而自然</strong>的状态。真正的爱应该是这样的。</p>
<p>爱中常见到束缚关系, 束缚是想要支配对方的表现，也是一种基于不信任感的想法。与一个不信任自己的人处在同一个空间里，那就根本不可能保持一种自然状态。</p>
</blockquote>
<p>为什么人们无法获得这样无拘无束人际关系? 人际关系中的什么剥夺了你的自由?</p>
<blockquote>
<p>寻求他人的认可.</p>
</blockquote>
<p>但是不寻求他人的认可, 不迎合他人, 并不表示要做一个任性自私的人, 旁若无人地任意横行, 理解这点, 需要理解课题分离.</p>
<p>课题分离:</p>
<blockquote>
<p>基本上，一切人际关系矛盾都起因于对别人的课题妄加干涉，或者自己的课题被别人妄加干涉。</p>
</blockquote>
<p>课题分离是人际关系的入口, 良好的人际关系应当是 <strong>伸伸手即可触及，但又不踏入对方领域，保持适度距离.</strong></p>
<p>如何分辨这是谁的课题?</p>
<blockquote>
<p>只需要考虑一下“某种选择所带来的结果最终要由谁来承担？”</p>
</blockquote>
<p>分离课题是以自我为中心吗?</p>
<blockquote>
<p>分离课题并不是以自我为中心，相反，干涉别人的课题才是以自我为中心的想法。父母强迫孩子学习甚至对其人生规划或结婚对象指手画脚，这些都是以自我为中心的想法。</p>
</blockquote>
<p>对于不是自己的课题,就放任不管吗?</p>
<blockquote>
<p>阿德勒心理学并不是推崇放任主义, 主张”可以把马带到水边, 但不能强迫其喝水”.</p>
<p>即: 不对他人的课题妄加干涉, 但在他人需要帮助时, 竭尽全力加以援助. [是否接受援助也是他人的课题, 不可妄加干涉]</p>
</blockquote>
<p>由此可以衍生出有关信任的话题: 信任别人，这是你的课题。但是，如何对待你的信任，那就是对方的课题了。</p>
<p>关于自己的人生, 你能够做的就只有“选择自己认为最好的道路”。 不去干涉别人的课题也不让别人干涉自己的课题.</p>
<p>注意不要掉进回报思想的坑:</p>
<blockquote>
<p>如果对方为自己做了什么一一即使那不是自己所期望的事情——自己也必须给予报答。这其实并非是不辜负好意，而仅仅是受回报思想的束缚。无论对方做什么，决定自己应该如何做的都应该是自己.</p>
<p>如果人际关系中有“回报思想”存在，那就会产生“因为我为你做了这些，所以你就应该给予相应回报”这样的想法。这是一种与课题分离相悖的思想。<strong>我们既不可以寻求回报，也不可以受其束缚。</strong></p>
</blockquote>
<p>如何从起点(课题分离)走向终点(共同体感觉)?</p>
<blockquote>
<p> 人际关系中有横向关系和纵向关系.</p>
<p>批评和表扬就是典型的纵向关系的表现, 批评和表扬中, 隐含着上下级的关系. 我们表扬或者批评他人只有”用糖还是用鞭子“的区别，其背后的目的都是操纵.</p>
<p>阿德勒心理学反对一切”纵向关系“，提倡把所有的人际关系都看作”横向关系“。</p>
<p>也就是与所有人都建立着”虽不同但平等”的关系. 不批评也不表扬, 而是援助, 阿德勒心理学称之为鼓励.</p>
<p>那具体应该如何鼓励?</p>
<blockquote>
<p>对于他人的帮助, 不是表扬, 而是真诚地表示感谢、尊敬或者喜悦. 人在听到感谢之词的时候，就会知道自己能够对别人有所贡献, 对他人有用. 而“我对别人有用“这一感受，能增加人生活的勇气。</p>
</blockquote>
</blockquote>
<p>我们应该与他人缔结什么样的人际关系?</p>
<blockquote>
<p>横向关系. 也就是建立起真正意义上的平等关系.</p>
<p>这并不是说将任何人都变成朋友或者像对待朋友一样去对待每一个人，不是这样的，<strong>重要的是意识上的平等以及坚持自己应有的主张。</strong></p>
</blockquote>
<p>在建立起横向关系后, 如何继续走向终点?</p>
<blockquote>
<p>把对自己的执著（self-interest）转换成对他人的关心（social-interest），建立起共同体感觉。</p>
</blockquote>
<h4 id="人生即此刻"><a href="#人生即此刻" class="headerlink" title="人生即此刻"></a>人生即此刻</h4><p>人生是一连串的霎那.</p>
<blockquote>
<p>假如人生是为了到达山顶的登山，那么人生的大半时光就都是在“路上”。也就是说，“真正的人生”始于登上山顶的时候，那之前的路程都是“临时的我”走过的“临时的人生”。</p>
<p>这其实是把自己的人生看成了一条“线”。自降生人世那-瞬间便己经开始的线，画着大大小小形形色色的曲线到达顶点，最终迎来“死”这一终点.</p>
<p>请不要把人生理解为一条线，而要理解成点的连续。</p>
<p>人生就像是在每一个瞬间不停旋转起舞的连续的刹那, 根本不存在过去和未来。</p>
<p>如果感觉能够看得到过去也能预测到未来，那就证明你没有认真地活在“此时此刻”，而是生活在模糊而微弱的光中。</p>
</blockquote>
<p>过去和未来没有关联.</p>
<blockquote>
<p>像直线一样的过去的生活只不过是在你反复下定决心“不做改变”的基础上才貌似成了直线而己。而且, <strong>将来的人生也完全是一张白纸，并未铺好行进的轨道。这里没有故事。</strong></p>
</blockquote>
<p>当下即完结:</p>
<blockquote>
<p>认真过好了“此时此刻”，那每一个刹那就都是一种完结.</p>
<p>我们要像跳舞一样认真过好作为刹那的“此时此刻”，既不看过去也不看未来，只需要过好每一个完结的刹那。没必要与谁竞争，也不需要目的地，只要跳着，就一定会到达某一个地方。</p>
</blockquote>
<h4 id="个人收获"><a href="#个人收获" class="headerlink" title="个人收获"></a>个人收获</h4><p>看整本书的过程中, 特别喜欢的是哲人如何引导着青年去寻找答案的过程. 懂得步步牵引, 而不去剥夺他人发现答案的宝贵过程, , 实在是难得的良师益友.</p>
<p>毕竟人与人之间, 能进行如此质量的深度交流, 实在是少之又少.</p>
<p>那么, 读完后, 最大的收获是什么呢?</p>
<p><strong>请你,  感谢自己的存在.</strong></p>
]]></content>
      <categories>
        <category>Reading</category>
      </categories>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>读《一间只属于自己的房间》</title>
    <url>/posts/notes-of-a-room-of-ones-own/</url>
    <content><![CDATA[<p>将近一个世纪前的作品.</p>
<span id="more"></span>

<p>读完这本书后, 去了解了作者伍尔夫的生平, 不得不感叹, 真的是名奇女子.</p>
<p>书中的某些建议, 放在今天, 依然非常中肯.</p>
<blockquote>
<p>一个女人如果要写小说，那么她必须拥有两样东西，一样是金钱，另一样是一间自己的房间。</p>
<p>我希望，大家无论通过什么方法，都能挣到足够的钱，去旅行，去闲着，去思考世界的过去和未来，去看书做梦，去街角闲逛，让思绪的钓线深深沉入街流之中。</p>
<p>我想说的很简单、很平淡：没有什么比做自己更重要。</p>
</blockquote>
<p>看有些书评, 说这本书是女权运动和女性主义理论史上最具影响力的著作之一. 本人读书少, 读女性方面的书更少, 只觉得这本书确实很值得女性去阅读.</p>
<p>毕竟现实不会因为你是女性而区别对待.</p>
<p>现实就是, 你没有臂膀可以依靠，只能自己前进.</p>
<p>如同书中所说的, 人与人的关系, 不仅仅是男人和女人之间的关系，也是人和真实世界的关系.</p>
<p>细想一下, 如果伍尔夫生前没有显赫的家世, 没有遇到理解她, 尊重她的丈夫伦纳德, 她大概率也不会有一间可以上锁的房间, 有充足的时间去思考, 去写作, 继而成为享有声誉的现代主义作家.</p>
<p>艺术可能不那么需要钱, 但一定需要闲.</p>
<p>她是幸运的.</p>
<p>玩偶之家的故事不会在她身上上演.</p>
<p>但她也是不幸的, 童年的阴影伴随了她的一生.</p>
<p>除了一些对女性的建议, 书中作者对于写作的一些观点也有些新颖, 我从来没去想过, 文字会出卖写作者.</p>
<p>文字是写作者表达自我的一种方式.</p>
<p>好的文字里, 没有取悦, 没有讨好, 没有说教, 没有憎恨, 没有抗议.</p>
<p>好的文字, 需要写作者内心平静.</p>
<p>这样看来, 金钱和房间, 在某种程度上, 为写作者的内心平静提供了物质基础.</p>
<p>其实不管女性是否写作, 物质基础都很重要. 拥有自己的房间, 意味着你能有属于自己独立的时间和空间, 而独处, 不管对于男性还是女性, 都是重要的精神养分.</p>
<p>写到这里,  我内心的OS只有一个: 好好赚钱啊💰️.</p>
<p>另一个稍微意外的地方与书无关, 是被伍尔夫的容貌稍稍惊艳到.</p>
<p>真正一枚明明可以靠颜值, 偏偏要靠才华的女子.</p>
<p>记得看伍尔夫的生平往事时, 有的文章提到了伦纳德第一次见到伍尔夫的场景, 当时的她, 身穿一袭白裙、手持阳伞, 初见她的这位少年, 平静的心不禁掀起了波澜, 这才有了后来的不离不弃, 相伴余生.</p>
<p>附上一张20岁的伍尔夫:</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images336.jpg"></p>
]]></content>
      <categories>
        <category>Reading</category>
      </categories>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>读《与小泽征尔共度的午后音乐时光》</title>
    <url>/posts/notes-of-afternoon-with-Seiji-Ozawa/</url>
    <content><![CDATA[<p>大概是目前最短的一篇读后感.</p>
<span id="more"></span>

<p>读完的几点感触:</p>
<ul>
<li>听好的音乐. 大量听. 反复听.</li>
<li>学习欣赏歌剧作品</li>
<li>英文很重要</li>
<li>导师很重要</li>
<li>勤奋</li>
<li>古哼哼是天才</li>
<li>马勒的交响曲可以听听, 膜拜下</li>
</ul>
<p>最后贴上书中小泽征尔的一段回忆:</p>
<blockquote>
<p>卡耐基音乐厅指挥家的办公室里设有钢琴, 我常在深夜上那儿去,练到心满意足为止.</p>
</blockquote>
<p>这种从练习中获得的心满意足, 应该同他研读乐谱时所获得的心灵上的满足, 类似吧.</p>
<p>精神上纯粹的喜悦是件奢侈品.</p>
<p>这种喜悦会上瘾.</p>
<p>在 Youtube 上无意瞥见06年内田光子和大师合作的 Beethoven Piano Concerto 5 , 附上<a href="https://www.youtube.com/watch?v=mQHrNdjUPDc">链接</a>.</p>
<p>油管上有蛮多 Seiji Ozawa 指挥的现场视频, 可以过过瘾, 感受下大师的魅力.</p>
]]></content>
      <categories>
        <category>Reading</category>
      </categories>
      <tags>
        <tag>Music</tag>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>读《汇编语言(第3版)》</title>
    <url>/posts/notes-of-assembly-language-third-edition/</url>
    <content><![CDATA[<p>我的第一本汇编书，深感幸运，能读到这么棒的书。</p>
<span id="more"></span> 

<p>真香系列。</p>
<p>对小白实在太友好，强烈推荐。</p>
<p>整本书共17章，含17个实验，外加两个课程设计，强化所学。</p>
<p>前一部分介绍了基本的预备知识和16种寄存器的使用，MASM的一些基本语法，后半部分则落在了中断处理。</p>
<p>刷的过程中，稍微去串了串场，看了点nasm的内容，语法比较相近，但是与MASM还是有些差异的，比如 nasm是大小写敏感的，不支持assume伪指令等，不过大同小异，至少看nasm 的代码不会那么的懵逼了。</p>
<p>不得不说，nasm 的文档<a href="https://www.nasm.us/xdoc/2.13.01/html/nasmdoc0.html">NASM-The Netwide Assembler</a> 也是超长的……</p>
<p>如果想大致了解下nasm，推荐这篇 <a href="https://cs.lmu.edu/~ray/notes/nasmtutorial/">NASM Tutorial</a>。</p>
<p>呃，切回MASM。</p>
<p>王爽老师在书中反复说一定要做完了实验才能开始下一章节的学习，老师说的很对，请听老师的话。</p>
<p>我自己的情况是，最开始刷第一遍的时候，比较快，有些实验留着就没有做，对很多知识点其实并没有理解，后面二刷才慢慢做完了大部分，除了课程设计2留了个坑，基本完成了书中所有的检测点和实验，具体的代码实例可见: <a href="https://github.com/Lupeipei/Assembly">Assembly Language</a>。</p>
<p>做书中的实验时，刚开始会有点虐，但是虐过后会很快乐，所以请耐着性子做，会有惊喜：P。</p>
<p>稍稍想要提一下第三章最后的那个问题，如果最开始你不明白为什么栈里面平白Push了四个字，没关系，刷完chapter12记得回过来看chapter3，U will get it : P.</p>
<p>最后，Strongly recommend this book &amp; Enjoy.</p>
]]></content>
      <categories>
        <category>Reading</category>
      </categories>
      <tags>
        <tag>Assembly</tag>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>读《A woman makes a plan》</title>
    <url>/posts/notes-of-a-woman-makes-a-plan/</url>
    <content><![CDATA[<p>I should have finished this book review last weekend.</p>
<span id="more"></span>

<p>Maybe someone who decides to write a book review in foreign language confronts the same situation as I do.</p>
<p>I am afraid of making mistakes, especially,  Grammar mistakes.</p>
<p>I am afraid of writing that kind of stupid book review, just copy and paste the sentences from book without my own thinking. [To be honest, I did it when coding, sometimes]</p>
<p>I am afraid that I wouldn’t do it well.</p>
<p>With these bad feelings, I just ignored it. Try to let it go.</p>
<p>But I am also afraid of reading without writing and sharing.</p>
<p>After a week’s struggle, I knew I need to get it done.</p>
<p>Done is better than perfect.</p>
<p>So, Here we go.</p>
<p>This book is written by Maye Musk, Who is a supermodel at age 72 and also an experienced dietitian.</p>
<p>Yeah, you are right, she is Elon Musk’s mother.</p>
<p>She is totally a lady of great charm.</p>
<p>The subtitle of this book is “advice for a lifetime of adventure, beauty, and success”.</p>
<p>There are five parts in this bio: Beauty, Adventure, Family, Success,  and Health.</p>
<p>In each part, she described her own experiences in detail and gave some advices.</p>
<p>When I finished it, I know that she is absolutely not the lucky one, she has her own tough days. She just keeps working really really hard, making plans,  getting prepared, taking risks, and pursuing her life bravely.</p>
<p>People respect, and admire these kind of person.</p>
<p>They are the ones who focus on the process rather than the result.</p>
<p>Here are some advices that I like most.</p>
<ul>
<li>If it’s not going to change, get out of it as soon as you can, even if you end up having nothing afterward or thinking you’ll have nothing afterward. Or be financially strapped afterward.</li>
</ul>
<ul>
<li>You can always find a way. You can always make another plan.</li>
<li>Be willing to change, make mistakes, change again, until you get the right style for you.</li>
<li>Having a plan does not mean that things will go right. It means that if things go wrong, you will make another plan.</li>
<li>We all deserve a happy life.</li>
<li>No matter how hard it is, you have to get through it. You have to get out. It’s worth it.</li>
<li>Teach your children good manners. But let them decide what they want.</li>
<li>Appreciate the good things that are happening in your life.</li>
<li>But you have to work hard to make your own luck.</li>
</ul>
<p>Beside these advices, what impressed me most is one of the stories she told about her daughter Tosca.</p>
<p>When Maye Musk came back to Johannesburg, she found that her daughter had sold her home, her furniture, and her car.</p>
<p>At that time., Tosca was just fifteen year old and she had done it by herself. When I read this, I burst out: “Wow, What a cool young lady she was!”</p>
<p>You know what’s more cool? Maye wasn’t mad at Tosca at all. She thought her daughter had a good point.</p>
<p>She is really a brilliant and open-minded mother.</p>
<p>Plus, I am a little confused about her advices in the last part. I used to believe that a health diet is about high animal fats and low carbs. but she doesn’t agree with this fad diet. Here is her sweet suggestion:</p>
<blockquote>
<p> The “secret” to health is eating more fruits and vegetables and whole grains and legumes and dairy, and eating what you enjoy, in small portions, when you are hungry.</p>
</blockquote>
<p>Eating what you enjoy, cool, So could I have one more dark chocolate? : P</p>
<p>Never forget “in small portions” and “when you are hungry”.</p>
<p>To recap, I enjoy reading it. I Love this book.</p>
<p>Thanks for sharing your life story. Thanks for your advices.</p>
]]></content>
      <categories>
        <category>Reading</category>
      </categories>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>读《感谢自己的不完美》</title>
    <url>/posts/notes-of-be-grateful-for-your-imperfection/</url>
    <content><![CDATA[<p>感觉书名有些拖累了书的内容.</p>
<span id="more"></span>

<p>按照自己的偏好, 简单整合了下书中的要点.</p>
<h4 id="有关坏习惯"><a href="#有关坏习惯" class="headerlink" title="有关坏习惯"></a>有关坏习惯</h4><blockquote>
<p>恶习<strong>代表着你内心的需要</strong>，你只有理解它并接受它，它才能得到最有效的改造。</p>
<p>每一个人做任何事情最终都是为了满足自己的一些深层需要，<strong>每一个负面的、损害性的行为背后都有一个正面的动机。</strong>如果认真聆听我们内心的声音，你会发现，生命中每一部分都是你的朋友，都是为了帮助你更好地生活。</p>
<p>改变恶习最关键的一点是: <strong>不和恶习较劲，接受恶习</strong>。</p>
<p>每一个旧习惯对应着的神经回路是无法消失的，只能靠新习惯打造更强大的新神经回路，用新的神经回路去战胜旧的神经回路。[在长满荒草的地方, 种上庄稼]</p>
</blockquote>
<h4 id="负面情绪与心理痛苦"><a href="#负面情绪与心理痛苦" class="headerlink" title="负面情绪与心理痛苦"></a>负面情绪与心理痛苦</h4><blockquote>
<p>心灵注定要在创伤中前行。</p>
<p><strong>每一种心理的痛苦都是有意义的</strong>。我们可以有无数种方法降低痛苦、逃避痛苦，但真正解决问题的方法只有一种:<strong>直面痛苦，认识痛苦的意义，领悟到问题的来源，并由此成长</strong>。</p>
<p>常见的”负面情绪”:</p>
<ul>
<li><p>焦虑</p>
<p>摈弃那种不惜一切代价抵制焦虑的信念。</p>
</li>
<li><p>悲伤</p>
<p>当你悲伤时，你最值得做的就是和悲伤融为一体。</p>
</li>
<li><p>愤怒</p>
<p>愤怒首先是一个信号，它告诉你<strong>有人过分地侵入了你的空间，过分地控制了你。</strong></p>
<p>侵入你空间的那个人，<strong>无论其理由是多么美好，你都应当捍卫自己</strong>。</p>
</li>
<li><p>内疚</p>
<p>内疚的产生，源自付出与接受的失衡。</p>
<p>内疚的产生，其实是在提醒你，你该补偿对方了。</p>
<p>我们要懂得这一点，懂得<strong>觉察自己的内疚，然后及时作出补偿</strong>。</p>
<p>同样，当对方产生内疚时，我们也要<strong>给对方机会，让对方完成TA的补偿</strong>。</p>
</li>
<li><p>恐惧</p>
<p>许多恐惧所传递的信息是极具价值的。</p>
<p>我们越恐惧一件事情，那件事情背后隐藏着的信息可能就越重要。</p>
</li>
</ul>
<p>认识”负面情绪”:</p>
<p>任何真切而纯粹的情绪、感受和体验都是大自然的馈赠。</p>
<p>任何情绪、感受和体验都是天然产生的，它们都在告诉我们一些信息，在指引我们走向好的成长之路。</p>
<p>任何一种真切的情绪, 都有其独特的价值. 你要做的并不是抵制, 压抑这些情绪, 而是学会正确的处理它们, 感受它们, 明白什么让你焦虑/悲伤/愤怒/内疚/恐惧,  尊重自己的感觉。</p>
</blockquote>
<h4 id="挫折商-AQ-Adversity-Quotient"><a href="#挫折商-AQ-Adversity-Quotient" class="headerlink" title="挫折商(AQ: Adversity Quotient)"></a>挫折商(AQ: Adversity Quotient)</h4><blockquote>
<p>定义: 一个人化解并超越挫折的能力。</p>
<p>可以从四个方面衡量一个人的AQ:</p>
<ul>
<li><p>控制 (Control)</p>
<p>即你在多大程度上能控制局势。</p>
<p>高AQ者的控制感高，低AQ者的控制感低。</p>
<p>即便面临重大的挫折，高控制感的人仍然相信自己能控制局势。</p>
</li>
<li><p>归因(Ownership)</p>
<p>挫折发生了，我们要分析挫折发生的原因，这就是归因。</p>
<p>高AQ的人首先会<strong>主动承担责任，无论什么情况下都倾向于认为自己应该为挫折负责</strong>。同时，他们会进行积极归因，即相信自己一定能改善局面。</p>
</li>
<li><p>延伸(Reach)</p>
<p>即你会不会自动将一个挫折的恶果延伸到其他方面。</p>
<p>高AQ的人很少泛化，<strong>他们将挫折的恶果控制在特定范围</strong>。不让它对自己的其他方面产生任何影响。他们知道，一个挫折事件只是一个挫折事件。</p>
</li>
<li><p>忍耐 (Endurance)</p>
<p>耐力是衡量AQ的最重要尺度。</p>
<p>高AQ者之所以有较高的耐力，只是因为即便面临着再大的困难，高AQ者也总能看到积极因素，他们深信自己能渡过难关，能掌控局势，目前的忍耐只是黎明前的黑暗。他们的耐力是<strong>基于希望和乐观主义</strong>之上的。</p>
<p>典型的例子如爱迪生.</p>
</li>
</ul>
</blockquote>
<h4 id="镜子"><a href="#镜子" class="headerlink" title="镜子"></a>镜子</h4><blockquote>
<p>任何一个你在乎的关系，其实都是一面心灵的镜子，可以照出你内心的秘密来。</p>
<p>把关系当作一面镜子，一面帮助你认识自己并重新整理自己的镜子。</p>
<p>在关系的镜子前审视自己，理解自己，并引导自己走向好的转变。</p>
<p>假若你渴望理解自己, 改变自己，那么重要的不是抱怨别人希望别人为自己改变，而是反省自己，“我为什么会变成这样子?”  “我把TA当成了谁?”  “这和我以前有什么相像的地方?”</p>
</blockquote>
<h4 id="人格自由"><a href="#人格自由" class="headerlink" title="人格自由"></a>人格自由</h4><blockquote>
<p>人格的自由是我们的独立之本、健康之泉，也是我们创造力的基石。</p>
<p>追求人格的自由，结束已经发生的事实对我们心灵的羁绊只有一条途径: 接受已经发生的事实，承认它已不可改变。</p>
<p>因为否认自己经历的任何事情，就是在否认自己人格的一部分。否认自己的一部分，就会或轻或重地导致人格的分裂。并且，被否认的那一部分，绝对不会因此而消失，它只是被你压抑进潜意识而已，仍然在对你发挥影响。更糟糕的是，当它们发挥作用时，因为是来自潜意识，你的意识对它们一无所知，于是你对它丧失了控制能力。</p>
</blockquote>
<h4 id="拥有你的”瓦尔登湖”"><a href="#拥有你的”瓦尔登湖”" class="headerlink" title="拥有你的”瓦尔登湖”"></a>拥有你的”瓦尔登湖”</h4><blockquote>
<p>每个人都需要一个他自己的“瓦尔登湖”。</p>
<p>你可以有一些简化的选择，譬如: 每天写一段简短的心情日记; 每天给自己留出半个小时的绝对独处时间; 每年有一个星期的旅游，去海边、湖边或河边，看清水流动，那时仿佛你的心灵也被净化了……</p>
<p>这些简单的仪式, 让你和尘世的喧嚣暂时保持一段距离，它可以让你的心灵出现不可思议的成长，同时又保证你不与现实脱节。</p>
<p>在选择你的“瓦尔登湖”时，你不妨将它的时间、空间和方式固定下来，这样它就<strong>发展成了一个清晰的仪式</strong>，可以让你很方便地<strong>比较过去与现在的差异</strong>，从而清晰地<strong>意识到你心灵的成长</strong>。</p>
</blockquote>
<h4 id="Tips"><a href="#Tips" class="headerlink" title="Tips:"></a>Tips:</h4><ul>
<li>不要积累太多的未完成的事情。每个未完成的事情都会吞噬你部分心理能量，无论这个事情多么不起眼。</li>
<li>只有当你缺乏理解的时候，才有掌控的必要。如果你已经把事情看得很清楚，自然就不需要掌控了。</li>
<li>在人生的转折性时刻，做一些象征性的事情，以纪念这些时刻，同时提示自己，你已进入新的人生阶段。</li>
<li>让感觉在自己身上酣畅淋漓地流动。</li>
</ul>
<h4 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h4><p>心灵的事，要慢慢来。</p>
]]></content>
      <categories>
        <category>Reading</category>
      </categories>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>读《beyond feelings》</title>
    <url>/posts/notes-of-beyond-feelings/</url>
    <content><![CDATA[<p>漫长的填坑路。</p>
<span id="more"></span> 

<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>记得我看完这本书之后，有朋友问了我一个很常规的问题，看完有什么收获？在交流中，他提了句：follow your heart. 而我并没能清晰地向他说明为什么《beyond feelings》这本书值得去读，为什么不能一味地follow your heart，那次的沟通让我觉得虽然我看了书，但是并没有消化，准确地说，是翻完了它，不是读完了它，所以决定整理这份笔记。</p>
<p>第一遍看的是第6版，共22章，看得相当粗糙，想起来就翻翻，断断续续，跨时将近一年，真是头一遭，不过200多页而已……</p>
<p>整理的时候，重新刷了第9版，19章，相比第6版少了些，有些内容上还是变动挺大的，笔记均以第9版为准，鉴于自己蹩脚的英文语法，内容中英混杂，个人胡诌部分用「」或【】框了起来。</p>
<p>每章后面都附有一个Application，类似课后作业，第9版相比第6版，在application后，还新添了一个版块，A difference of opinion，我想作者本人也是很看重学以致用的能力的，惭愧的是，我基本没花什么时间在application上，故这部分内容略去。</p>
<p>全书共三部分，计划分四篇来呈现，一篇总览，每part单独一篇，由于第一次去整理这种非叙事性的书籍，度没控制好，每个part都是长篇，基本的思路是抽离出每章节里面的主要内容。如果你对这本书好奇，建议直接服用<a href="https://www.amazon.com/Beyond-Feelings-Guide-Critical-Thinking/dp/0078038189">原版</a>，可能货干不易消化，可配茶慢饮，如果想先大致了解下，也许我这篇总览可以作为一个参考：P。</p>
<h4 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h4><p>全书共三部分：</p>
<p><strong>Part 1:</strong></p>
<p>explains the psychological, philosophical, social context in which critical thinking takes place and describes the habits and attributes that enhance such thinking.</p>
<p>第一部分主要缕了下critical thinking中几个重要的基础概念：</p>
<p>who are you? critical thinking, truth, know, opinions, evidence, argument.</p>
<p>读完这部分，你会知道为什么不能一味的follow your heart。</p>
<blockquote>
<p>feeling很重要，但是有时候feeling是不可靠的，feeling is notoriously unreliable，甚至我们会倾向于做一些对自己有害的事情，问问减肥的人们，多少次没有克制住去暴饮暴食？戒烟戒酒的人们，多少次认定这是最后一次开戒然后义无反顾继续smoking/drinking？明明知道这是一场很重要的考试/比赛不能搞砸，最后还是搞砸了？确认过眼神TA就是你的挚爱？你可能还需要再确认下自己是不是青光眼。</p>
<p>feelings need to be tested before being trusted, and thinking is the most reasonable and reliable way to test them.</p>
</blockquote>
<p>你也会很惊讶于原来在critical thinker的世界里，know的定义是你不仅知道，你还知道你自己知道，并且能向人描述出你是如何知道的，而argument竟然是这样定义的：the line of reasoning that supports a judgment.</p>
<p><strong>Part 2:</strong></p>
<p>describes common errors in thinking and how to overcome them.</p>
<p>第二部分列出了在思考中容易掉进的坑，并列出针对每个坑的脱坑方法。总共24个，分别是：</p>
<p><strong>errors of perspective</strong>：poverty of aspect, unwarranted assumptions, either/or outlook, mindless conformity, absolutism, relatvism, bias for or against change.</p>
<p><strong>errors of procedure</strong>: biased consideration of evidence, double standard, hasty conclusion, overgeneralization and stereotyping, oversimplification, post hoc fallacy.</p>
<p><strong>errors of expression:</strong> contradiction, arguing in a circle, meaningless statement, mistaken authority, false analogy, irrational appeal.</p>
<p><strong>errors of reaction</strong>: automactic rejection, changing the subject, shifting the burden of proof, straw men, attacking the critic.</p>
<p>这些坑，或多或少都会受到一个大坑的影响，即chapter 8 单独细说的<strong>mine is better</strong>.</p>
<p><strong>Part 3:</strong></p>
<p>provides a step-by-step strategy for dealing with issues.</p>
<p>第三部分是strategy， 策略，一步步教你如何去处理一个issue。</p>
<p>开篇是knowing yourself，对应着本书的第一章，who are you? 这里为什么把knowing yourself放在最前面？这跟处理issue有什么关系？在处理一个issue之前，先要认清自己的不足，了解自己容易掉进part2列出的哪些坑，从而在处理issue之前就避开这些坑，随后便是being observant,  成为一个更好的观察者，一个更好的观察者才能更准确合理地去处理各种问题。chapter 16 则将关注点拉回到issues上，给出了如何去选择一个issue的方法，紧接着的三章，则是讲诉了如何去收集evidences，做出合理的interpretation，form a judgment 以及如何说服他人去接受你的这个judgment。</p>
<p>如果非要用一种简单的方式去展示整本书的要点，我觉得下面这张表可以提供一个非常清晰的脉络：</p>
<p>critical thinking的基本构成：Investigation, interpretation, judgment.</p>
<table>
<thead>
<tr>
<th>Activity</th>
<th>Definition</th>
<th>Requirements</th>
</tr>
</thead>
<tbody><tr>
<td>Investigation</td>
<td>Finding evidence — that is, data that will answer key questions about the issue</td>
<td>The evidence must be both relevant and sufficient</td>
</tr>
<tr>
<td>Interpretation</td>
<td>Deciding what the evidence means</td>
<td>The interpretation must be more reasonable than competing interpretations</td>
</tr>
<tr>
<td>Judgment</td>
<td>Reaching a conclusion about the issue</td>
<td>The conclusion must meet the test of logic</td>
</tr>
</tbody></table>
<p>三大part基本都是围绕这个细细展开的。</p>
<h4 id="一些感触"><a href="#一些感触" class="headerlink" title="一些感触"></a>一些感触</h4><p>现在来回答为什么这本书值得一读。</p>
<p>引用书中chapter 14中的一段文字：</p>
<blockquote>
<p>Noted psychologist Albert Ellis, founder of the Institute of Rational  Emotive Therapy, claims, “Man can live the most self-fulfilling, creative, and emotionally satisfying life by intelligently organizing and disciplining his thinking. “</p>
<p>In short, although the challenge of improving your thinking is great, no other kind of self-improvement has the potential to affect every area of your life so positively.</p>
</blockquote>
<p>觉得作者在夸大thinking的作用？我不觉得，至少我目前找不到反驳的论据，所以我选择暂时接受这个观点：P。</p>
<p>有人说，做笔记是对一本书最大的尊重。我觉得，做笔记只是一种学习方式，当你将自己从书中所学的理论或者方法，哪怕只是一点，运用于实际生活中，并因此而有所成长，才是对作者最大的尊重。因为，通过阅读他们的作品，你的生活变得更好，切切实实地有了哪怕一点微小的改变，才是一部作品能给它的受众最好的礼物。就像这本书的作者所提到的，The quality lies in the doing。</p>
<p>Learning is doing.</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.amazon.com/Beyond-Feelings-Guide-Critical-Thinking/dp/0078038189">Beyond feelings</a></p>
]]></content>
      <categories>
        <category>Reading</category>
      </categories>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>读《亲爱的安德烈》</title>
    <url>/posts/notes-of-dear-andreas/</url>
    <content><![CDATA[<p>工作后，书读得少，主要原因当然是因为懒。</p>
<span id="more"></span> 

<p>前段时间换了工作，更是极少去翻闲书了，真心怀念那些泡着茶，捧着书就是一个下午的日子。</p>
<p>不知道是不是大部分人都有过这样的体验，脑子里会突然闪出一些句子，让你觉得很熟悉，但是又想不起在哪里看过。如果不嫌麻烦，就会想着Google下，揪出来源。而我脑中闪现的句子，Google后发现，出自《亲爱的安德烈》：</p>
<blockquote>
<p>我怕你变成画长颈鹿的提摩，不是因为他没钱没名，而是因为他找不到意义。我也要求你读书用功，不是因为我要你跟别人比成就，而是因为，我希望你将来会拥有选择的权利，选择有意义、有时间的工作，而不是被迫谋生。</p>
</blockquote>
<p>几年前刷过龙应台的“人生三书”：《目送》，《孩子，你慢慢来》，《亲爱的安德烈》，最开始入坑的便是这本《亲爱的安德烈》。这次算是二刷了，大部分人应该是不大愿意二刷一本闲书吧，毕竟看过后就看过了，新鲜劲过了，没有二刷的必要，可是我发现我有二刷的毛病，有时候会很好奇，想要看看那些我读过的书里面，哪些可能是我错过的精彩，就好比你走过了一段路，自以为一览无余，风景全收，殊不知，重新走一回时，发现原来还有很多你不曾留意的佳处，当然这也跟个人的生活经历有关。《幽梦影》有言：少年读书，如隙中窥月；中年读书，如庭中望月；老年读书，如台上玩月。皆以阅历之浅深，为所得之浅深耳。信矣。</p>
<p>好，不矫情了，回归正题。</p>
<p>整本书主要由两代人之间的书信往来构成，但是不同于《查令十字街84号》，这些书信是母亲与儿子约定一起写的专栏，中间免不了诸多修正，这些修正虽然可以让文字所要表达的意思更为清晰，但是不免少了《查令十字街》的随性与自然，好比你写日记，多注重个人情绪的抒发，而写公开的文章，总还是有点收敛的。不过看这些书信，会感觉到MM与儿子之间对于很多事物不同的看法，你会发现，关于音乐，关于国籍，关于年轻人的职业选择，关于归途，关于香港，关于Kitsch，关于中西方的教育……同样的一件事，在两代人，甚至两国人的眼里，竟是这样的不同。</p>
<p>说几个印象深刻的：</p>
<ul>
<li><p>如何处理冲突？</p>
<blockquote>
<p>我希望我的孩子敢为自己的价值信仰去挑战权威，但是有些权威可能倒过来伤害你，所以我应该怎么教我的孩子对“威武不能屈”而同时又懂得保护自己不受伤害？这可能吗？</p>
</blockquote>
</li>
<li><p>麻烦与女孩子</p>
<blockquote>
<p>可是，我不能不意识到，我的任何话，一定都是废话。因为，清纯静美，白衣白裙别上一朵粉红的蝴蝶结——谁抵挡得住“美”的袭击？</p>
</blockquote>
</li>
<li><p>左派杂志“反柏林”</p>
<blockquote>
<p>苏联抵抗纳粹的战线有两千公里长，牺牲了两千万人的生命──我们感谢苏联红军的英勇。</p>
</blockquote>
</li>
<li><p>美好时光</p>
<blockquote>
<p>人与人之间，有语言，没有交流。</p>
</blockquote>
</li>
<li><p>成长</p>
<blockquote>
<p>长大的男孩不哭。</p>
</blockquote>
</li>
</ul>
<h5 id="如何处理冲突？"><a href="#如何处理冲突？" class="headerlink" title="如何处理冲突？"></a>如何处理冲突？</h5><p>为什么会有冲突？</p>
<p>我的感觉是沟通的双方在某些点上的认知不同，从而导致了冲突。</p>
<p>冲突一定是有害的？</p>
<p>当然不是，理清各自是在哪个或者哪些点上出现了分歧，反而可以促进双方对于事物的认知，真理越辩越明。</p>
<p>那这样看，貌似冲突也没什么可怕的，但是，在现实生活中，很难如此理性的处理冲突，大部分，特别是自带ego的人， 都有“mine is better”的固有理念，我也是啊，认为我的才是对的，你的不对。这种情景不限于学生与老师，长辈与晚辈，上级与下级之间，毕竟有效沟通的基本前提是平等与尊重，而大多数情况下的沟通都不满足这个前提，更多的是，出现了冲突，人们想的是如何说服你，让你认同我，认同我的才是对的，或者干脆第一反应就是否认对方，连沟通的机会都不给。比如书中提到的那位说安德烈“嗑药”的老师。</p>
<p>针对这种情况，MM写了这样一段话：</p>
<blockquote>
<p>人际关系，其实往往是一种权力关系，从老子、孔子到苏格拉底都曾经思索这个问题。你的英文老师对你所造成的难题，只是一个小小的训练吧，譬如说，在你决定上课睡觉、不写作业之前，你是否思考过他是一个什么样的“对手”？是否思考过，用什么语言才能够和他沟通？又或者，什么形式的“反叛”会给你带来什么样的收获或者灾难？你是“谋定而后动”还是“暴虎冯河”？你想要达到什么？你的逻辑是什么？</p>
</blockquote>
<p>我的感觉是：多点思考，少点第一反应，以逼近事实真相本身为沟通目的，同时做好随时修正自己认知版图的准备。</p>
<p>毕竟，有些人的出现，就是为了刷新你的认知的。</p>
<p>虽然我这么说，但是我知道自己是个很容易不理性的人，惭愧。</p>
<p><strong>麻烦与女孩子</strong></p>
<p>女孩是男孩的“麻烦”，嗯，漂亮的女孩子才是“麻烦”，长得丑的，是“嫌你烦”。</p>
<p>面对失恋的儿子，MM举了歌德的例子，说了个道理，我觉得后面的那一段写的很好，记录下：</p>
<blockquote>
<p>我愿意和你分享的是我自己的“心得报告”，那就是，人生像条大河，可能风景清丽，更可能惊涛骇浪。你需要的伴侣，最好是那能够和你并肩立在船头，浅斟低唱两岸风光，同时更能在惊涛骇浪中紧紧握住你的手不放的人。换句话说，最好她本身不是你必须应付的惊涛骇浪。</p>
</blockquote>
<p>所有经历的快乐或者悲伤，好比阳光与雨水，真实地滋养着你，虽说人生的主张是追求快乐，规避痛苦，但是这短短一生，未曾经历过痛苦，哪里懂得快乐的难能可贵？</p>
<p>莫名想到《富士山下》那句歌词：要拥有必先懂失去怎接受。</p>
<p>当然，我才不是什么认同“痛苦就是财富”的老古董，如果这颗柠檬很酸，那就榨汁后加点蜂蜜吧，总有方式可以变得更好的，是吧？</p>
<h5 id="左派杂志“反柏林”"><a href="#左派杂志“反柏林”" class="headerlink" title="左派杂志“反柏林”"></a>左派杂志“反柏林”</h5><p>这里提到了左，右，作为一个政治白痴，直引书中的来源解释：</p>
<blockquote>
<p> 法国在大革命期间的国会里，支持王权和贵族的人坐在右边，主张改革的坐在左边。</p>
</blockquote>
<p>虽然这部分看得云里雾里，但是德国的开放却是让我很触动。是的，在中国，如果有个杂志叫做“反中国”， “反北京”，估计早就被查封了。</p>
<p>苏联，从二战时期的德国人来看，其实是敌对方，但是他们怎么评价苏联的？</p>
<blockquote>
<p>苏联抵抗纳粹的战线有两千公里长，牺牲了两千万人的生命──我们感谢苏联红军的英勇。</p>
</blockquote>
<p>一个国家，能容下多少异见，便有多大的气度。</p>
<p>在这一点上，德国真的远超日本很多。</p>
<h5 id="美好时光"><a href="#美好时光" class="headerlink" title="美好时光"></a>美好时光</h5><p>安德烈的美好时光：</p>
<blockquote>
<p>很多人喜欢去热闹的酒馆或者跳舞，但是我最喜欢的是跟朋友在一起，不管是一个安静的小酒馆，或者只是一个无聊的阳台，从谈话里一点一点认识你的朋友的思想和心灵，或者言不及义大笑一通，是我觉得最自在的时候。</p>
</blockquote>
<blockquote>
<p>我最享受的事情，譬如说，在徒步区的街头咖啡座跟好朋友坐下来，喝一杯意大利咖啡，暖暖的秋天午后，感觉风吹过房子与房子之间的窄巷。</p>
</blockquote>
<p>人和人之间，不能只有语言，没有交流。</p>
<p>对于朋友，你愿意花时间去交流，约出来，坐在一起，聊聊天，闲扯或者吐槽都可以，为了聊天而聊天，不带有任何其他目的，是忙碌生活中极为享受的一件事情了吧。在沟通中重新认识你的朋友，而不是换个地方玩手机。</p>
<h5 id="成长"><a href="#成长" class="headerlink" title="成长"></a>成长</h5><p>MM问了儿子好一些问题，譬如：你最尊敬的世界人物是谁？为何尊敬他？你将来想要做什么？你最同情什么？你最近一次真正伤心的哭，是什么时候？</p>
<p>儿子一一回复后，“投桃报李”，也抛出了几个问题反问MM：你如何面对自己的老？最近一次，你恨不得可以狠狠揍我一顿的，是什么时候什么事情？这世界你最尊敬谁？给一个没名的，一个有名的。 如果你能搭“时间穿梭器”到另一个时间里去，你想去哪里？未来，还是过去？为什么？你恐惧什么？</p>
<p>双方彼此坦诚，互问互答，有来有往，这真的是极好的沟通方式。我认真思考后，慎重选择了要问的问题，你也认真地思考，然后回复，真正深度的交流。</p>
<p>什么是成长？</p>
<p>拥有独立思考的能力，会提出高质量的问题的能力，都是成长的标志之一。</p>
<p>可是做到能独立思考真的是一件很难的事情，至少对我而言是这样。</p>
<p>老天啊，我笨啊，我傻啊，智商不够用啊。</p>
<p>又跑题了。</p>
<p>就到这里吧，该敲代码了。</p>
]]></content>
      <categories>
        <category>Reading</category>
      </categories>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>读《Delivering Happiness》</title>
    <url>/posts/notes-of-delivering-happiness/</url>
    <content><![CDATA[<p>Thank you for delivering happiness to the world.</p>
<span id="more"></span>

<p>Hope you get your inner peace and serenity in another world.</p>
<p>本书作者 <a href="https://en.wikipedia.org/wiki/Tony_Hsieh">Tony Hsieh</a> 已于2020年11月在一场火灾中逝世.</p>
<p>当时瞥到这个新闻的时候, 很意外, 后面特意去搜了些有关他死因的文章, 有些文章提到了他死前的数月曾尝试drug以及沉迷liqueur.</p>
<p>大抵名人是非多.</p>
<p>但这不应该影响你阅读这本书.</p>
<p>整本书分三个部分. 感觉算是他人生的一个小小传记了.</p>
<p>第一部分[Profits]. 讲述了他的个人经历, 童年时期养殖蚯蚓, 少年时代卖钮扣画, 大学时期开小食店卖披萨, 从哈佛毕业后去了Oracle, 工作无聊, 辞职创立 LinkExchange, 最后将 LinkExchange 卖给微软. 随后 和朋友创立 孵化器和投资公司Venture Frogs. Zappos 起初是一个投资项目, 当时并没有被看好, 后来他本人加入了Zappos, 并将这家濒临倒闭的在线商店经营成了《财富》杂志上多次被评为最适合工作的公司之一.</p>
<p>第二部分[Profits and Passion] 以及 第三部分[Profits,  Passion and Purpose]则主要集中讲述了他和朋友们经营 Zappos 的故事, 包括后面 Zappos 被 Amazon 收购的一些细节. [2020年8月, 他辞去了 Zappos CEO 职位, 此时距离他接手这家公司, 已过去21年.]</p>
<p>作者在书中的最后给出了幸福的三个框架, 而你如果回头去看 Section1时, 会发现部分标题中已暗藏了这些框架的构成.</p>
<p>真的是一个很爱玩的家伙.</p>
<p>说说刷完的感受吧.</p>
<p>有过创业经历的人看这本书, 应该会比较有共鸣. 里面提到了他在面临一些经营问题时的解决方法. 个人相对而言更喜欢第一部分, 主要是讲述了很多他成长过程中发生的趣事. 比如上中学时, 他跑去一家电脑编程公司兼职, 少年心性, 调皮地关掉他boss烧水用的微波炉, 逗笑整间办公室的同事, 上大学时, 为了通过考试, 用众包模式收集论文,还顺带赚了一笔. 而在学校开了个小吃店卖披萨, 辛苦赚钱顺带承担风险时, 他的同学 Alfred [后来Zappos的CFO和COO], 当时是他的披萨大主顾,  每次来, 都要点大号披萨, 然后拿回寝室分块卖, 赚外快.</p>
<p>哈哈, 真的是很好玩.</p>
<p>也许我并没有真的读懂书中作者想要给到的一些建议, 但是读得很开心.</p>
<p>我想这也算另一种形式的 Delivering Happiness 了吧.</p>
<p>倘若他知道有个中国姑娘会因为他写的一些趣事而高兴, 应该也会很开心吧.</p>
<p>很高兴读到你的文字,  谢谢.</p>
<p>RIP.</p>
]]></content>
      <categories>
        <category>Reading</category>
      </categories>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>读《Javascript DOM 编程艺术》</title>
    <url>/posts/notes-of-dom-scripting/</url>
    <content><![CDATA[<p>看的是第二版，全书共12章，除前面几章涉及历史及语法外，剩下的8章都是通过实例来学习，非常喜欢这种实战型的学习方式。</p>
<span id="more"></span> 

<p>距离第二版出版（出版于2011年）已经过去了将近8年了，原书中给到的代码参考网站<a href="http://www.friendsofed.com/">friendsofed</a> 已经无法访问，示例代码中有些地方还是有坑的，比如chapter11中的视频部分，我照着书中的示例代码，重敲了一遍，详见<a href="https://github.com/Lupeipei/DOM_Scripting">DOM Scripting</a>，所有的功能都可以正常运行，图片视频等素材简单在Google上找了下，如果你也在学它，也许可以做个参考。</p>
<p>书比较薄，而且主要的篇幅集中在示例上，就简单梳理下书中的要点以备忘。</p>
<p>文档其实是一堆nodes的集合，基本操作：新增，修改，查找，或者删除node。</p>
<p>node的三个基本类型：</p>
<blockquote>
<p>元素节点，文本节点，属性节点。</p>
</blockquote>
<p>DOM提供的使用最为频繁的方法：</p>
<blockquote>
<p>getElementById</p>
<p>getElementsByTagName</p>
<p>getElementsByClassName</p>
<p>getAttribute</p>
<p>setAttribute</p>
</blockquote>
<p>最佳实践需要记住：</p>
<blockquote>
<p>平稳退化：让访问者可以在浏览器不支持Javascript的情况下，仍能顺利浏览网站。</p>
<p>渐进增强：用一些额外的信息去包裹原始数据，其目的是分离Javascript，让结构和行为分离。</p>
</blockquote>
<p>要记住的知识点并不多，个人感觉主要的收获来源实践，跟着书中内容敲一遍，不花多少时间，但是感觉非常好，“用餐”很愉快，五星推荐。</p>
]]></content>
      <categories>
        <category>Reading</category>
      </categories>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>读《黑客与画家》</title>
    <url>/posts/notes-of-hackers-and-painters/</url>
    <content><![CDATA[<p>读完就觉得很喜欢，非常愿意把它推荐给身边的朋友，不管TA是否懂编程。</p>
<span id="more"></span> 

<h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><p>全书共15章，章章之间并没有很强的逻辑关联。就挑一些自己印象深刻的写一写。</p>
<p>有关lisp</p>
<p>书中多次提到了lisp，并认为这是一门非常值得去学习的语言，虽然在工作中你可能很少使用到它。</p>
<blockquote>
<p>Lisp is worth learning for the profound enlightment experience you will have when you finally get it; that experience will make you a better programmer for the rest of your days, even if you never actually use Lisp itself a lot.</p>
</blockquote>
<p>特意在GitHub上搜了下，有关common lisp的项目并不多，而<a href="https://github.com/sbcl/sbcl">sbcl</a>截止目前的star竟然1K都不到，这个诞生于1958年的古老语言已经退出主流语言的阵营。</p>
<p>在<a href="https://en.wikipedia.org/wiki/Lisp_programming_language">lisp wiki</a> 里，提到目前Lisp的两大主流方言是common lisp 和scheme，两者的语法有些不一样。</p>
<p>初学者容易懵，学哪个？有什么参考书籍推荐？Paul Graham在他自己的blog <a href="http://paulgraham.com/lispfaq1.html">Lisp FAQ</a>里面给了回复：</p>
<blockquote>
<p>Which should I learn, Common Lisp or Scheme? What’s the difference?</p>
<p>Common Lisp is powerful but ugly. Scheme is small and clean, but the standard only defines the inner core of the language. If I had to deliver an application I’d probably use Common Lisp; if I were teaching a course I might use Scheme (but with Common Lisp macros).</p>
</blockquote>
<p>同时也给出了学习common lisp的参考书籍：正是他本人操刀的那本《ansi common lisp》。</p>
<p>此外，Google有一个<a href="https://github.com/google/lisp-koans">lisp-koan</a>， 2K多star，用于练习common lisp。</p>
<p>如果你使用atom编辑器，练习lisp-koan时，推荐下载package： language-lisp，代码敲起来会舒服很多。</p>
<p>上面都是说common lisp，来看看scheme。</p>
<p>GitHub上找到的有关scheme的项目中，比较醒目的是思科的<a href="https://github.com/cisco/ChezScheme">ChezScheme</a>, 但它并不是纯粹的scheme，C的身影处处可见。</p>
<p>相比common lisp，你会发现scheme的语法看着更清爽，更舒服。</p>
<p>如果想了解scheme的话，强烈推荐Daniel P.Friedman和Matthias Felleisen的那本<a href="https://mitpress.mit.edu/books/little-scheme-fourth-edition">《The little schemer》</a>，最新版本是第4版，呃，貌似应该不会有更新了。整本书写得非常通俗易懂，作者还会时不时的幽默下，对于我这样完全的Lisp小白来说，这种风格的书籍不要太友好啊。</p>
<p>有关hacker</p>
<p>我记得很久之前看过一个纪录片系列：《互联网时代》，里面采访了一些计算机界的大牛们，大多已经年老，看的时候会觉得这些人真的很伟大，像上古时代那些开疆拓土的英雄们，硬生生辟出了一个完全不一样的时代，撬动一个点，真的改变了整个世界。陡然生出一种脑残粉式的崇拜。</p>
<p>Raymond在<a href="http://www.catb.org/esr/faqs/hacker-howto.html">How to become a Hacker</a>上写了一系列很经典的文章，其中有一首Zen诗：</p>
<blockquote>
<p>to follow the path<br>look to the master<br>follow the master<br>walk with the master<br>see through the master<br>become the master</p>
</blockquote>
<p>可站在金字塔尖儿的master毕竟是少数，大部分是小花小草，不过小花小草也是可以仰望参天，努力成长的嘛。</p>
<p>牛逼也是时间积累出来的。</p>
<p>作者本人做为一名hacker，在书中并没有什么说教的内容，倒是实实在在的说了些自己知道的，特别是第三章-不能说的话，能把大实话这么说出来的，还真的挺需要勇气的，当然，这也许跟作者当时已经把Viaweb卖了有关，没卖之前他应该还是会有所顾忌吧。</p>
<p>很喜欢第三章的结尾处那段话，阮一峰老师翻译得也很好：</p>
<blockquote>
<p>  Everyone encourages you to grow up to the point where you can discount your own bad moods. Few encourages you to continue to the point where you can discount society’s bad moods.<br>  小时候，每个人都会鼓励你不断成长，变成一个心智成熟，不再耍小孩子脾气的人。但是，没有人鼓励你继续成长，变成一个怀疑和抵制社会错误潮流的人。</p>
</blockquote>
<p>变成一个怀疑和抵制社会错误潮流的人很难，毕竟，独立思考本身就不是一件轻松的事。</p>
<p>书中有些章节看得还挺鸡汤的，很客观很现实，比如下面这碗：</p>
<blockquote>
<p> In our world, you sink or swim, and there are no excuses.<br>我们这个世界，你向下沉沦或者向上奋进都取决于你自己，不能把原因推给别人。</p>
</blockquote>
<p>汤味浓郁，喝完很滋补。</p>
<h4 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h4><p>之前写读书笔记，我都会顺着章节一一总结，比如这本，常规整理思路会是这样：</p>
<p>本书一共xxx章，每章主要说了xxx。这一章xxxx最让我印象深刻。</p>
<p>最典型的例子就是之前整理《beyond feelings》。</p>
<p>这样的整理方式，唯一的好处大概就是帮助回忆，让人迅速对每一章的内容建起一个大致的轮廓，但是，这样整理下来后，满屏的文字读起来费劲不说，更让我在事后回看时，不知道重点在哪。</p>
<p>我开始反感这样的方式。</p>
<p>所以这次只记录读后的感觉，脑子里能回想起来的内容，其他略去。</p>
<p>这样想之后，写起来就顺了很多。</p>
<p>某种程度上，也算是一种变相的偷懒了。</p>
<p>Paul Graham在书中提过这么一句：如果你有两个选择，那就选择较难的那个。</p>
<p>但他也说了：并非所有的艰苦都是值得的。</p>
<p>所以，呃，或许，选择更适合的那一个也不错。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://en.wikipedia.org/wiki/Lisp_(programming_language)">lisp wiki</a></p>
<p><a href="http://www.catb.org/esr/faqs/hacker-howto.html">how to become a hacker</a></p>
<p><a href="http://www.paulgraham.com/articles.html">Paul Graham essays</a></p>
]]></content>
      <categories>
        <category>Reading</category>
      </categories>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>8086CPU的中断处理笔记</title>
    <url>/posts/notes-of-interrupt-handler-in-assembly-language/</url>
    <content><![CDATA[<p>《汇编语言》第三版有关中断处理的学习笔记。</p>
<span id="more"></span>

<h4 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h4><ul>
<li><p>什么是中断？</p>
<blockquote>
<p>一种来自CPU内部或者外部的中断信息，被CPU检测到，CPU在执行完当前正在执行的指令后，可以立即对所接收到的信息进行处理。</p>
<p>Wiki上的解释更为简单点：</p>
<p>In digital computers, an interrupt is an input signal to the processor indicating an event that needs immediate attention. </p>
</blockquote>
</li>
<li><p>中断可分为哪些类型？</p>
<blockquote>
<p>按照是否发生在CPU内部，分为：</p>
<ul>
<li><p>内中断：发生在CPU内部的中断， 比如溢出。</p>
</li>
<li><p>外中断：发生在CPU外部的中断，比如外部设备输入</p>
</li>
</ul>
</blockquote>
</li>
<li><p>中断处理的基本机制是什么？</p>
<p>一般分四步：</p>
<ul>
<li>获取中断类型码 N</li>
<li>标志寄存器入栈，TF，IF 设置为0 </li>
<li>CS，IP入栈</li>
<li>(IP)= (N * 4), (CS) = (N * 4 + 2)</li>
</ul>
<p>其中，外中断与内中断在第一步，即获取中断类型码N稍有不同， 因为外中断的中断信息来自CPU外部，中断类型码通过<strong>数据总线</strong>送入CPU的， 而内中断的中断类型码是直接在CPU内部产生的。</p>
<p>中断后面的三步可转换成如下汇编语言：</p>
<pre><code class="assembly">; 标志寄存器入栈
pushf

; 设置 TF，IF 为0，TF，IF为标志寄存器的8，9位
pushf
pop bx
and bh, 11111100b
push bx
popf

; CS，IP入栈
push CS
push IP
</code></pre>
<p>这里解释下为什么要设置 TF=0， IF=0。</p>
<ul>
<li><p>TF 与单步中断有关</p>
<p>单步中断的类型码为1， CPU检测TF，如果 TF =1，则产生单步中断，CPU会去执行1号中断处理程序，故这里将TF设置为0。</p>
</li>
<li><p>IF与外中断相关</p>
<p>CPU可以不响应的外中断称为 可屏蔽中断。CPU通过IF的值决定是否响应可屏蔽中断。</p>
<p>当 IF=1，CPU执行完当前指令后，响应中断，引发中断过程。IF=0，CPU不响应可屏蔽中断。</p>
<p>所以这里设置IF=0，这样，在进入中断例程后，便禁止了其他的可屏蔽中断。</p>
</li>
</ul>
</li>
<li><p>如何根据中断类型码找到对应的中断例程的入口地址？</p>
<blockquote>
<p>通过中断向量表 IDT Interrupt description table。</p>
<p>对8086机，中断向量表指定存放在内存地址0处，共有256种中断类型，一个表项存放一个中断例程的入口地址，即CS：IP，故整个中断向量表占用  4 byte * 256 = 1024 byte，即内存地址从0000:0000 到 0000:03FF的1024个单元中存放着中断向量表。</p>
</blockquote>
</li>
<li><p>中断例程有哪些？</p>
<p>中断例程分两种：</p>
<ul>
<li><p>程序员自己编写的</p>
</li>
<li><p>系统自带的：可由 BIOS 或 DOS提供。</p>
<blockquote>
<p>BIOS：基本输入输出系统，存放在ROM中。</p>
<p>BIOS 中主要包括的中断：</p>
<ul>
<li>外部中断和内部中断的中断例程</li>
<li>用于对硬件设备进行 I/O操作的中断例程 「比如在屏幕进行打印，int 10h」</li>
<li>其他和硬件系统相关的中断例程</li>
</ul>
<p>操作系统DOS 也提供了中断处理，注意，和硬件设备相关的DOS 中断例程中，一般都调用了BIOS中的中断例程。</p>
<p>BIOS, DOS 提供的中断例程，都是使用<strong>ah</strong> 来传递子程序的编号。</p>
<p>比如(ah)=9, 表示调用第 N 号中断例程的9号子程序。</p>
<p>8086支持的中断例程列表：<a href="http://www.ablmcc.edu.hk/~scy/CIT/8086_bios_and_dos_interrupts.htm">bios and dos interrupts</a></p>
</blockquote>
</li>
</ul>
</li>
<li><p>程序员如何自己编写中断处理程序？</p>
<p>三步走：</p>
<ul>
<li><p>编写中断处理程序</p>
</li>
<li><p>将中断处理程序复制到指定的内存地址中</p>
</li>
<li><p>设置中断向量表</p>
</li>
</ul>
<p>这里，将中断处理程序复制到内存中哪个地方合适？</p>
<p>内存地址从0000:0000 到 0000:03FF的1024个单元中，存放着256种中断类型的入口地址，但实际上，系统要处理的中断事件远没有达到256个，<strong>一般情况下，从0000:0200 到 0000:02FF 的256个字节所对应的中断向量表项都是空的</strong>，可以安放在此处。</p>
</li>
<li><p>有哪些常见的中断例程？</p>
<p>int 10h: </p>
<blockquote>
<p> BIOS 提供， (ah)=2h, 表示调用第 10h 号中断例程的2号子程序，置光标， (ah)=9h, 表示调用第 10h 号中断例程的9号子程序，在光标位置显示字符。</p>
</blockquote>
<p>int 21h:</p>
<blockquote>
<p> DOS 提供,  (ah)=4ch, 表示调用第 21h 号中断例程的4c号子程序，即退出程序， (ah)=9h, 表示调用第 21h 号中断例程的9号子程序，在光标位置显示字符串。</p>
</blockquote>
<p>int 9h: </p>
<blockquote>
<p>BIOS 提供。从60h端口读出输入的扫描码，并将其转化为相应的ASCII码或状态信息，存储在内存的指定空间（键盘缓冲区/状态字节）中。</p>
</blockquote>
<p>Int 16h</p>
<blockquote>
<p>BIOS提供，该中断例程包含的0号子程序，可以从键盘缓冲区中读取一个键盘的输入。</p>
</blockquote>
</li>
</ul>
<h4 id="端口读写"><a href="#端口读写" class="headerlink" title="端口读写"></a>端口读写</h4><p>外中断的处理，涉及到端口读写，来了解下。</p>
<p>CPU 可以直接读写3个地方的数据：</p>
<ul>
<li>CPU内部的寄存器</li>
<li>内存单元</li>
<li>端口</li>
</ul>
<p>CPU 对端口的读写只有两个指令： in (读取), out（写入）.</p>
<p>读写端口，只能通过 ax / al, 即读入的信息和写入的信息都通过  ax / al 传递。</p>
<p>端口地址范围：0～65535</p>
<ul>
<li><p>0～255的端口读写： </p>
<pre><code class="assembly">in al, 20h
out 20h, al
</code></pre>
</li>
<li><p>256～65535的端口读写： </p>
<pre><code class="assembly">mov dx, 3ffh ;需要一个16位寄存器来存放端口地址
in al, dx
out dx, al
</code></pre>
</li>
</ul>
<h4 id="有关外中断"><a href="#有关外中断" class="headerlink" title="有关外中断"></a>有关外中断</h4><p>主要为处理外部设备的输入输出，比如键盘的输入。</p>
<p>外设与CPU交互通过端口实现：</p>
<blockquote>
<p>外设的输入先送入相关的接口芯片的端口，CPU通过访问端口来读取外设的输入。</p>
<p>同样，CPU向外设的输出也不是直接送入外设，而是先送入端口，再由相关芯片送入外设，即端口相当于一个中间站。CPU通过端口与外设联系。</p>
</blockquote>
<p>外中断分为两类：</p>
<ul>
<li><p>可屏蔽中断： CPU 可以不响应的外中断</p>
<blockquote>
<p>通过 标志寄存器中的 IF位来判断是否屏蔽。</p>
<p>8086CPU提供了设置IF的指令：</p>
<p>sti ，设置 IF=1</p>
<p>cli，设置 IF=0</p>
<p>几乎所有由外设引发的外中断，都是可屏蔽中断。</p>
</blockquote>
</li>
<li><p>不可屏蔽中断：CPU必须响应的外中断</p>
<blockquote>
<p>对于8086CPU， 不可屏蔽中断的中断类型码固定为2。</p>
<p>不可屏蔽中断是系统中，有必须处理的紧急情况发生时，用来通知CPU的中断信息。</p>
</blockquote>
</li>
</ul>
<p>以键盘输入引发的中断为例：</p>
<p>松开或者按下键盘时，会产生一个扫描码，该扫描码会被送入60h 端口，引发9号中断，CPU检测到该中断后，如果IF=1，则响应中断，引发中断过程，去执行int 9h 中断例程。</p>
<p>即整个流程为：</p>
<ul>
<li>键盘产生扫描码</li>
<li>扫描码送至60h端口</li>
<li>引发9号中断</li>
<li>CPU执行BIOS提供的 int 9h 中断例程</li>
</ul>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://book.douban.com/subject/25726019/">《汇编语言》(第3版)</a></p>
<p><a href="https://en.wikipedia.org/wiki/X86_instruction_listings">x86 instruction listings</a></p>
<p><a href="http://www.ablmcc.edu.hk/~scy/CIT/8086_bios_and_dos_interrupts.htm">bios and dos interrupts</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Assembly</tag>
      </tags>
  </entry>
  <entry>
    <title>读《小径分岔的花园》</title>
    <url>/posts/notes-of-jorge-liuis-borges-short-stories/</url>
    <content><![CDATA[<p>一定是很特别的缘分。</p>
<span id="more"></span>

<p>不然，那么多凑单免运费，为什么偏偏选你了呢？</p>
<p>当然不是因为封面好看……「不过封面挺特别」</p>
<p>之前偶然在一个公众号上，看到作者引用了博尔赫斯的那句“如果有天堂，应该是图书馆的模样。”</p>
<p>就想这人应该挺有意思。</p>
<p>然后去wiki上看他的介绍。</p>
<p>然后就对他那本《小径分岔的花园》有了印象。</p>
<p>然后就凑单了。</p>
<p>嗯，“缘分”不浅。</p>
<p>书送来的时候，薄薄一本，相比其他大部头，这本不要太亲切。</p>
<p>整本书是一个短篇小说集，总有七篇。最后一篇小说名为《小径分岔的花园》。</p>
<p>我直接跳到最后一篇，读完后再从第一篇开始刷。</p>
<p>还好，除了对第一篇讲特隆文化的部分比较懵逼外，其他还能勉强看得懂。</p>
<p>七篇里，比较喜欢《环形废墟》，《通天塔图书馆》和《小径分岔的花园》。</p>
<p>《环形废墟》看完有种庄周梦蝶的感觉。</p>
<p>《通天塔图书馆》很特别，整个图书馆由六角形的回廊组成，六角形的四边有长书架，中间有巨大的通风井，看文字的时候，用我匮乏的想象力极力想着作者描述的那个图书馆是个什么模样。后面转念一想，会不会有人已经画出来了？果然，搜到了一个网站，<a href="http://libraryofbabel.info/">Library of Babel</a>， 很特别，好奇点开了其中的theory，已然蒙圈……</p>
<p>不过真心佩服这小哥，很用心。</p>
<p>书中提到，宇宙的某个书架上有一本“全书”不是不可能的。这本书是所有书籍的总和。</p>
<blockquote>
<p>我祈求遭到忽视的神让一个人，即使几千年中只有一个人，查看到那本书。</p>
<p>假使我无缘得到那份荣誉，智慧和幸福，那么让别人得到吧。</p>
</blockquote>
<p>若真有这样的一本书，那得到的人得多么的幸运，纵使青灯黄卷孤影也值了。</p>
<p>最后那篇《小径分岔的花园》，主角是一个中国人，有些意外。看到他开枪那会，我还有些懵逼，直到结尾才明白是为什么。</p>
<p>不过艾伯特也是够冤的，他爹妈给他起名的时候，怎么会料到这名字日后竟带来了性命之忧。</p>
<p>整本小说集里面，有一些关于时间和空间的辩论，看的不是很懂，就直接略过了。</p>
<p>对于喜欢大开脑洞的读者，博尔赫斯的书应该很有吸引力。</p>
<p>我目前这水平，就先暂别了。</p>
<p>终。</p>
]]></content>
      <categories>
        <category>Reading</category>
      </categories>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>读《learn more, study less》</title>
    <url>/posts/notes-of-learn-more-study-less/</url>
    <content><![CDATA[<p>老实说, 硬着头皮刷完后, 有些失望的.</p>
<span id="more"></span>

<p>大概是我过于期待了.</p>
<p>但也不是说它完全不值得花时间读一读.</p>
<p>这里先来过一过整本书的脉络, 然后说点自己的感想吧.</p>
<p>整本书主要分两大部分, 第一部分介绍了holistic learning strategy, 第二部分用大量的篇幅列举了一系列的学习技巧.</p>
<p>当然, 单看目录你会发现是四个部分, 但是第三部分侧重给到一些有关精力管理 &amp;&amp; 时间管理的建议, 第四部分则是前面章节的一个小结. 篇幅都比较短. 重点仍在前两部分.</p>
<p>那么 holistic learning strategy 到底指的是什么?</p>
<p>翻译成中文, 字面意思是全面学习策略或者说是整体性学习策略,  主要强调概念与概念的关联, 并认为关联关系越强越好.</p>
<p>如果一个知识点, 不能与其他知识点进行关联, 也就很难被记住.</p>
<blockquote>
<p>Holistic learning is based on linking ideas as a way of remembering and applying them.</p>
<p>Learning things requires associations. The more associations you can create and the stronger those associations are, the better.</p>
</blockquote>
<p>整体性学习策略基于三个主要的理念:</p>
<ul>
<li><p>Constructs</p>
<blockquote>
<p>对整个体系的整体理解. 多个概念之间相互联系.</p>
<p>A construct defines a set of tightly interlinked understandings.</p>
</blockquote>
</li>
<li><p>Models</p>
<blockquote>
<p> Simplified construct [精简化的知识结构]</p>
<p>将多个核心的概念关联起来, 形成对特定事物的理解.</p>
<p>By taking several core concepts and linking them together into one form, you create a model.</p>
</blockquote>
</li>
<li><p>Highways</p>
<blockquote>
<p>独立结构体系之间的联接.</p>
<p>linkages between isolated constructs.</p>
</blockquote>
</li>
</ul>
<p>整体性学习策略具体可以分为5个阶段:</p>
<ul>
<li>Acquire</li>
<li>Understand</li>
<li>Explore</li>
<li>Debug</li>
<li>Apply</li>
</ul>
<p>其实还有一个Test, 测试阶段, 作者认为以上的每个阶段都需要进行测试, 通过测试确保该阶段的顺利完成.</p>
<p>具体而言:</p>
<ul>
<li><p>Acquire Test</p>
<blockquote>
<p> <strong>Have I seen/listened to the idea before?</strong></p>
</blockquote>
</li>
<li><p>Understand Test</p>
<blockquote>
<p><strong>Do I get (at a surface level) what this idea means?</strong></p>
</blockquote>
</li>
<li><p>Explore Test</p>
<blockquote>
<p> <strong>Do I understand where this idea comes from, what it is related to and what outside ideas can be connected with it?</strong></p>
</blockquote>
</li>
<li><p>Debug Test</p>
<blockquote>
<p><strong>Have I removed inappropriate links between this idea and others?</strong><br><strong>Have I removed false conclusions based on connections that don’t actually exist?</strong></p>
</blockquote>
</li>
<li><p>Apply Test</p>
<blockquote>
<p> <strong>Have I used this idea in my practical life?</strong></p>
</blockquote>
</li>
</ul>
<p>其实, 真实的学习过程中, 并不会觉得有这么多繁杂的阶段, 就我个人而言, 更多的是, 读完一段材料, 自己理解, 如果不懂,  看看是哪里不懂, 找点相关的材料继续理解, 实在理解不了, 可能就放弃了.[这大概是我水平没提升的原因之一]</p>
<p>第一部分的最后, 作者列出了五种常见的信息结构[Arbitrary, Opinion, Process, Concrete, Abstract]以及针对这些信息结构如何去更好地理解.</p>
<p>第二部分, 作者给出了大量的学习技巧, 涉及快读, 流程记笔记, 基于项目的学习等等.</p>
<p>其中, 作者认为, 开始学习最好的方法是隐喻, 可视化/可听化, 基于流程的记事和制图.</p>
<blockquote>
<p>The best techniques to start learning are <strong>metaphor, visceralization, flow-based notetaking and diagraming</strong>.</p>
</blockquote>
<p>当然, 最直接有效的, 还是<strong>Project-Based Learning</strong>, 因为所有的学习, 其终点都将是应用, 而做项目, 出作品本身, 就是最好的学习.</p>
<p>好了, 来说说自己刷完后为什么失望吧.</p>
<p>一方面是觉得书中所讲述的, 并没有什么特别, 基本都是已知的, 甚至有些内容, 特别是第二部分, 用大量篇幅讲述技巧, 给我一种拼凑内容的感觉. 以至于刷的过程中, 不禁自问:  要不要弃坑?要不要?要不要? 要不还是再看看吧…….</p>
<p>最后刷完的时候, 感觉不大舒适, 特意去重温了下TED的那篇演讲<a href="https://www.youtube.com/watch?v=855Now8h5Rs">Learning styles &amp; the importance of critical self-reflection</a>,  真的是比整本书都说的清楚.</p>
<p>当然书中也有一些不错的建议, 这里简单列一些个人觉得不错的建议:</p>
<ul>
<li><p>Set a day off each week</p>
<blockquote>
<p>每周休息一天. 这点对我个人来说, 还是感觉挺有用的.</p>
</blockquote>
</li>
<li><p>Evenings off</p>
<blockquote>
<p>尽量把事情安排在早上, 早点做完, 而不是积压到晚上, 造成不必要的慌张, 甚至直接搁浅</p>
</blockquote>
</li>
<li><p>All Goals Need to Be Written</p>
<blockquote>
<p>这个建议, 很早就知道, 但我一直没当回事, 偶尔会在电脑或手机上记下, 但很快就忘记, 最近才发现, 写下来真的不一样, 用个便利贴, 写下要做的, 时时能看到, 然后会有动力想要一个个早点完成, Bravo!</p>
</blockquote>
</li>
</ul>
<p>也许真的有一些方法, 确实比其他的方法有效. 但任何技巧都比不上长久持续去做一件事.</p>
<p>有句调皮话说得好, 雪不用下得很大, 只要持续得下, 早晚都是冰川.</p>
<p>期待自己也能努力去做到.</p>
<p>Don’t break the chain.</p>
]]></content>
      <categories>
        <category>Reading</category>
      </categories>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>读 《Man&#39;s Search For Meaning》</title>
    <url>/posts/notes-of-man-s-search-for-meaning/</url>
    <content><![CDATA[<p>拖了近半年, 趁着休假, 整理了下.</p>
<span id="more"></span>

<p>整本书篇幅很短, 分两部分.</p>
<p>第一部分 Experiences in a concertration Camp 讲述了作者本人在集中营的那段经历.</p>
<p>第二部分 Logotherapy in a Nutshell,  作者简单介绍了他创立的心理治疗理论 logotherapy, logo 在希腊语中指 meaning. 该理论也基于他本人在集中营的那段经历.</p>
<p>我一直觉得只要人活着, 某些经历是无法遗忘的, 更何况是被囚禁在集中营. 你以为时间会帮你淡忘, 你选择不再记起, 但它们是你过去的一部分, 这是不争的事实, 看似忘却, 但其实从未离开. 书中也提到那些从集中营走出来的人, 大部分都有着或多或少的后遗症, 而作者作为亲历者之一,  选择将苦难化作了养分, 通过创作去疗愈心理创伤. 一定意义上, 感觉更像是自救, 而整个过程, 却也治愈了其他人.</p>
<p>切合了古语, 自渡者渡人.</p>
<p>那整本书, 作者想要表达的是什么呢?</p>
<p>在书的前言部分, 基本点出了整本书他想要表达的观点.</p>
<blockquote>
<p>Life is not primarily a quest for pleasure, or a quest for power, but a quest for meaning.</p>
<p>Viktor Frankl saw three possible sources for meaning:</p>
<ul>
<li>in work</li>
<li>in love</li>
<li>in courage during difficult times</li>
</ul>
</blockquote>
<p>作者认为, 人生不是追逐名利与欢愉, 而是追求意义. 而意义有三个可能的来源, 工作, 爱, 困境中的勇气.</p>
<p>作者为什么会认为追求 meaning 很重要?</p>
<blockquote>
<p>因为它会支撑着一个人走过那些煎熬的日子, 而不是在困境中, 选择通过结束生命, 来结束痛苦.</p>
<p>书中多次引用了尼采 Nietzsche 的话: <strong>He who has a Why to live for can bear almost any How.</strong></p>
<p>meaning 就是那个 Why.</p>
</blockquote>
<p>但是人是多样的, 对于每个人来说, 人生的意义自然也千差万别.</p>
<p>甚至, 是否应该去追求人生的意义 , 也完全是个人的选择.</p>
<p>值得一提的是, 作者并没有去歌颂苦难, 而是强调在无法避免的苦难中, 赋予人生以意义, 找到支撑人活下去的信念, 改变态度, 转移焦点, 人才能在苦难中更好地生存下去.</p>
<p>同时, 他也强调, 不要把人生的目标放在成功和幸福上, 它们只是 meaningful life 中的 by-product:</p>
<blockquote>
<p>Don’t aim at success—the more you aim at it and make it a target, the more you are going to miss it. For success, like happiness, cannot be pursued; it must ensue, and it only does so as the unintended side-effect of one’s dedication to a cause greater than oneself or as the by-product of one’s surrender to a person other than oneself. Happiness must happen, and the same holds for success: you have to let it happen by not caring about it. <strong>I want you to listen to what your conscience commands you to do and go on to carry it out to the best of your knowledge.</strong> Then you will live to see that in the long run—in the long run, I say!—success will follow you precisely because you had forgotten to think of it.</p>
</blockquote>
<p>这倒让我想到 John Roberts 在他那篇很出彩的演讲 I wish you bad luck 里面提到的:</p>
<blockquote>
<p>…..And <strong>one important clue to living a good life is to not to try to live the good life</strong>. The best way to lose the values that are central to who you are is frankly <strong>not to think about them at all</strong>.</p>
</blockquote>
<p>刻意追求的反而得不到.</p>
<p>大抵真正重要的东西, 莫不如此.</p>
<p>这样想, 人生某种程度上是公平的.</p>
<p>Seeing the message in your misfortunes and benefit from them.</p>
]]></content>
      <categories>
        <category>Reading</category>
      </categories>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>读《Mindset》《Atomic Habits》《Principles》等</title>
    <url>/posts/notes-of-mindset-atomic-habits-principles-etc/</url>
    <content><![CDATA[<p>这几个月断断续续刷完了几本书, 大部分是之前想看但偷懒一直没看, 另有一些是意外的惊喜, 趁着假期, 挑几本整理下.</p>
<span id="more"></span>

<p>按照刷完的时间顺序过一过.</p>
<h4 id="《Mindset》"><a href="#《Mindset》" class="headerlink" title="《Mindset》"></a>《Mindset》</h4><p>完整的书名是 <a href="https://www.amazon.com/Mindset-Psychology-Carol-S-Dweck/dp/0345472322">《Mindset: The New Psychology of Success》</a>.</p>
<p>这本在书单上挂了很久, 起源是在TED上看到本书作者 Carol Dweck 的一个演讲<a href="https://www.ted.com/talks/carol_dweck_the_power_of_believing_that_you_can_improve">The power of believing that you can improve</a> .</p>
<p>刷完的时候是6月. 这本刷起来其实挺痛苦的,  一方面是生词比较多, 另一方面是不大适应作者的写作风格. 刷前面两章的时候, 甚至有弃坑的想法. 等刷Chapter3, 适应了这种一个论点多个论据, example by example, example by example 的方式后, 就顺多了. 当然更重要的, 是意识到自己也曾掉进了作者描述的一些坑里面, 而且明白未来也极有可能会再次掉入, 多少有些Shameful…..</p>
<p>作者在书中提到了两种MindSet,  Fixed Mindset  和 Growth MindSet, 并解释了什么是Growth Mindset, 举了体育, 商业, 艺术等诸多领域的例子来说明她的观点. 最后给到了从 Fixed-Mindset  向  Growth MindSet的转变方法.</p>
<p>现在回过来再看, 大概 Fixed-Mindset 玩的是 Multi-players Game, 为了证明自己,这类 Zero-Sum Game 中必然有Winner和Loser, 他们会更在乎输赢, 更在意Ego,  如果他们把 Life 看成  Single-player Game. 也许Fixed-Mindset 就没有存在的可能了.</p>
<p>书的最后有张图, 可以用来概括整本书给到的养成Growth Mindset的实际操作方法, 真正一图胜千言:</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/imagesmindset.jpg"></p>
<p>最喜欢文中的一句: Not Yet.</p>
<h4 id="《Atomic-Habits》"><a href="#《Atomic-Habits》" class="headerlink" title="《Atomic Habits》"></a>《Atomic Habits》</h4><p>同上, 这本属于19年的书单……..</p>
<p>8月份刷完, 当时整理了点笔记, 但是没写完, 然后就再也没写了……. 想到那句 Inspiration is perishable.[ So is passion. 😄️]</p>
<p>这本还是挺好读的, 没啥生僻词汇, 刷得也快, 作者的思路很清晰, 每一张都有Chapter Summary. 每个大的Part后面都会附上一张表来总结前面的内容.</p>
<p>整本书大体的思路是, 习惯的力量, 解释习惯形成的四个步骤, 细诉改变习惯的4大定律. 附上满满Tricks的大餐, OK, 完结.</p>
<p>Surprising Power of Atomic Habits:</p>
<blockquote>
<p> Compounding.</p>
</blockquote>
<p>Habits proceed through four stages:</p>
<blockquote>
<p> Cue =&gt; Craving =&gt; Response =&gt; Reword</p>
</blockquote>
<p>Four laws of behavior change:</p>
<table>
<thead>
<tr>
<th></th>
<th>Create a Good Habit</th>
<th>Break a Bad Habit</th>
</tr>
</thead>
<tbody><tr>
<td>The 1st Law: Cue</td>
<td>make it obvious</td>
<td>make it invisible</td>
</tr>
<tr>
<td>The 2nd Law: Craving</td>
<td>make it attractive</td>
<td>make it unattractive</td>
</tr>
<tr>
<td>The 3rd Law: Response</td>
<td>make it easy</td>
<td>make it difficult</td>
</tr>
<tr>
<td>The 4th Law: Reword</td>
<td>make it satisfying</td>
<td>make it unsatisfying</td>
</tr>
</tbody></table>
<p>有关习惯的话题, 后面刷《Principles》时, Ray Dalio提到了《The Power of Habit》一书, 看简介跟这本的内容应该差不多, 如果你已经刷过《The Power of Habit》, 个人觉得这本可以跳过.</p>
<p>书中引用了Carl Jung的一段话, 很喜欢, 在《Principles》中也被引用了, 这里贴上:</p>
<blockquote>
<p>Until you make the unconscious conscious, it will direct your life and you will call it fate.</p>
</blockquote>
<p>老外貌似都很喜欢《道德经》,常常会看到引用Tao Te Ching的, 这本书临近Conclusion的部分引用了道德经的第七十六章, 翻译出来的感觉跟原文差了好多, 道家的东西还是原汁原味的最好读.</p>
<p>书中有不少图表, 这里附上印象比较深刻的一张.</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/habit.jpg"></p>
<h4 id="《Principles》"><a href="#《Principles》" class="headerlink" title="《Principles》"></a>《Principles》</h4><p>这本书很多人推荐, 大家都说好, 所以我也来凑凑热闹.</p>
<p>事实证明, 我目前这水准, 是无法消化这么干的货的.</p>
<p>严格来说, Principles 并没有看完, 刷完了Life Principles 后就刷不动了.我想后面很长时间里, 我应该也不会去填Work Principles的坑了, 索性记录下刷前半部的一些想法吧.</p>
<p>PartI Where I’m coming from 说了作者本人的故事. 文中提到他不是传统意义上的好学生, 但是他很喜欢自己弄明白一些东西, figure things out by himself. 这个属性真的是太重要了.</p>
<blockquote>
<p>I’ve always had great faith in my ability to figure things out, and over time my need to figure things out made me better at doing so.</p>
</blockquote>
<p>这部分的内容大部分跟BridgeWater 有关, 喜欢投资的小伙伴看下来应该会觉得有意思.</p>
<p>PartII Life Principles中, 列出了5个Higher-level 的原则, 以及由此引出的诸多Mid-level principles, Sub-principles. 具体而言, 基本的方法论是:</p>
<blockquote>
<p>Look to the patterns of those things that affect you in order to understand the cause-effect relationships that drive them and to learn principles for dealing with them effectively.</p>
</blockquote>
<p>5个 Higher-level principles:</p>
<ul>
<li><p>Embrace Reality and Deal with It.</p>
</li>
<li><p>Use the 5-Step Process to Get What You Want Out of Life</p>
<blockquote>
<ol>
<li><p>Have clear goals.</p>
</li>
<li><p>Identify and don’t tolerate the problems that stand in the way of your achieving those goals.</p>
</li>
<li><p>Accurately diagnose the problems to get at their root causes.</p>
</li>
<li><p>Design plans that will get you around them.</p>
</li>
<li><p>Do what’s necessary to push these designs through to results.</p>
</li>
</ol>
</blockquote>
</li>
<li><p>Be Radically Open-Minded</p>
</li>
<li><p>Understand That People Are Wired Very Differently</p>
</li>
<li><p>Learn How to Make Decisions Effectively</p>
</li>
</ul>
<p>读的时候, 有个感觉就是, 那些别人通过自己痛苦的经历总结出来的道理, 你心里明白这些很好很重要, 但是如果自己没经历过相似的场景, 更像是在看Quotes, 没有真正的触动. 纵使当时刷的时候在脑子里留了印象, 时间一久也就淡忘了.</p>
<p>既像是悖论, 却又合情合理.</p>
<p>不可能刷了本书就天真地以为把他人流血流泪得出的教训消化吸收, 然后作为自己的行动准则, 避开未来无数个坑. 不过他人看待世界的方式和价值观倒是很好的参考. 比如在遇到坑的时候, 会有个不一样的态度, 因为一件事只有两种结果,  you win or you learn.</p>
<p>There is no free lunch.</p>
<p>Just struggle well, evolve and get all the joy you can out of life.</p>
<h4 id="《The-Almanack-of-Naval-Ravikant》"><a href="#《The-Almanack-of-Naval-Ravikant》" class="headerlink" title="《The Almanack of Naval Ravikant》"></a>《The Almanack of Naval Ravikant》</h4><p>月初刷完.</p>
<p>这本是意外的惊喜. 刷它是一场很愉快很愉快很愉快的旅程. 书中采用了一问一答的风格, 当然不是全部都这种Style,但 一路刷下来, 丝毫不沉闷, 说的都是人话, 有些还挺幽默, 真的是好久没看得这么开心了.</p>
<p> <a href="https://www.navalmanack.com/">官网</a>有电子书下载地址与相关的背景介绍.</p>
<p>整本书由两个部分组成, Wealth, happiness.  每个部分都围绕着话题细细展开说了很多, 比如Time, Leverage,  Relationship, Health等, 让人不禁激赏的观点实在太多, 这里不详细列出, 也许它并不对所有人的味, 但还是强烈推荐.</p>
<p>事后想想, 自己喜欢它的原因大概是Naval对很多概念的理解很特别, he is totally a clear thinker.</p>
<p>Clear thinkers understand the basics at a very, very fundamental level.</p>
<p>对了, 最后除了Naval 推荐的书单外, 作者本人也推荐了五本书, Principles有上榜, 都是好东西.</p>
<p>好的电影是每一帧你都不想错过, 好的书是每一段你都觉得很耐嚼.</p>
<p>Enjoy.</p>
<h4 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h4><p>这样一次性整理多本, 倒是省了很多份Book Review, 偷懒的功力日增😄</p>
]]></content>
      <categories>
        <category>Reading</category>
      </categories>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>读《100个基本》</title>
    <url>/posts/notes-of-one-hundred-basics/</url>
    <content><![CDATA[<p>一本读起来很舒服的小书。</p>
<span id="more"></span>

<p>像是有人同你唠家常一般。</p>
<p>算是二刷了。</p>
<p>去年冬天临睡前没事刷上几页，篇幅短，所以很快就刷完了。</p>
<p>刷完后，便扔在了一边。</p>
<p>前几天一个不小心扫了眼，被里面的某些句子惊艳到。</p>
<p>甚至有种自己未曾读过它的错觉。</p>
<p>想想还是写点什么留下的好。</p>
<p>整本书主要分两部分，第一部分是作者整理自己对于生活的思考，形成的100条basics，第二部分则是作者经营的书店 Cow Books，针对员工制定的100个basics。</p>
<p>最后，在书的结尾部分，作者建议读者去打造属于自己的100 basics。</p>
<p>那么，什么是 basic 呢？</p>
<p>作者认为基本可以关涉任何事，计划，目标，想养成的习惯，灵光一闪想到的事等。</p>
<p>若是用我自己的理解来看，便是那些重要的，你想要遵守的规则，心底认同的事，学到的经验等。</p>
<p>书中提到的所有basics中，有些做起来还是挺难的，不过作者也提到了cow books的员工中，能做到50%的也是寥寥无几，所以不用强迫自己，摆正心态，一点点来就好。</p>
<p>这里简单挑一些自己挺喜欢的基本，来自第一部分，第二部分有些类似员工手册了，就不摘录了。</p>
<ul>
<li>一切自己负责。</li>
<li>持续思考何为美。</li>
<li>选择少量“应该做的事”。</li>
<li>不如享受麻烦，细细品味吧。</li>
<li>无论做什么事，都不要忘记人的存在。</li>
<li>去看书，听音乐，欣赏艺术和戏剧吧。</li>
<li>不管遇到什么挫折，一定都有解决方法。</li>
<li>身边若增加一件东西，就想办法减去一件。</li>
<li>在不知道选什么好的时候，就选择艰辛的那条路吧。</li>
<li>想到“差不多必须开始了的时候”，通常都已经太迟了。</li>
<li>在有限的时间和金钱内推进事物的前进，是自己的责任。</li>
<li>承蒙好意，坦率接受，有顾虑就干脆拒绝，不要含糊不清。</li>
<li>愈是不会示人的东西愈要用得好，这会令我们的心灵更加丰富。</li>
<li>重要的是，一旦坏了，不马上扔掉，而是要有“一定要修好”的意识。</li>
<li>愈是不知不觉间许下的模糊不清的诺言，愈是小小的约定，愈重要。</li>
<li>对我来说，幸福就是和人深深的联接，加深与人的羁绊，是我最大的幸福。</li>
<li>……………………………………………………………………………………………………………………</li>
</ul>
<p>书中最后给出了打造你的100个基本的建议。</p>
<p>其实每个人都有自己的100 basics，只是并没有像作者那样，一件件梳理好，写下来，并时时根据自身的成长而进行调整。</p>
<p>想起刚读完那会，我也试着去整理，期待能梳理出那些自己珍视的东西出来。</p>
<p>结果并不如意。</p>
<p>大概想要一次完成，或者说期待一次整理，一劳永逸，本身就是不可能的。</p>
<p>嘿，是马拉松，不是短跑冲刺。</p>
<p>但也还好，慢慢知道值得去做的事情，从来不怕多花点时间和精力。</p>
<p>所以不着急，看到或者想到什么了，觉得合适就加在自己的 basics 中。</p>
<p>会有那么点 self - reflection 的味道。</p>
<p>就像作者所说的，更重要的不是整理这些basics，而是真的能将这些basics 融到自己的生活中。</p>
<p>实践是检验一切的标准。</p>
<p>哈，坑好像越开越多了。</p>
<p>喜欢这些文字带给人的一些细小感动和不着痕迹的温暖。</p>
<p>下次考虑多尝试日本文学^_^</p>
]]></content>
      <categories>
        <category>Reading</category>
      </categories>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>读《老舍文集》《边城》《围城》</title>
    <url>/posts/notes-of-laoshewenji-biancheng-etc/</url>
    <content><![CDATA[<p>这三本是17年夏脱产在家那会，约朋友一起看完的，整理文档的时候，把三本的读后感简单整理了下。</p>
<span id="more"></span> 

<h4 id="老舍文集"><a href="#老舍文集" class="headerlink" title="老舍文集"></a>老舍文集</h4><p>300多页，整本书含话剧《茶馆》，《正红旗下》、《我这一辈子》等7部小说，15篇散文。</p>
<p>读完后什么感觉呢？</p>
<p>没什么特别的，更多的是阅读中获得的快乐吧，同时对那个时代多了些了解。</p>
<p>对于这类文学书籍，我曾经的阅读原则是快读就是王道，但这次我没有，反而选择放慢，所以读《茶馆》的时候，我会惊讶于王利发的精于世故，常四爷的硬气如初，看《正红旗下》时，我会想到原来100多年前北京的风沙已经很严重，对大姐夫家那一群人的行为感到可笑又可气，看《微神》时，被老舍对于美好初恋的描写所感动，也为他年少时屡屡不曾吐露心事而生气，既是那么喜欢，为什么不表明心迹？也心疼《月牙儿》里面的她，而《我这一辈子》，则让我对巡警这个职业有了新的认识，寻着蛛丝马迹，自己硬是将《正红旗下》里的定大爷的原型与《宗月大师》牵在了一起。</p>
<p>大抵上一个人只有对生活有了深入的，足够的观察，才能写出让读者共鸣的文字，那些文字在某种层面上其实也表达着作者本人观察这个世界的方式。只是这样一个热爱自然，懂得生活美好与苦涩的人，最后为何会选择投湖来结束自己的生命？搜了下，发现原来真的是不能仅凭一些文字就给一个人盖棺论定，文字只是他的一个方面，而现实生活中他的所作所为才是其自身价值观的写照。了解了下老舍的个人生活，然后明白，作品和人是要分开的。</p>
<h4 id="沈从文《边城》"><a href="#沈从文《边城》" class="headerlink" title="沈从文《边城》"></a>沈从文《边城》</h4><p>喜欢这个简单而美好的故事，虽然最后的结局并不是那么的美好。</p>
<p>故事发生在茶峒，主线是翠翠与大老，二老之间的感情发展，但是通篇里面，作为渡船人的爷爷戏份却是最多，想来爷爷这样淳朴耿直之人现如今怕是太少了，而翠翠那个年代的爱情，怕也仅仅停留在那个年代了。看书的过程，更多是像在看一部很舒心的老电影，看那个时代一个小镇上的风俗人情，记得书中提到若是欢喜一个姑娘，就每天夜里在对溪高崖上为她唱歌，唱上三年零六个月。二八年纪里，对爱情的懵懂与憧憬，会让一个人心甘情愿去做些外人看起来很傻的事儿吧，而对于当事人而言，却是甘之如饴，恨不能久久如此。在这个人人被娱乐信息轰炸的年代，手机已经成为个体的一个部分，还会有人愿意夜夜在对岸，为了一个不确定的结果，唱上三年零六个月吗？</p>
<h4 id="钱钟书《围城》"><a href="#钱钟书《围城》" class="headerlink" title="钱钟书《围城》"></a>钱钟书《围城》</h4><p>是二刷了，第一次看还是好几年前的事了。</p>
<p>整本书看下来，越看到后面心里越闷闷的。</p>
<p>最喜赵辛楣，唐晓芙。</p>
<p>赵辛楣出场并不夺人，但是随着剧情的发展，真是让人越来越喜欢。单恋二十多年的女神跟别人结婚了，他去参加婚礼，心里难过，面上却平平静静，待见到新郎，却又失望至极，怕是不明白女神的择偶标准竟是如此。后面跟方一起去三闾大学，一路同行中，他的处事态度与待人方式，也是让人刮目相看，情商很高。后面在校教学，因汪太太一事而离开，远赴香港，也是走得干干脆脆，及至苏文纨来港拜访，临走时告诉他，自己近来爱读他写给她的信，他的态度呢？他对方渐鸿说她可笑，看到这里，我也不得不佩服，女人大半喜欢显摆他人对自己的爱慕，只是她忘了那爱慕也多跟食物一样，有保质期的，过期了的食物硬是要拿出来在当事人面前显摆，也是够够的了。</p>
<p>唐晓芙出场并不多，戏份算少的，可是少而精，给人留下极好的印象，这样直爽的姑娘没人会不喜欢吧。</p>
<p>也许我喜欢他们俩，是觉得他们活得坦率，不拧巴吧。</p>
<p>方渐鸿作为主角，可却并不讨喜，至少我个人是不大欢喜的。在对待异性上，颇有来者不拒的作风。从鲍小姐一例中可见端倪，而苏文纨呢？他并不爱她，却也不拒绝，最后逼到急处，不得不开口。假定当时他并没有遇到唐晓芙，会不会就这样让苏一直误以为自己也是有意的，半推半就，享受着“高冷美人”的爱慕？幸得唐晓芙并未嫁他，孙柔嘉，呃，我并不喜欢这个姑娘，套路有点深啊。后面他们结婚，常常争吵，都是些鸡毛蒜皮的小事，看到后面会觉得，这城，又何尝不是他们自己要围起来的？</p>
<h4 id="End"><a href="#End" class="headerlink" title="End"></a>End</h4><p>去整理一些曾经写的小段小段笔记，会发现原来此前的人生并不是那么的虚度，记录真的是个好东西。</p>
]]></content>
      <categories>
        <category>Reading</category>
      </categories>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>读《Private Peaceful》</title>
    <url>/posts/notes-of-private-peaceful/</url>
    <content><![CDATA[<p>中文译本《柑橘和柠檬树啊》.</p>
<span id="more"></span>

<p>刷完觉得中文译本这个书名起得真好.</p>
<p>oranges and lemons 在书中是一首歌名.</p>
<p>是一首被反复提及的歌.</p>
<p>是Big Joe 最爱唱的歌, 也是 Charlie 在行刑前柔声哼起的曲子.</p>
<blockquote>
<p>Oranges and Lemons, say the bells of St. Clements,<br>You owe me five farthings, say the bells of St. Martins.<br>When will you pay me? say the bells of Old Bailey.<br>When I grow rich, say the bells of Shoreditch.<br>When will that be? say the bells of Stepney.<br>I’m sure I don’t know, says the great bell at Bow.<br>Here comes a candle to light you to bed,<br>And here comes a chopper to chop off your head.</p>
</blockquote>
<p>故事围绕着小镇上的一家人展开, 父亲是伐木工人, 在一次户外工作中, 为了救儿子Tommo而被大树砸伤身故, 父亲死后, 母亲带着三个孩子艰难维持生活, 彼时老大Charlie已经上学, 二儿子Tommo刚开始离家入校, 最小的儿子Big Joe因为脑部受过伤, 智商一直处于孩童水平. 童年时期, Charlie 和Tommo 在学校里结识了可爱的Moll, 三人青梅竹马,  常常一起出行, 形影不离, 兄弟俩皆爱慕着Moll, 几年后, 三人渐渐长大. 不久一战爆发, 政府征兵,  Tommo 随后和Charlie奔赴战场. 出发前, Moll怀有了Charlie的孩子, 两人在Peaceful一家的祝福下成婚.故事的最后, Charlie被处死, Moll生下了宝宝, 而Tommo则继续留在战场, 怀着平安归来, 照顾家人的承诺, 等待战争的结束.</p>
<p>Private Peaceful 在文中出现的并不多, 后来我才明白指的是Charlie.</p>
<p>书中最后的Postscript指明了大致的写作意图:</p>
<blockquote>
<p>In the First World War, between 1914 and 1918, over 290 soldiers of the British and Commonwealth armies were executed by firing squad, some for desertion and cowardice, two for simply sleeping at their posts.<br>Many of these men we now know were traumatised by shell shock. Court martials were brief, the accused often unrepresented.<br>It was only in 2006 that the authorities recognised <strong>the injustice these soldiers suffered.</strong> A conditional pardon was granted in November 2006.</p>
</blockquote>
<p>书中, Charlie 并不是战死沙场的, 而是在一次突击中, 为了照顾受伤的弟弟Tommo, 不服从自杀式的军令, 被直属上级指控是懦夫, 而被军法处置.</p>
<p>但我们都知道Charlie从来都不是懦夫.</p>
<p>年少时与欺负弟弟的校园恶霸打架, 为了让家人吃饱, 冒险去偷猎, 长大后, 救下被上校认为无用而准备枪杀的猎犬Bertha, 在战争中, 时刻保护着弟弟, 大哥哥一般照顾着战友, 反抗以公权泄私愤的上级, 在枪林弹雨中救下Captain Wilkie.</p>
<p>可就是这样的人, 却被扣上了worthless, coward的帽子.</p>
<p>公正来得太迟了些.</p>
<p>但迟到的公正也依然是公正.</p>
<p>不管是对长眠地下的英烈, 还是现存于世的后人来说, 都是一种无形的慰籍吧.</p>
<p>书中最后的Note部分, 作者提到了他构思整个故事时, 对主人翁应该叫什么名字一直没有头绪, 后来和妻子Clare在一次祭奠战士墓地的旅行中, 遇到了他的答案.</p>
<blockquote>
<p>Walking down the line of Portland-stone headstones, Clare bent down to look more closely at one of them. “I think maybe I’ve found your soldier’s name,” she said. The stone read: ‘Private T. S. H. Peaceful Royal Fusiliers 4th June 1915’.</p>
</blockquote>
<p>Peaceful真的是一个很棒的名字.</p>
<p>Fuck the war, Peace forever.</p>
]]></content>
      <categories>
        <category>Reading</category>
      </categories>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>读《秋园》</title>
    <url>/posts/notes-of-qiu-yuan/</url>
    <content><![CDATA[<p>讲述一个女人的一生.</p>
<span id="more"></span>

<p>篇幅很短, 看了自序, 觉得很舒服, 顺着刷完, 整个过程像是一位老奶奶, 不紧不慢地跟你说着过往.</p>
<p>故事中的秋园生于1914年, 89岁逝世. 一生经历了中国的几次大变革. 少年丧父, 中年丧偶, 晚年丧子, 严格来说, 晚年丧子后, 她曾一度走到自杀的边缘, 又一次经历了丧夫之痛. 最终从异乡回到故地, 终老故土.</p>
<p>不知为何, 刷的过程中, 想起了我的外婆.</p>
<p>外婆已过世多年.</p>
<p>外婆也有着苦难的一生.</p>
<p>年轻时, 外公极为心疼外婆, 从不让她下地劳作, 可惜外公走得早, 正值壮年, 意外身故, 丢下外婆和他们年幼的五个孩子. 外婆一生辛苦劳作, 努力拉扯五个小孩成家立业, 终生未再婚.</p>
<p>小时候去外婆家, 常常看到她伏着身子, 编草垫, 一直到很晚很晚, 头顶上方, 挂着一盏昏黄的灯.</p>
<p>印象中, 外婆不看电视, 不打牌消遣, 唯一的社交, 是去找一些老朋友, 串串门, 拉拉家常, 做祷告, 做礼拜.</p>
<p>外婆还有赶夜路的习惯.</p>
<p>儿时的我, 曾跟她一起赶过路. 大半夜, 走过一条条小道, 灯火极少, 时而有狗吠声, 鞋子与地面轻微地摩擦着. 头顶的满天星, 亮亮的, 照着路.</p>
<p>母亲说外婆一生很苦.</p>
<p>但外婆从来没说过自己苦.</p>
<p>外婆说, 再苦的日子里, 她也没有求过人, 总有办法扛过.</p>
<p>她常说, 人活着要争气.</p>
<p>她一生想要证明自己有用, 能独自撑得住整个家, 晚年时, 不愿拖累子女, 一人独居, 自己劳作, 照顾自己.</p>
<p>外婆的身上, 有着同秋园相似的那股韧性.</p>
<p>应该说, 秋园身上的那股韧性, 可以在中国很多女性身上看到.</p>
<p>她们来过, 承受着生活的捶打, 最后离开, 轻浅得像未曾来过一般.</p>
<p>她们看似渺小却不脆弱, 用尽力气, 不被生活揉碎.</p>
<p>这样的她们, 教人敬佩.</p>
<p>似花儿一般, 迎风摇曳, 静静绽放, 静静凋谢.</p>
]]></content>
      <categories>
        <category>Reading</category>
      </categories>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>读《睡眠革命》</title>
    <url>/posts/notes-of-redefine-your-rest/</url>
    <content><![CDATA[<p>Redefine your rest.</p>
<span id="more"></span>

<p>因睡眠困惑而刷.</p>
<p>去年年底, 自己常常会莫名的疲惫, 不是睡得太多就是睡得太少, 感觉进入了一个恶性循环, 早上得靠闹钟才能醒来, 醒来后匆匆收拾, 去公司, 而深夜该入睡的时候, 我又偏偏刷着网易云, 开启夜猫子模式.</p>
<p>结果自然是整个人颓靡, 性格也随之急躁.</p>
<p>说好的做个温柔的人呢? [自然是扯淡]</p>
<p>然后就刷了这本, 试了下里面提到的一些方法, 挺有用, 哈哈, 至少对我是这样.[当然也还是会有没睡好的时候]</p>
<p>整本书最大的亮点大概就是作者提到的R90概念.</p>
<p>R90是指以90分钟为一个周期, 如果把睡眠当成是一个身心修复的过程, 那么睡眠时长可以看成由一个个修复周期组成, 作者认为每个人都有适合自己的修复周期, 有的人适合5个周期, 有的人适合4个周期.而不必纠结与一定要睡满8个小时之类的说法.</p>
<p>作者推荐的修复周期是一周达到35个, 也就是平均每天5个周期, 睡满7.5个小时.</p>
<p>所以如果你是早起型, 早6点半起床的话, 最好在11点入睡.</p>
<p>如果是晚睡型, 比如凌晨1点入睡, 往后顺延7.5个小时, 8点半醒来.</p>
<p>但是大部分人会在9~10点开始工作, 所以晚睡型相对早起型, 醒来的时间里面会很匆忙, 而这是作者不推荐的.</p>
<p>同时不推荐的还有在周末补觉的行为, 失去的睡眠是无法补回来的.[这并不是说周末不要去睡懒觉,而是说不要存有工作日牺牲睡眠, 等到周末再去补救的想法, 尽量平衡你的修复周期在一周中的分配]</p>
<p>在入睡前和醒来后, 作者建议预留90分钟的时间, 分别用于热身和舒缓, 也给出了一些建议. 比如睡前关闭电子设备, 调整光线, 让卧室温度适宜等, 醒来后进行适度的锻炼, 吃个简单的早饭, 都是很好的开始.</p>
<p>除此之外, 你也可以利用白天的时间来弥补缺失的周期.</p>
<p>其中, 午后1<del>2点和下午5</del>7点都是很好的修复时段.</p>
<p>小憩30分钟最切合实际. 即使小睡时间非常短暂, 也能增强大脑的记忆处理能力, 让此后的时间更高效.</p>
<p>另一些要注意的点, 比如咖啡因的适量摄入, 床垫的选择, 光线的选择, 睡姿等等之类, 我并没有用上, 这里就不细说了.感兴趣的小伙伴可以去翻翻原书.</p>
<p>我个人的做法是, 手机, 电脑开自动黑暗模式, 然后提醒自己晚上10点多关电脑, 戒掉睡前听歌的习惯, 醒来拉伸下, 洗漱前不碰手机, 当然不是每次都做到, 但尽量去做, 一段时间下来, 感觉精神好了很多.</p>
<p>毕竟, 我们都曾是喜欢早起的小孩.</p>
<p>哦, 对了, 肥宅水的咖啡因含量并不低, 少喝吧.</p>
<p>嗯, 就这样. 希望我提炼出来的一些建议也能给到你一些帮助.</p>
<p>祝君日日好梦.</p>
]]></content>
      <categories>
        <category>Reading</category>
      </categories>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>读《重来2》</title>
    <url>/posts/notes-of-remote-office-not-required/</url>
    <content><![CDATA[<p>《重来2》中文版部分内容摘选.</p>
<span id="more"></span>

<p>作者在书的最后调侃了一句: 献给所有正堵在路上的朋友们。</p>
<p>哈哈.</p>
<h4 id="远程工作的时代已经到来"><a href="#远程工作的时代已经到来" class="headerlink" title="远程工作的时代已经到来"></a>远程工作的时代已经到来</h4><p>为何办公室无法办公</p>
<blockquote>
<p>有意义的工作，创意工作，需要人静心深思的工作，重要的工作……干这类活儿的时候，你得需要一段不受打扰的时间才能进入状态。</p>
<p>实际上，能安静地一个人待着，使自己的思绪不被打扰，这正是远程工作最大的好处之一。</p>
</blockquote>
<p>别再把人生耗费在通勤路上</p>
<blockquote>
<p>假设你每天要在交通拥堵的时段开30分钟车去上班，再加上走到车边和走进办公室的15分钟，那么每天来回需要1.5小时，一周就是7.5小时，考虑到假日和休假，每年你花在路上的时间大约有300~400个小时。400小时，刚好就是我们开发出Basecamp（我们最畅销的一款产品）的时间。</p>
<p>想象一下，如果每年多出400个小时，你能做到什么。通勤不仅会危害你的健康、人际关系和环境，它还会影响你的事业。</p>
</blockquote>
<p>逃离朝九晚五</p>
<blockquote>
<p>分布式员工团队（distributed workforce）带来了一个巨大的转变：人们的工作方式从“同步”协作变成了无须同步的协作。</p>
<p><strong>真正重要的是把工作做好，而不是死守着上下班时间。</strong></p>
</blockquote>
<p>何必都挤在大城市</p>
<blockquote>
<p>我们预测，<strong>在接下来的20年，奢侈的特权就是“离开大城市”。</strong>不是住在郊区、依然被紧紧束缚的那种，而是想去哪儿落脚，就去哪儿。</p>
</blockquote>
<p>新时代的奢侈</p>
<blockquote>
<p>新时代的奢侈就是摆脱“日后再享受生活”的思维桎梏，现在就去做你热爱的事，跟工作并行。何必要把时间浪费在那种“等我退休了，生活该有多美好”的白日梦上？</p>
<p>把工作跟退休之间划一道界限，这其实是相当武断的。你的人生无须再遵循这样的规则。<strong>你可以把这两样混合在一起，既有趣，又有钱挣</strong>——设计一种更好的、能把工作变得有趣的生活方式，因为<strong>工作不是这辈子唯一的事儿</strong>。</p>
<p><strong>新时代的奢侈，就是自由度和时间的奢侈。</strong>一旦你尝过这种滋味，豪华办公室或名厨也没法把你拉回来。</p>
</blockquote>
<p>不是钱的事(It’s not about money)</p>
<blockquote>
<p>远程工作是为了提升生活质量。</p>
<p>最适合远程办公的脑力工作，比如写作、编程、设计、客户支持（先列举这几样），跟残酷的利润大战都没什么关系（制造业就属于这种）。</p>
</blockquote>
<p>不必非此即彼</p>
<blockquote>
<p>积极地接纳远程工作的概念，并不意味着从此你就不能有办公室了，只不过办公室不再是必需品。</p>
</blockquote>
<p>有得有失</p>
<blockquote>
<p>远程工作有这么多好处，人很容易得意忘形：自由，时间，金钱，要什么有什么，一切都唾手可得。淡定点儿，兄弟。在这个世界上，极少有什么事是百利而无一害的。</p>
<p>有些时候，面对面交流的效果依然是最好的。</p>
<p>面对全新的工作架构，你需要拿出更强的定力和毅力才能跟上工作进度，坚持下去。</p>
</blockquote>
<h4 id="反对远程工作的理由"><a href="#反对远程工作的理由" class="headerlink" title="反对远程工作的理由"></a>反对远程工作的理由</h4><p>唯有同处一室，奇迹才会发生</p>
<blockquote>
<p>物以稀为贵。面对面交流的机会变成“配给制”之后，它们的重要性提升了，变成了偶尔才能享受的盛宴，变成了需要细细品味、用心对待的事。</p>
</blockquote>
<p>要是不盯着，我怎么知道他们在干活？</p>
<blockquote>
<p>对远程工作的绝大多数担忧都源自缺乏信任。</p>
<p><strong>底线是，你不应该雇用你不信任的人，或是为不信任你的人工作。</strong></p>
</blockquote>
<p>家里的干扰太多了</p>
<blockquote>
<p><strong>只要工作本身令人兴奋，又有成就感，绝大多数人是主动想要工作的。</strong></p>
<p>请记住，干扰的头号劲敌就是有趣又有意义的工作。</p>
<p>当我们发觉自己会定期地分心，不想工作的时候，或许这就是个信号，说明这项工作没有经过仔细筹划，或是这项任务单调无趣，再或者，我们参与的整个项目压根儿就没有意义。</p>
</blockquote>
<p>我现在就要答案！</p>
<blockquote>
<p>首先，你需要认识到，并不是每个问题都需要立即得到解答。没有什么能比拿着一个无须立即得到答案的问题去打扰别人更傲慢的行为了。</p>
<p>放开手，别抓狂，等到对方准备好协助你的时候，回答自然就会朝你走来——这里面几乎蕴含着一种禅意。</p>
</blockquote>
<h4 id="远程工作中如何协作"><a href="#远程工作中如何协作" class="headerlink" title="远程工作中如何协作"></a>远程工作中如何协作</h4><p>规划出重叠时间</p>
<blockquote>
<p>想要顺利地进行远程工作，你需要做好安排，让自己的工作时间与同事的工作时间有所重叠。</p>
<p>在37signals，我们发现，4个小时的重叠时间就正合适，既能避免信息延迟，也能让大家产生同在一个团队的感觉。</p>
</blockquote>
<p>把工作进展秀出来</p>
<blockquote>
<p>在37signals，我们制定了一项制度：大家每周交流一次，主题是：“这周你做了什么？” 每个人都进来说说自己上周做了什么，下周打算做什么。</p>
<p>我们都会本能地产生不想让团队失望的想法，所以，当你把承诺摆在眼前的时候，它会变得更有约束力。</p>
<p>工作有进展是件快乐的事儿，最好拿出来跟同事们分享。</p>
</blockquote>
<p>工作成果是最根本的衡量标准</p>
<blockquote>
<p>雇用远程工作的员工有一些不为公众所知悉的好处，其中之一就是<strong>工作本身成了绩效的衡量标准</strong>。</p>
<p>只看重工作成果的时候，公司里谁尽心尽力，谁没有，你一眼就能看出来。</p>
</blockquote>
<p>慎用 M&amp;Ms (meetings &amp; Managers)</p>
<blockquote>
<p>事实是，离会议和管理者越远，完成的工作就越多。</p>
<p>管理也像会议一样，应当少而精。</p>
</blockquote>
<h4 id="当心副作用"><a href="#当心副作用" class="headerlink" title="当心副作用"></a>当心副作用</h4><p>可别宅出病来(Cabin fever)</p>
<blockquote>
<p>我们天生就不适合彻底的独居。</p>
<p>人是有可能宅出病来的。</p>
</blockquote>
<p>拿得起，放得下(check-in, check-out)</p>
<blockquote>
<p><strong>如果你没能好好地把握生活与工作的平衡，远程工作的自由就会变成奴役。</strong></p>
<p>我们认为，在绝大多数情况下，工作就像一场马拉松。每个人都找到适合自己的步调是最重要的。</p>
<p>有个办法可以帮助员工制定健康的界限：鼓励他们在一天工作结束后，这样问问自己，“这一天我好好工作了吗？”</p>
<p>如果你能迅速地答出“是的”，你就可以心满意足地停下来了——就算某项工作没有全部完成，你已经取得了重要的进展。</p>
</blockquote>
<p>把工作环境弄舒服点儿</p>
<blockquote>
<p>如果你真打算长期在家踏踏实实工作的话，你需要运用一点人体工程学的知识，把基础设施弄舒服点儿。</p>
<p>这意味着你需要一张合适的桌子，（高度可调？）一把舒服的椅子，（符合人体工程学？）一个大小刚好合适的屏幕。（27英寸高清！）这些东西貌似都挺贵，可是，如果你不想腰肌劳损、牺牲视力或其他方面的健康，这些都是值得的。[站着办公]</p>
</blockquote>
<p>当心你的腰围</p>
<blockquote>
<p>如果一天的工作中没有起来动动的理由，那就主动寻找机会。</p>
<p>比如，与其在工作台前吃午餐，不如走路去咖啡店或三明治小店。带上小狗，长长地遛它一段儿路。趁休息的时候在跑步机上跑跑。</p>
</blockquote>
<p>与客户一起工作</p>
<blockquote>
<p>远程办公文化的37signals, 如何获取客户?</p>
<p>没有秘诀。但小窍门倒是有几个.</p>
<ul>
<li><p>在销售阶段，要让潜在客户很早就知道你们不在同一个地方</p>
<blockquote>
<p>信任需要在一开始的时候就建立起来。</p>
</blockquote>
</li>
<li><p>在客户开口索要你的背景资料之前，就主动给他们</p>
<blockquote>
<p>一上来就要让客户知道，你没什么可隐瞒的。在早期，建立信任是最难的事。</p>
</blockquote>
</li>
<li><p>经常把工作进度拿给他们看</p>
<blockquote>
<p>客户都会焦虑，而这是减轻焦虑的最好方法。</p>
</blockquote>
</li>
<li><p>让客户很容易就能找到你</p>
<blockquote>
<p>既然你们没法面对面，那你最好迅速地回电话、邮件、即时消息等等。</p>
</blockquote>
</li>
<li><p>要让客户参与进来，及时掌握工作进度</p>
<blockquote>
<p>要让客户感觉到，这也是他们的项目。</p>
<p>当他们感到自己也是项目一份子的时候，焦虑和恐惧感就会被兴奋和期待所取代。</p>
</blockquote>
</li>
</ul>
</blockquote>
<p>税收，会计，法律条文</p>
<blockquote>
<p>劳工法就像一张复杂的网，可别把自己给绕进去了。</p>
<p>如果你是远程工作的员工，希望为外国公司工作，操作方法也是这样的。<strong>成立一个个人公司，每月把你的“薪水”开发票。在绝大多数国家里，成立个人公司都很容易，办一些简单的发票手续，税务也都不复杂。</strong></p>
</blockquote>
<h4 id="寻找并留住最优秀的人才"><a href="#寻找并留住最优秀的人才" class="headerlink" title="寻找并留住最优秀的人才"></a>寻找并留住最优秀的人才</h4><p>世界很大</p>
<blockquote>
<p>世界从未像现在这样小，市场也从未像现在这般开放。不要当个文化或地域上的隐士。</p>
</blockquote>
<p>生活总在继续</p>
<blockquote>
<p>在公司待了很久的老员工最适合远程工作。</p>
<p>请记住，在人生最为持久的幸福来源中，和卓越的人共事、做出卓越的业绩正是其中之一。把它牢牢地把握住吧。</p>
</blockquote>
<p>无须故意刁难</p>
<blockquote>
<p>你们交流的主要方式就是通过工作本身。如果活儿的质量不够好，员工一上手你就能看得出来。</p>
<p>真正算数的是工作质量。</p>
</blockquote>
<p>繁荣发展的代价</p>
<blockquote>
<p>“同工同酬”这个口号听起来貌似有些陈旧，可它有道理。<strong>如果由于地域原因，你接受了他们把你视作“二等员工”的做法，那么你相当于为其他的糟糕待遇打开了大门。</strong></p>
</blockquote>
<p>笔头功夫要过硬</p>
<blockquote>
<p>想要做一个优秀的远程员工，笔头功夫一定要过硬。</p>
<p>如果你是公司老板或管理者，最好从最初选人时就把好这一关。</p>
<p>真正重要的第一个“过滤器”就是自荐信，应聘者会在这篇文章中解释自己为什么适合这家公司。</p>
<p><strong>你需要多读，多读，再多读。仔细揣摩好作家是怎么写的。首先要关注的是清晰的表达，风格是其次的。</strong></p>
</blockquote>
<p>试做项目</p>
<blockquote>
<p>我们发现，判断工作质量的最好方法，就是在正式雇用员工、给他们分配许多工作之前，先让他们试做一点。就算是“试用”吧。</p>
<p>在我们的试用期中，员工需要完成一个耗时一到两周的小项目。</p>
<p>无论试做的项目是什么，一定要有实际意义。创造一个能解决问题的新东西。</p>
</blockquote>
<h4 id="管理远程员工"><a href="#管理远程员工" class="headerlink" title="管理远程员工"></a>管理远程员工</h4><p>什么时机最合适？</p>
<blockquote>
<p>如果你的公司已经发展得相当稳固了，你可以随时引入远程办公方式。这事不会太简单，<strong>但许多值得做的事情做起来都不简单。</strong>它需要承诺、自律，最重要的是，<strong>它需要一份“此事必成”的坚定信念</strong>。</p>
</blockquote>
<p>开源软件的启示</p>
<blockquote>
<p>程序员编写开源软件，一般都是因为热爱这件事，不是为了钱。钱往往会相伴而来，但它极少是动力来源。</p>
</blockquote>
<p>一对一沟通</p>
<blockquote>
<p>在37signals，我们的日程表稍有些不太规则，但我们会尽力做到每隔几个月至少跟每位远程员工通个电话。理想状态下，我们会每个月都打，但隔两三个月也挺好。</p>
<p>我们把这种定期的检查沟通称为“一对一”</p>
</blockquote>
<p>移除路障</p>
<blockquote>
<p>第一步就是授权，让每个人都有自主做决定的权力。</p>
<p>身为管理者，你必须接受一个事实：人们会犯错，但他们都不是故意的，而这些错误正是学习和成长的代价。</p>
<p>其次，你必须保证员工能够接触到他们所需的一切东西。</p>
</blockquote>
<p>要当心的是过劳，而不是偷懒</p>
<blockquote>
<p>能够走得长远的最佳员工，是那些懂得可持续工作的人。<strong>不要太多，也不要太少，恰好就是最好</strong>。</p>
<p><strong>平均每周工作40小时就刚好。</strong></p>
</blockquote>
<h4 id="远程人的生活"><a href="#远程人的生活" class="headerlink" title="远程人的生活"></a>远程人的生活</h4><p>找到自己的作息规律</p>
<blockquote>
<p>我们会谈谈如何运用不同的科技手段来工作和休闲.</p>
<p>着装区分.</p>
<p>另一个窍门是把一天分成几个时段：阅读最新资讯、协作、专心工作。</p>
<p>你还可以运用家里的房间来实现状态切换。把工作全部留在工作间里。在客厅或卧室里绝对不看工作邮件，不要“再做一点工作”。</p>
</blockquote>
<p>工作电脑 &amp; 休闲电脑</p>
<blockquote>
<p>在理想情况下，工作和休闲之间的那条灰色分界线都很难看见，使用同一台电脑进行工作和休闲的话，就更不可能了。</p>
<p><strong>一个更有效、更人性化的方法就是使用两台电脑，把工作和休闲彻底区分开。</strong></p>
<p>家里备上两到三台电脑实在花不了多少钱，所以你也不必再找借口。</p>
</blockquote>
<p>保持强劲动力</p>
<blockquote>
<p>在脑力工作中，动力就像是燃料。</p>
<p>想要激发出员工的动力，<strong>唯一靠得住的办法就是鼓励他们从事自己喜欢的、在乎的事情，而且跟他们喜欢的、在乎的人一起做事</strong>。此外没有捷径可走。</p>
<p>在37signals，工作满三年的员工如果想要放长假，我们会让他们休假一个月。</p>
<p>对于健康的人生和健康的公司来说，动力都是一个极为关键的因素。你一定要重视它。</p>
</blockquote>
<p>流浪的自由</p>
<blockquote>
<p>流浪式的生活比你想象中便宜。</p>
<p>如果你不需要背负房贷、车贷、有线电视费，以及其他现代生活的必备设施，省下来的钱一般都足够旅行和安顿生活的了。</p>
</blockquote>
<p>场景随心换</p>
<blockquote>
<p>让团队远程工作的一个好处就是，<strong>他们有机会随心所欲地更换工作场景</strong>。</p>
<p><strong>太规律的生活会抹杀创意。</strong>每天在同一时间醒来，乘坐同样的交通工具，走同样的路线，进入同样的办公室，在同样的桌前坐下，如此这般，日复一日，对产生灵感实在没有好处。</p>
</blockquote>
<p>家庭时间</p>
<blockquote>
<p>顾家型的人很可能更加适合远程工作，因为他们已经习惯跟家人互动了。</p>
</blockquote>
]]></content>
      <categories>
        <category>Reading</category>
      </categories>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>读《重来》三部曲</title>
    <url>/posts/notes-of-rework-series/</url>
    <content><![CDATA[<p>相见恨晚系列.</p>
<span id="more"></span>

<p>刷完《重来1》, 没刹住车, 连着把2, 3也刷完了.</p>
<p>整体感觉还是最喜欢《重来1》.</p>
<p>《重来1》里面的很多建议对于普通人来说, 实在是很友好.</p>
<p>我也终于知道大胡子有些文章里面提到的观点和方法论, 出处原来是在这里.</p>
<p>不过他也早就声明自己是二手知识贩卖商. 姜太公钓鱼, 愿者上钩. 无可厚非.</p>
<p>莫怪他人割韭菜, 要怪自己没脑子.</p>
<p>阅读的过程中, 想起一件小事.</p>
<p>有一年的 RubyConf China, 不记得是不是17年了, 当时主持人现场连线, 请了<a href="https://en.wikipedia.org/wiki/David_Heinemeier_Hansson">David Heinemeier Hansson</a> 来远程分享, 但是直播时间很短, DHH打了个招呼后, 没说几句, 就下线了, 因为他要去赛车 .</p>
<p>当时第一感觉是, 这个人好没礼貌啊, 这么多人等着听他分享, 他怎么这么任性.</p>
<p>现在看来, 他这样的选择无可厚非.</p>
<p>每个人都有支配自己时间的自由, 我猜对他而言, 赛车带来的乐趣远胜过业内略显枯燥的分享​​.</p>
<p>再说, 他们本就不是按常规出牌的人.</p>
<p>说回这三本书.</p>
<p>《重来1》 可以有一个更接地气的名字, 叫做写给普通人的创业建议.</p>
<p>《重来2》的英文原版书名是《Remote: Office Not Required》, 所以整本书基本都是围绕远程办公展开.</p>
<p>《重来3》中有部分的观点跟《重来1》重合了, 比如即时回复, 企业文化, 一周40小时工作制, 但是一点也不影响阅读体验, 反而觉得很受用[我是这么觉得的…..]. 人都是健忘的, 重要的事情, 值得多说一遍. 所以当你读完《重来1》中不攀客户高枝的那一节, 也就明白了为什么后来 Basecamp 的产品统一收费, 而不是按照使用人数来收费. 当你读完《重来1》中有关工作狂的那一节, 也就理解了为什么《重来3》中花大篇篇幅提醒你要捍卫自己的时间, 当你读完《重来1》中立马上线的那一节, 也就认同了《重来3》中为何强调先发布，然后学习.</p>
<p>你的处事原则决定了你的决策考量, 决策考量决定最后你的行为.</p>
<p>写这篇笔记时, 我简单摘选了三本书的部分篇幅. 我想大概也是得益于此, 我能试着把三本书中散落的点串起来看, 整体感觉清晰了很多.</p>
<p>这里一并附上摘录的笔记:</p>
<p><a href="https://luciaca.cn/2021/09/07/notes-of-rework/">重来1章节摘选</a></p>
<p><a href="https://luciaca.cn/2021/09/07/notes-of-remote-office-not-required/">重来2章节摘选</a></p>
<p><a href="https://luciaca.cn/2021/09/07/notes-of-it-does-not-have-to-be-crazy-at-work/">重来3章节摘选</a></p>
<p>Hope you  enjoy it.</p>
]]></content>
      <categories>
        <category>Reading</category>
      </categories>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>读《时生》</title>
    <url>/posts/notes-of-shisheng/</url>
    <content><![CDATA[<p>说实在的，读完的时候，并没有觉得写得多好，甚至觉得平平无奇。</p>
<span id="more"></span> 

<p>故事很简单，说的是一家三口，生来便带有遗传病的儿子时生穿越时间的隧道，回到了当年父亲拓实的年少时代，彼时的拓实二十三岁，还是个愣头青，不愿脚踏实地工作，浑浑噩噩，终日无所事事，还时不时跟在酒吧上班的女票千鹤要钱，时生跟父亲拓实成为了朋友，在经历过一次次失望后，千鹤给拓实留下分手的纸条，与爱慕她的工薪族冈部一起去了大阪，并卷入了一场受贿案件中，而两股势力团伙也随后找上了拓实，拓实带着时生踏上了寻找千鹤的道路，历经种种阻拦，最终救出了千鹤，而在这趟拯救千鹤的旅途中，拓实也解开了自己的身世之谜，原谅了当年不得已将自己交由他人抚养的母亲，与其说是拯救千鹤，不如说是一个愣头青开始一步步成长起来，不再选择逃避，而是学着面对，学着担当。</p>
<p>看到时生穿越到拓实的年代，想起港片《新难兄难弟》里面的情节，穿越这个梗真的是用不烂。</p>
<p>我看豆瓣上的内容简介部分是这么介绍这本书的：</p>
<blockquote>
<p>《时生》为东野圭吾迄今风格最独特的一部，以惊天动地的想象和鬼斧神工的解谜，将幻想、悬疑、穿越、推理、亲情熔为一炉，东野圭吾更称其为迄今“集大成之作”，在东野粉丝站上长期高踞“读者票选5佳”，超人气日剧《给父亲的口信》原著作品。其感人肺腑、泪中带笑的故事令人无不唏嘘动容……</p>
</blockquote>
<p>也许是为了宣传，才这么夸张的介绍吧。</p>
<p>以前都是听说东野圭吾，从来没有读过他的作品，这是我读的的第一本，我想也是最后一本，文化水平有限，大师的水准真心欣赏不来。</p>
]]></content>
      <categories>
        <category>Reading</category>
      </categories>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>有关subshell</title>
    <url>/posts/notes-of-subshell/</url>
    <content><![CDATA[<p>总算不是那么的懵逼了。</p>
<span id="more"></span> 

<h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><p>本质上是一个完整的新shell，用来跑指定的程序。</p>
<p>看个简单的例子：</p>
<pre><code class="shell">x=100

cat test
# 输出
#!/usr/bin
echo x is $x

sh test
# 输出
x is
</code></pre>
<p>这里，当执行<code>sh test</code> 时，login shell 「即parent shell」会创建一个新的shell来跑 test 程序，这个新的shell有着自己的环境变量，并且对parent shell中的本地变量local variable一无所知，test中的变量 x 默认赋值为null，所以输出结果为<code>x is</code>.</p>
<h4 id="获取-parent-shell-的-local-variable"><a href="#获取-parent-shell-的-local-variable" class="headerlink" title="获取 parent shell 的 local variable"></a>获取 parent shell 的 local variable</h4><p>两种方法：</p>
<ul>
<li><p>export</p>
<p>export 给 subshell 的变量，其实是复制了一份 parent shell 中的 local variable，所以<strong>针对 exported variable 所做的改变， 都不会影响到 parent shell 原先的同名变量</strong>。</p>
<p>例子：</p>
<pre><code class="shell">x=10
cat var_test
# 输出
#!/bin/bash
echo $x
if [ -n $x ]; then
    x=$(($x+1))
    echo $x
fi

sh var_test
# 输出，此时在var_test中 x 为 null, [ -n $x ] 为 false, 所以什么都没有输出

export x
sh var_test
# 输出, 此时在var_test中，对 x 进行了修改，但并不影响login shell中的 x
10
11

echo $x
# 输出, 这里，x 依然是10
10
</code></pre>
<p>exported variables 可以一直传给后面的subshell：</p>
<pre><code class="shell">cat var_test3
# 输出
y=9
z=8
echo x = $x
echo y = $y
echo z = $z
export z
sh var_test4

cat var_test4
# 输出
echo x = $x
echo y = $y
echo z = $z

sh var_test3
# 输出
x =
y = 9
z = 8
x =
y =
z = 8

x=100
y=90
export x
export y
sh var_test3
# 输出
x = 100
y = 9
z = 8
x = 100
y = 9
z = 8
</code></pre>
<p>这里会发现 export 给 var_test3 的变量 y，初始值为90 ， 在 var_test3 中被重新赋值为 9，执行var_test4 时，export 给 var_test4 的 y 此时已经是9， 而不是最初的90。</p>
</li>
<li><p>执行脚本的时候，将需要export的变量放在脚本执行命令前面。</p>
<p>还是上面的例子var_test：</p>
<pre><code class="shell">unset x
x=99 sh var_test
# 输出
99
100

echo $x
# 输出, 这里 x 未赋值，默认为 null
</code></pre>
<p>将需要export 给subshell 的 x，放在执行命令前，上面的<code>x=99 sh var_test</code> 等价于<code>(x=10;export x;sh var_test)</code>， 而(….) 中所做的改变不会更改其parent shell的环境变量。</p>
</li>
</ul>
<h4 id="…-VS-…"><a href="#…-VS-…" class="headerlink" title="{….; } VS (…..)"></a>{….; } VS (…..)</h4><ul>
<li><p>{….; }: 命令在当前shell中执行，在{….; } 中做的改变会影响到当前shell.</p>
<p>例子：</p>
<pre><code class="shell">x=10
&#123;x=99;&#125;
echo $x
# 输出
99

pwd
# 输出
/Users/lucia/Linux/acme

&#123;cd ..; pwd&#125;
# 输出
/Users/lucia/Linux

pwd
# 输出
/Users/lucia/Linux
</code></pre>
<p>如果让脚本在当前shell中执行，还可以使用<code>.</code> 和 <code>source</code> 命令。</p>
<pre><code class="shell">. test.sh
source test.sh
</code></pre>
</li>
<li><p> (….): 命令在subshell中执行，同样，在(….)做的修改，并不改变当前shell中的环境。</p>
</li>
</ul>
<p>  例子：</p>
<pre><code class="shell">x=10
(x=99)
echo $x
# 输出
10

pwd
# 输出
/Users/lucia/Linux/acme

(cd ..; pwd)
# 输出
/Users/lucia/Linux

pwd
# 输出
/Users/lucia/Linux/acme
</code></pre>
<h4 id="Loop-循环是-subshell"><a href="#Loop-循环是-subshell" class="headerlink" title="Loop 循环是 subshell"></a>Loop 循环是 subshell</h4><p>for, while, until 等 loop循环，都属于subshell。</p>
<p>看个例子：</p>
<pre><code class="shell">cat subshell_example
# 输出
#!/bin/bash
lineno=0
cat $* |
while read line
do
    lineno=$(($lineno + 1))
done
echo &quot;$lineno&quot;

cat sums
# 输出
9124
-750
3631
1231
-1122

# 执行 subshell_example，参数为sums
sh subshell_example sums
# 输出
0
</code></pre>
<p>这里，按照代码逻辑，应该输出sums文件中总行数，也就是5，但由于loop循环是一个subshell，<code>echo &quot;$lineno&quot;</code> 输出的一直是loop 外声明的lineno，也就是0。</p>
<p>那么如何解决？</p>
<p>这里可以使用 herestring解决这个问题，修改subshell_example文件：</p>
<pre><code class="shell">cat subshell_example
# 输出
#!/bin/bash
lineno=0

while read line
do
    lineno=$(($lineno + 1))
done &lt;&lt;&lt; &quot;$(cat $*)&quot;

echo &quot;$lineno&quot;

sh subshell_example sums
# 输出
5
</code></pre>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.amazon.com/Shell-Programming-Unix-Linux-Developers-ebook/dp/B01L480ILM">《Shell Programming in Unix, Linux and OS X》forth edition</a></p>
<p><a href="https://bash.cyberciti.biz/guide/Here_strings">Here strings</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>读《德伯家的苔丝》</title>
    <url>/posts/notes-of-tess-of-the-d-Urbervilles/</url>
    <content><![CDATA[<p>哈代的长篇小说。</p>
<span id="more"></span> 

<p>整本书可以一句话概括为：细谈纯洁天真的少女苔丝如何一步步成为手刃恶棍的杀人犯。</p>
<p>说笑了，这不是什么女性成长史，这是个悲剧故事。</p>
<p>大致的故事情节简单说一下：</p>
<p>女主苔丝，小户人家的大女儿，父亲德伯是个酗酒的懒散小买卖人，偶然从牧师那里得知自己是一个古老的骑士世家的后裔，便自觉血统高贵，与众不同，可惜他没能继承父辈的自强习性，想到的不是通过自己的努力去摆脱困境，改善家中的窘况，反而和妻子盘算着让女儿去附近一个富有的同姓德伯家认亲戚，奢望能攀上一门亲事。</p>
<p>可惜这个德伯家，却是一个冒牌的世家，靠放高利贷起家，家中掌事的是位老太太，这位老太太有个儿子名德贝维尔，风流浪荡，淫乱无度，在苔丝来到他们家中工作了三个月后，这位浪荡子便染指了苔丝。</p>
<p>失身后的苔丝悲伤愤怒，回到了自己的家中，数月后生下了一名婴儿，婴儿不久后夭折。</p>
<p>在家中度过了数年足不出户的日子后，苔丝去了离家较远的一个奶牛场，成为了一个挤奶的女工，开始了新的生活，在这里她与26岁的克莱尔重逢，两人互相爱慕，克莱儿决定向她求婚，新婚当夜，苔丝向克莱儿坦白了自己的过往，克莱儿一时无法接受，决然与苔丝分开，被抛弃的苔丝回到了自己的家中，而克莱尔则远赴巴西。</p>
<p>婚后的一年多时间，苔丝独自在农场做女工，偶遇了德贝维尔，那个当初侵犯了她的人，如今却做起了牧师，可惜依旧心术不正，德贝维尔屡次骚扰苔丝，要求苔丝成为他的妻子，最后苔丝因家中父亲病故，全家无处安身，而远在巴西的克莱尔也没有及时赶回来帮助她，一时绝望，最终妥协，成为了德贝维尔的情妇。</p>
<p>这段时间里，在巴西历经磨难的克莱尔也开始后悔自己当初抛弃苔丝的行为，回国后，找寻到了自己的妻子，两人重逢，四目相对，物是人非，苔丝在绝望中，杀死了德贝维尔，而自己则在与克莱尔一起逃亡时，被警察逮捕，处以绞刑。</p>
<p>结尾部分克莱尔和苔丝的妹妹露一起出现了，两人一起开始了新的生活。</p>
<p>至此，整本书结束。</p>
<p>整个故事里，苔丝是无辜的，却也是无可奈何的。</p>
<p>书中开头的章节里，十六岁的苔丝身穿白色长袍，亭亭玉立，参加会社游行，那是她第一次遇见克莱尔，彼时的她怎会知道这个人会是自己此后人生中的软肋。</p>
<p>也许从初遇时的那次跳舞，就注定了后面她和克莱尔的结局。</p>
<p>如果当时苔丝坦白时，克莱尔能接受她的过往，整个故事就都不一样了，可惜悲剧才是整本书的底调。</p>
<p>对于克莱尔的反应，我其实蛮诧异的，只能说一厢情愿得以为克莱尔思想开明了。要知道克莱尔也向苔丝坦白自己曾在巴黎与一个妇人放荡地生活过，为什么苔丝可以原谅他，而他却不能原谅苔丝？在两人都有的不堪过往中，一个是主动的参与者，另一个却是受害者，很好奇克莱尔评判一个人能否被原谅的标准是什么？凭什么苔丝原谅他的那桩风流往事是理所应当，而他却认为苔丝的过往就不可饶恕了呢？更不用说，他后面抛弃了苔丝，自己远赴巴西之前，还要求当时一个爱慕他的姑娘同他一起前往，他那时早已将婚前他对苔丝的那些种种承诺抛到九霄云外了。</p>
<p>或许，他自始至终爱的，只是幻想中的苔丝，而不是现实中那个活生生的，有着”污点”的苔丝，看得人委实心寒。</p>
<p>莫名想起陈医生的那句歌词：如果我露出斑点满身，可马上转身？</p>
<p>借《刀锋》里面那首诗，送给十六岁那年的苔丝：</p>
<p>美人儿，我们去看那玫瑰花。</p>
]]></content>
      <categories>
        <category>Reading</category>
      </categories>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>读 《the Dip》</title>
    <url>/posts/notes-of-the-dip/</url>
    <content><![CDATA[<p>一本有关弃坑和填坑的小书。</p>
<span id="more"></span>

<p>作者给了一些方法，一些鸡血，读来挺提神。</p>
<p>书中提到的点蛮多，反复强调quitting，这里简单记录下自己觉得重点的东西。</p>
<h4 id="何时弃坑？"><a href="#何时弃坑？" class="headerlink" title="何时弃坑？"></a>何时弃坑？</h4><p>当你去完成一件事情时，有三张曲线图可以基本概括你面对的所有场景。</p>
<ul>
<li>The Dip</li>
</ul>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNbRwly1g9m6bn5aplj30w80cugmi.jpg" alt="image-20191205213646047"></p>
<p><strong>Almost everything in life worth doing is controlled by the Dip.</strong></p>
<p>「但并不是所有呈现出 The Dip 曲线的事情，都值得你去做。资源是有限的，选择适合你的那些。」</p>
<ul>
<li>The CUL-DE-SAC</li>
</ul>
<p>CUL-DE-SAC 意为法语中的“dead end”。</p>
<p>“dead end”指那些既不会变得很糟糕，也不会变得很美好的场景。「人的主观能动性无法改善事物的发展。」</p>
<blockquote>
<p>It’s a situation where you work and you work and you work and nothing much changes. It doesn’t get a lot better, it doesn’t get a lot worse. It just is.</p>
</blockquote>
<p>显然，把时间和精力放在不会改善的事物上，是不明智的，机会成本太大。</p>
<p><strong>The opportunity cost of investing your life in something that’s not going to get better is just too high.</strong></p>
<ul>
<li><p>The Cliff</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNbRwgy1g9mtlp5017j30wq0ga75a.jpg" alt="image-20191205215836995"></p>
<p>这条曲线不是很好理解。</p>
<p>什么样的情况下，随着你的投入，先是结果越来越好，直至达到顶峰，然后陡然迅速下滑？书中举了一个例子，有关抽烟带给人的愉快感，随着抽烟的时长越来越长，愉悦感是递增的，一直递增到顶峰，随后急速下滑。「有点像经济学里面提到的边际效益递减，但是这里显然是一条很陡的下滑线，哪里是递减，简直是速减。」</p>
</li>
</ul>
<p>很显然，不管是The CUL-DE-SAC还是The Cliff，你都要选择果断的弃坑。</p>
<p>只有The Dip才是值得你去填的坑，The Dip creates scarcity; scarcity creates value。</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNbRwly1g9m7beikx0j30w00fgwgk.jpg" alt="image-20191205221110760"></p>
<p>「这里稍稍要注意下，有些事值得去做，它本身是The Dip，但是鉴于你的能力和资源，对你而言它可能就是The CUL-DE-SAC，这种在涉及到个体天赋的领域里，比如艺术，可能更为明显，所以找到你的The Dip也很重要。」</p>
<ul>
<li>quitting a tactic VS quitting a Strategy</li>
</ul>
<p>策略性退出与战略性退出。</p>
<blockquote>
<p>Not giving up and abandoning your long-term strategy (wherever you might be using that strategy—a career, an income, a relationship, a sale) but quitting the tactics that aren’t working.</p>
</blockquote>
<p>不放弃长期的战略，实时调整你的策略，终止那些无效的策略。</p>
<ul>
<li><p>quitting before you start</p>
<p>最终极的弃坑策略：从一开始就不要开坑。</p>
</li>
</ul>
<h4 id="正确看待-The-Dip"><a href="#正确看待-The-Dip" class="headerlink" title="正确看待 The Dip"></a>正确看待 The Dip</h4><p>The Dip 既是死亡之谷，也是极大的机会。</p>
<p>它是死亡之谷，帮你远远抛开其他的竞争对手。「有些类似穷查理里面提到的护城河」</p>
<blockquote>
<p>to create a Dip so long and so deep that the nascent competition can’t catch up.</p>
</blockquote>
<p>它是 Big opportunity. 只要你能 get through the Dip。</p>
<blockquote>
<p>If you can get through the Dip, if you can keep going when the system is expecting you to stop, you will achieve extraordinary results. People who make it through the Dip are scarce indeed, so they generate more value.</p>
</blockquote>
<p><strong>Embrace the Dip and treat it like the opportunity that it really is.</strong></p>
<p>The Dip 不是静态的，而是动态的，灵活的，它根据你的投入来回应你。</p>
<blockquote>
<p>The Dip is flexible. It responds to the effort you put into it. In fact, it’s quite likely (in almost every case) that aggressive action on your part can make the Dip a lot worse. Or a lot better.</p>
</blockquote>
<p>Let us make the Dip a lot better.</p>
<h4 id="Get-Through-The-Dip"><a href="#Get-Through-The-Dip" class="headerlink" title="Get Through The Dip"></a>Get Through The Dip</h4><p>几点建议：</p>
<ul>
<li><p>Don’t switch lines frequently.</p>
<p>不要频繁在多个The Dip间切换，最终只会导致更多资源的白白浪费。</p>
</li>
<li><p>If you are not able to  get through the Dip in an exceptional way, quit, quit right now.</p>
<p>如果确信自己不能搞定 The Dip，果断弃坑，立刻，马上。</p>
</li>
<li><p>Short-term pain has more impact on most people than long-term benefits do.</p>
<p>对大部分人来说，相比长期的收益，短期的痛苦给人带来的影响更大更直接，更容易让人倾向于放弃。那么要如何破局？善于坚持的人懂得让自己的目标可视化，阶段化目标的完成。「再一次，feedback is important.」</p>
<p><strong>Persistent people are able to visualize the idea of light at the end of the tunnel when others can’t see it.</strong></p>
<p>诚如书中所提到的，跑全马时，怎么能在20 英里 的时候放弃，是不是？</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNbRwgy1g9mr89wa2yj30x80hcac0.jpg" alt="image-20191206094008879"></p>
</li>
</ul>
<h4 id="一点感想"><a href="#一点感想" class="headerlink" title="一点感想"></a>一点感想</h4><p>书的开头提到了这么一段：</p>
<blockquote>
<p>Quit the wrong stuff.</p>
<p>Stick with the right stuff.</p>
<p>Have the guts to do one or the other.</p>
</blockquote>
<p>算是整本书的一个小小总结。</p>
<p>在时间和精力有限的情况下，弃坑很重要，放弃一个你永远都攀不过的山峰，将时间和精力集中起来，专注于那些有难度，但可以攀过的山峰。</p>
<p>作者在书中举了很多例子来支持自己的观点，印象特别的是畅销书作家 Michael Crichton，一个从Harvard 医学院毕业，在 Salk 生物学研究所进行了博士后研究，已经 攀过 The Dip 的人，但他放弃了眼前已铺好的康庄大道，大好前程，选择遵从内心，成为一名作家。「再一次，决策时，忽略沉没成本。」</p>
<p>最终的最终，还是那句，人生苦短，去他的机会成本，世俗成败，follow your heart, embrace the Dip you love。</p>
]]></content>
      <categories>
        <category>Reading</category>
      </categories>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>观《宇宙的构造》II</title>
    <url>/posts/notes-of-the-fabric-of-the-cosmos-illusion-of-time/</url>
    <content><![CDATA[<p>《宇宙的构造》第二集 Illusion of Time 的观片笔记。</p>
<span id="more"></span> 

<h4 id="Illusion-of-Time-时间幻象"><a href="#Illusion-of-Time-时间幻象" class="headerlink" title="Illusion of Time - 时间幻象"></a>Illusion of Time - 时间幻象</h4><p><strong>总览：</strong></p>
<p>颠覆我们对于时间的固有认知。</p>
<p>时间因人而异，每个人的时间都以不同的速率运行。</p>
<p>每一个从有序到无序的事件，都与大爆炸存在联系，给予我们时间的方向。</p>
<p>子在川上曰：逝者如斯夫。</p>
<p>也许时间如流水只是个幻觉，过去，现在和未来也许是同等的存在。</p>
<p><strong>摘录片段：</strong></p>
<p>时间并不是流动的，过去不会消失，未来也许已经存在。</p>
<p>时间本身可以加速或者减速。</p>
<p>时间来自哪里？从哪里开始？</p>
<p>解开时间这一谜团的一种方法就是测量它。</p>
<p>如何测量？</p>
<p>使用具有周期性的事物去测量时间，比如地球的公转和自转。</p>
<p>任何能震动的，能够周期性运动的物体，都可以成为一个时钟。</p>
<p>美国国家标准技术协会的工作者们，用难以置信的精度来测量时间。他们所使用的，是铯原子，它的振动频率是世界上最权威的计时工具。原子有一种自然共振频率，当一个铯原子被外界的能量轰击时，它发生振动，开始计时，并向外发出脉冲信号，每秒钟超过90亿次。准确来说，是9192631770次/s. 每一次达到这个数字，意味着一秒过去了，然后开始下一秒……</p>
<p>钟表可以告诉我们时间，却不能告诉我们时间的本质是什么。</p>
<p>近代对于时间研究的起源，源于对时间同步的需要。</p>
<p>在列车运输的早期，每个小镇设立了自己的时间，让问题复杂的是，列车按照它们出发地的时间运行，当有越来越多的火车路线与不同的时间交错时，时间之间相互转换，于是情况变得愈发混乱。「have I made it clear?」</p>
<p>人们对于时间同步的需求越来越迫切，对时间同步的研究也成一时热点。</p>
<p>「这时，我们的主角登场了」此时在瑞士的波恩专利局工作的 Albert Einstein，意识到这些使时间同步的尝试，不仅仅只是创造发明，相反，他意识到在我们对于时间的认识中，这些发明具有深刻的启示。</p>
<p>Isaac Newton对于时间的定义：time is something that an immutable property of the universe. 时间是宇宙的一种永恒不变的性质。时间总是以同样的速率改变。</p>
<p>爱因斯坦再一次推翻了牛顿的理论，他发现时间会以不同的速率运动，在他的设想中，<strong>每个人的时间都以不同的速率运行</strong>，没有所谓的宇宙标准时间。</p>
<p>爱因斯坦发现的这种时间和空间的神秘联系，让我们大开眼界。</p>
<p>在空间的运动和时间的流逝之间，有一种极为微妙而又深远的联系。简单来说，<strong>你拥有其中一个越多，你拥有另一个就越少。</strong></p>
<p>在爱因斯坦的理论中，当一个人静止不动时，空间层面他没有移动，但是他在时间层面中移动了。</p>
<p>爱因斯坦时间理论中的关键论述：<strong>空间中的运动会影响时间的流动。</strong></p>
<p>对于正在移动的人来说，时间变慢了。「amazing？」</p>
<p>但这个理论是正确的，空间中的运动对时间流动的这种影响是真实的，可测量的。</p>
<p>1971年，科学家们做了一个实验，准备了两个原子钟，让一个原子钟绕地球飞行，另一个原子钟在地上，然后对比两者的时间，结果显示两个钟的时间不再一致，虽然时间差仅有几千亿分之一秒，但有力地证明了运动对于时间流动的影响。</p>
<p>由于这种影响的存在，时间和空间不再是独立的两个事物，而是相互联系的，爱因斯坦统一了关于时间和空间的理论，两者被称为spacetime 时空。「第一集space里面也提到了空间时间一体化」</p>
<p>这种将时间和空间联系起来的想法，使爱因斯坦领悟了世上最离奇费解的一个结论：</p>
<p><strong>我们看到过去，现在，未来之间的不同，可能只是一个幻觉。</strong></p>
<p>所有发生的事情，都可以看成是一个快照的合集，一张张被打开，依次呈现，如果我们拍下所有事物的瞬间，包括整个宇宙的每一个瞬间，把他们串起来，我们就可以看到所有曾经发生的事情或者将要发生的事情。「牛逼！竟莫名想到了git」</p>
<p>把时空想象成一块面包，就像有不同的方式可以把面包切成几片，同样也有不同的方式分割时空，来把它分成一个个现在切片，因为动作影响时间的流动，对于现在发生的事情，移动的人和静止的人，会有一个不同的概念，他们的薄片是以不同的角度切成的。「根据视频里面提到的外星人例子，在空间上，当距离足够远的时候，不同的移动速率和移动方向，可以让你的现在成为他人的过去，或者他人的未来。」</p>
<p>曾经发生，正在发生的，即将发生的，都已存在。</p>
<p>过去，现在，未来，也许只是一种根深蒂固的幻觉。</p>
<p>既然过去，现在，未来都已存在，那么如何解释当下的时间，像一条河流一样，似乎无穷无尽流向远方？</p>
<p><strong>也许时间的长河更像一条冰封的河流，每一个时刻都被永远禁锢在适当的位置</strong>。所有的时间都已经存在，我们所感受的时间的流动，也许就只是一个幻觉。</p>
<p>如果时间不是流动的，并且所有的时间已存在，那么穿越到过去或者未来会成为可能吗？</p>
<p>目前虽然没有时间旅行机，但是时间旅行是可能的。</p>
<p>穿越时间的一种方式是，充分利用引力的奇特性质。</p>
<p>那么如何利用引力来造一个时间机器？</p>
<p>爱因斯坦的理论说明<strong>引力就像运动，可以影响时间，就好像引力能拖住时间，减慢时间的流逝。引力越强，时间流逝的越慢</strong>。黑洞成型于行星的相互碰撞，具有巨大的引力，如果有人看到你接近黑洞，他们可以看到时间显著地减慢。对他们来说，几年过去，但对你来说，可能只是几分钟。当你回来时，可能已经过去了N年。「星际穿越啊！！！」</p>
<p>借助黑洞穿越到未来，那么如何回到过去？</p>
<p>借助<strong>wormhole</strong> 虫洞。「星穿！！！」</p>
<p>如果虫洞存在，它们就像一种时空的捷运，<strong>不仅仅是一种连接两个地方的隧道，也是连接两个时间的隧道</strong>。可以连接一部分时空到另一部分。</p>
<p>这里，穿越到过去产生了一个问题，就是事情很快变得复杂。「因为你可以改写历史了……」</p>
<p>或者穿越到过去本身，就是不可能，至少目前是不行的。</p>
<p>时间只向一个方向运行，向着未来。科学家称之为时间流向。</p>
<p>可是为什么时间只能从过去流向未来？</p>
<p>从物理学角度来看，时间是可逆的，但是现实生活中，时间是不可逆的，单向的，但物理学的诸多理论和方程都无法解释这个现象。</p>
<p>那到底什么与时间流向有关？</p>
<p>19世纪的奥地利物理学家 Ludwig Boltzmann 给出的有关entropy熵的方程式：</p>
<pre><code>S=klogW
</code></pre>
<p>熵是测量一些事物的工具，即我们熟悉的混乱度或者不可测性。</p>
<p>宇宙的所有事物都从有序变成无序，也就是熵增。</p>
<p>从有序到无序，是一种自然的趋势，但是熵增既可以向着过去，也可以向着未来，这样看，依然无法解释时间的流向。</p>
<p>回到140亿年前的宇宙大爆炸，那个时候的宇宙处于熵很低的状态，大爆炸是一个高度有序的状态，可能是最有序的状态，大爆炸后，熵增，宇宙开始变得越来越混乱，<strong>也许大爆炸定义了时间在我们宇宙的流向，从有序流向无序。</strong></p>
<p>如果时间有起点，而且混乱度一直在增加，是否意味着时间将会有一个终点？</p>
<p>大爆炸的破坏力，向外造成了猛烈的空间扩张，结果就是宇宙直到今天还在膨胀，而且是在加速膨胀。在很远的未来，也许1000亿年后，其他所有遥远的星系，将远离我们的视线，好像我们周围什么都没有。宇航员将发现，从宇宙的视角来看，过去是遥不可及的。</p>
<p><strong>至于时间的尽头，一个理论认为最终黑洞将在宇宙中占统治地位，那时，星系都要消失，只剩下粒子散落在宇宙中。</strong></p>
]]></content>
      <categories>
        <category>Documentary</category>
      </categories>
      <tags>
        <tag>Documentary</tag>
      </tags>
  </entry>
  <entry>
    <title>观《宇宙的构造》III</title>
    <url>/posts/notes-of-the-fabric-of-the-cosmos-quantum-leap/</url>
    <content><![CDATA[<p>《宇宙的构造》第三集 Quantum Leap 的观片笔记。</p>
<span id="more"></span> 

<h4 id="Quantum-Leap-量子跃迁"><a href="#Quantum-Leap-量子跃迁" class="headerlink" title="Quantum Leap - 量子跃迁"></a>Quantum Leap - 量子跃迁</h4><p><strong>总览：</strong></p>
<p>介绍了量子力学理论的提出，演进 以及应用，如科幻片中的瞬间传送。</p>
<p><strong>摘录片段：</strong></p>
<p>量子力学理论quantum mechanics 重新定义了我们对现实世界的认知。</p>
<p>在量子领域，事物都下意识地不喜欢被束缚在固定位置或者沿着固定的轨道运动。粒子就好像能在同一时刻出现在不同地方。</p>
<p>在过去的75年里，我们使用量子力学理论来预测原子和粒子的运动，无数实验证明了量子理论是正确的。</p>
<p>量子力学的提出：</p>
<p>大约100年前，科学家们想要解释光的一些特殊性质，特别是气体在管中受热发出的光芒。当科学家们透过三棱镜观察加热的气体时，会发现它汇聚成线条，不仅能看见从玻璃透射出的连续光谱，还能发现它们成条分布。</p>
<p>20世纪初，一群专注于研究物理界本质问题的科学家们尝试对其进行解释，其中 Niels Bohr 认为解决问题的关键在于物质的核心，即原子内部结构。他认为<strong>原子就像微小的太阳能系统，有着更小的行星——电子，绕着原子核运行，如同行星绕着太阳一般。但与太阳系不同的是，电子不能随意运行，只能在某个固定轨道内，Bohr 认为原子受热时，电子会加速运动，并跃迁到另一个轨道。每次跃迁都伴随着能量，并以固定波长的光释放出来，这就是为什么原子能发出特定波长的光</strong>。 quantum leap量子跃迁由此而来。</p>
<p>量子跃迁令人惊奇的地方在于，电子直接从这儿到那儿，中间似乎没有穿过任何空间。Bohr 强调量子跃迁来自于原子中不稳定的电子。其能量以不可细化且一份份的形式出现。这些最小单位被称为“量子”。电子某时刻的位置唯一，不可能在其他地方，电子的能量是量化的。</p>
<p>量子跃迁只是开始，随后 Bohr 激进的观点 与另一位伟大的物理学家「Albert Einstein」来了一次交锋。</p>
<p>19世纪20年代，量子领域开始偏离爱因斯坦研究的方向，一个完全与经典物理相悖的方向。「真的是哪哪都有爱因斯坦 23333」</p>
<p>众所周知的双缝实验，从不同角度暴露出量子的奥秘。「来自wiki： <a href="https://zh.wikipedia.org/wiki/%E9%9B%99%E7%B8%AB%E5%AF%A6%E9%A9%97">双缝实验</a>，我是一脸懵逼…… 」</p>
<p>「插播下与双缝实验有关的波动说」</p>
<p>如果在水面制造一道波纹，使之穿过裂缝，它会分裂成两道，然后两道波纹会相互交融，它们的波峰和波谷会彼此结合，某些部分变得更大，某些部分变得更小，有时，它们会相互抵消，波峰和波谷会制造一系列的斑纹，这，也就是所谓的干涉条纹。</p>
<p>科学家们努力想要了解这种波动性质，人们想知道一个运动中的电子是否可能展开成为一种波。物理学家 Erwin Schrodinger 「薛定谔」提出了一个看似能描述它的方程，Schrodinger 认为 波 是对拓展的电子的描述，电子因为某种原因变模糊了，它不再是一个点，而像是一段波。最终 物理学家 Max Born 提出了一种新的，革命性的理论来描述波动方程。他认为这是一种特殊的波 — <strong>概率波</strong>，在任何位置，波的强弱，可以预测这个位置出现电子的可能性。比如抛出一个单独的电子，你无法知道它会在哪里落地，但是如果利用Schrodinger 的方程来寻找这个电子的概率波，当抛出足够的电子时，可以十分准确的预测出电子落在某处的概率是多少。</p>
<p>宇宙中的所有事物，都是由原子和亚原子粒子构成，<strong>它们被概率性和不确定性约束着</strong>。</p>
<p>本质上，自然符合一种固有的概率理论，这严重反直觉，很多人会难以接受。「《这才是心理学》第11章的主题……」</p>
<p>而难以接受这一理论的人中，便有爱因斯坦，爱因斯坦不相信，基本的现实世界在深层次是由概率决定的。</p>
<p>**Einstein said: “God does not throw dice.”**「上帝从不掷骰子」</p>
<p>很多的科学家不那么排斥概率论，因为量子力学的方程给了他们精准预测原子群和微小粒子系统的能力。</p>
<p>不久，这种预测的力量促使了很多重要发明的出现。</p>
<p>激光，晶体管，集成电路，电子工业的全部领域，所有我们现在使用的设备，如二极管，晶体管，组成了信息技术的基础。如果没有量子力学，我们将会回到蒸气时代。</p>
<p>Niels Bohr 认为测量将改变一切，他认为在你准备测量和观察一个粒子之前，它的特征是不确定的，直到也只能在你观察的那一瞬间才能确定它的方位。</p>
<p>Niels Bohr  认为现实的本质是充满不确定性的，但是爱因斯坦不这样认为，他认为事物是恒定的。爱因斯坦确信量子理论并不完整，它缺少一些内容，而这些内容可以让我们在不用观察的情况下，描述粒子未来的特性。</p>
<p>1935年，爱因斯坦认为他发现了量子理论的致命弱点，提出了纠缠理论 <strong>entanglement</strong>，他认为这个理论可以用来证明量子理论的不完整。</p>
<p>纠缠理论是根据量子理论方程，作出的理论性推测。如果两个粒子的特性类似，且距离够近，它们就会发生纠缠。同时，<strong>量子力学表示，就算你把两个粒子分开，将它们送往相反的方向，它们依然保持着纠缠，紧密相连。</strong></p>
<p>对于爱因斯坦来说，这种粒子之间的不可思议的联系，是如此的可笑。他将其称之为幽灵 spooky. “spooky action at a distance.”</p>
<p>爱因斯坦无法接受纠缠理论，他承认纠缠的粒子可以存在，但他认为可以用一种更简单的解释来说明粒子之间的这种联系。他认为纠缠粒子，更像是对手套，比如将一对手套分别放进箱子里，一个箱子放在本地，另一个则送往南极，打开放在本地的箱子，你就能知道南极的那个箱子里面装的是哪一只手套，即使没有人看过它。爱因斯坦恰恰用这样的方式来看待纠缠粒子。无论电子处在什么情况下，它们的状态在它们打散的时候，就已经决定好了。</p>
<p>那么 Bohr 和 Einstein，谁的理论才是正确的？</p>
<p>纠缠粒子，是通过幽灵般的联系彼此作用，还是根本没有什么联系，像那对手套一样， 粒子的状态已经事先确定？</p>
<p>1955年，爱因斯坦去世，他依然认为量子力学没有完整地解释世界的真相。</p>
<p>1967年，John Clauser， 一名哥伦比亚大学的研究新生，完成了爱因斯坦对于量子力学的质疑。根据一份出自爱尔兰物理学家 John Bell的文献，他提出了量子力学可能是错误的假设。Clauser 随后开始着手制造可以解决争论的机器，机器建成后，Clauser不停重复着实验，之后法国物理学家 Alain Aspect 开始做类似的实验，让人吃惊的是，他们的实验结果都证明了<strong>量子力学的正确性，纠缠作用是真实存在的， 量子跨越空间，彼此相连, 测量一件事物，事实上，会在瞬间影响到它遥远的伙伴</strong>。</p>
<p><strong>The one thing that Einstein thought was impossible, spooky action at a distance  actually happens.</strong></p>
<p>「所以，这个世界在深层次上是由概率决定的？」</p>
<p>如果我们接受世界以量子力学的方式运作的话，我们是否可以利用纠缠理论中的远距离作用去做一些有用的事？</p>
<p>比如瞬间传送。</p>
<p>在南非的一座小岛上，科学家们利用量子纠缠作用，完成了瞬间传送单个粒子的实验。</p>
<p>瞬间传送的原理是：<strong>提取事物所携带的信息，然后在另一处制造了一个新的一样的事物</strong>。「旧的那个在传输途中，已被摧毁」</p>
<p>既然粒子可以瞬间传送，我们人类是由粒子构成的，那么未来我们是否可以如此传送人类？「科幻照进现实」</p>
<p>人类瞬间传送理论上有可能实现，但是路很长。「在传输途中，旧的那个你已经被摧毁了，感觉怕怕的…… 」</p>
<p>将量子力学运用于计算机中，即量子计算机，计算机的能力将会得到成倍的增长。「一脸懵逼……」</p>
<p>量子力学在带给人类诸多收益的同时，也存在着巨大的漏洞。</p>
<p>量子世界充满了不确定性，而任何人，都是由粒子和原子构成的，却一直处于一个确定的状态，Niels Bohr 没有明确解释 为什么在量子世界里发生的怪事，到了宏观世界就消失了。科学家们一直在努力解决这个问题，有些人认为在量子力学等式中，缺失了一些细节，因此尽管在微观世界中存在着多种可能性，但是从微观到宏观的过程中，缺失的细节会做出调整，所有的可能性只会剩下一种，事物也就表现出唯一的确定性。其他物理学家则认为所有的可能性一直存在，从未消失，相反，每一种可能性都真实发生了，只是它们中的大部分发生在我们的平行世界里。「引出了第4集的多重宇宙，这是一个神奇的世界」</p>
<p><strong>The beauty of science is that it allows you to learn things which go beyond your wildest dreams.</strong></p>
]]></content>
      <categories>
        <category>Documentary</category>
      </categories>
      <tags>
        <tag>Documentary</tag>
      </tags>
  </entry>
  <entry>
    <title>观《宇宙的构造》IV</title>
    <url>/posts/notes-of-the-fabric-of-the-cosmos-universe-or-multiverse/</url>
    <content><![CDATA[<p>《宇宙的构造》第四集 Universe or Multiverse? 的观片笔记。</p>
<span id="more"></span> 

<h4 id="Universe-or-Multiverse-多重宇宙"><a href="#Universe-or-Multiverse-多重宇宙" class="headerlink" title="Universe or Multiverse? - 多重宇宙"></a>Universe or Multiverse? - 多重宇宙</h4><p><strong>总览：</strong></p>
<p>介绍多重宇宙论这一假设的提出，并通过逐一介绍 Enternal inflation永恒暴涨论，dark energy 暗能量，string theory弦理论 这三大理论，来说明多重宇宙论这一假设的合理性。「聚合」</p>
<p><strong>摘录片段：</strong></p>
<p>也许任何事物都存在副本，包括人类。</p>
<p>如果每个人都存在副本，为什么我们从未见过他们？</p>
<p>答案也许隐藏在宇宙之外。</p>
<p>如果我们能飞出太阳系，飞出银河系，越出我们可见的宇宙的边界，我们会发现更多其他的宇宙，事实上，也许每时每刻都有新的宇宙诞生。<strong>我们也许生活在一个宇宙数量不断增长的多重宇宙中</strong>。</p>
<p>如同伽利略，哥白尼提出的日心说一般，多重宇宙的想法也类似，这可能只是需要我们转变对于宇宙的看法。然而，一些科学家却认为多重宇宙是无稽之谈。</p>
<p>那么多重宇宙的这一猜想从何而来？有什么证据可以证明它不是无稽之谈？</p>
<p>很多惊人的发现都支持了这一想法，我们也许真的是多重宇宙的一部分。</p>
<p>最初的发现和一般公认的宇宙起源理论有关，即大爆炸理论。140亿年前，宇宙大爆炸，经过数十亿年，宇宙冷却结合，恒星，行星和星系得以形成。由于那次爆炸，宇宙至今仍在膨胀，但是大爆炸理论并没有告诉我们，最初是什么使得物质向外扩张。</p>
<p>那么，是什么激起了那次猛烈的爆炸？是什么力量促使物质分开？</p>
<p>Alan Guth 的研究无意间帮助大爆炸理论奠定了基础。</p>
<p>1979年，Guth 和同事 Henry Tye 曾一起探索在宇宙之初，粒子是如何形成的。</p>
<p>经过演算，Guth 提出新的粒子说，而这一新的解释，会对宇宙膨胀率产生巨大影响。Guth 从数学中找到证据，<strong>在宇宙之初，那种极端环境下，引力可以反转，这种反斥引力，不是把物体吸引在一起，而是排斥周围所有的物体，从而产生巨大的膨胀。</strong></p>
<p>通过“反斥引力”的发现，Alan Guth 无意中使得我们更加了解大爆炸之初的情形。</p>
<p>从数学的角度看，这种力量非常强大，它可以让分子那般大小的空间，在一眨眼的千亿分之一时间里，膨胀的像银河系一样大，在这种顺时向外膨胀爆发后，空间开始缓慢持续膨胀，变冷，恒星和星系得以形成，正如大爆炸理论所描述的那样。Guth 将这种瞬时爆发称为“暴涨 inflation”。</p>
<p>这一强大的反斥引力暴涨，解释了最初是什么激起了宇宙大爆炸。</p>
<p>那么如何验证这一理论的正确性？</p>
<p>科学家们意识到如果 暴涨理论是正确的，那么就能从夜空中找到证据。假设将宇宙中的其他事物都移走，如果我们的眼睛能够探测宇宙中其余的能量，我们会看到宇宙处处散发着温暖的红光。这些无处不在的辐射称为宇宙微波背景，它们是大爆炸残余的热辐射。</p>
<p>这一理论预测，宇宙在暴涨时期的猛烈膨胀，会在辐射中留下痕迹，从这些痕迹中可以精确地得出温度变化的图形。1989年，NASA 发射了“宇宙背景探测者”卫星。2001年，发射了另一颗探测器，这些卫星会对暴涨理论进行检测，他们对辐射做了精度极大的测量，结果令人震惊，宇宙的温度变化几乎与暴涨理论的预测完全吻合。暴涨理论的预测得到了证实，其正确性得到了验证。</p>
<p>随后，两位俄国科学家发现了暴涨理论中隐藏了一个惊人的秘密：我们的宇宙可能并不孤单。</p>
<p>其中一位科学家 Andrei Linde 对暴涨理论作出了举足轻重的贡献，另一位则是Alex Vilenkin。</p>
<p>Alex Vilenkin 恰好参加了Guth的一次演讲。</p>
<p>会后，Alex Vilenkin 开始思考暴涨何时结束，并提出了惊人的构想：在我们宇宙之前，有过很多次爆炸发生，之后也将会有无数次爆炸发生。</p>
<p>暴涨会在某些区域停止，而在另一些领域继续进行，新的大爆炸不断发生，新的宇宙不断诞生，使得多重宇宙不断膨胀。</p>
<p>这一理论被称为“**永恒暴涨(eternal inflation)**”。</p>
<p>但Alex Vilenkin的理论并没有被大部分人所接受，他暂停了对永恒暴涨的研究近10年之久。</p>
<p>多重宇宙论的一个问题是，无法验证其正确性。不仅无法观测每个宇宙膨胀，也无法观测它们之间的空间。这意味着任何物质，甚至包括光，都不能从其他宇宙进入我们的宇宙。</p>
<p>人们无法对多重宇宙进行预测，因为无法验证，你可能会认为它根本就不是科学。「目前无法证伪的理论」</p>
<p>与此同时， Andrei Linde 则保住了这个小火苗，他独立得出了新的永恒暴涨理论，但是Linde 的理论同样遭到了冷遇。</p>
<p>永恒暴涨的方程并不是多重宇宙存在的唯一证据，来自另外两个完全不同科学领域的理论也支持了多重宇宙论的假设。</p>
<p>一个是弦理论，它可以从最小的尺度解释宇宙的运行。「后面会详细介绍」</p>
<p>另一个则来自天文学家在最大规模的宇宙探测中作出的惊人发现：<strong>宇宙在加速膨胀，而不是减速</strong>，如果只有一个宇宙的话，这个发现就无法解释。天文学家得出结论，空间中存在某种能量，把星系互相推离开，让膨胀的速度加快。因为我们看不到这些能量，天文学家们称之为 暗能量 dark energy.</p>
<p>更令人吃惊的是暗能量的强度。十年来，科学家们都不能解释，为什么空无一物的空间中存在这种不寻常的巨大能量。但是如果我们是一个更大的多重宇宙的一部分的话，这个奥秘就比较容易解开了。</p>
<p>量子力学告诉我们，微观世界充满了射线，这些射线可以给空间提供能量，而它们产生的能量非常巨大。</p>
<p>问题是，当天文学家们测量这些使得星系远离彼此的能量总和时，他们得到了这样的数据：十进制小数点后跟着122个零，然后一个一。<strong>能量小的难以置信，接近于零</strong>。与理论所预测的完全不符。</p>
<p>为什么暗能量如此小，而又刚好能形成星系，行星以及生命？这依然是现今科学面对的巨大奥秘之一。</p>
<p>但是，如果考虑我们生活在多重宇宙中，那么暗能量的奥秘就完全不是奥秘了。</p>
<p>事实上，如果我们是多重宇宙的一部分，宇宙的数量十分巨大，每一个都有不同的暗能量值，那么你会预测到，会出现我们观测到的那么小的数值。而且你会得出大部分的宇宙不适合生命存在，因为暗能量值的大小不会允许星系，恒星和行星的形成，暗能量值比我们小很多的宇宙会向内部塌陷，暗能量值比我们大很多的宇宙会膨胀的过快，物质完全没有机会结合，无法形成恒星和行星。因此，我们之所以存在于这个宇宙，是因为我们宇宙的暗能量值适宜生命存在。「多么多么小概率的事件，瞬间觉得来到人世，是多么幸运的事」</p>
<p>但是，我们怎么知道多重宇宙有足够的多样性，使得每个暗能量的等价物，包括在我们宇宙中发现的陌生的等价物，可以在宇宙中的某处发现？</p>
<p>答案可能出现在一个与物理学完全不同的学科领域。</p>
<p><strong>原子内部是更小的单元，质子和 中子，而质子和 中子也是由更小的叫做夸克的微粒构成的，这些亚原子的东西，可能是由一些更小的东西构成的，即叫做弦的细小震动能量线或者能量环。这套理论叫做 弦理论。它表示世间存在的一切事物，都是由这种要素组成的。</strong></p>
<p>由于不同的震动方式，弦会拥有不同的属性，从而创造出不同的微粒。基于这个理论，可得出一个简洁的预示，单独一个等式就可解释世界发生在我们周围的所有事情。</p>
<p>但是这个完美的理论，有一个缺陷。</p>
<p>弦理论的数学原理，打开了通向多重宇宙的门，空间额外维度 <strong>extra dimensions of space</strong>。</p>
<p>弦理论的数学理论表明，一维，二维，三维并不是唯一的维度。在空间的每一个点，都有额外的空间维度，这些维度卷曲成非常小的结点。你看不到这些结点，是因为它们太小了。</p>
<p>这些额外维度的形状，决定了微小的弦的震动方式，这些震动方式决定了微粒的属性，所以我们生存的宇宙的所有基本特征，可能都是由额外维度的形状决定的。这些额外的维度的形状组合在一起的方式，在很多方面就像是宇宙的DNA。</p>
<p>弦理论学家研究得越多，他们发现的额外维度卷曲的方式越多， 没有一个卷曲方式能和我们现在的宇宙吻合。目前科学家们达成的一个共识是，形状的数量似乎是一个天文数字，有些论文表示数字高达10的500次方。</p>
<p>这个让天文学家沮丧的数据，却让物理学家们感到 fantastic！这正是宇宙学家们正在寻找的！「跨学科太重要了！」</p>
<p>一些弦理论学家相信，对于弦理论的多种解法，也许每一种代表了一个真实而不同的宇宙。换句话说，弦理论在描述一个多重宇宙。</p>
<p>从弦理论和膨胀说，可以推出这些存在的宇宙。</p>
<p>而根据数学研究，暗能量的数量在不同宇宙之间有一个很大的能量值跨度，以至于我们测量到的奇怪的数据是肯定会出现的。「样本量足够大，小概率事件一定会发生」</p>
<p>至此，永恒暴涨，暗能量，弦理论，三者指向了一个相同的结果：我们可能生活在一个多重宇宙中。</p>
<p><strong>当不同的研究线索都聚集在同一个理论上，并不表示它就是正确的，但是当所有的研究结果都指向同一点时，这个理论就非常让人信服了</strong>。「聚合性原则」</p>
<p><strong>在多重宇宙中，某处一定存在一个你和我的复制品。</strong></p>
<p>这意味着我没有时间去做的事情，可能正在被某处的某个复制品做着。</p>
<p>然而评论家认为多重宇宙论只是对于我们不知道的东西的一个方便的解释，比如宇宙中极小的暗能量和弦理论中额外维度的巨大数量的可能形状。多重宇宙论，仅仅是一种假设，是一种目前尚没有更好的假设可代替它的假设，但没有实验性的证据可以证明它的正确性，我们应该相信它吗？</p>
<p>我们不应该相信那些未经证实的理论，但是几个世纪以来，数学为我们还不能观察到的，研究的和实验的事物的自然规律提供了一种可靠的指导。数学研究表示，可能存在其他的宇宙，这并不意味着它是正确的，但是它会引导你对现实有更深的理解。</p>
<p><strong>If you only work on the things that are already well  established, you’re not going to be part of the next big excitement.</strong></p>
<p>「Enjoy！！」</p>
]]></content>
      <categories>
        <category>Documentary</category>
      </categories>
      <tags>
        <tag>Documentary</tag>
      </tags>
  </entry>
  <entry>
    <title>观《宇宙的构造》I</title>
    <url>/posts/notes-of-the-fabric-of-the-cosmos-what-is-space/</url>
    <content><![CDATA[<p>本以为很催眠，没想到刷完四集后，很是提神醒脑，觉得有必要记录一下。</p>
<span id="more"></span> 

<p>这是2011年出品的纪录片，共4集，每集时长在55分钟左右，主要讲述了空间，时间，量子力学理论以及多重宇宙论，这些新知识对于我这般高中物理都不及格的人来说，真的是很美很特别，五星推荐。</p>
<p>二刷的时候，记录下来的基本都是翻译的摘录，没想码完竟有上万字，为便于翻阅，计划分集呈现。「考虑到摘录难免顾此失彼，不能完整呈现这一视频系列的精彩，还是强烈建议看原视频  <a href="https://www.bilibili.com/video/av1935063/">宇宙的构造</a>。」</p>
<p>以下为《宇宙的构造》第一集 What is space? 的观片笔记。</p>
<h4 id="What-is-Space-无限空间"><a href="#What-is-Space-无限空间" class="headerlink" title="What is Space? - 无限空间"></a>What is Space? - 无限空间</h4><p><strong>总览</strong>：</p>
<p>从牛顿对于空间的定义到爱因斯坦推翻牛顿的理论，再到Casimir的薄片推测，希格斯场和暗能量的存在，一步步深入向观众解释了什么是空间。</p>
<p><strong>摘录片段</strong>：「感觉有些混乱，凑合着看吧：P」</p>
<p>space is something.</p>
<p>空间可以弯曲，扭曲，震荡，它构成了宇宙的基本构造。</p>
<p>牛顿对于空间的定义：space is an empty stage, a container,  the framework for everything that happens in the cosmos.</p>
<p>牛顿定义中的空间具有 absolute，eternal and unchanging 的特性.</p>
<p>而对于光速的研究，让爱因斯坦推翻了牛顿的空间理论。</p>
<p>一个基本的事实：无论相对于何种事物，光速永远不变。</p>
<p>如何解释这一事实？</p>
<p>爱因斯坦提出了假设：<strong>时间和空间可以协同作用，以保证光速的绝对恒定</strong>。</p>
<p>时间不是绝对不变的，空间也不是绝对不变的，空间影响着物体的运动，这种空间时间一体化的理论，震惊了科学界。</p>
<p>回到引力，为什么月球会围着地球转？</p>
<p>被困扰了数十年后，爱因斯坦提出了一个新的引力理论：引力的奥秘隐藏在空间的本质之中。</p>
<p>引力的真正原因：引力是物体扭曲时空而造成的，是时空的另一种表现形式。<strong>月球围绕着地球运转，不是由于某种神秘力量牵引，而是因为它沿着围着地球产生的时空凹陷转动。</strong></p>
<p>空间不再是绝对的，而是有了自己的属性，好比一张橡胶毯一样可弯曲。</p>
<p>黑洞周围的引力无限大，按照爱因斯坦的推算，一个不断旋转的黑洞，可以撕扯它周围的空间。</p>
<p>那么，如何验证爱因斯坦提出的这一引力理论的正确性？</p>
<p>在1950年后期，一个名为伦纳德-希夫的物理学家，寻找到了一种更为简便的方法去验证爱因斯坦的理论。</p>
<p>这个方法的基本思路是这样的：</p>
<p>把一个类似陀螺的高精度陀螺仪送到外太空，通常情况下，陀螺仪的轴线指向固定的方向，但是如果地球使空间扭曲了，陀螺仪的轴线也会随之变化，而陀螺仪的偏转角度是可以被测量的。这里有一个问题，根据爱因斯坦的理论，地球对空间的影响极其微小，测量陀螺仪的偏转角度相当于从62英里之外测量一个硬币的直径。最后，研究小组经过两年的研究，解决了这个问题，将四个独立的陀螺仪装在一个卫星上，卫星的中轴指向一个恒星。如果空间发生扭曲，时间一久， 陀螺仪将不再指向这颗恒星。</p>
<p>想法随后变成了计划，Gravity Probe B 引力探测B计划开始了。</p>
<p>40多年后，这个曾9次被NASA撤掉的计划终于迎来了属于它的时刻。</p>
<p>从这次试验中得到的观察数据，最后证明了爱因斯坦理论的正确性。</p>
<p>「用40多年的时间去验证一个理论的正确性，敬佩不已」</p>
<p><strong>在量子力学的世界里，空间充斥着各种运动，粒子从无到有，相互碰撞，一起陨灭，空间促使物体发生移动</strong>。「第3集详细介绍了量子力学理论」</p>
<p>1948年，科学家 Hendrik Casimir 推测，如果你有两个普通的金属薄片，使他们尽可能相互紧贴在一起，紧密地容不下任何事物，此时特定能量级的粒子会被挤出来。薄片内部几乎是真空，外部则充斥着杂乱无章的运动。Casimir 认为这两块薄片将会相互聚拢，被我们通常认为是近乎真空的空间所吸引。</p>
<p>几年后，科学家进行了实验，证明了Casimir 的理论是正确的。</p>
<p>当时的物理界尚没有人能够解答这样的问题：什么创造了质量？为什么不同的粒子拥有不同的质量？</p>
<p>1964年，年轻的英国物理学家 Peter Higgs, 提出了空间中存在一种绝对的基本粒子。</p>
<p>Peter Higgs 提出了一个全新的角度看待空间，将空间想象成大海，而粒子沉没其中，当它们在海里移动时，它们获得了质量，粒子越是努力向前推进，海洋对它们的阻力越大，它们获得的质量也越大。Higgs 的这个理论，可以解释什么创造了质量，不同的粒子为何拥有不同的质量。</p>
<p>如今，Higgs提出的这个理论被称为 <strong>Higgs field</strong> 希格斯场，即在空虚的空间中，存在一种赋予你质量的作用。</p>
<p>那么问题来了，如何证明希格斯场的存在，证明这个理论是正确的？</p>
<p>至少目前没有。</p>
<p>不过科学家们通过加速器让粒子猛烈地相互碰撞，试图将希格斯场的一小块敲松动，以此来产生一个希格斯粒子，从而来论证其理论的正确性。</p>
<p>但是最后的实验结果证明，空间中确实含有一种成分，一种更为神秘莫测的基本成分。</p>
<p>「要从宇宙大爆炸说起。」</p>
<p>宇宙起源于大约140亿年前的大爆炸，大爆炸后，空间向外无限地扩张，从此空间一直不停地膨胀，多年来，科学家们认为空间的膨胀速度会在引力作用下变慢，但事实是，通过观察收集超恒星的爆炸数据，科学家们发现宇宙一直在加速膨胀。</p>
<p>科学家们达成了一个共识，宇宙中存在着某种物质，抵消了普通物质的引力对于空间的影响，这种填充空间的神秘物质，被称为暗能量 <strong>dark energy</strong>. 也就是上诉粒子碰撞实验中，发现的基本成分。「多重宇宙里面也提到了dark enery」</p>
<p>爱因斯坦提出空间在竭力使星系相互分离，根据他提出的引力理论，宇宙应该既不膨胀，也不收缩。爱因斯坦的时代，科学家们普遍认为宇宙是不变的，而根据爱因斯坦的方程，宇宙是在不断膨胀或者收缩，而不是静止的，为了解释宇宙是稳定的，爱因斯坦修正了方程式，提出了一种反重力<strong>anti-gravity</strong>，这种反重力抵消了常规重力对宇宙的作用，两者相互制衡使得宇宙得以保持稳定。这个改正量被爱因斯坦称为宇宙常数 <strong>cosmological constant</strong>。这个被爱因斯坦认为是最大错误的宇宙常数，被认为是理解宇宙膨胀的关键。</p>
<p>「最后的一个惊喜。」</p>
<p><strong>现实世界是二维的，而这个三维的，立体的世界，只不过是在空间的边缘地区存留的一种全息影像。</strong></p>
<p>我们所知道的，所熟悉的一切，也许只是一些已有信息的投影，被投射在一个纤薄，遥不可及的二维平面上。</p>
<p>该理论的验证藏在黑洞的现代理论中。</p>
<p>设想将一个钱包扔进黑洞，会发生什么？</p>
<p><strong>钱包掉进黑洞之后，它含有的所有信息的一个副本会被分解，然后存储在黑洞的表面，这个过程很像计算机存储信息，因此，钱包会存在两个地方，三维版本的那个在黑洞内已经永远丢失，而二维版本的依然作为信息保存在黑洞的表面。</strong></p>
<p>通过对照黑洞外发生的事情，你可以描述黑洞内正在发生的一切。理论上，对于例子中的那个钱包，你可以在黑洞的外部，重造它。更意外的是，黑洞内的空间依然按照黑洞外的空间的法则和规律运作。</p>
<p>由上面的黑洞理论，可推出，对于宇宙中的一切，从星辰陨石到人类，甚至空间本身，只不过是一些存储在遥远的二维平面上的信息投射在我们面前。换句话说，<strong>三维世界是个幻象，绝对的真实存在于宇宙表面的二维世界中。</strong></p>
]]></content>
      <categories>
        <category>Documentary</category>
      </categories>
      <tags>
        <tag>Documentary</tag>
      </tags>
  </entry>
  <entry>
    <title>读《苏东坡传》</title>
    <url>/posts/notes-of-the-gay-genius/</url>
    <content><![CDATA[<p>意料外的一次开坑。</p>
<span id="more"></span> 

<p>最后一章说的是东坡逝世，刷完的时候，正好在高铁上，列车行进，发着呆，脑子里突然冒出一个吊诡的想法：人生真是短暂，每个人都是要死的……</p>
<p>按照常规，应该是先缕缕整本书的脉络，来一遍东坡极简史啥的，考虑到我这么懒一人，整出来一堆密密麻麻的文字，看着也累，就略过吧。</p>
<p>毕竟林语堂这本，不像历史，更像小说。</p>
<p>简单说说看完后的一些感受。</p>
<p>整体是没什么特别的感触，可能是因为东坡太有名了，所以林语堂对他极尽偏爱，东坡被描述成了一个近乎完美的人，当然，东坡应该是担得起这些赞美的，毕竟这样的一位大诗人，谁不喜欢呢？可惜个人对东坡的诗词了解不多，更别说字画那些了，也许是该多刷些东坡先生的文集了。「坑越填越深……」</p>
<p>书中作者引经据典，中外名人信手拈来，刚开始看会觉得新奇，但是后面会有种串场的错觉，本来好端端地说着北宋，突然冒出来个英国诗人，或者狮子，豹子之类的比喻，沉浸感瞬间就没了，直愣愣地只想来一句，我擦，这什么鬼？！那感觉还真的是奇特，一时无法适应，只能说还无法欣赏这种叙事风格。</p>
<p>书中让人印象深刻的是对王安石的描述，感觉王荆公真的是背了口好大的锅，被喷得狗血淋头，当然书中对拗相公的评价虽有失偏颇，但提到那些变法涉及的细节，真真是涨知识。看知乎上有人点评说，看完这本，一定要去看《王安石传》。哈哈，尼玛，笑喷！</p>
<p>回到东坡本身。</p>
<p>一直觉得苏东坡招人喜欢，是因为他那乐天派的性格，不管遭遇什么样的处境，他都能在当下找到快乐，这份洒脱不羁，谁不喜欢？偏偏拥有这般性格的人，又是个不世出的大才子，还好奇心爆棚，喜欢尝试各种新事物，瑜伽，酿酒，辟谷，炼丹，修仙……不过东坡炼丹修仙这段倒是让我意外了，考虑到当时的背景，文人之间对修仙炼丹药颇有心得的，还交流分享，估计在当时也算是件牛逼哄哄的雅事吧。不过也不得不说，一个人在某些领域可能会达到他人无法企及的高度，但是在另一些领域，却也可以错得离谱。</p>
<p>整本书里面，并没有提到苏东坡为何如此有才华。更多的是给人一种自小就智力超群，才思敏捷的感觉。但书中有个细节，提到苏东坡晚年被贬到海南岛时，他的儿子苏过陪伴在他身边，苏过将《唐书》抄写了一遍，又抄《汉书》 ，而苏东坡在躺椅上听儿子诵读这些书时，偶尔指出古人的生平细节，评论之。一看没啥，细想觉得真的是厉害。这得读了多少遍才能记得如此清楚？不用猜，东坡小时候读书定然也是抄过那些古籍的，嗯，下次我也来试试这抄书学习法：P</p>
<p>刷书的时候，在网上Google东坡的诗词，发现中华诗词网上，收录了东坡蛮多的作品，但是网站的体验有些一言难尽，各种广告植入，给自个立个flag，整一波东坡的作品集，希望这个坑能早开早填。</p>
<p>书中有段写到苏东坡一天夜里睡不着觉，找张怀民，巧的是，张怀民也未寝，两人便相约在月下散步聊天，不知为何，对这段印象还挺深刻的，仿佛看见两位知心好友在月下天南海北，互诉衷肠，宁静美好，就以这首《记承天寺夜游》来为这篇不着调的读后感结个尾吧。</p>
<blockquote>
<p>元丰六年十月十二日夜。解衣欲睡。月色入户，欣然起行。念无与为乐者，遂至承天寺寻张怀民。怀民亦未寝，相与步于中庭。庭中如积水空明，水中藻荇交横，盖竹柏影也。<br>何夜无月，何处无竹柏，但少闲人如吾两人耳。</p>
</blockquote>
]]></content>
      <categories>
        <category>Reading</category>
      </categories>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>读《怦然心动的人生整理魔法》</title>
    <url>/posts/notes-of-the-life-changing-magic-of-tiding-up/</url>
    <content><![CDATA[<p>谢谢你们曾让我心动。</p>
<span id="more"></span> 

<h4 id="全书脉络"><a href="#全书脉络" class="headerlink" title="全书脉络"></a>全书脉络</h4><p>全书5章，整本书的脉络：</p>
<ul>
<li><p>第一章列出过往的整理中常见的错误观念，引导读者建立正确的整理观念；</p>
</li>
<li><p>第二章以丢弃物品为中心，给出决定物品去留的标准以及丢弃过程中可能遇到的问题；</p>
</li>
<li><p>第三章详细讲述如何对衣服，书籍，文件，纪念品等物品进行正确的归类整理；</p>
</li>
<li><p>第四章给出了各种收纳建议；</p>
</li>
<li><p>第五章列举整理对人生产生的诸多戏剧性影响。</p>
</li>
</ul>
<p>要点部分：</p>
<p>整理的诀窍：<strong>一次性，短期内，彻底整理</strong>。【这里的短期，以作者的标准，最长为半年。】</p>
<p>采用正确的方法来整理，关键点只有两个：</p>
<ul>
<li>确定物品的弃留</li>
<li>设定物品放置的位置</li>
</ul>
<p>且<strong>两者的顺序不可更改</strong>，必须先完成物品的丢弃工作，才能进行后续的整理收纳。</p>
<p>决定物品弃留的标准只有一个：<strong>触碰时，是否让你怦然心动</strong>。</p>
<p>收纳整理的关键只有一个：简化到极限。「极限的标准因人而异」</p>
<p>具体实操时，作者给出了很多的建议，篇幅较多，不一一列举。</p>
<p>这里只记录下个人觉得蛮实用的一些建议。</p>
<h5 id="丢弃物品时的几个tips："><a href="#丢弃物品时的几个tips：" class="headerlink" title="丢弃物品时的几个tips："></a>丢弃物品时的几个tips：</h5><ul>
<li>把同类物品集中起来，进行一次性判断；</li>
<li>别让家人看见你丢弃的物品；</li>
<li>面对不会整理的家人，最有效的方法就是先默默丢弃自己的物品，家人会潜移默化受影响；</li>
<li>对于那些“没有心动感也不愿丢弃”的物品，思考它们真正的功能，对其表示谢意然后放手；</li>
<li>除非你产生”只要拥有这些物品，就能过上幸福生活”的感觉，否则，请继续丢弃，直到适量的感悟点到来。</li>
</ul>
<h5 id="物品分类整理的几个tips："><a href="#物品分类整理的几个tips：" class="headerlink" title="物品分类整理的几个tips："></a>物品分类整理的几个tips：</h5><ul>
<li><p>不要因为”扔了可惜”，把衣服降格成家居服；</p>
</li>
<li><p>竖着折叠衣服，袜子；</p>
</li>
<li><p>衣柜左边放深色材质厚的衣物，右边则放浅色材质薄的衣物。</p>
</li>
</ul>
<h5 id="收纳的几个tips："><a href="#收纳的几个tips：" class="headerlink" title="收纳的几个tips："></a>收纳的几个tips：</h5><ul>
<li>一个不漏的设定物品的固定位置；</li>
<li>简化到极限，使自己拥有的物品数量始终处于可控状态；</li>
<li>就近收纳同类物品，但不要过度考虑行动路线，避开以方便取物为首要标准的陷阱；</li>
<li>竖着收纳；</li>
<li>不要使用市售收纳用具，建议用空鞋盒或者苹果公司的很多产品包装盒；</li>
<li>浴室和厨房水槽什么都不要放。</li>
</ul>
<h4 id="感触联想"><a href="#感触联想" class="headerlink" title="感触联想"></a>感触联想</h4><p>列出个人觉得印象深刻的一些点：</p>
<ul>
<li><p>整理之前，请先思考你所想要的理想生活以及为什么你想要过那样的生活；</p>
</li>
<li><p>为了珍惜真正有价值的物品，必须首先丢弃已经完成了使命的物品；</p>
</li>
<li><p>丢弃物品，并不意味着过去的人生体验和自我认同就此消失。通过选用有心动感的物品，更明白自己喜欢什么、追求什么；</p>
</li>
<li><p>拥有的物品准确地诉说着你做过的所有选择。因此，整理的过程也可以说是盘点自己得失优劣的过程；</p>
</li>
<li><p>整理不过是手段，整理本身不是目的，真正重要的是整理后如何生活下去。</p>
</li>
</ul>
<p>看第五章的时候，对作者提到的那些因为整理而给人生带来的改变，虽诧异，但细想下也觉得合理。与其说一个人通过整理，让房间长久保持整洁的状态，不如说通过整理，TA跟过往的自己来了一次安静的谈话，一次颇有意义的复盘，在这不断的取舍抉择中，更加清楚自己要的到底是什么。</p>
<p>刷的过程中，不自觉联想起之前不知道在哪里看到的一篇文章，Google了半天也没找出来源，简单凭记忆说一下吧。</p>
<p>文章讲述了作者自己一天的工作，其中有一个细节，就是他在乘坐地铁时，会检查当天拿到的票据或者其他文件，作者的处理方式很简单，拍照，上传，然后扔掉原件，删除照片。当时觉得很不理解，怎么能这么干脆利落的扔掉？如果需要的时候找不到这些东西怎么办？现在看来，这哥们应该对整理颇有心得。</p>
<p>看完整本书后，我并没有立即整理房间，毕竟是个大工程，不过倒是整理了下自己那些杂乱的相册，删掉了很多不必要的图片，也发现了这个：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1g51p27cxzoj30d607sdg6.jpg"></p>
<p>估计是曾经刷quora时截图的，感觉很配这本书，附上。</p>
<p>等我也完成自己的整理工作后，再回来打卡吧。</p>
]]></content>
      <categories>
        <category>Reading</category>
      </categories>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>读《The Little Redis Book》</title>
    <url>/posts/notes-of-the-little-redis/</url>
    <content><![CDATA[<p><a href="https://github.com/karlseguin">Karl Seguin</a>的一本小册子，很短，边读边实作，发现这把瑞士小军刀挺特别，哈哈。</p>
<p>戳<a href="https://github.com/karlseguin/the-little-redis-book">这里</a> 获取小册子的最新版。</p>
<span id="more"></span> 

<h4 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h4><p>整本小册子主要介绍了五种数据结构String,  Hash, List, Set, SortedSet 以其基本用法，一些更为高级的主题如Big O Notation, Transaction和一些重要的命令如expirt, sort，最后提到了有关配置configuration，验证authentication，备份backups，Redis集群cluster等等内容。</p>
<p>我们先安装，然后来看看五个主要的数据结构具体都是怎么玩的。</p>
<p>【以下均以Mac OSX上的操作为例】</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>官方下载地址：<a href="https://redis.io/download">https://redis.io/download</a></p>
<p>官方给到的安装命令：</p>
<pre><code>wget http://download.redis.io/releases/redis-4.0.9.tar.gz
tar xzf redis-4.0.9.tar.gz
cd redis-4.0.9
make
</code></pre>
<p>如果你的Mac OSX裝了homebrew的话，直接:</p>
<pre><code>brew install redis
</code></pre>
<p>装好后，根目录下执行 <code>redis-server</code>, 就跑起来了。</p>
<p>开另一个窗口，执行<code>redis-cli </code> ， 进入redis的console， 可以通过<code>info</code>命令来查看更多服务器相关信息。</p>
<p>好了，准备工作完成，来看看这五种数据结构。</p>
<h4 id="Strings"><a href="#Strings" class="headerlink" title="Strings"></a>Strings</h4><p>基本用法：</p>
<pre><code class="Redis">set users:leto &quot;&#123;name: leto, planet: dune, likes: [spice]&#125;&quot;
get users:leto
strlen users:leto
getrange users:leto 1 9
append users:leto hello
get users:leto
incr stats:page:about
incrby rating:video:12333 5
</code></pre>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fqpvulp6obj30k00afdh2.jpg"></p>
<p>简单说一下：</p>
<p><code>set &lt;key&gt; &lt;value&gt;</code> : 存储key-value</p>
<p><code>get &lt;key&gt;</code> : 获取key</p>
<p><code>strlen &lt;key&gt;</code>: 获取value的长度</p>
<p><code>getrange &lt;key&gt; &lt;start&gt; &lt;end&gt;</code> : 获取指定起始与终止位置的value子串</p>
<p><code>append &lt;key&gt; &lt;new_value&gt;</code> : 给key对应的value追加new_value</p>
<p><code>incr &lt;key&gt;</code>:  value自动加1，没有设置value时，value默认是0</p>
<p><code>incrbr &lt;key&gt; &lt;num&gt;</code>: 给value加上num</p>
<p>Redis的所有命令可以查阅这里：<a href="https://redis.io/commands">https://redis.io/commands</a></p>
<p>此外，可以使用<code>flushdb</code> 清空所有数据。</p>
<h4 id="Hashes"><a href="#Hashes" class="headerlink" title="Hashes"></a>Hashes</h4><p>类似Strings的set，get, Hash中使用<code>hset</code>, <code>hget</code>, <code>hmset</code>, <code>hmget</code>.</p>
<p>基本用法：</p>
<pre><code>hset users:goku powerlevel 900
hget users:goku powerlevel
hmset users:goku race cool age 20
hmget users:goku race powerlevel
hgetall users:goku
hkeys users:goku
hdel users:goku age
del users:goku
</code></pre>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fqq3ku5aohj30h10en3zl.jpg"></p>
<p>看输出其实就知道这些命令都是干嘛的，这里还是简单说一下：</p>
<p>【这里的field，指的就是hash中的key，为了便于区分，用field来代替。】</p>
<p><code>mset &lt;key&gt; &lt;field1&gt; &lt;value1&gt; &lt;field2&gt; &lt;value2&gt;...</code>： set多个field-value，value默认是string类型</p>
<p><code>mget &lt;key&gt; &lt;field1&gt; &lt;field2&gt;...</code>: get多个field对应的value</p>
<p><code>hgetall &lt;key&gt;</code> : 获取所有的field-value</p>
<p><code>hkeys &lt;key&gt;</code> : 获取所有的fields</p>
<p><code>hdel &lt;key&gt; &lt;field&gt;</code>： 删除某个field</p>
<p><code>del &lt;key&gt;</code> : 删除所有的fileds</p>
<p>第四章提到了keys Anti-Pattern, 给到的例子就是用Hashes来CRUD每个账户的bug信息。</p>
<h4 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h4><p>基本用法：</p>
<pre><code>rpush newusers goku
rpush newusers tom
ltrim newusers 0 10
lrange newusers 0 3
lrange newusers 2 10
</code></pre>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fqq515sib9j30cu05874m.jpg"></p>
<p>简单说一下这些命令：</p>
<p><code>rpush &lt;list&gt; &lt;item&gt;</code> : push一个item到list， 例子中是在newusers的list中push了一个user goku</p>
<p><code>ltrim &lt;list&gt; &lt;begin&gt; &lt;end&gt;</code> : trim成指定的长度，例子中是到0~10</p>
<p><code>lrange &lt;list&gt; &lt;begin&gt; &lt;end&gt;</code> : 获取指定长度的list,上面的例子中，newusers这个list中有goku, tom，对应的index是0，1，所以<code>lrange newuser 0 3</code>输出了goku, tom, 而<code>lrange newuser 2 10</code>则为空。</p>
<p>书中提到了sets的一些场景，可用于存储logs或者跟踪用户浏览网站的足迹。</p>
<h4 id="Sets"><a href="#Sets" class="headerlink" title="Sets"></a>Sets</h4><p>sets用来存储唯一值，同时提供一系列以集合为基础的运算，比如并集，交集。</p>
<p>一些基本用法：</p>
<pre><code>sadd friends:leto paul tom jessica
sadd friends:duncan paul jessica alia
sismember friends:leto jessica
sismember friends:leto alia
sinter friends:leto friends:duncan
sinterstore friends:leto_duncan friends:leto friends:duncan
smembers friends:leto_duncan
</code></pre>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fqq5q2vcmrj30in07lt9i.jpg"></p>
<p>简单说一下这些命令：</p>
<p><code>sadd &lt;set&gt; &lt;member1&gt; &lt;member2&gt; ....</code> : 给集合添加members</p>
<p><code>sismember &lt;set&gt; &lt;member&gt;</code> : 判断member是不是set中的元素， 1代表是，0代表不是。</p>
<p><code>sinter &lt;set1&gt; &lt;set2&gt; </code>:  求两个集合的交集</p>
<p><code>sinterstore &lt;set1&gt; &lt;set2&gt; &lt;new_set&gt;</code>:将两个集合的交集存储在一个新的集合new_set中</p>
<p><code>smembers &lt;set&gt; </code> ： 查看set的members</p>
<h4 id="Sorted-Sets"><a href="#Sorted-Sets" class="headerlink" title="Sorted Sets"></a>Sorted Sets</h4><p>Sorted Sets可以看成是带有score的sets。</p>
<p>基本用法：</p>
<pre><code>zadd friends:leto 100 paul 90 tom 98 jessica 80 chani
zcount friends:leto 90 100
zrevrank friends:leto chani
zrank friends:leto chani
zrangebyscore friends:leto -inf +inf
</code></pre>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fqq6a6h7xgj30ht06774s.jpg"></p>
<p>简单说一下这些命令：</p>
<p><code>zadd &lt;set&gt; &lt;score1&gt; &lt;member1&gt; &lt;score2&gt; &lt;member2&gt;....</code> : 给set的members添加上score</p>
<p><code>zcount &lt;set&gt; &lt;score_start&gt; &lt;score_end&gt;</code> : set中score在score_start ～ score_end之间的member个数</p>
<p><code>zrevrank &lt;set&gt; &lt;member&gt;</code> : 降序排序后member的位置</p>
<p><code>zrank &lt;set&gt; &lt;member&gt;</code> ：升序排序后member的位置【Redis的默认排序是升序】</p>
<p> <code>zrangebyscore &lt;set&gt; -inf +inf</code> : 输出sorted set</p>
<p>sorted set的一个比较常用的场景是用来追踪以时间为纬度的事件。好吧，我没用过，这里就不举例子了。</p>
<h4 id="其他一些好玩的命令"><a href="#其他一些好玩的命令" class="headerlink" title="其他一些好玩的命令"></a>其他一些好玩的命令</h4><ul>
<li><p>Expire</p>
<p>用来设置key的过期时间。</p>
<p>看个例子：</p>
<pre><code>set pages:about 30
get pages:about
expire pages:about 20 # 设置过期为20秒后
ttl pages:about # 查看还剩多少秒过期
persist pages:about # 取消过期设置
get pages:about
expire pages:about 5
get pages:about # 此时pages:about过期，值变成了nil
setex pages:detail 30 &#39;More details&#39; # set key= pages:about ,值为More details, 30秒后过期
</code></pre>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fqq7braobij30h808ngm9.jpg"></p>
<p>​</p>
</li>
<li><p>Publication and subscriptions</p>
<p>可以订阅channel，取消channel，publish message，很cool！</p>
<p>玩一下。</p>
<p>在一个window上跑<code>redis-cli</code>, 执行<code>subscribe warnings</code>, 另开一个window跑<code>redis-cli</code>, 执行：<code>publish warnings &quot;hi,Redis~&quot;</code></p>
<p>你会看到第一个window中的warnings channel接受到了信息“hi,Redis~”。</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fqq7pb02wxj30fg04ajrj.jpg"></p>
</li>
<li><p>Monitor</p>
<p>好用的debugging 工具，可以清晰看到你的所有历史操作。</p>
<p>直接上图感受下：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fqq7npsw9cj30ol08k40y.jpg"></p>
</li>
<li><p>Sort</p>
<p>sort可以用来给list，set， sorted set进行排序。</p>
<p>可以用limit来限定哪些records需要排序，用by指定排序依据。</p>
<p>看个例子感受下：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fqq7vfvj2wj30l50c9t9r.jpg"></p>
<p>​</p>
</li>
</ul>
<h4 id="Something-else"><a href="#Something-else" class="headerlink" title="Something else"></a>Something else</h4><ul>
<li><p>pipelining</p>
<blockquote>
<p>Normally when a client sends a request to Redis it waits for the reply before sending the next request. With pipelining you can send a number of requests without waiting for their responses. This reduces the networking overhead and can result in significant performance gains.</p>
<p>正常情况下，当客户端发送请求给到redis时，它需要得到回复后才可能发送下一条请求。但是通过pipelining， 你可以在不需要等待回复的情况下，向Redis发送大量的请求。这减少了网络开支，显著提升了性能。</p>
<p>没用过，先记着。</p>
</blockquote>
</li>
<li><p>Transaction</p>
<blockquote>
<p>每个Redis的命令都是原子性的，当使用多个命令时，Redis同样支持transaction。</p>
<p>Redis is actually single-threaded, which is how every command is guaranteed to be atomic. While one command is executing, no other command will run.</p>
<p>Redis如何保证translation? 即原子性，一致性，隔离性，持久性？</p>
<ul>
<li>The commands will be executed in order</li>
<li>The commands will be executed as a single atomic operation (without another client’s command being executed halfway through)</li>
<li>That either all or none of the commands in the transaction will be executed</li>
</ul>
</blockquote>
</li>
</ul>
<h4 id="The-end"><a href="#The-end" class="headerlink" title="The end"></a>The end</h4><p>读技术类书籍果然不比一般书籍，得跟着实作才有感觉，真想向天再借500年……</p>
]]></content>
      <categories>
        <category>Reading</category>
      </categories>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>读《the little schemer》《the seasoned schemer》</title>
    <url>/posts/notes-of-the-little-schemer-and-the-seasoned-schemer/</url>
    <content><![CDATA[<p>终于敲完了两本书的所有示例代码，整个过程还是蛮特别的。</p>
<span id="more"></span> 

<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>看这两本书纯粹是因为之前读了《黑客与画家》，对作者屡次提及的Lisp感到好奇，想要了解下，然后在common lisp和scheme中毫不犹豫选择了后者，仅仅因为它看起来小而巧，而选择这两本scheme书，也是Google到的缘分，现在看来，觉得特别幸运，遇见了这样特别的书。</p>
<p>书中多处致敬了多位在数学和计算机领域作出贡献的人，还顺带调侃了下《动物庄园》里面的名句，令人捧腹。而往往在你看不懂代码，一头雾水，烦躁不安时，作者又时不时整一两句有关食物的调皮话，让人一下子又觉得没那么难懂了。</p>
<p>如果所有的编程书都能用这种方式去写，那该多有趣，可惜能把复杂的东西用这样特别的方式呈现出来，对于作者本人的要求着实不低。</p>
<p>这里简单屡屡两本书的大致内容以及遇到的问题。</p>
<h4 id="《the-little-schemer》4th"><a href="#《the-little-schemer》4th" class="headerlink" title="《the little schemer》4th"></a>《the little schemer》4th</h4><p>全书10章，入门级，从最基本的概念说起，难度比较大的是chapter09，有关Y-combinator的推导，虽然我目前不是很清楚，Y-combinator到底有怎样特别的用途，但是整个的推导过程并不难，耐着性子跟着作者的思路走就好，而且等你完成这个推导过程后，你会发现读《the seasoned schemer》chapter 16时，Y-bang 已经不再让你感到困惑。</p>
<p>最后一章chapter 10算是初级版本的scheme解释器，好比手把手教你写一个用scheme解释scheme语法的工具。说它是初级版本，是因为在《the seasoned schemer》chapter 20 中，作者对这块的代码重构了，加入了letcc, set!等，算是终极版本。</p>
<p>这本书遇到的问题不多，主要是在chapter 6 。</p>
<p>chapter 6 shadow部分，章节最末尾针对<code>(())</code>，<code> (() ())</code>，<code> (() () ())</code> 类列表定义了函数：+，lat?， 但这两个函数是无效的，执行时，无法输出结果，也许这正是章节标题 shadow的含义。</p>
<h4 id="《the-seasoned-schemer》"><a href="#《the-seasoned-schemer》" class="headerlink" title="《the seasoned schemer》"></a>《the seasoned schemer》</h4><p>全书10章，是《the little schemer》的进阶版。</p>
<p>个人觉得这本书相对有些难度的是chapter16和chapter19。</p>
<p> chapter 16中引入了Y-bang，并定义了一个函数biz用来告诉你它与 Y-combinator其实并不一样，但是具体为何不同，需要自行推导。嗯，你都能推导出Y-combinator了，这个自然也难不倒你，带着肥宅水上路吧！</p>
<p>chapter 19 中你会看到一个不一样的continuation，真的是很special的一个continuation。反正我自个儿是刷了两三遍才get到two-in-a-raw* 为什么可以那样定义，看完这章的时候，还想着整理点continuation的用法记录下来，结果看完wiki上有关<a href="https://en.wikipedia.org/wiki/Call-with-current-continuation">call-with-current-continuation</a> 举出的示例代码后，深深觉得自己水平太低，对yin-yang puzzle那块更是懵逼的一塌糊涂，先埋个坑吧，期待日后也能写一写阴阳谜题。</p>
<p>chapter 20 呼应着《the little schemer》chapter 10，完善了原先的代码，如果你一路走下来对每一章都理解的七七八八，这一章看下来会觉得没啥难度，看完不要忘记奖励自己甜点啊。</p>
<p>这本书遇到的问题主要在chapter13 和 chapter14。</p>
<p>chapter 13 hop skip jump 部分，书中直接使用的letcc，在mit-scheme中无法使用, 报错：Unbound variable: letcc，因为它没有定义这种缩写形式，建议练习时，遇到letcc的地方，都改用<code>(call-with-current-continuation (lambda ....))</code>. 或者你也可以这样</p>
<pre><code class="scheme">(define call/cc call-with-current-continuation)
</code></pre>
<p>使用 call/cc 来代替，这样也算是某种简化了。</p>
<p>chapter 14 let there be games 部分，章节末尾出现了try， 但是那段代码无法正常执行，没有Google到解决方法，书中给出的try解释也让人有点懵逼，至少我觉得 a 中应该出现 x。不过对该章节印象还蛮深刻的，作者不断的改进函数leftmost，算是结结实实体验了一把Refactoring scheme version。</p>
<p>chapter 20 中，在使用 let 去重定义*const 时出现了重复代码，可能作者急着去party而忘记删除了😂。这个不算问题，算找茬😄。</p>
<h4 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h4><p>自然是强烈推荐这两本书，第一次发现原来编程书可以写得这么有意思。</p>
]]></content>
      <categories>
        <category>Reading</category>
      </categories>
      <tags>
        <tag>Scheme</tag>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>读《长安十二时辰》</title>
    <url>/posts/notes-of-the-longest-day-in-chang-an/</url>
    <content><![CDATA[<p>没忍住，刷完了。</p>
<p>蛮好看的，感觉书比剧好看。</p>
<span id="more"></span> 

<p>因为剧没怎么看，这里就扯点看完书后的感觉。</p>
<p>按惯例，大致说一下情节：</p>
<p>张小敬的首次出场，是李泌诱捕突厥狼卫失败后，徐宾向李泌举荐，随后徐宾领了鱼袋，匆匆去狱中把他捞了出来，为方便行事，张小敬挂上了靖安司都尉一职，然后便是一步步开始寻着线索找突厥狼卫。</p>
<p>先是长安坊图，随后去西市胡商那里敲山震虎，找到有坊图的胡商，胡商被杀，坊图被狼卫盗走，张小敬追狼卫至祆教祠，祠中暗桩在混乱中拿走了坊图，借着祆教祠大萨宝提供的情报，他们定位到了龙波。</p>
<p>在靖安司等人寻找狼卫的同时，另一条线也开启了。闻染和王韫秀被突厥绑架，阴差阳错中，闻染被当成王忠嗣之女入了狼营，而真正的王将军之女则被熊火帮带走。突厥这边，狼卫们在拿到石脂后，开始紧锣密鼓制作霍多「猛火雷」。另一边，熊火帮头儿封大伦，则火急火燎地想着法子要把张小敬弄回牢里面，随后他与元载搭上了线，那个时候的封大伦一定不会想到，正是这个人，在短短几个时辰之后，”送”了他一口大锅。</p>
<p>张小敬去平康里后，与葛老交易，定位到了突厥落脚的货栈，突厥被袭，西市纵火，最后老司机张小敬凭借高超的御车之术，成功将火雷送进了广通渠。</p>
<p>至此，突厥人基本都领盒饭了，留下了奄奄一息的曹破延。而刚刚从广通渠中捡回半条命的张小敬，却被右骁卫强行带走。</p>
<p>为救张小敬，李泌求助贺知章，无果，最后姚汝能与檀棋去右骁卫劫狱，成功救出张小敬。</p>
<p>张小敬回到靖安司，从将死的曹破延口中得知他们的中间人为右杀，右杀藏匿在景教。于是张头儿与檀棋伪装为夫妻，去波斯寺追查右杀。</p>
<p>与此同时，龙波带领一群蚍蜉，步步为营，成功进入靖安司指挥中心，掳走李泌，火烧了靖安司。</p>
<p>张小敬一行在波斯寺遇到了景教的伊斯，并成功活捉了一名守捉郎，根据守捉郎提供的线索，张头儿二访平康坊，而后续走马上任靖安司的吉温，在元载的善诱下，全城缉拿张小敬。刚出狱的张小敬重新回到了被捕名单中。伊斯尾随张小敬去了平康坊，在这里，张小敬遇到了鱼肠，被鱼肠设计，遭守捉郎追捕，危机之中，葛老救了张小敬，两人约谈守捉郎，设计引出了鱼肠。在追捕鱼肠的过程中，伊斯拿到了鱼肠掉落的竹片，寻着竹片，找到了晁分，晁分提供线索，张小敬定位到了上元节的那座灯楼，不料在灯楼中遇到了龙波，而龙波的真实身份竟是昔日出生入死的战友萧规，当年死守烽燧城幸存者之一。张小敬假意入伙，最后萧规死去，蚍蜉被灭，张小敬成功救出了一干人等，平复了这场动乱。「后面毁灯楼，救皇帝贵妃，感觉没有前面精彩，就不细说了」</p>
<p>而李泌也在最后推断出了整个上元节动乱的幕后主使：贺知章的养子贺东，动机则是出于孝道。</p>
<p>「为了一人的孝道，便可以让全城为之陪葬，感觉这个动机有些牵强了，而且前面对贺东人物的描写太少，给人一种突然抓了个人过来充主谋的感觉。」</p>
<p>说说感受。</p>
<p>整本书看下来，独眼的张小敬简直孤胆英雄，九年长安帅，十年西域兵，牛逼啊，啥都会，啥都懂，很有血性的汉子，重情重义，在晁分院中大开杀戒之时，院子的主人赞赏他杀人时很美，纯粹到了极致，简直似佛亦似魔。</p>
<p>白衣宰相李泌，之前对他的印象就是很牛逼，心向道，不娶妻，出门得坐车，以为他属于身体病弱，智力超群那种，这本小说里面倒是对他没啥特别的塑造，从头到尾，清一色，正统人。</p>
<p>元载这个人蛮搞笑的，十足的商人，机关算尽，后记里面提到了这个人后续的发展，黄粱梦醒，还挺符合人设。</p>
<p>个人最喜欢伊斯，感觉特别好玩的一个人，一双慧眼秋水洗，特意搜了下， 安史之乱中，拜郭子仪门下为谋士。效力唐肃宗、代宗和德宗三朝，景教碑文中描述其”清节达娑，未闻斯美，白衣景士，今见其人”，嗯，白衣飘飘，轻功了得，估计还是个大帅锅。</p>
<p>好了，不扯淡了，下次还是少看这类书，憋个读后感要憋好久……</p>
]]></content>
      <categories>
        <category>Reading</category>
      </categories>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>读《1984》</title>
    <url>/posts/notes-of-the-nineteen-eighty-four/</url>
    <content><![CDATA[<p>一时兴起，没想到这次竟然很耐心地刷完了。</p>
<span id="more"></span> 

<p>最后温斯顿难逃被枪杀的命运，不过就算他未被枪杀，精神上也已经被处决过了。</p>
<p>这次偷个懒，不絮絮叨叨写情节了，感觉自己写不好，毕竟也没有看得特别的懂。</p>
<p>相比较而言，还是更喜欢他的《动物庄园》。</p>
<p>刷的时候，难掩好奇，奥维尔是经历了什么，才会写出这样的文字？Google后发现，原来他可能本人也被监视了很多年……</p>
<p>当然，只是猜测，毕竟Google到的信息，并不就是事实。</p>
<p>书中第一部分给人一种《V字仇杀队》的感觉，还以为电影是以此改编的，Google后才发现并不是。</p>
<p>不过倒是找到了根据它改编的电影<a href="https://www.youtube.com/watch?v=fCZBnUt6rZ0">《1984 》</a>, 黑白片， 画面感觉有些惊悚。</p>
<p>可是，不得不说，书中的某些情节确实也挺惊悚的。</p>
<p>找资料的时候，顺带发现电影V里面用了老柴的 <a href="https://www.youtube.com/watch?v=VbxgYlcNxE8">《1812序曲》</a>，算是一个小小的惊喜，果断加入了歌单：P。</p>
<p>还记得N年前第一次翻这本书的时候，完全看不进去，匆匆扫过就弃坑，丝毫不明白为什么这会是奥威尔的成名之作，明明毛姆的小说更好看好不好？</p>
<p>庆幸自己弃坑后，还能记得回来填坑。</p>
<p>毕竟好的作品值得花时间去慢慢读。</p>
<p>也许有些东西，需要时间，才能慢慢领会。</p>
<p>喜欢书中的那句：Freedom is the freedom to say that two plus two make four.</p>
<p>愿人人都能拥有这份自由。</p>
]]></content>
      <categories>
        <category>Reading</category>
      </categories>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>读《我编程，我快乐》</title>
    <url>/posts/notes-of-the-passionate-programmer/</url>
    <content><![CDATA[<p>全书200多页，共5章，作者Chad Fowler是位开发者，也是位音乐人，萨克斯演奏者。让我想起那位同是musician &amp; developer的Derek Sivers。</p>
<span id="more"></span> 

<p>一个核心思想是，把自己的职业当成一门生意，你的产品就是你能提供的服务，而技术是你服务的基础，作者从四个方面讲述了如何在计算机行业快乐地编程：P</p>
<p><strong>研究</strong>，<strong>投资</strong>，<strong>执行</strong>，<strong>市场</strong>，然后循环往复。</p>
<p>记录下书中一些有感触的建议，同时附上个人理解，可能有些混乱。</p>
<h4 id="研究-选择市场"><a href="#研究-选择市场" class="headerlink" title="研究-选择市场"></a>研究-选择市场</h4><p>这一章里面提到了技术的选择，Be公司的BeOS，想到当下区块链的大热，竟然有种历史重演的错觉，当然区块链不会消亡，它还没有真的成熟起来，看好它的未来。</p>
<p>你无法在价格上与之竞争，但你可以在能力上与之抗衡。所以尽量<strong>选择从事高端层面的开发工作</strong>，<strong>让竞争从价格转到能力上</strong>。尽快结束你的低水平建构，尽快脱坑。</p>
<p>通过思考，思考，而不是一味的盲从，选择你要投入时间在哪种技术，哪个行业。</p>
<p>软件工程师不能只会开发软件，应该要成为这个行业领域的专家，熟悉并融入业务领域。</p>
<p><strong>做乐队中最差的乐手</strong>，The people around you affect your own performance, <strong>choose your crowd wisely</strong>.</p>
<p>找到你钦佩的开源项目，参与其中，学习优秀的代码风格和功能实现，通过行动向高级程序员学习。</p>
<p>优秀的程序员之所以寻找变化和多样性的工作，是因为他们喜欢学习新东西。或者是因为他们很清楚，想成为更加成熟，更加全面的程序员，就必须去学新的技术，在新的工作环境下，获取新的经验。</p>
<p><strong>学习新的语言，投资你的思维</strong>。</p>
<p><strong>成为一名通才</strong>，generalists are rare， and therefore, precious.</p>
<p>你能在多广的范围内发挥作用，决定了你能产生多大的价值。要想在这个行业站稳脚，<strong>必须做一个多面手</strong>。「这跟此前一直被提倡的fullstack理念有共通之处」。</p>
<p>成为专家，更准确的说，你要在一个领域精深，但这还不够，你需要在多个维度上进行拓展，不一定每个维度都优秀，但都要懂。</p>
<p>何为专家？可以处理高水平的抽象，同时了解那些实现高端抽象的底层细节。【这需要能静下心来钻研，更需要时间的积累】</p>
<p><strong>考虑开源的技术，不要选择商业性质的特定技术</strong>。我记得湾区日报中曾有个类似的建议，提到的是选择开发平台的重要性，那些曾经选择做flash，黑莓手机的程序员就比较惨了，而web平台最保险，它是开放的，不会随着哪家公司的消亡而消亡。</p>
<p><strong>我永远不会用自己的技术来定位自己，而是用我已经做过的和我将要做的事情来定位自己，技术只是一种做事的方法。</strong>「深以为然」</p>
<p>这章后面附上了一份GitHub cofounder Tom Preston-Werner写的文章,有关GitHub创建和他对于职业的选择，14年4月的时候，他离开了GitHub，拥抱了虚拟现实。</p>
<p> 我在他的blog上找到了原文：<a href="http://tom.preston-werner.com/2008/10/18/how-i-turned-down-300k.html">How I Turned Down $300,000 from Microsoft to go Full-Time on GitHub</a></p>
<p>结尾那句说得真好：<strong>When I’m old and dying, I plan to look back on my life and say “wow, that was an adventure,” not “wow, I sure felt safe.”</strong></p>
<h4 id="在产品上投资"><a href="#在产品上投资" class="headerlink" title="在产品上投资"></a>在产品上投资</h4><p>想一想学习或者工作中你不完全懂的问题，问自己两个问题：<strong>它是如何工作的</strong>？<strong>为什么会发生这种情况</strong>？</p>
<p>在你的工具箱中挑选一种非常重要却经常被忽视的工具，每天花一点时间去学习这项工具的新知识，利用一系列的“如何和为什么”的问题来深入研究它的核心。</p>
<p><strong>了解你公司的财务运作可以让你做出有意义的转变</strong>，而不是茫然无知地专注于某一件事情，却主观地认为这样就是对的。</p>
<p><strong>寻找让你可以信赖和钦佩的人</strong>，良师益友可以帮助你做出职业的导向，帮助你磨练技术。但首先，学会自己做自己的良师益友。</p>
<p>教是最好的学。</p>
<p>帮助别人是一种能力，也能让你收获满足和快乐。</p>
<p><strong>练习，练习，再练习，practice at your limits。</strong></p>
<p>选择一个程序，试着限制你的编程，这种自我限制的方法是训练思维敏捷和提高即兴编程的好方法。</p>
<p>从实战及书籍中学习软件开发的方法论。</p>
<p>选择一些开源项目的源代码，去阅读，以批判的视角去看，培养自己的代码品味。</p>
<p>选择一个项目，像读书一样研读并且做笔记，归纳出好的方面和坏的方面，发表一篇评论，至少找到一个你可以借鉴的技巧或者模式，再找到至少一处缺点，提醒自己在开发软件的时候，不要犯这类错误。</p>
<p>自动化，思考你日常工作中需要重复做的工作，为它写一个代码生成器。</p>
<h4 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h4><p>创造价值。</p>
<p>时时翻看你的todo list，找到那些夭折的想法，试着付诸行动。</p>
<p>每天都有可汇报的成绩。「这个其实挺难的，有的时候，一个bug可能就会让你困一天，没有任何进展，那种感觉很挫败，但是又不得不继续处理。还是放宽点，每天都有进步即可。」</p>
<p>养成记录的好习惯，思考工作中哪些部分可以自动化，动手实施。</p>
<p>「我养成了每天都写工作日志的习惯，但是我发现往往手上的工作就已经够忙活的了，没有过多的精力去想，这个可以怎么怎么优化？更多的是，这个要这么实现？」</p>
<p>你为一个公司工作，如果你不能为这个公司创造真正的价值，那么公司在你身上的投资就是浪费。</p>
<p>ask, “Was I worth it today?”</p>
<p>主动与你的团队成员或者领导分享你所做的事情，为你的代码加上注释。<strong>一定要懂得分享</strong>。</p>
<p>如何解决那些技术，沟通或者项目管理中出现的错误？</p>
<ul>
<li>发现问题后第一时间提出，不要企图隐瞒错误</li>
<li>接受批评</li>
<li>提供解决方案</li>
<li>寻求帮助</li>
</ul>
<p>通过练习，记录自己恐慌时的反应，在下一次恐慌来临时，学会分析自己对于事物的反应。</p>
<p>遇事能冷静沉稳，是一种能力，这种能力是可以通过反复练习培养的。</p>
<p>每周写下你本周的工作结果汇报和下周的工作计划。</p>
<p>阅读好的代码，分析别人的解决思路，学会模仿，而不是粗略地走马观花。</p>
<p>即使是失败和抄袭，也能让你进入良性循环，至少你见过，然后知道如何处理此类问题。</p>
<p>这章最后附上的是<a href="https://patrickcollison.com/">Patrick Collison</a>的文章《失败和模仿》，看完第一感觉就是这人不简单，特意去搜了下，果然，是位牛人，05年，23岁的Patrick和自己的brothers「他的这两个弟弟也是牛人」就成立了Stripe公司，16年，Stripe获得了CapitalG和General Catalyst Partners的投资，公司估值92亿美元，他们仨也因此成为了全球最年轻的self-made billionaires。</p>
<p><strong>这是一场无节制的掠夺，当你全心全意去汲取各种各样的技术时，你会找到一种方法将这些技术以一种新的方式结合在一起。「这真是盗亦有道的高级境界</strong>」。</p>
<h4 id="市场-推销"><a href="#市场-推销" class="headerlink" title="市场-推销"></a>市场-推销</h4><p>最好的产品不一定就能在竞争中取得胜利，市场宣传更为重要。</p>
<p>不要忽视感觉，不要忽视他人对你的感觉，以人为镜。</p>
<p>学会有效沟通，不要用专业的术语来显摆自己的学识，有效沟通的前提是平等与尊重。</p>
<p>培养写作技能。<strong>you are what you can explain</strong>.</p>
<p>抓住face to face 的沟通机会。</p>
<p>人类的天性是喜欢与人一起工作。「我想这是一种归属感或者所谓的安全感吧？」</p>
<p>加强沟通交流，和同事，上级以及客户。</p>
<p>准备好你的“电梯演讲”：<strong>最近你在做什么？这项工作的意义是什么？</strong></p>
<p>带着任务去上班，并确保别人知道你在做什么。</p>
<p>让人们听到你的声音。</p>
<p><strong>参与才是最大的变量</strong>。</p>
<p>参与开源项目。</p>
<p><strong>主动建立联系</strong>，主动与你敬仰或者愿意向他学习的人交谈，最开始可能会让你觉得不舒服，事实上，正是因为这样做会让你感觉不舒服，所以你才要迈出这一步。</p>
<h4 id="保持技术领先"><a href="#保持技术领先" class="headerlink" title="保持技术领先"></a>保持技术领先</h4><p>这一章看得人有点心惊。</p>
<p>今天辛苦所学的技术明天可能就过时，就好比一场你不得不参与的赌博，如果旁观，那就是被动，一定会输，必须下注，可是下注下的不对，还是输……输完还得继续，赌注是什么？你的时间和精力，这都是最宝贵的……</p>
<p>我擦，人生博弈论……怎么破？</p>
<p>作者给出的建议：每周找出时间来研究尖端科技，<strong>每周至少找出2个小时的时间来研究新科技</strong>。<strong>学习相关技术，并动手尝试</strong>。制作简单的应用程序，将你正在以当前技术做的项目，用新技术来做出新的原型版本，来理解它们的不同之处，以及新科技能够做些什么，在你的日程安排中加入做这项工作的时间，一定要按时完成。</p>
<p>给自己做一份职业蓝图。</p>
<p>南印度抓猴的故事很有启发性，猴子过于看重米的价值，而丢失了自由，甚至生命。价值僵化的例子让我想到了《beyond feeling》里面不愿意改变自己想法的人，一味觉得自己的想法才是正确的，他人一旦提出与其对立的想法就被归于异类，这其实也是一种思维陷阱，它让个体拒绝改变，而拒绝改变是可怕的。</p>
<p><strong>找到你的捉猴陷阱 —— 你的价值僵化是什么？在你完全不知情的情况下，哪些价值观在引领着你的行为？</strong></p>
<p>找出你最讨厌的技术，并用它来完成一个项目。「呃，我没有最讨厌的技术……至少暂时没有……」</p>
<p>制定好你的职业目标，在实现的过程中根据情况不断改进，从实践中学习。</p>
<p><strong>每天进步一点点</strong>「其实真的做到每天进步一点点，并不容易……」</p>
<p><strong>最重要的一点不是你以什么为生或者你得到了什么，重要的是你如何接受这一切。</strong></p>
<h4 id="一点感触"><a href="#一点感触" class="headerlink" title="一点感触"></a>一点感触</h4><p>看完最大的感触就是作者能将自己学音乐时所用的技巧，比如练习，跟哪些人一起演出，如何在音乐界出名等等，嫁接到计算机的世界，而且很巧妙的是，道理都是通用的，合理地应用这些规则，让他在计算机的世界里收获了成功。可见，假使一个人能在一个行业做的不赖，换一个行业，也一样会是个高手。</p>
<p>既然看完了书，就得有所改变，抽空少看电影，多看看源代码吧。</p>
<p>最后，用Patrick的话收个尾：</p>
<p><strong>如果让我来选择两种能使我们取得进步的方法，我会选择失败和模仿。</strong></p>
]]></content>
      <categories>
        <category>Reading</category>
      </categories>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>读《The Prophet》</title>
    <url>/posts/notes-of-the-prophet/</url>
    <content><![CDATA[<p>这本是<a href="https://twitter.com/naval?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor">Naval</a> 推荐的书之一.</p>
<span id="more"></span>

<p>老实说, 刷它是因为相比他推荐的其他书, 这本篇幅已经是相当的短了.</p>
<p>但是我却刷了很久.从2020刷到了2021…….</p>
<p>一方面是词汇, 有些语法上的不适应, 读来像诗.</p>
<p>另一方面是句子的含义不易消化, 大量的类比, 所表达的又不仅仅只是字面的含义.</p>
<p>果然, 哲学这东西需要慢慢嚼很久才能消化…….</p>
<p>刷完后, 去了解了下作者<a href="https://en.wikipedia.org/wiki/Kahlil_Gibran">Kahlil Gibran</a> , 是一位黎巴嫩裔美国作家, 也是诗人.中文Wiki里面还提到他被称为“黎巴嫩文坛娇子”.</p>
<p>好吧, 误打误撞, 偷懒选中的书, 竟然是位大牛的作品.</p>
<p>有段冰心对他和泰戈尔的评价:</p>
<blockquote>
<p>女作家冰心曾说过《先知》与《吉檀伽利》“有异曲同工之妙”。上世纪80年代，我们奉命到黎巴嫩任职，受纪伯伦博物馆馆长库鲁兹先生之托，代博物馆找寻一本冰心译的《先知》，有幸与冰心老人结识。曾听她这样品评过纪伯伦与泰戈尔，她说：“泰戈尔是贵族出身，家境优越，自幼受过良好教育。他的作品感情充沛，语调明快，用辞华美。格调也更天真，更欢畅，更富神秘色彩。而<strong>纪伯伦是苦出身，他的作品更像一个饱经沧桑的老人在讲为人处世的哲理，于平静中流露出淡淡的悲凉。</strong>”</p>
</blockquote>
<p>整本书, 确实读起来, 像是一个老者在讲着他对世界的理解.</p>
<p>全篇主要由26个小短文组合而成, 讲述一个哲人, 在一座叫做Orphalese的城市等待了12年, 终于等到了驶来的船只, 准备踏上返回故土的旅程, 临行前, 城里的人们前来送行, 请他分享对一些重要的人生问题的见解. 这些问题主要涉及 Love, Marriage, work, Freedom, Friendship等等.  </p>
<p>哲人针对这些问题给到了他的理解, 摘录下部分:</p>
<blockquote>
<ul>
<li><p>Love has no other desire but to fulfill itself.</p>
</li>
<li><p>To be wounded by your own understanding of love; And to bleed willingly and joyfully.</p>
</li>
<li><p>Only when you are empty are you at standstill and balanced.</p>
</li>
<li><p>It is in exchanging the gifts of the earth that you shall find abundance and be satisfied.</p>
</li>
<li><p>And my heart bled within me; for you can only be free when even the desire of seeking freedom becomes a harness to you, and when you cease to speak of freedom as a goal and a fulfillment.</p>
</li>
<li><p>Much of your pain is self-chosen.</p>
</li>
<li><p>It is life in quest of life in bodies that fear the grave. There are no graves here.</p>
</li>
</ul>
</blockquote>
<p>大概是因为我没有看懂的缘故, 对目前的我来说, 这些见解并没有给到我太多的触动.</p>
<p>大抵所有的答案只有自己去主动寻找, 才会明白得来不易, 才会有那难得的喜悦和深刻.</p>
<p>投喂不当, 确实容易消化不良.</p>
<p>书中有句话蛮喜欢的: “Your daily life is your temple and your religion.”</p>
<p>Find your inner peace in your daily life.</p>
]]></content>
      <categories>
        <category>Reading</category>
      </categories>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>读《The Psychology of Money》</title>
    <url>/posts/notes-of-the-psychology-of-money/</url>
    <content><![CDATA[<p>一篇迟到了很久的笔记.</p>
<span id="more"></span>

<p>这本是 <a href="https://twitter.com/morganhousel?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor">Morgan Housel</a>的新书, 2020年出炉, 有幸在Twitter上刷到, 就下载了本, 扔进了书单.</p>
<p>刷完后, 打着”Some lessons have to be experienced before they can be understood”做幌子, 安慰自己, 等在实战中伤痕累累了, 再来写读后感, 才比较有共鸣嘛………..</p>
<p>自然这是为偷懒找的借口.</p>
<p>不过没有实战也可以先来缕缕, 加深印象, 说不定以后会少踩点坑.[虽然心里明白并不会……]</p>
<p>说正题.</p>
<p>整本书共20章, 主要讲述在人们处理金钱时, 影响他们作出决策的一些偏见和原因.诚如作者本人所言, 每章都可以单独成文, 并没有太多的关联, 可以随意选择你感兴趣的章节阅读.</p>
<h4 id="两点建议"><a href="#两点建议" class="headerlink" title="两点建议"></a>两点建议</h4><p>大部分人刷的时候, 可能会直接奔着答案去, 作者也确实在书中的最后一个章节里, 提到了他个人的一些理财原则, 也可看作是投资建议, 主要是两点:</p>
<ul>
<li><p>保持高储蓄率</p>
<blockquote>
<p>不过度消费, 选择持有足够的现金, 以应对生活中难免会出现的意外,而不必在面临重大开销时, 被迫去抛售持有的股票.</p>
<p><strong>Independence, at any income level, is driven by your savings rate.</strong></p>
<p>Cash is the oxygen of independence.</p>
<p>这里作者也提到了他没有按揭买房, 而是全款买房, 并认为这是他做的最好的决定.[无债一身轻, 夜夜安眠.]</p>
<p>We own our house without a mortgage, which is the worst financial decision we’ve ever made but the best money decision we’ve ever made.</p>
<p>[个人觉得, 作者如此反复强调高储蓄率, 应当是基于他对安全边际(又名 Room For Error)的深刻理解. ]</p>
</blockquote>
</li>
<li><p>持有低成本的指数基金</p>
<blockquote>
<p>基于这个决定的底层逻辑, 是作者相信全球经济在接下来的数十年内会蓬勃发展.</p>
<p>保持耐心和乐观, 坚持持有就好. [让人想起芒格那句: 慢一点, 我们不在乎]</p>
<p>当然, 作者也提到了, 他可能会在未来改变这个投资决定.</p>
</blockquote>
</li>
</ul>
<p>两条看似简单的建议, 其实坚持做下去真得不易.</p>
<p>不过有挑战的事情, 才更值得去做, 不是吗?</p>
<p>好了, 如果你需要的是答案, 下面的内容可以直接跳过了.</p>
<h4 id="章节摘选"><a href="#章节摘选" class="headerlink" title="章节摘选"></a>章节摘选</h4><p>以下内容主要摘选了各章节中, 个人很喜欢的一些观点.</p>
<ul>
<li><p>Your personal experiences with money make up maybe 0.00000001% of what’s happened in the world, but maybe 80% of how you think the world works.</p>
</li>
<li><p>Every decision people make with money is justified by <strong>taking the information they have at the moment</strong> and <strong>plugging it into their unique mental model of how the world works.</strong> [其实做任何决定的时候, 都会遵循这样的模式吧, 并不仅仅是有关金钱方面, 所以, 掌握的信息是否足够, 是否正确以及你对于世界运行的认知是否合理, 决定了所作出的决定的质量]</p>
</li>
<li><p>I want you to be successful, and I want you to earn it. But realize that <strong>not all success is due to hard work, and not all poverty is due to laziness. Keep this in mind when judging people, including yourself.</strong> [No judgement]</p>
</li>
<li><p>The trick when dealing with failure is arranging your financial life in a way that a bad investment here and a missed financial goal there won’t wipe you out so you can keep playing until the odds fall in your favor.[不要离场]</p>
</li>
<li><p><strong>There is no reason to risk what you have and need for what you don’t have and don’t need.</strong>[不要为了不值得的东西去冒险]</p>
</li>
<li><p>there’s only one way to stay wealthy: <strong>some combination of frugality and paranoia</strong>.[生活简朴, 决策慎重]</p>
</li>
<li><p>Remember, <strong>tails drive everything</strong>.[长尾理论]</p>
</li>
<li><p><strong>The ability to do what you want, when you want, with who you want, for as long as you want, is priceless. It is the highest dividend money pays.</strong>  [自由意味着自己对个人时间的掌控, You are in control, 这章提到了Derek Sivers年轻时候的一个故事, 特别喜欢, 哎, 我咋就没有那样的觉悟?]</p>
</li>
<li><p><strong>The world is filled with people who look modest but are actually wealthy and people who look rich who live at the razor’s edge of insolvency.</strong> Keep this in mind when quickly judging others’ success and setting your own goals.[Wealthy is what you don’t see.]</p>
</li>
<li><p>Every bit of savings is like taking a point in the future that would have been owned by someone else and giving it back to yourself.</p>
</li>
<li><p>Do not aim to be coldly rational when making financial decisions. <strong>Aim to just be pretty reasonable.</strong> Reasonable is more realistic and you have a better chance of sticking with it for the long run, which is what matters most when managing money.</p>
</li>
<li><p><strong>Things that have never happened before happen all the time.</strong>[对应前面提到的, 历史从不重复, 重复的是人, history never repeats itself, man always does]</p>
</li>
<li><p>History can be a misleading guide to the future of the economy and stock market because it doesn’t account for structural changes that are relevant to today’s world.</p>
</li>
<li><p><strong>In fact, the most important part of every plan is planning on your plan not going according to plan.</strong> [保持灵活,  You have no sunk costs.]</p>
</li>
<li><p>The wisdom in having room for error is <strong>acknowledging that uncertainty, randomness, and chance—“unknowns”—are an ever-present part of life</strong>.</p>
</li>
<li><p><strong>At every stage of our lives we make decisions that will profoundly influence the lives of the people we’re going to become, and then when we become those people, we’re not always thrilled with the decisions we made.</strong>[挺扎心的…..]</p>
</li>
<li><p>Like everything else worthwhile, successful investing demands a price. But its currency is not dollars and cents. <strong>It’s volatility, fear, doubt, uncertainty, and regret</strong>—all of which are easy to overlook until you’re dealing with them in real time. [it’s an admission fee worth paying]</p>
</li>
<li><p><strong>We’re just playing a different game.</strong> [实在太喜欢这隐喻]</p>
</li>
<li><p>The simple idea that <strong>most people wake up in the morning trying to make things a little better and more productive than wake up looking to cause trouble</strong> is the foundation of optimism. [保持乐观, 知道波折难免, 但总体趋势是向上的]</p>
</li>
<li><p><strong>Hindsight, the ability to explain the past, gives us the illusion that the world is understandable. It gives us the illusion that the world makes sense, even when it doesn’t make sense.</strong> That’s a big deal in producing mistakes in many fields.[无数次掉进这个认知的坑….]</p>
</li>
</ul>
<p>最后, 贴句Charlie Munger的话做结尾吧:</p>
<p><strong>The best way to achieve felicity is to aim low.</strong></p>
]]></content>
      <categories>
        <category>Reading</category>
      </categories>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>读《局外人》</title>
    <url>/posts/notes-of-the-stranger/</url>
    <content><![CDATA[<p>躺在书单里很久了，终于完整地读了一回。</p>
<span id="more"></span>

<p>刷的是柳鸣九的译本，故事很短也很简单，不出意外，最后默尔索行刑前的那顿领悟我依然没理解。</p>
<blockquote>
<p>现在我面对着这个充满了星光与默示的夜，第一次向这个冷漠的世界敞开了我的心扉。我体验到这个世界如此像我，如此友爱融洽，觉得自己过去曾经是幸福的，现在仍然是幸福的。为了善始善终，功德圆满，为了不感到自己属于另类，我期望处决我的那天，有很多人前来看热闹，他们都向我发出仇恨的叫喊声。</p>
</blockquote>
<p>wiki上看了下<a href="%5Bhttps://zh.wikipedia.org/wiki/%E9%98%BF%E5%B0%94%E8%B4%9D%C2%B7%E5%8A%A0%E7%BC%AA%5D(https://zh.wikipedia.org/wiki/%E9%98%BF%E5%B0%94%E8%B4%9D%C2%B7%E5%8A%A0%E7%BC%AA)">加缪</a>的介绍，提到了其子反对法国总统将加缪的坟迁移至先贤祠的提议，联想到书中的默尔索，觉得这个反对真的是自然不过。</p>
<p>整本小说分两部，之前因为没看简介，直接刷，所以后面看到主人公在海滩开枪杀人的时候，才突然明白故事是这么个走向。</p>
<p>一如既往，简单缕一遍故事情节。</p>
<p>开篇是默尔索住在养老院的母亲过世了，默尔索去养老院守灵，送葬。</p>
<p>回来后，跟玛丽约会看电影，继续日常的工作，同往常一样去朋友塞莱斯特的饭店吃饭。</p>
<p>一次下班后，默尔索应邻居雷蒙的邀请，两人一起吃晚饭，聊家常，饭后，默尔索帮雷蒙写信给他的“情妇”。</p>
<p>接下来的日子里，默尔索帮雷蒙在警察那里做证，应雷蒙的好友马松的邀请，带着玛丽，跟着雷蒙去海边的木屋过周末，途中被雷蒙的一个仇家，两个阿拉伯人尾随，在海滩边，默尔索错手开枪杀死了其中一位阿拉伯人。</p>
<p>随后，就是入狱，审讯，开庭，判刑。</p>
<p>其实看第二部分的时候，我以为会上演越狱之类的情节，或者类似基督山伯爵里的剧情，遇见一个神人，修炼技能，最后逃离牢狱，重获新生。</p>
<p>但显然作者想要表达的并不是这些。</p>
<p>后面的开庭审讯，建立在默尔索是一个冷漠的，不爱自己母亲的人设上，请来的证人，要证明的也是这个论点，从统计学的角度来看，就是先给出假设，然后找支持这个假设的数据来验证，看来那个时代的法官也掉进了这个模式的坑。</p>
<p>这里，导读里面提了下局外人标题的基本原意，在整个审讯过程中，司法当局都是将当事人默尔索置于事外，他们安排着当事人的命运，却未征求他的意见，故名局外人。可是，局外人仅仅只是指这一点吗？</p>
<p>开庭这里，还有个奇怪的地方，那个默尔索之前在饭店遇见的怪怪的女子又出现了，有些好奇作者安排这个人物想要表达什么？感觉是一个完全可以抹去的角色。</p>
<p>后面的定罪也有些意外，律师胸有成竹地断定会轻判，没想到等来的却是斩首示众。</p>
<p>最后，主人公在等待死亡中煎熬，然后与神甫冲突，发泄愤怒，解脱，坦然接受。</p>
<p>因为对后面那部分的顿悟并不是很理解，就简单扯一点其他的吧。</p>
<p>默尔索的一位邻居，一个养狗的老头儿，八年来与他那条患有皮肤病的猎犬形影不离，可是老人家的日常，却是每天打骂着这条猎犬，等到猎犬走失后，担心，跑去实物招领处寻狗，未果，跟默尔索说：“它终归是一条好狗。”既然是好狗，为什么还要打骂它呢？也许他并不爱惜这条狗，因为本来领养这条狗只是因为他太孤独了，而走失后的担心，多半是因为他已经习惯了那样的生活方式了吧？</p>
<p>就像默尔索，对他来说，什么样的生活都差不多，未入狱前的自由人生活和入狱后的囚犯生活，日复一日，都会习惯的。</p>
<p>默尔索似乎对很多事情都不care，对老板提议派他去巴黎负责市场业务，对玛丽提议他们结婚，对雷蒙征求他意见，都不大上心，似乎很多事情，对他而言，都毫无意义，该说他豁达还是脱俗？至少有一点可以肯定，他不厌世。</p>
<p>应了那首诗：</p>
<blockquote>
<p>如果你失去一个世界，不要为此悲伤，因为这是微不足道的；</p>
<p>如果你得到一个世界，不要为此高兴，因为这是微不足道的；</p>
<p>苦乐得失都会过去，都会离开这个世界，因为这都是微不足道的。</p>
<p>摘自《人生的智慧》【一本未能完整刷完的书】</p>
</blockquote>
<p>也许对默尔索而言，这些都是微不足道的吧？</p>
<p>不过相比这无可无不可的所谓微不足道，还是更偏爱查理里面的那句：实事求是地看清现实，但还是去爱。</p>
<p>也许会很疼，很难，但也很勇敢，不是吗？</p>
<p>所以，临刑前的那一夜，默尔索应该睡得很踏实吧。</p>
]]></content>
      <categories>
        <category>Reading</category>
      </categories>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>读《天龙八部》</title>
    <url>/posts/notes-of-tianlongbabu/</url>
    <content><![CDATA[<p>看的是三联版，全书五十章回，第一次拜读金庸大师的作品，切切实实感受了下大师的博学。</p>
<span id="more"></span> 

<p>大致的情节就不细说了。97黄日华版的《天龙八部》还是比较忠于原著的，演员演技在线，很经典的一版，少室山下的那场大战，三兄弟各带音箱，不论是剧还是书，都看的人大呼过瘾。</p>
<p>剧中与原著出入有些大的算是无崖子那段，在大理无量山下，跟他一起琴瑟相合，并诞下一女的是李秋水，而不是他的小师妹，电视剧算是帮无崖子圆了个梦。</p>
<p>书中虚竹的首次出场，也颇让人意外：</p>
<blockquote>
<p>这僧人二十五六岁年纪，浓眉大眼，一个大大的鼻子扁平下塌，容貌颇为丑陋，僧袍上打了许多补钉，却甚是干净。</p>
</blockquote>
<p>因为对樊少皇扮演的虚竹印象深刻，所以看到这段的时候，压根儿也想不到这个“容貌颇为丑陋”的僧人竟然是那个呆萌呆萌的虚竹啊！</p>
<p>书中人物众多，看到别人评金庸小说的，有提到段誉和王语嫣，认为段誉爱的不过是无量山下的那尊玉像，而非王姑娘本身，只是王姑娘恰恰同神仙姐姐模样一般，算是类的一个具体实例，又心许表哥慕容复，对他不甚在意，俗话说，得不到的蠢蠢欲动，更让他对王姑娘欲罢不能。</p>
<p>对段誉的痴情不做评论，毕竟书中论痴情，游坦之才是当之无愧。因为阿紫，面目全非，双腿残废，毫无怨言，甚至为了让心爱之人能重见光明，不惜在虚竹面前自刎以要求换目，他明明知道她对她姐夫情根深种，自己所做的一切也未曾得到阿紫半点正面的反馈，却依然无怨无悔，最大的心愿，竟不过是能成为相伴阿紫左右的一个奴仆。最后随着阿紫跳入雁门关外的深渊之中，也算是求仁得仁了吧。</p>
<p>有时候想，如果他换一种方式，努力研习《易筋经》，成为像萧峰那般的人物，也许这样反倒能让阿紫对他多份仰慕和心许。可惜，这一生渺渺，没有如果。</p>
<p>作为书中悲剧性的人物萧峰，不能不提塞上牛羊空许约。</p>
<p>萧大侠是幸运的，在被万人唾弃之时，遇到了痴痴不悔的阿朱。</p>
<p>以前看电视剧的时候，以为阿朱是为了救自己的爹爹段正淳才心甘情愿被萧峰一掌打死，看原著才知道，其实真正的原因，不仅仅是为了让萧峰放下心中的仇恨，更是她顾虑到如果萧峰杀了段正淳，大理皇室自然不会善罢甘休，而大理段家的六脉神剑可能会让萧峰有性命之忧。而她最后嘱咐萧峰照顾阿紫，又何尝不是担心他在自己死后自刎？为了自己的心上人，这般用心良苦。无怪后面耶律洪基要赏赐萧峰上千美女时，萧峰只是苦笑，心道：阿朱就是阿朱，四海列国，千秋万代，就只一个阿朱。</p>
<p>而对阿朱来说，又何尝不是萧大哥就是萧大哥，四海列国，千秋万代，就只一个萧大哥。</p>
<p>如果萧峰没有在雁门关外自刎，我倒是很希望他能随完颜阿骨打回到女真族的部落，远离厮杀的江湖，牧羊打猎，平平淡淡度过余生，也许这也是阿朱希望他去过的生活。</p>
<p>书中其他配角人物的描写也很精彩。比如灵气十足的钟灵，惊鸿一面的木婉清，四处留情的段王爷，幡然醒悟的鸠摩智，一生钟情无崖子的童姥，终极大boss扫地僧，收归于西夏一品堂的四大恶人……哈哈，说到四大恶人，很喜欢那个使鳄鱼剪的南海鳄神，挺可爱的，身上有种傻气的执拗，每次看到他出场了，就会觉得很好玩，刚开始被迫认段誉为师，实非本意，但是后面见识到他的凌波微步，内心已然接受了这段师徒关系，虽常常爆粗口骂人，老大不情愿的在人前称呼段誉师父，但是心肠并不坏，算不上真正的大恶人，最后还为了救段誉而被段延庆杀害了。</p>
<p>整本书里面，最不喜欢的就是包不同了，真的是恨不得分分钟让他闭嘴啊，处处抬杠也就算了，还非得借抬杠来显摆自己，真心hold不住这类人。</p>
<p>97版的《天龙八部》，片尾曲是周华健的那首《难念的经》，林夕作词，刷这本小说的时候，委实听了不少遍，词中掺着点佛理，林夕果然是写词高手。</p>
<p>怪大地众生太美丽。</p>
<p>附上这首歌：</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=5271858&auto=0&height=66"></iframe>
]]></content>
      <categories>
        <category>Reading</category>
      </categories>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>读《致D》</title>
    <url>/posts/notes-of-to-D/</url>
    <content><![CDATA[<p>深山，夜雨，一顿饱餐后，在潺潺溪流声的陪伴下，刷完了这本小书。</p>
<span id="more"></span> 

<p>回来后，决定写写这本小书。</p>
<p>有关这本书的介绍，Google下就会出来很多结果，是一封丈夫写给妻子的情书，主要是讲述了自己与爱人D从相识相恋，步入婚姻以及婚后五十多年里相濡以沫的故事， 信最后交代了妻子患病的原因，作者是法国安德烈高兹，在本书出版后的第二年，彼时八十有四的他与罹患绝症的妻子双双自杀，一起离开了人世。</p>
<p>我想看这本书的，应该妹子居多，开篇那段告白，大概没有多少妹子能抵挡住。</p>
<blockquote>
<p>很快你就八十二岁了。身高缩短了六厘米，体重只有四十五公斤。但是你一如既往的美丽、幽雅、令我心动。我们已经在一起度过了五十八个年头，而我对你的爱愈发浓烈。我的胸口又有了这恼人的空茫，只有你灼热的身体依偎在我怀里时，它才能被填满。</p>
</blockquote>
<p>他们一起度过了五十八个年头，准确来说，算上他们离世那一年，五十九年，跨越半个多世纪的陪伴。将近六十年啊，总觉得，很多事情，一旦和时间挂上钩，即便再平淡苍白也变得沉稳有力。</p>
<p>刷完后，想起译者在序中提到的那个问题：</p>
<blockquote>
<p> 如果高兹最终没有在这个世界寻得一席之地，或者更直白地说出版了自己的著作，还会有这个美丽的爱情故事吗？</p>
</blockquote>
<p>想针对这个说说自己的看法。</p>
<p>译者说这个问题已经没有意义，假设不存在，因为高兹在D的帮助下，最终还是获得了一席之地。在这段过程中，D给了他很大的帮助，他很感激她。他们不仅是夫妻，更是伙伴。那如果我们假定高兹最终真的没有寻到一席之地，他们会怎么样？</p>
<p>他会成为无数郁郁不得志的文人之一，那他的爱情是不是也会连带着被他亲手摧毁？</p>
<p>鉴于D的成熟以及高兹的自我反思能力，我觉得这份感情只会是两人向前的动力，而不会成为伤害。</p>
<p>D有一种在逆境中依然蓬勃生长的力量，真的极为欣赏这种向上而生的性格。但是单纯来自爱人的安慰并不能抚平一个人在个体自我实现上的屡屡受挫，更何况高兹还带着些避世属性，我们来看看高兹是个什么样的人呢？在步入婚姻前，他有担心，他的懦弱让他想要逃避，害怕现实的残酷与琐碎的生活会毁掉这份美好的爱情，对此，D说了一段话，很是醒目：</p>
<blockquote>
<p>如果你和一个人结合在一起，打算度过一生，你们就将两个人的生命放在一起，不要做有损你们结合的事情。建构你们的夫妻关系就是你们共同的计划，你们永远都需要根据环境的变化而不断地加强、改变，重新调整方向。你们怎么做，就会成为怎样的人。</p>
</blockquote>
<p>如今看来，婚后他们各自所做的，让他们成为了更好的人。</p>
<p>婚后，他欣赏D对于未来的信心，羡慕她随时随地都能抓住幸福的能力，而自己的不得志让他觉得自己配不上D，爱情里面，自卑是正常的，因为我们会借由这自卑让自己变得越来越好，书中有这么一段：“如果一个写者的写作需求有一个合适的主题贯穿始终，并且让这需求有条理地组织起来，成为一项计划，那么写者就变成了作家。我们成千上万的人一生都在写，并且最终没有坚持到底，没有出版任何东西。你也有过这样的过程。你知道，从开始，你就知道一定要永远保护我的计划。“ 我想，对写作有过这样思考的他，又懂得她的用心良苦，即使这一路走得并不顺，但终点可期啊。在信中多处，都可以看出高兹是一个懂得反思自我的人，特别是高兹对于《叛徒》中有关妻子描述部分的反思。</p>
<blockquote>
<p>那么，在这一章里，我的动机究竟是什么呢？包括在整本书中，我的动机究竟是什么？为什么我在谈到你的时候，总带着这么一种漫不经心、高高在上的神气？为什么我给了你那么一点可怜的位置，然而就在这么一点可怜的位置里，你的形象也总是变形的，没有得到足够的尊重？</p>
<p>第一次深深地爱上一个人，同时也得到这个人的爱，以前我觉得这样的故事太平庸，太个人，太普通：这不是能够让我进入普遍意义的物质。相反，失败的、不可能的爱情才是高贵文学的范畴。我一向只在失败和虚无之美中感觉自在，而不是成功和肯定之中。我必须位于你我之上，不惜以损害我们，损害你为代价，借助超越我们个体存在的思考。</p>
</blockquote>
<p>当然他自己也提到那种 “通过残酷的自我批判来取悦自己”的情况，但从这里读来，我更愿意相信这不再是取悦自己，是反思后的坦诚，是坦然地承认自己所犯的错。一个人懂得时时反思，并敢于承认自己的不足，是一种难能可贵的品质，它会让人更快地成长。</p>
<p>一点小小的吐槽。</p>
<p>其实看的时候，高兹提到自己日日埋头于写作，D养家糊口，提到他们多年的清贫生活，提到D为他整理写作用的种种资料文档，以及后续自己写书过程中D的帮助，处处都体现了D为了他所做的付出，仿佛D的存在是为了他的存在，文中也有提到这一点，当然高兹是为了感谢妻子，但这隐隐让我觉得有种伪大男子主义的气味，而整封信里，并没有提及到同样作为独立个体的D，她想要成为怎样的人？高兹想要成为一名作家，在这个世界寻得一席之地，D就是为了帮助他实现理想而存在？D自己想要做什么呢？D曾经想要学习德语，最后因为高兹的立场问题，而放弃了德语的学习，我看到的是一个女子为了爱人理想的实现所做的种种努力，但是却没有看到同样作为伴侣一方的高兹，对于D的个体实现需求有过什么关注与鼓励，或者是高兹并没有想到要写D的自我实现这部分，又或者D确实没有太多的个体需求，她的自我实现便是帮助高兹找寻到自我。D无疑是成熟的女性，高兹是幸福的，他接受的是一份成熟的爱情，没有太多的矫揉造作，有的只是一个可爱的女子，一个内心坚韧的女子，带着一份决定与之携手走过此后半生的笃定。庆幸的是，在她患上蛛网膜病变后的三十多年里，这位“澳洲犹太小子”长伴左右，在一次出游中，他还为她偷偷拍下一张海滩上的背影照片，那一年她已经五十二岁了，容颜老去，而他说她“美丽绝伦”，走过这大半生，不是渐行渐远而是愈加难分难舍，也许这是他向她表达谢意最好的方式。</p>
<p>岁月从来不残忍，看你怎么看待，对于D而言，晚年带来的，不是美人迟暮后对年少盛颜的追思，而是骨子里那份无关年轮的纯粹恬淡。</p>
<p>借这封情书的结尾做结尾：</p>
<blockquote>
<p> 我们都不愿意在对方去了以后，一个人继续孤独地活下去。我们经常对彼此说，万一有来生，我们仍然愿意共同度过。</p>
</blockquote>
<p>RIP</p>
]]></content>
      <categories>
        <category>Reading</category>
      </categories>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>读《杀死一只知更鸟》</title>
    <url>/posts/notes-of-to-kill-a-mockingbird/</url>
    <content><![CDATA[<p>你好，怪人。</p>
<span id="more"></span> 

<p>你好，阿瑟先生。</p>
<p>终于在故事的结尾看到了阿瑟，这个小镇孩子们口中的怪人，原是一只善良的知更鸟。</p>
<p>很喜欢这个故事。</p>
<p>整本书从一个小女孩的视角讲述了小镇上发生的一些事，主线是身为白人的律师阿蒂克斯接手了一起黑人被诬陷的案件，为黑人汤姆辩护。最终蒙冤的汤姆因对审判前景无望，试图逃狱，未果，不幸死于警枪下。</p>
<p>刚刷的时候，并不理解书名的含义，直到第一部分快结束的时候，书中才第一次点题。</p>
<p>是父亲阿蒂克斯对杰姆说的话：</p>
<blockquote>
<p>你射多少蓝鸟都没关系，但要记住，杀死一只知更鸟就是一桩罪恶。</p>
</blockquote>
<p>为什么杀死一只知更鸟是一桩罪恶？</p>
<p>莫迪小姐解释说：</p>
<blockquote>
<p>知更鸟只唱歌给我们听，什么坏事也不做。它们不吃人们园子里的花果蔬菜，不在玉米仓里做窝，它们只是衷心地为我们唱歌。这就是为什么说杀死一只知更鸟就是一桩罪恶。</p>
</blockquote>
<p>大概，保护知更鸟亦是对自我良知的呵护。</p>
<p>阿蒂克斯应该是全书中最讨人喜欢的人物了。</p>
<p>理性，正直，勇敢，是律师，也是一名称职的父亲。</p>
<p>他曾是神枪手，却从不打猎，不钓鱼。</p>
<p>他聪明，知道如何在法庭上诱导证人露出破绽，让听众作出判断。</p>
<p>他勇敢，会独自一人在深夜，守在关押汤姆的小镇监狱那里。幸好那一夜相安无事，除了坎宁安人被唤醒的良知，安德伍德先生的双筒猎枪也是功不可没。</p>
<p>他包容，在杜博斯太太言辞刻薄，恶言相向时，依然能淡然处之，还让杰姆每天去给杜博斯太太念书，希望他能从她的身上见识到什么是真正的勇敢。</p>
<p>被恶意中伤时，依然看到他人身上闪光的地方，真的不容易。</p>
<p>而他为汤姆辩护的努力，换来的并不都是不解与恶意，有一群善良的人们以自己的方式表达着对他的尊重和支持。</p>
<p>那个平淡的早晨，小镇居民们送来的那些食物，堆满了整个厨房，在经济萧条的特殊时期，人们用珍贵的食物表达着感激。</p>
<p>真诚，善良，正直，总会得到回应。</p>
<p>&nbsp;<br>&nbsp;<br>&nbsp;</p>
<p>除了阿蒂克斯，我也喜欢故事中小镇上大部分的人。</p>
<p>喜欢莫迪小姐。</p>
<p>莫迪小姐是个寡妇，年纪很大了，很少呆在室内。</p>
<p>爱打理园子的莫迪小姐，她是街坊中做蛋糕做得最好的。</p>
<p>莫迪小姐总是时不时妙语连珠。</p>
<p>她说：“就是有那么一些人，他们 - 他们太担心来世了，以至于都没学会怎样在这个世界上生活。”</p>
<p>她还说：“心智正常的人从不会恃才而傲。”</p>
<p>她是孩子们眼中，值得去交往的朋友。</p>
<p>&nbsp;<br>&nbsp;<br>&nbsp;</p>
<p>喜欢阿瑟。</p>
<p>喜欢他见到斯库特时那羞涩的微笑。</p>
<p>他会把礼物塞进树洞，期待着杰姆和斯库特可以收到， 会为他们雕刻香皂娃娃，用他的方式表达对他们的喜欢。</p>
<p>他会在莫迪小姐房子着火的那天，给寒冬中站立的斯库特披上毛毯。</p>
<p>也会在斯库特和杰姆遭遇危险时，不顾自己被曝光的危险，挺身而出。</p>
<p>阿瑟先生是个绅士，像阿蒂克斯一样。</p>
<p>阿瑟先生一定知道那次三个小屁孩给他写信的事情。</p>
<p>可惜他没能亲眼看到那封信，不知道他们曾计划着要给他买个冰淇淋呢。</p>
<p>&nbsp;<br>&nbsp;<br>&nbsp;</p>
<p>喜欢卡波妮。</p>
<p>卡波妮是容易被忽视的一类群体，但毫无疑问，阿蒂克斯非常明白她对于这个家庭的重要性。</p>
<p>这位在阿蒂克斯家工作了大半辈子的女人，会毫不客气地教训调皮的斯库特。</p>
<p>在斯库特对小坎宁安的餐桌礼仪表示不满时，直接严辞教育：</p>
<blockquote>
<p>你给我闭嘴！不管他是谁，只要踏进这家门，就是你的客人。别让我再逮住你又对人家说三道四，好像你有多高贵似的！你们家人也许比坎宁安家的人好，可是你这样羞辱人家，就是一钱不值——如果你上不得台面，你可以坐到这里来，在厨房里吃！</p>
</blockquote>
<p>除了方式有些粗暴，其他没毛病。</p>
<p>她会给斯库特和杰姆盛装打扮，带他们去黑人教堂，跟着黑人们一起唱赞美诗，让孩子们知道他们的父亲在做一件多么有意义的事情。</p>
<p>她会在斯库特和杰姆跑去法院时，焦急生气，嘴上骂着“一个个都活剥了你们的皮！”，却在带他们回家吃饭时，不忘命令着“你们都慢慢吃。”  大概是又气又心疼。</p>
<p>正如阿蒂克斯所说的那样，卡波妮是在按自己的方式努力把他们抚养成人，而她的方式相当好。</p>
<p>还有，孩子们也很爱她。</p>
<p>&nbsp;<br>&nbsp;<br>&nbsp;</p>
<p>也很喜欢泰特警长，这个在梅科姆县生活了一辈子的人，最后执意要保护着阿瑟。</p>
<p>他歪曲事实了吗？嗯，是的，但他只是在没有伤害他人的前提下，保护着一只知更鸟。</p>
<p>还有那个满头白发，爱嚼雪茄的泰勒法官，他是个好法官。</p>
<p>而患病过世的杜博斯太太，她庭院里的山茶花一定很美。</p>
<p>阿蒂克斯说过，杜博斯太太是他见过的最勇敢的人。</p>
<p>什么是真正的勇敢？</p>
<blockquote>
<p>不要错误地认为一个人手握枪支就是勇敢。</p>
<p>勇敢是：当你还未开始就已知道自己会输，可你依然要去做，而且无论如何都要把它坚持到底。你很少能赢，但有时也会。</p>
</blockquote>
<p>我想阿蒂克斯这么说的时候，一定也在说着自己。</p>
<p>他是勇敢的。</p>
<p>那场他为汤姆做的辩护，看似输了，但若从唤醒良知的角度去评判，他其实并没有输。</p>
<p>因为他，更多的人选择站出来保护知更鸟。</p>
<p>纵然这世界难免存在不公，丑陋和诸多不堪。</p>
<p>但总有一些美好值得去守护。</p>
]]></content>
      <categories>
        <category>Reading</category>
      </categories>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>读《together is better》</title>
    <url>/posts/notes-of-together-is-better/</url>
    <content><![CDATA[<p>在一个暴雨后的夜晚，读一本带着香气的书，真的是一件顶幸福的事儿。</p>
<p>不仅仅是书香沁脾，更重要的是内容很有营养，推荐这本《together is better》。</p>
<span id="more"></span> 

<h4 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h4><p>本书作者Simon  Sinek，在他著名的Ted演讲：<a href="https://www.ted.com/talks/simon_sinek_how_great_leaders_inspire_action">how great leaders inspire action</a> 中提到了黄金圈法则：What，How,Why. 去年第一次看了他的演讲时，便觉得观点独特，但是看完后，我的想法是：“嗯，这很对，很cool，可是离我很遥远，leadership这种东西我应该是用不上的。” 现在想来，当时的想法真的是够愚蠢的。狭隘地理解了领导力，错以为领导力只是在职场中运用，更错到离谱地以为领导力代表着强权与控制欲。呃，貌似跑题了，言归正传。</p>
<p>Simon Sinek的这本《together is better》主要也是以阐述领导力为主，但是全书通篇以简短的文字加配图相结合的方式，还创造性地为书添加上了香气，读来让人感觉特别舒服。通过三位主角从逃离原有环境，一起去寻找愿景，历经磨难，抵达目的地，成功后选择回到原地，回报他人，最后成长为被他人追随的领导者的过程，将那些简单却深刻的道理娓娓道来，真是个很欢畅的洗脑过程。</p>
<p>下面就从领导力，领导者属性，团队这三个方面，摘录文中的几个要点，顺便附上个人的一些见解。</p>
<h5 id="什么是领导力？"><a href="#什么是领导力？" class="headerlink" title="什么是领导力？"></a>什么是领导力？</h5><ul>
<li><p>It is not about being in charge, it is about taking care of those in your charge.</p>
</li>
<li><p>It is not a rank or position to be attained, it is a service to be given.</p>
</li>
<li><p>Leadership is an education. And the best leaders think of themselves as the students, not the teachers.</p>
<blockquote>
<p>书中提到领导力是可以通过日常的练习习得的一种能力，如何练习？方法是通过考量他人的生活（consider the lives of others），即使损及自身的利益。 个人的理解是和他人一起共同成长，创造双赢的局面，嗯，together is better。</p>
</blockquote>
</li>
</ul>
<h5 id="好的领导具有哪些属性？"><a href="#好的领导具有哪些属性？" class="headerlink" title="好的领导具有哪些属性？"></a>好的领导具有哪些属性？</h5><ul>
<li><p>With good leader, we feel like we work for each other.</p>
</li>
<li><p>Leaders give us the chance to try and fail, then give us another chance to try and succeed.</p>
</li>
<li><p>Bad leaders care about who’s right, good leaders care about what’s right.</p>
</li>
<li><p>A good leader doesn’t only inspire us to have confidence in what they can do, A great leader inspires us to have confidence in what we can do.</p>
</li>
<li><p>The true value of a leader is not measured by the work they do, the true value of a leader is measured by the work they inspire others to do.</p>
</li>
<li><p>A leader must be inspired by the people before a leader can inspire the people</p>
<blockquote>
<p>一句话小结就是：好的领导是给你提供成长的机会，鼓励你突破你的玻璃顶的人。可是问题来了，一是现实中这样的领导实在是太少，二是对于绝大多数的普通人，比如我，遇到这样的领导的概率几乎等于零。那怎么破？我能想到的是，不断提高自身的能力，特别是专业水平，这样才有可能遇到。</p>
</blockquote>
</li>
</ul>
<h5 id="什么是团队？"><a href="#什么是团队？" class="headerlink" title="什么是团队？"></a>什么是团队？</h5><ul>
<li>A team is not a group of people who work together, a team is a group of people who trust each other.</li>
</ul>
<blockquote>
<p>单单从相互信任这一点看，大部分的团队其实都是不合格的，现实中更多的是找一群人来做一件事，重要的是把这件事情完成了，至于是否能做到相互信任倒是其次了.</p>
</blockquote>
<p>当然文中还有很多金句，不过我个人特别喜欢亚里士多德的这句：</p>
<blockquote>
<p>There is only one way to avoid criticism: do nothing, say nothing , and be nothing.</p>
</blockquote>
<p>P.S. 这本由台湾远流出版社发行的书，里面的一些翻译用语可能与大陆读者平时的用词不大一样，读来有些别扭，但如果你对繁体字有偏爱，那么读这本书会是个很享受的过程，Enjoy！</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fi32kel7ifj30zk0qotcx.jpg"></p>
]]></content>
      <categories>
        <category>Reading</category>
      </categories>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>读《等待戈多》</title>
    <url>/posts/notes-of-waiting-for-godot/</url>
    <content><![CDATA[<p>读的是施咸荣翻译的版本，感觉译得带点京片的味儿， 让我想起老舍《茶馆》中人物的对白。</p>
<span id="more"></span> 

<p>剧本很短，两幕，出场五人：戈戈，狄狄，幸运儿，波卓，送口信的小孩。情节也很简单，黄昏时分，戈戈和狄狄这两个流浪汉在一棵树下等待戈多，中间他们还商量着通过上吊来打发漫长的等待，后来遇到了波卓和他的奴隶幸运儿，四人，或者更准确地说是三人，一直有一句没一句地说着话， 没有任何重点，幸运儿只在被他们三个教唆着思考的时候，才开口吐出了一串串话，像是无序蹦出来的字眼，中间波卓还伪文艺了一把，然后波卓带着幸运儿离开，最后小孩过来告诉两个流浪汉，戈多今天不会来了，明天再来，两个流浪汉也各自回去了，这是第一幕。后一幕，人物不变，只是波卓瞎了，幸运儿哑了，他们摔倒了，被扶起后又离开了，小孩来了，同样的，告诉他们戈多今天不会来了，明天再来，两个流浪汉又开始商量着上吊了，嗯，没有绳子，裤带被拉扯断了，得，各自回吧，明个再来。</p>
<p>整个看完，除偶有些句子会让人发笑，整个的氛围让人觉得很是沉闷，就如同他们自己所说的那样，我们总得做点什么来打发时间，至少不能那么的无聊？脱靴子，试靴子，脱帽子，换帽子，唱歌，蹦跳，吃萝卜，上吊，摔倒，起来，来回踱步……</p>
<p>整个剧本无法用常规的逻辑去理解，为什么仅仅过了一天，波卓就瞎了？而且虚弱的站不起来需要人搀扶？幸运儿为什么成了哑巴？昨天还在那里被命令着思考说话的人，第二天竟然不能开口了，是在暗示着唯一一个思考的人都不能表达他的思考了吗？戈戈总是间歇性失忆，可又对某些事情记得格外清楚，还有为什么昨天来的小孩竟然已经不认识他们了？好吧，这是荒诞剧。</p>
<p>看完不得不去看了下作者的简介，窃以为这样的剧本，应该多半与其人生经历有关。果然，贝克特本人长期过着颠沛流离的流浪和逃亡生活，还曾有过在街头散步时，被陌生人用刀刺穿肺部的经历，这样的遇刺经历不得不说是挺荒诞。</p>
<p>大部分人看完这本书，应该会猜测作者想要表达的是什么，戈多代表着什么呢？希望，命运，还是一个能改写他们人生的契机？文中多次提到戈多来了，他们就得救了。戈多更多的算是他们的一个念想吧，也许他们在等待着改变，改变这无聊的日日消遣，打破这没事可做的状态，可我又暗暗觉得他们既渴望改变又害怕着改变。他们总是说着要怎样怎样，但是他们就是不动，与其被动等待，为什么不主动出击呢？</p>
<p>《东邪西毒》里，几乎身无分文的孤女，找到欧阳锋，希望可以雇到杀手报仇，固执的她每日都来，但一直没人愿意帮她，她在等，等那个愿意出手的人，最终她等到了洪七，也许看似渺茫的等待也会有所收获。</p>
<p>“每个人都会为一样东西坚持着，其他人看会觉得是浪费时间，但是她却觉得很重要。”</p>
<p>换个角度，把戈戈和狄狄的这种等待看着是一种傻愣似的坚持，感觉美好多了。</p>
<p>如果戈多真的来赴约了，这两个流浪汉应该很开心吧？或者这二位会琢磨着找个地儿狠狠地把戈多揍一顿，因为他老是放他们鸽子，然后再教唆着让戈多回去，他们要继续等待？额，有点太胡扯了。</p>
<p>人生苦短，愿所等有所获。</p>
]]></content>
      <categories>
        <category>Reading</category>
      </categories>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>读《写在人生边上》</title>
    <url>/posts/notes-of-written-on-the-edge-of-life/</url>
    <content><![CDATA[<p><strong>人生的刺，就在这里，留恋着不肯快走的，偏是你所不留恋的东西</strong>。</p>
<p>&emsp;语出《写在人生边上》</p>
<span id="more"></span> 

<p>这本钱钟书的散文集，共9篇，很短，适合在一个下着细雨的午后，泡杯茶，翻一翻。</p>
<p>文中偶有些让人捧腹的句子，但更多的是一个人的娓娓道来，好似在听一个人絮絮叨叨跟你闲扯。</p>
<p>魔鬼夜访那篇，听听鬼的牢骚：</p>
<blockquote>
<p>你知道，我是做灵魂生意的。人类的灵魂一部分由上帝挑去，此外全归我。谁料这几十年来，生意清淡得只好喝阴风。一向人类灵魂有好坏之分。好的归上帝收存，坏的由我买卖。到了十九世纪中叶，忽然来了个大变动，除了极少数外，人类几乎全无灵魂。有点灵魂的又都是好人，该归上帝掌管。譬如战士们是有灵魂的，但是他们的灵魂，直接升入天堂，全没有我的份。近代心理学者提倡”没有灵魂的心理学“，这种学说在人人有灵魂的古代，决不会发生。到了现在，即使有一两个给上帝挑剩的灵魂，往往又臭又脏，不是带着实验室里的药味，就是罩了一层旧书的灰尘，再不然还有刺鼻的铜臭，我<strong>有爱洁的脾气，不愿意捡破烂</strong>。近代当然也有坏人，但是他们坏得没有性灵，没有人格，不动声色像无机体，富有效率像机械。就是诗人之类，也很使我失望；他们常说表现灵魂，把灵魂全部表现完了，更不留一点儿给我。你说我忙，你怎知道我闲得发慌，我也是近代物质和机械文明的牺牲品，一个失业者，而且我的家庭负担很重，有七百万子孙待我养活。当然应酬还是有的，像我这样有声望的人，不会没有应酬，今天就是吃了饭来。在这个年头儿，不愁没有人请你吃饭，<strong>只是人不让你用本事来换饭吃</strong>。这是一种苦闷。</p>
</blockquote>
<p>这本书写于动乱的抗战时期，这篇与其说是鬼话连篇，不如说是借鬼之口来表达对世事的看法。</p>
<p>关于门窗：</p>
<p>这篇写的挺好玩，分析了下门窗的区别，进而由窗想到人的眼睛。</p>
<blockquote>
<p>门许我们追求，表示欲望，窗子许我们占领，表示享受。</p>
<p>关窗的作用等于闭眼。<strong>天地间有许多景象是要闭了眼才看得见的</strong>，譬如梦。假使窗外的人声物态太嘈杂了，关了窗好让灵魂自由地去探胜，安静地默想。有时，关窗和闭眼也有连带关系，你觉得窗外的世界不过尔尔，并不能给予你什么满足，你想回到故乡，你要看见跟你分离的亲友，你只有睡觉，闭了眼向梦里寻去，于是你起来先关了窗。<strong>因为只是春天，还留着残冷，窗子也不能整天整夜不关的</strong>。</p>
</blockquote>
<p>开窗观室外风光，关窗观人心内在。</p>
<p>关于快乐：</p>
<blockquote>
<p><strong>一切快乐的享受都属于精神的，尽管快乐的原因是肉体上的物质刺激</strong>。</p>
<p>洗一个澡，看一朵花，吃一顿饭，假使你觉得快活，并非全因为澡洗得干净，花开得好，或者菜合你口味，主要因为你心上没有挂碍，轻松的灵魂可以专注肉体的感觉，来欣赏，来审定。</p>
</blockquote>
<p>心上没有挂碍是幸福的，但有时心上有所挂碍，念着对你重要的人，也是一种幸福吧？</p>
<p>不过人生苦短，多笑笑，它是会传染的。</p>
<p>关于小孩子能不能读《伊索寓言》，他也发表了一段颇为精彩的个人观点：</p>
<blockquote>
<p>小孩子该不该读寓言，<strong>全看我们成年人在造成什麽一个世界、什麽一个社会，给小孩子长大了来过活</strong>。卢梭认为寓言会把纯朴的小孩子教得复杂了，失去了天真，所以要不得。我认为寓言要不得，因为它把纯朴的小孩子教得愈简单了，愈幼稚了，以为人事里是非的分别、善恶的果报，也象在禽兽中间一样的公平清楚，长大了就处处碰壁上当。缘故是，卢梭是原始主义者（Primitivist），主张复古，<strong>而我呢，是相信进步的人</strong>——虽然并不象寓言里所说的苍蝇，坐在车轮的轴心上，嗡嗡地叫到：“车子的前进，都是我的力量。”</p>
</blockquote>
<p>我呢，也是相信进步的人。</p>
<p>关于吃饭：</p>
<blockquote>
<p>有这样优裕的物质环境，舌头像身体一般，本来是极随便的，此时也会有贞操和气节了；许多从前惯吃的东西，现在吃了彷佛玷污清白，决不肯再进口。精细到这种田地，似乎应当少吃，实则反而多吃。</p>
</blockquote>
<p>突然想到老庄有句话：虽富贵，不以养伤身，虽贫贱，不以利累形。呃，这个貌似跟吃饭没什么关系。</p>
<p>一直觉得毛姆很会一本正经，拽着文气，优雅地骂人，在这点上，我觉得钱钟书老人家一点也不逊色。</p>
<blockquote>
<p>说笑自从幽默文学提倡以来，卖笑变成了文人的职业。【顺带黑自己吗？】</p>
<p>常将一群妇女的说笑声比于“莺啼燕语”，那简直是对于禽类的悔辱了。</p>
<p>色盲决不学绘画，文盲却有时谈文学，而且谈得还特别起劲。于是产生了印象主义的又唤作自我表现或创造的文学批评。</p>
<p>这种文艺鉴赏，称为“创造”的或“印象主义”的批评，还欠贴切。我们不妨小试点铁成金的手段，各改一字。“创造的”改为“捏造的”，取“捏”鼻头做梦和向壁虚“造”之意，至于“印象派”呢，我们当然还记得四个瞎子摸白象的故事，改为“摸象派”，你说怎样？这跟文盲更拍合了。</p>
</blockquote>
<p>有格调的作家和有格调的导演一样讨人喜欢，他们创作不在于取悦读者或观众，更多的是宣扬下个人理论。</p>
<p>在谈教训那一篇的文章结尾，他来了这么一句结语：</p>
<blockquote>
<p>写到这里，我忽然心血来潮。这篇文章不恰恰也在教训麽？难道我自己也人到中年，走到生命的半路了！白纸上黑字是收不回来的，扯个淡收场罢。</p>
</blockquote>
<p>这么短的一本小书，我也硬要自己写出个读书笔记什么的，也是够了, 引用《传习录》中的一句话收场吧！</p>
<p><strong>人生大病只一傲字，有我即傲，众恶之魁</strong>。</p>
]]></content>
      <categories>
        <category>Reading</category>
      </categories>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>读《许三观卖血记》</title>
    <url>/posts/notes-of-xu-sanguan-sells-blood/</url>
    <content><![CDATA[<p>“一盘炒猪肝，二两黄酒，黄酒给我温一温……”</p>
<span id="more"></span> 

<p>故事的主人许三观，是丝厂的一名工人。</p>
<p>二十多岁的时候，许三观出于好奇，第一次卖血，卖血换来的钱他用来娶了媳妇，他媳妇叫许玉兰，是城里的”油条西施”。</p>
<p>婚后五年，许玉兰生了一乐，二乐，三乐，从一乐的相貌中，许三观怀疑自己当乌龟了，后面许玉兰告诉了许三观，一乐是何小勇的孩子。</p>
<p>十年后，许三观第二次卖血，用来赔偿方铁匠儿子的医药费，因为他儿子一乐闯祸，用石头砸伤了方铁匠儿子的脑袋。</p>
<p>几年后，厂里的女工林芬芳不小心摔伤了腿，许三观去看望她，犯了生活作风上的错误，许三观第三次卖血，然后给林芬芳买了十斤肉骨头，五斤黄豆，两斤绿豆，一斤菊花……</p>
<p>许三观第四次卖血，正值三年全国大饥荒【1958年—1962年】，卖血的钱，用来带着全家人，去胜利饭店吃了一碗面。「一乐是事后许三观带着去吃面条的，所以说带着全家人去吃了碗面也不算过分」</p>
<p>继上次卖血两年后，许三观这一辈子唯一的仇人何小勇被卡车撞伤，此时一乐十三岁，借儿喊魂无效，何小勇过世。</p>
<p>第五次卖血，在一乐上山下乡，回家探亲，回农村的路上，许三观把卖血得来的钱，给了一乐，让他和二乐补补身体，给生产队长送烟酒，争取早点抽调回城。</p>
<p>一乐返乡后，一个月不到，许三观第六次卖血，请二乐的生产队长吃饭。【不得不说，这个生产队长真的是让人好生厌恶】</p>
<p>随后不久，一乐肺炎送去上海治疗，许三观开始了他人生中最集中的一次卖血，在去上海的沿途中，择地卖血。</p>
<p>此时的许三观，年近五十，先是在林浦卖血400毫升，3天后，他来到了百里，又卖血400毫升，4天后，松林卖血400毫升，晕倒，输血700毫升，路上遇到来喜，来顺，到黄店卖血400毫升，在七里堡，买了来喜200毫升的血，在长宁，卖血400毫升。这趟旅程，共卖血5次，输血2次。</p>
<p>十多年后，年过六十的许三观因为想要吃炒猪肝，喝黄酒，去医院卖血，被拒。</p>
<p>稍微统计了下，整本书里，许三观卖血11次，买血2次。</p>
<pre><code>11 * 400 毫升 - 700 毫升 - 200 毫升 = 3500 毫升
</code></pre>
<p>这样看，许三观卖血共 8.75次【3500/400】。「我也不知道算这个有啥意义，只是纯粹想要统计下。」</p>
<p>总的来说，许三观是个好人。</p>
<p>何小勇被卡车撞后，虽然他嘴上刻薄，但还是让一乐去给何小勇喊魂，文革时，他给被批斗的媳妇送饭，家庭批斗的时候，他坦诚自己在生活上所犯的错误。连在医院输血救命的时候，还要把多出来的300毫升血还给医院。</p>
<p>结尾处，衣食无忧的许三观要去卖血，让人不禁想到《肖生克的救赎》里面那个监狱的图书管理员。</p>
<p>想了下许三观卖血的行为模式。</p>
<p>第一次卖血尝到了甜头，刺激神经元，卖血和钱之间产生了连接，卖血 =&gt; 钱，关键这钱来得快且多。以致于后面只要遇到缺钱的时候，他会不自觉的想要调用这个模式，缺钱 =&gt; 卖血 ，连带着卖血后的行为，卖血 =&gt; 炒猪肝喝黄酒。好比有三个神经元，缺钱 =&gt;  卖血 =&gt; 炒猪肝喝黄酒，每次调用这个模式，就是在刺激神经元，促使神经元之间的连接更加牢固，所以炒猪肝是许三观最爱的菜，因为卖血后拿到钱，会产生解决困境的快乐，用炒猪肝来奖励自己，这也是为什么年过六十的许三观想吃炒猪肝，喝黄酒时，非要先去医院卖血。</p>
<p>嗯，我用自己想到的方式自圆其说了。</p>
<p>有个地方觉得很疑惑：</p>
<p>第一次卖血的时候，许三观二十多岁，最后一次卖血的时候，许三观将近50岁了，这二十多年来，卖血的价格都是35块，不增不减，难道他们经历的年代没有通货膨胀？可是大饥荒时代不是通货膨胀很厉害的吗？</p>
<p>说是长篇小说，但是整本书篇幅并不长，一个下午绰绰有余，有些地方写得还是蛮好玩的，不过觉得有些地方略显浮夸和刻意了，相比余华，还是觉得路遥写的人物更入味。</p>
]]></content>
      <categories>
        <category>Reading</category>
      </categories>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>读《越读者》</title>
    <url>/posts/notes-of-yueduzhe/</url>
    <content><![CDATA[<p>台湾的一位编辑写的书。</p>
<span id="more"></span> 

<p>作者郝明义，看完才知道原来是一位已年过六旬的老人家，生于韩国，长于台湾。</p>
<p>习惯性搜下了作者的“<a href="http://rexhow.com/works/">部落格</a>”「台湾人称blog为部落格」，内容挺多的，记录了很多作者成长中发生的事情。</p>
<p>全书共七个部分，内容不多，也许是因为我仅仅把它当成甜食阅读来看，观其大略，过眼不过脑，所以觉得读起来并不费劲，现在想想，按照作者对阅读的分类，这应该算是蔬果阅读。</p>
<p>简单缕缕每个部分的主要内容。</p>
<p>第一部分提到了学校带来的困惑，说的是台湾教育中，学生，家长对于教科书的过分看重，一味填鸭式教育，还对比了西方国家与本土教育的差别，作为应试教育的一员，虽然觉得作者对于应试教育部分说的有些过于严重了，但是看的时候还是觉得那种多度食用兴奋剂的阅读结构确实很有问题。这部分比较有印象的是提到了朱光潜。</p>
<p>朱光潜的《谈读书》：</p>
<blockquote>
<p>一年之中可以时而习天文，时而研究蜜蜂，时而读莎士比亚。在旁人认为重要而自己不感兴趣的书都一概置之不理。……它的好处在使读书成为乐事，对于一时兴到的著作可以深入，久而久之，可以养成一种不平凡的思路与胸襟。它的坏处在使读者泛滥而无所归宿，缺乏专门研究所必需的‘经院式’的系统训练，产生畸形的发展，对于某一方面知识过于重视，对于另一方面知识可以很蒙昧。</p>
</blockquote>
<p>而我目前的阅读习惯基本就是随性，自然就容易畸形而不自知。阅读好比饮食，长期吃甜食而不是有规律的吃正餐，对身体自然是不好的。阅读长期随性，容易养成泛泛而读的毛病，对脑子自然也是不好的，容易营养不良。不过有些时候不得不说，有些书，你即使很早就开始读，你读不懂也读不进去，读者在挑书的时候，作者也在挑读者。那是不是读不懂的就不读了呢？作者在后面给出了答案。</p>
<p>泛观博取，不如熟读而深思。</p>
<p>第二部分将阅读对比饮食，提出了四种阅读：主食阅读，美食阅读，蔬果阅读，甜食阅读，强调阅读也要营养均衡，不可偏食。对这部分，印象最深刻的其实是作者提到在北京吃的那份’甜烧白’。</p>
<p>好的阅读习惯，自然是越早开始培养越好，但是迟了也总比没有开始的好。</p>
<p>第三部分网络上的那些事，抛出一个问题，网络对于阅读的影响，特别说了比较流行的观点，认为网络让人远离了阅读，作者引经据典，提出“阅读越是方便的时候，我们越不想阅读，人性如此，从来如此，和网络无关”。作者对于网络对阅读的影响持乐观态度。</p>
<p>第四部分，越界的基础，举了《天龙八部》里面鸠摩智的例子来说明精彩的小说是三十万字写三十个字。其实我不是很懂这部分跟越界有什么关系，作者认为，一个人应该读小说，读诗，读哲学，读历史，看图像，读漫画，当然，还有网络时代的影像作品，比如电影。老人家还贴心的给出了入门哲学的方法，谈到读历史部分，提到了《资治通鉴》，好的书籍也是挑人的，以我现在这浮躁的心态，怕是看不进去的。如何练习读精彩的小说？作者推荐了张大春的《小说稗类》，我想不管推荐什么，还是自己多读读才有感觉吧。</p>
<p>好看的小说，第一句话，第一页就告诉你这是一部好看的小说。</p>
<p>第五部分，一些工具，具体指的是如何分配自己的时间，利用好零散和整块的时间来阅读， 如何更合理的利用大脑，利用书店，定期处理藏书，善用图书馆等等。这一部分最深刻的是作者提到了recollect，大脑不能仅仅是remember，应该留有更多的空间来做recollect，把需要记忆的信息收集整理，在需要的时候再取出来，强调大脑的组织能力而不是存储能力。</p>
<p>第六部分，说到了四种读书方法：陶渊明的“不求甚解”，诸葛亮的“观其大略”，朱熹的“熟读精思”，苏东坡的“八方受敌”。苏东坡年少读书，很多书都是读好几遍。果然大家的养成，也是时间和精力的积累，谁都是从零开始，只是有些人开始的早，启蒙时养成的就是高手该有的习惯，后面顺着路子走，自然越走越顺。对于自己暂时看不懂的书，作者提出千万不能因为自己看不懂就远离，连滚带爬先过一遍，读不懂是正常，有疑惑才有收获。</p>
<p>如果说人生是一个大圆的话，阅读是使这个圆更圆满的很重要的一环，但绝不是唯一的一环。</p>
<p>少读一点书。瞅瞅别人家的孩子，六祖惠能，从来没读过书，就开悟了。</p>
<p>第七部分，跨越七道阶梯。作者给出了一些方法。这里提到的第一桶金，我觉得应该算是先精通了某一个领域或者某个极小的点，修得了一定的专门学问，然后才随性而行，泛观博取。只有开出第一条路，才不会在诺大的密林里迷失。</p>
<p>说说看完这本书之后，我做了什么。<br>搜了下甜烧白是什么，然后看上海哪里有卖的。</p>
<p>搜了中国的那些山水人物画，发现故宫的官网上，可以看种类繁多的中国字画，只是放大和缩小时，体验太差。</p>
<p>下单将《宋词三百首》，《天龙八部》加入了购物车，本来想加入《带子狼》，贫穷限制了我。</p>
<p>又去刷了下97黄日华版的《天龙八部》……</p>
<p>果然读一本书要花好多时间的……</p>
]]></content>
      <categories>
        <category>Reading</category>
      </categories>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>读《zero to one》</title>
    <url>/posts/notes-of-zero-to-one/</url>
    <content><![CDATA[<p>They are living in a different world.</p>
<span id="more"></span>

<p>When I first watched the video titled competition is for losers on YouTube,  I was deeply impressed by the speaker’s perspective about creating stuff,  a very special viewpoint compared to others.</p>
<p>Being curious about him,  I googled the speaker named Peter Thiel, it turned out that he was once regarded as  the Godfather of Silicon Valley,  and also a leading role of the famous PayPal Mafia.</p>
<p>Wow,  I was just lucky enough to have watched a superstar’s video.</p>
<p>Besides, this superstar  also wrote a book titled zero to one to share his thoughts about startups generously.</p>
<p>Undoubtably, reading his book is an enjoyable journey.</p>
<p>Just as the author said in chapter 1,  “this book is about  questions you must ask and answer to succeed in the business of doing new things”, the business of doing new things is not just about startup business, every new stuff you created is included.</p>
<p>So is this article I created : P</p>
<p>I decided to finish it in three parts.</p>
<ul>
<li>Summary of the whole book</li>
<li>Thoughts that impressive</li>
<li>Things I learned from this book</li>
</ul>
<h4 id="summary"><a href="#summary" class="headerlink" title="summary"></a>summary</h4><p>Peter Thiel spent fifty minutes to express his book’s main points on his talk <a href="https://www.youtube.com/watch?v=3Fx5Q8xGU8k">Competition is for Losers</a>.</p>
<p>In this video, he explained why competition is for losers and the necessity of being a creative monopolist for every successful company.</p>
<p>Here are the key conditions of every successful business:</p>
<ul>
<li><p>Technology</p>
<blockquote>
<p> At least 10x better than your closest substitute in some important dimension.</p>
<p>Only being 10x better, can a company have a real monopolistic advantage.</p>
<p> 「Google is awesome.」</p>
</blockquote>
</li>
<li><p>Monopoly</p>
<blockquote>
<p>Being a creative monopolist,  start with a big share of a small market.</p>
<p>Plus, creating value is not enough—you also need to capture some of the value you create.</p>
<p>A good example for this point is Google VS U.S. airline companies.</p>
<p>「in this book, monopoly means the kind of company  that’s so good at what it does that no other firm can offer a close substitute.」</p>
</blockquote>
</li>
<li><p>Team</p>
<blockquote>
<p>Find <strong>the right person</strong>.</p>
<p>You’re either on the bus or off the bus.</p>
</blockquote>
</li>
<li><p>Distribution</p>
<blockquote>
<p> Sales is important, which nerds often miss.</p>
<p> Sales works best when hidden.</p>
<p> Whoever is first to dominate the most important segment of a market with viral potential will be the last mover in the whole market.</p>
<p> The power law of distribution:  if you can <strong>get just one distribution channel to work</strong>, you have a great business. If you try for several but don’t nail one, you’re finished.</p>
<p> Plus, everybody has a product to sell.</p>
</blockquote>
</li>
<li><p>Secret</p>
<blockquote>
<p>Creativity lies in the secret.</p>
<p>There are many more secrets left to find, but they will yield only to <strong>relentless searchers</strong>.</p>
<p>When you find a secret, it’s rarely a good idea to tell everyone.</p>
</blockquote>
</li>
</ul>
<h4 id="impressive-thoughts"><a href="#impressive-thoughts" class="headerlink" title="impressive thoughts"></a>impressive thoughts</h4><p>There are some thoughts I found cool  when reading the book.</p>
<ul>
<li><p>The power law</p>
<blockquote>
<p>Exponential equations.</p>
<p><strong>For whoever has will be given more, and they will have an abundance. Whoever does not have, even what they have will be taken from them.</strong></p>
<p>Exponential equations describe severely unequal distributions [20/80]</p>
<p>It only becomes clear over time, but the majority often live in the present.</p>
</blockquote>
</li>
<li><p>Luck</p>
<blockquote>
<p>Luck was something to be mastered, dominated, and controlled.</p>
<p>Prior generations believed in <strong>making their own luck by working hard.</strong></p>
</blockquote>
</li>
<li><p>Long-item planning</p>
<blockquote>
<p>Long-term planning is often undervalued by our indefinite short-term world.</p>
<p>「Remember how Jobs changed  Apple through careful planning?」</p>
</blockquote>
</li>
<li><p>Work</p>
<blockquote>
<p>Since time is your most valuable asset, it’s odd to spend it working with people who don’t envision any long-term future together. If you can’t count durable relationships among the fruits of your time at work, you haven’t invested your time well—even in purely financial terms.</p>
</blockquote>
</li>
</ul>
<h4 id="things-I-learn"><a href="#things-I-learn" class="headerlink" title="things I learn"></a>things I learn</h4><p>struggle  to be a definite optimism.</p>
<h4 id="more"><a href="#more" class="headerlink" title="more"></a>more</h4><p>It’s my first time writing book notes in English, a little special and a lot of fun.</p>
<p>There might be some grammar mistakes in this article, but I know I was enjoying the process when I tried to express what I wanted to say using these simple English words. That’s enough.</p>
<p>Maybe years later, when I reread it, I would be embarrassed about it. : P</p>
]]></content>
      <categories>
        <category>Reading</category>
      </categories>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>读《假如岁月足够长》</title>
    <url>/posts/notes-of-zheng-and-yuan/</url>
    <content><![CDATA[<p>五星推荐.</p>
<span id="more"></span>

<p>读它的过程就好像, 五月恬静的午后, 蓝天白云, 微风阵阵, 而你静静坐在窗前, 放空, 什么也不做, 什么也不必想.</p>
<p>彼时楼下邻家小院中的月季, 红色, 香槟色, 开得整个院子生机满满, 空气里夹杂着淡淡的月季花和香樟花的味道.</p>
<p>舒心而踏实.</p>
<p>这时候, 源二郎和国政在做什么呢? 大概是在一起喝茶吧?</p>
<p>整本书讲述了两个老头儿之间长达半个多世纪的友谊, 平淡而温暖.</p>
<p>国政和源二郎同住Y镇, 从小一起长大, 国政遵循着传统父母对孩子的期待路线按部就班地走着, 上好大学, 进好公司, 有个好家庭, 娶了个”老实的好姑娘”清子, 有了两个女儿, 但年老时, 清子离家出走, 跟女儿女婿一起生活. 他一人过上了独居生活. 源二郎则在东京大空袭中失去了家人, 战后修复时期, 拜师学习传统手艺谋生, 并娶了自己心爱的女人花枝. 后来妻子因病去世, 两人没有孩子, 他收了个徒弟彻平, 彻平与在美容店上班的麻美是男女朋友, 起初两人的婚事遭到双方父母的反对, 但几经努力, 两人最终得到了家人的祝福, 并在故事的最后, 举行了简单的婚礼.</p>
<p>书中写了三对恋人的爱情. 源二郎和花枝, 国政与清子, 彻平和麻美.</p>
<p>三段爱情都很好, 有情意浓浓, 有细水长流, 有相濡以沫.</p>
<p>特别钟意源二郎和花枝的故事.</p>
<p>花枝是一个安静内敛的姑娘, 传统乖巧, 清新秀丽, 源二郎则一穷二白, 换女友如换衣服, 性格放荡不羁, 用国政的话来说, 是“野生动物”. 这段感情自然得到了女方父母强烈的反对, 但花枝最终还是遵从自己的内心, 瞒着父母, 离家出走, 坐一条小船横渡荒川, 义无反顾嫁给了源二郎.</p>
<p>单单是因为相信爱.</p>
<p>婚后的花枝一直和源二郎过着幸福的生活, 直到病逝.</p>
<p>真好.</p>
<p>好姑娘, 你信的良人未让你失望.</p>
<p>而清子和国政之间的爱情, 更为循规蹈矩些.</p>
<p>两人相亲认识, 门当户对, 定下婚期, 结婚生子, 但清子其实并没有过得那么幸福, 最后她离家出走,选择去过自己想要的生活, 算是迟来的叛逆,  但后来她答应给彻平做媒人时, 仍是念着国政的吧.而国政当初以为清子其貌不扬, 后面发现自己的老婆原来这么美时, 是不是也会后悔未曾好好珍惜?</p>
<p>不过书中主要表达的并不是爱情, 而是两位老友之间相伴走过彼此的人生.</p>
<p>深情不过长伴.</p>
<p>不管是友情还是爱情, 那个你愿意花最长的时间陪伴在其左右的人, 定是生命中重要的人.</p>
<p>这样的陪伴, 又何尝不是在滋养着彼此的人生?</p>
<p>喜欢故事的结尾:</p>
<blockquote>
<p>“喂，政，赶紧上来。”源二郎招了招手，“今晚要不要睡我家，喝上一杯？”</p>
<p>“嗯，好啊。”国政像是要把水路看穿，“帮我拿一下袋子。”</p>
<p>“你腰腿也太弱了吧，要是我肯定能拎着袋子一起上船。”</p>
<p>“随你说好了，等你哪天闪了腰，看你会不会为这份想当然的自信感到后悔。”</p>
<p>没过多久，小船便开进Y镇的水路。</p>
<p>“砰砰——”小船的引擎声悠闲地回荡在水面，载着他们俩穿过家家户户。</p>
</blockquote>
<p>喂, 政, 不能怂啊, 什么时候接清子回家?</p>
]]></content>
      <categories>
        <category>Reading</category>
      </categories>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>没有coding的周四下午</title>
    <url>/posts/one-thursday-afternoon-without-coding/</url>
    <content><![CDATA[<p>你清楚应该在某时做某事，但你心里满满的排斥，就是不想去做，你会怎么处理这种情况？</p>
<p>一个平淡的周四下午，一个不想coding的人，做了什么？</p>
<span id="more"></span> 

<h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><p>打开电脑后，看了会代码，开始神游，看到页面上一线飘红，满满的bug味，不想继续。</p>
<p>我知道我在逃避，然后我做了什么呢？找纪录片看，看电影，重新刷了一次《手机》。</p>
<p>很佩服冯小刚，拍的挺好，现在来看也是部很有意思的电影。</p>
<p>看完的整个感受是，当一个人不能真诚地对待他人时，其实反向地，他在跟自己撒谎。诱惑很多，随口一说，再巧妙的掩饰终究有不得不破的一天，我曾经感觉手机让我很分心，一度想要远离它，后来明白，让我分心的不是工具本身，而是渴望得到他人关注，不愿错过信息的心态，或者在寻找kill time的方式？擦，我竟然还有时间来kill？或者更多的是想体验及时反馈的快感。其实，当你真的专注于培养自己的技能，反而内心是愉悦的，踏实的，因为你知道你没有辜负这时光。做完一天的工作，再回头看手机，你会发现，其实并没有什么人会找你，即使有人找，那也不是什么紧要的事。而你却为了这些无谓的事而白白浪费了大量宝贵的注意力，这不是愚蠢是什么？</p>
<p>回到电影本身，出书的费老有了外遇，名嘴严守一有个长期情人，后来自己的职位反而被情人所取代了。看的过程中，我的感觉是当一个人谎话成章的时候，其实他已经养成了相应的行为模式，这个模式在他之后遇到相似情境的时候，会反复调用，然后这个模式也就会不断加强，如果这个行为模式本身就是错误的，相当于不断犯错，那么这些一个个小小的错误，慢慢积累，其效益最终必然让当事人陷入困境。而如果最开始便是以诚相待，那反而是最舒心的相处方式，当然在有些场合，我们为了照顾别人的感受，不得不说一些慌，我也觉得可以理解。《the road less travelled》里也提到这个话题，真诚，也是需要智慧的。</p>
<p>人生贵适意啊！</p>
<p>另一个很搞笑的细节是，当李燕发现费老有了外遇后，哭着说：”上网聊个天你说我堕落，说什么生命短暂，白驹过隙，你呢，你是只争朝夕。“ 有够搞笑的。我们大部分都会犯这个错误吧，对他人高要求，对自己却是低标准。嗯，我们对自己还真是非一般的宠啊！</p>
<p>不知道为什么，敲完这些字的我，反而有了要做事的冲动了。</p>
<p>也许有的时候，人在遇到不想去做的事情时总想着逃避，但逃避并不能解决任何问题，只有直面，而这个过程的转变，有些时候需要一些外力？其实道理都懂，但没能及时去制止自己，任情绪牵引，那时候的感觉就是什么也不想做，歌也不想听，代码也不想敲，连电影也不想看，可又觉得必须做点什么，结果看完一部电影，反而静下来了，也是奇怪了。</p>
<p>下次遇到同样的情境，怎么破？码字吧，写下来，就静下来了。</p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>Life</tag>
      </tags>
  </entry>
  <entry>
    <title>Rails API：如何将auth token放入headers进行传递？</title>
    <url>/posts/pass-auth-token-through-header-rails-api/</url>
    <content><![CDATA[<p>最近在做Rails API，遇到一个问题。</p>
<span id="more"></span> 

<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><blockquote>
<p> 加入用户登录验证后，每次新建一个project时，发出post请求，都要将auth_token放在body中进行传递，如果是get，则将auth_token作为参数放在URL的后面，因为get是没有body的。</p>
</blockquote>
<p>这么做有什么不好呢？</p>
<blockquote>
<p>这导致URL特别长，看着很不清爽，每次用postman发出get请求，都觉得这种做法真的是太太小白了，想着要把auth_token放在headers中才好。</p>
</blockquote>
<p>Google了下，问题解决，附上解决方法。</p>
<h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><p>以project为例，在postman中，你的请求如下：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fmxm7liq7rj30u80iztbe.jpg"></p>
<p> 这时，如果你将auth_token放在headers中进行传递，发出get请求后，会出现error，如下：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fmxnlzbshrj30ub0etdh6.jpg"></p>
<p><strong>怎么破？</strong></p>
<p>原先对于user 的auth_token的传递，在<code>api_controller.rb</code>中的定义如下：</p>
<pre><code class="Ruby">class ApiController &lt; ActionController::Base
  before_action :authenticate_user_from_token!

  def authenticate_user_from_token!
    if params[:auth_token].present?
      user = User.find_by_authentication_token(params[:auth_token])
      sign_in(user, store: false) if user
    end
  end
  ......
end
</code></pre>
<p>这里，可以看到接收的是<code>params[:auth_token]</code>, 我们稍稍修改下，用<code>request.headers[&#39;auth_token&#39;]</code>来代替<code>params[:auth_token]</code>：</p>
<pre><code class="Ruby">class ApiController &lt; ActionController::Base
  before_action :authenticate_user_from_token!

  def authenticate_user_from_token!
    if request.headers[&#39;auth_token&#39;]
      user = User.find_by_authentication_token(request.headers[&#39;auth_token&#39;])
      sign_in(user, store: false) if user
    end
  end
  ......
end
</code></pre>
<p>这时，再看看postman, OK !</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fmxncwu45bj30t90hv0vb.jpg"></p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.reddit.com/r/rails/comments/4l3hwv/how_to_send_auth_token_in_header_to_rails_api/">How to send auth token in header to Rails API?</a></p>
<p><a href="https://stackoverflow.com/questions/17081499/pass-authenticity-token-through-http-header">Pass Authenticity token through http header</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
        <tag>API</tag>
      </tags>
  </entry>
  <entry>
    <title>Rails部署报错记录Passenger + Nginx</title>
    <url>/posts/passenger-deploy-rails/</url>
    <content><![CDATA[<p>在部署网站后遇到的一个大坑。</p>
<span id="more"></span> 

<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>报错信息长这样：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fks5pqyvghj30no09u0ti.jpg"></p>
<p>看到这一行熟悉的we’re sorry, but something went wrong，默默跟这位老朋友打个招呼【捂脸】。</p>
<p>Google后，发现其他用passenger来部署Rails的，也遇到过这种页面无法显示的问题，但是没看到有人提供解决方法或者思路的，决定记录下我的整个解决步骤，给同样入坑的伙伴们作个参考。</p>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>Google，看了stack overflow上的一些相关内容后，猜测是passenger的问题，于是终端输入<code>sudo passenger-status</code>, 发现passenger根本就没有开这个Rails的进程。</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fks5pqt1ywj30l108xt9z.jpg"></p>
<p>没开那就手动来开，在app的current目录下，运行<code>bundle exec passenger start</code>, 报错：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fks5pqia5ej30tc0ka46y.jpg"></p>
<p>怎么办？按照指示去tmp下找文件，看error log。</p>
<p>以root身份登录，去tmp目录下，查看出错的log,这里是passenger-error-pxhJuZ.html。</p>
<pre><code>cd /tmp
nano passenger-error-pxhJuZ.html
</code></pre>
<p>打开显示如下：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fksdg0z54rj30wv0dftdo.jpg"></p>
<p>OK，那就动动listen 这个gem, google 后，参考stackoverflow上的解答<a href="https://stackoverflow.com/questions/38663706/loaderror-could-not-load-the-listen-gem-rails-5">LoadError: Could not load the ‘listen’ gem (Rails 5)</a>， 把listen从development中移除，放在了global中</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fksdhtg52aj30et0azdhc.jpg"></p>
<p>本地运行<code>bundle</code>，git commit 和 git push 后，进行部署 <code>cap production deploy</code>,  刷新页面，发现还是老样子。怎么回事？突然想到stack overflow上提到可以登录rails console看看，好，试试。</p>
<p>用deploy身份登录远端后，执行：</p>
<pre><code>cd ~/Together/current #Together 是你的APP名称
RAILS_ENV=production bundle exec rake db:seed
</code></pre>
<p>果然，报错，显示网站有bug，立马回去修bug……</p>
<p>在本地修复好，git commit 和 git push 后，进行部署 <code>cap production deploy</code>,  刷新页面， OK！！</p>
<h4 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h4><p>这段爬坑的日子，遇到了不少Google了也不一定能解决的坑，甚至会让你在懵逼的情况下，被别人的解答带得越来越远。只想说解决问题的思路真的太重要了，同时多点耐心，相信坑坑皆有解。</p>
<p>Be more patient.</p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
        <tag>Nginx</tag>
        <tag>Passenger</tag>
      </tags>
  </entry>
  <entry>
    <title>在Cucumber的Examples中传递带hash的Array</title>
    <url>/posts/passing-array-with-hash-inside-in-cucumber/</url>
    <content><![CDATA[<p>Array中带有 Hash。</p>
<span id="more"></span> 

<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>在Cucumber中，当你需要在Examples中传递Array的时候，只需要用逗号分隔即可，比如下面这种：</p>
<pre><code class="Ruby">Scenario Outline: check cart
    When I am &quot;&lt;username&gt;&quot;， I check my cart
    Then I will see the product lists is &quot;&lt;products&gt;&quot;
    Examples:
    | username | products |
    |  Tom | Apple, Banana, Blackberry, Orange |
    |  Lucy | Apple, Blackberry, Orange, Lemon |
    |  Jim | Blueberry, Orange, Lemon |
</code></pre>
<p>然后在对应的step_defination中，只需要用<code>split(&#39;, &#39;)</code>就可以把字符串转化为Array了。</p>
<p>但是，如果你需要传递类似如下的数据呢？Array的元素是一个个hash。</p>
<pre><code class="Ruby">Scenario Outline: invite friends
    When I am &quot;&lt;username&gt;&quot;， I invite friends &quot;&lt;friends&gt;&quot; to join in the game
    Then My friends list has been updated
    Examples:
    | username | friends |
    |  Tom | [&#123;:firstname=&gt;&quot;Tom&quot;, :lastname=&gt;&quot;Preston-Werner&quot;, :age =&gt; 20&#125;, &#123;:firstname=&gt;&quot;Kenneth&quot;, :lastname=&gt;&quot;Reitz&quot;, :age =&gt; 30&#125;] |
    |  Lucy | [&#123;:firstname=&gt;&quot;Tom&quot;, :lastname=&gt;&quot;Preston&quot;, :age =&gt; 19&#125;]|
</code></pre>
<p>这时，example中需要传递类似<code>[&#123;:firstname=&gt;&quot;Tom&quot;, :lastname=&gt;&quot;Preston-Werner&quot;, :age =&gt; 20&#125;, &#123;:firstname=&gt;&quot;Kenneth&quot;, :lastname=&gt;&quot;Reitz&quot;, :age =&gt; 30&#125;]</code>的Array对象。</p>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>鉴于Examples中只能传String，所以这里我们还是传String，同时借用下ruby中的Struct，最后将传递过来的string，转化成目标格式。</p>
<p>还是以上面的case为例，feature改成这样：</p>
<pre><code class="Ruby">Scenario Outline: invite friends
    When I am &quot;&lt;username&gt;&quot;， I invite friends &quot;&lt;friends&gt;&quot; to join in the game
    Then My friends list has been updated
    Examples:
    | username | friends |
    |  Tom | Tom, Preston-Werner, 20, Kenneth, Reitz, 30 |
    |  Lucy | Tom, Preston, 19|
</code></pre>
<p>这样问题就转化成，在对应的step_defination中，如何将字符串“Tom, Preston-Werner, 20, Kenneth, Reitz, 30” 转化成<code>[&#123;:firstname=&gt;&quot;Tom&quot;, :lastname=&gt;&quot;Preston-Werner&quot;, :age =&gt; 20&#125;, &#123;:firstname=&gt;&quot;Kenneth&quot;, :lastname=&gt;&quot;Reitz&quot;, :age =&gt; 30&#125;]</code>。</p>
<p>用一个method来处理：</p>
<pre><code class="Ruby">def transform_to_array(origin_arg)
  raise ArgumentError unless origin_arg.include?(&#39;,&#39;) ## 检查下参数
  friend = Struct.new(:firstname, :lastname, :age)
  [].tap do |result|
    origin_arg.split(&#39;, &#39;).each_slice(3).to_a.each do |a|
      new_friend = friend.new(a.first,a[1], a.last )
      result &lt;&lt; Hash[new_friend.each_pair.to_a]
    end
  end
end
</code></pre>
<p>OK！</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://ruby-doc.org/core-2.2.1/Struct.html">Struct</a></p>
<p><a href="https://stackoverflow.com/questions/8082423/returning-struct-data-as-a-hash-in-ruby">returning struct data as a hash in ruby</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Cucumber</tag>
      </tags>
  </entry>
  <entry>
    <title>Rails微信网页开发之手机验证</title>
    <url>/posts/phone-verification-in-wechat-on-rails/</url>
    <content><![CDATA[<p>这周在做微信公众号那块，手机验证是比较难啃的一块，Google后也没找到合适的指导，趁着周末，写下来，供日后参考。</p>
<span id="more"></span> 

<p>以下以一个测试公众号虫虫宠物生活馆的手机认证为例。</p>
<h4 id="场景描述"><a href="#场景描述" class="headerlink" title="场景描述"></a>场景描述</h4><p>用户登录公众号后，需要绑定会员，会员数据库中含有用户的手机号等信息，需要用户先输入手机进行验证。</p>
<p>然后根据手机号来判定用户是否是会员。</p>
<p>类似下面这种：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcly1fqbzr7ii8rj30a90g6755.jpg"></p>
<h4 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h4><p>用户输入手机后，点击获取验证码，第三方短信服务平台发送验证码信息，用户收到信息，输入验证码，完成绑定。</p>
<p>最后大致如下，这里没有用手机录屏了，在微信开发者工具上简单做个了动图，<strong>中间的白屏有些奇怪，手机上没有出现这种情况</strong>：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcly1fqbzim2z67g30ab0gwdje.gif"></p>
<h4 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h4><p>分解下任务：</p>
<ul>
<li>点击获取验证码，验证手机号的有效性，并发送验证码到用户的手机上</li>
<li>输入验证码后，用户点击确认，验证手机号与验证码的有效性，无误后，跳转至主页</li>
</ul>
<p>下面的代码示例，还是在<a href="https://github.com/goofansu/wechat-starter">wechat-starter</a>的基础上进行功能添加 ，有关微信网页授权部分，可参见<a href="https://luciaca.cn/2018/04/10/using-wechat-starter-to-integrate-public-account-on-rails/">Rails对接微信公众号简易指南</a>，这里只说手机验证。</p>
<p>不得不说，好的轮子真的可以节省很多时间，Thanks for OpenSource , Thanks for sharing ：P</p>
<p>好，一步步来。</p>
<p><strong>Step1、建手机验证的model phone_tokens</strong></p>
<p>终端执行：</p>
<pre><code>rails g model phone_token
</code></pre>
<p>在生成的migration文档中，修改成这样：</p>
<pre><code class="Ruby">lass CreatePhoneTokens &lt; ActiveRecord::Migration[5.1]
  def change
    create_table :phone_tokens do |t|
      t.string :phone
      t.string :token
      t.datetime :expired_at
      t.timestamps
    end
    add_index :phone_tokens, [:phone, :token]
  end
end
</code></pre>
<p>执行：</p>
<pre><code>rake db:migrate
</code></pre>
<p>修改<code>app/models/phone_tokenk.rb</code>, 要求token ，phone 必填：</p>
<pre><code class="Ruby">class PhoneToken &lt; ApplicationRecord
  validates_presence_of :token
  validates_presence_of :phone
end
</code></pre>
<p>修改<code>config/route.rb</code> ， 添加：</p>
<pre><code class="Ruby">resources :phone_tokens, only: [:create]
</code></pre>
<p><strong>Step2、建controller phone_tokens，实现手机验证码发送</strong></p>
<p>执行：</p>
<pre><code>rails g controller phone_tokens
</code></pre>
<p>修改<code>app/controllers/phone_tokens_controller.rb</code></p>
<pre><code class="ruby">class PhoneTokensController &lt; ApplicationController

  before_action :verify_phone_unrepeated

  def create
    unless params[:phone] =~ User::CELLPHONE_RE
      render json: &#123;status: &#39;error&#39;, message: &#39;手机号格式不正确！&#39;&#125;
      return
    end
    if session[:token_created_at] &amp;&amp; session[:token_created_at] + 60 &gt; Time.now.to_i
      render json: &#123;status: &#39;error&#39;, message: &#39;您已经申请过验证码，请60s后再试！&#39;&#125;
      return
    end

     ## 生成验证码
    token = sms_send(params[:phone])
    ## 初次生成验证码，新增record，验证码过期二次生成token，则更新record
    PhoneToken.add_or_update params[:phone], token
    render json: &#123;status: &#39;ok&#39;&#125;
  end

  private

  def verify_phone_unrepeated
    phone = User.find_by(phone: params[:phone])
    render :json =&gt; &#123; status: &#39;repeated&#39;&#125; if phone.present?
  end
end
</code></pre>
<p>这里添加了手机重复绑定的检查。其中，User::CELLPHONE_RE是定义在<code>user.rb</code>, 用正则验证手机号码有效，稍后会加上。</p>
<p>另外，生成验证码的method sms_send 我们在下一步调用第三方短信服务来实现。</p>
<p>而对于add_or_update 类方法，我们在<code>app/models/phone_token.rb</code>中定义，实现新增和更新：</p>
<p>修改<code>app/models/phone_token.rb</code>：</p>
<pre><code class="ruby">class PhoneToken &lt; ApplicationRecord
  validates_presence_of :token
  validates_presence_of :phone

  def self.add_or_update(phone, token)
    record = find_by(phone: phone)
    if record
      record.update_attributes token: token, expired_at: Time.now + 10.minutes
    else
      create phone: phone, token: token, expired_at: Time.now + 10.minutes
    end
  end
end
</code></pre>
<p><strong>Step3、调用第三方短信服务</strong></p>
<p>这里，以阿里云的短信服务为例，官方文档的接口调用代码示例是Java，也没找到ruby的，google了下，有一个现成的gem <a href="https://github.com/VICTOR-LUO-F/aliyun-sms">aliyun-sms</a>，用这个。</p>
<p>购买服务后，进行设置，你会得到四个参数值：</p>
<ol>
<li>ACCESS_KEY_SECRET</li>
<li>ACCESS_KEY_ID</li>
<li>SIGN_NAME</li>
<li>TEMPLATE_CODE</li>
</ol>
<p>开始调用吧！</p>
<p>修改gemfile：</p>
<pre><code>gem &#39;aliyun-sms&#39;
</code></pre>
<p>执行<code>bundle</code>，服务器重启.</p>
<p>修改<code>config/applicaton.yml</code>，将重要的参数值放进去，供调用：</p>
<pre><code class="Yml">access_key_secret: &quot;ACCESS_KEY_SECRET&quot;
access_key_id: &quot;ACCESS_KEY_ID&quot;
sign_name: &quot;SIGN_NAME&quot;
template_code: &quot;TEMPLATE_CODE&quot;
</code></pre>
<p>新增文件<code>config/initializers/aliyun-sms.rb</code>, 内容如下：</p>
<pre><code class="ruby">Aliyun::Sms.configure do |config|
  config.access_key_secret = Figaro.env.access_key_secret
  config.access_key_id = Figaro.env.access_key_id
  config.action = &#39;SendSms&#39;                       # default value
  config.format = &#39;XML&#39;                           # http return format, value is &#39;JSON&#39; or &#39;XML&#39;
  config.region_id = &#39;cn-hangzhou&#39;                # default value
  config.sign_name = Figaro.env.sign_name
  config.signature_method = &#39;HMAC-SHA1&#39;           # default value
  config.signature_version = &#39;1.0&#39;                # default value
  config.version = &#39;2017-05-25&#39;                   # default value
end
</code></pre>
<p><a href="https://github.com/VICTOR-LUO-F/aliyun-sms">aliyun-sms</a> 提供了调用方法Aliyun::Sms.send，我稍微进行了封装，封装后的method只有一个参数phone number。</p>
<p>新增<code>lib/sms.rb</code>, 内容如下：</p>
<pre><code class="Ruby">module Send
  module Sms
    def sms_send(phone)
      template_code = Figaro.env.template_code
      code = rand(100000..999999)
      template_param = &#123;&quot;code&quot; =&gt; code.to_s&#125;.to_json
      Aliyun::Sms.send(phone, template_code, template_param)
      code
    end
  end
end

class Object
  include Send::Sms
end
</code></pre>
<p>修改<code>app/controllers/phone_tokens_controller.rb</code>, 添加上relative_require, 加载下：</p>
<pre><code class="Ruby">require_relative &#39;../../lib/sms&#39;
</code></pre>
<p>OK，短信发送完成！</p>
<p>下面给授权页面添加上手机验证的表单。</p>
<p><strong>Step4、在授权页面添加手机验证</strong></p>
<p>修改<code>app/views/devise/registrations/new.html.erb</code>, 添加上手机验证：</p>
<pre><code class="html">&lt;%= form_for(resource, as: resource_name, url: registration_path(resource_name)) do |f| %&gt;
  &lt;div class=&quot;weui-cells_title&quot;&gt;请输入您的手机号，绑定会员&lt;/div&gt;
  &lt;div class=&quot;weui-cells weui-cells_form&quot;&gt;
    &lt;div class=&quot;weui-cell weui-cell_vcode&quot;&gt;
      &lt;div class=&quot;weui-cell__hd&quot;&gt;
        &lt;%= f.label :手机号, class: &#39;weui-label&#39; %&gt;
      &lt;/div&gt;
      &lt;div class=&quot;weui-cell__bd weui-cell_primary&quot;&gt;
        &lt;%= f.text_field :phone, class: &#39;weui-input&#39;,id: &#39;user_cellphone&#39;,type: &quot;tel&quot;, placeholder: &#39;请输入手机号&#39; %&gt;
      &lt;/div&gt;
      &lt;div class=&quot;weui-cell__ft&quot;&gt;
        &lt;input type=&quot;button&quot; style=&quot;background: none; border: none &quot; value=&quot;获取验证码&quot; class=&quot;weui-vcode-btn&quot; id=&quot;token_btn&quot;&gt;获取验证码&lt;/input&gt;
      &lt;/div&gt;
    &lt;/div&gt;

    &lt;div class=&quot;weui-cell weui-cell_vcode&quot;&gt;
      &lt;div class=&quot;weui-cell__hd&quot;&gt;
        &lt;%= f.label :验证码, class: &#39;weui-label&#39; %&gt;
      &lt;/div&gt;
      &lt;div class=&quot;weui-cell__bd weui-cell_primary&quot;&gt;
        &lt;%= f.text_field :token, class:&quot;weui-input&quot;, type: &quot;number&quot;, placeholder: &quot;请输入验证码&quot; %&gt;
      &lt;/div&gt;
    &lt;/div&gt;

  &lt;/div&gt;

    &lt;label for=&quot;weuiAgree&quot; class=&quot;weui-agree&quot;&gt;
      &lt;input id=&quot;weuiAgree&quot; type=&quot;checkbox&quot; checked=&quot;checked&quot; class=&quot;weui-agree__checkbox&quot;&gt;
      &lt;span class=&quot;weui-agree__text&quot;&gt;
        获得您的公开信息（昵称，头像等）
    &lt;/span&gt;
    &lt;/label&gt;

  &lt;div class=&quot;weui-btn-area&quot;&gt;
    &lt;%= f.submit &quot;确认&quot;, class: &#39;weui-btn weui-btn_primary&#39; %&gt;
    &lt;a href=&quot;javascript:wx.closeWindow();&quot; class=&quot;weui-btn weui-btn_plain-default&quot;&gt;关闭&lt;/a&gt;
  &lt;/div&gt;
&lt;% end %&gt;
</code></pre>
<p>点击获取验证码的按钮，调用phone_tokens的create 方法，发送验证码，同时phone_token插入或更新一个record。</p>
<p>修改<code>app/views/devise/registrations/new.html.erb</code>, 在最下面添加如下代码：「这里也一并加上手机验证码的60秒倒计时特效和手机号的验证」</p>
<pre><code class="Html">&lt;script&gt;
        (function()&#123;
            // 手机验证码
            var CELLPHONE_RE = /^1[3|4|5|6|7|8][0-9]&#123;9&#125;$/;
            var token_wait = 60, token_interval;
            var $token_btn = $(&#39;#token_btn&#39;);
            $token_btn.click(function () &#123;
                var $this = $(this), cellphone = $(&#39;#user_cellphone&#39;).val();
                $.ajax(&#123;
                    url: &quot;/phone_tokens?phone=&quot; + cellphone,
                    method: &#39;post&#39;,
                    beforeSend: function () &#123;
                        if (!CELLPHONE_RE.test(cellphone)) &#123;
                            alert(&quot;手机号码格式错误,请重填!&quot;);
                            $(&#39;#user_cellphone&#39;).val(&quot;&quot;);
                            return false;
                        &#125;
                        $this.attr(&#39;value&#39;,&quot;已发送&quot;).prop(&#39;disabled&#39;, true);
                    &#125;,
                    success: function (data) &#123;
                        if (data.status == &#39;error&#39;) &#123;
                            alert(data.message);
                            $token_btn.attr(&#39;value&#39;,&#39;获取验证码&#39;).prop(&#39;disabled&#39;, false);
                        &#125;else if(data.status == &#39;repeated&#39;)&#123;
                            alert(&quot;您的手机号已经验证过，无需验证&quot;);
                        &#125;else
                        &#123;
                            $token_btn.attr(&#39;value&#39;,&#39;已发送&#39;).prop(&#39;disabled&#39;, true);
                            $this.trigger(&#39;start_token_timer&#39;);
                        &#125;
                    &#125;
                &#125;)
            &#125;)
                .on(&#39;start_token_timer&#39;, function () &#123;
                    token_interval = setInterval(function () &#123;
                        $token_btn.trigger(&#39;token_timer&#39;);
                    &#125;, 1000);
                &#125;)
                .on(&#39;token_timer&#39;, function () &#123;
                    token_wait--;
                    if (token_wait &lt;= 0) &#123;
                        clearInterval(token_interval);
                        $token_btn.attr(&#39;value&#39;,&#39;获取验证码&#39;).prop(&#39;disabled&#39;, false);
                        token_wait = 60;
                    &#125; else &#123;
                        $token_btn.attr(&#39;value&#39;,&#39;重新发送 &#39; + token_wait + &#39; 秒&#39;).prop(&#39;disabled&#39;, true);
                    &#125;
                &#125;)
        &#125;)()
    &lt;/script&gt;
</code></pre>
<p>以上，手机验证码的发送基本完成，下面来完成验证码的验证，即用户填写的验证码就是发送给他的验证码。</p>
<p><strong>Step5、给User添加字段phone，并验证token填写正确</strong></p>
<p>执行：</p>
<pre><code>rails g migration add_phone_to_users
</code></pre>
<p>在生成的migration文档中，修改成这样：</p>
<pre><code class="Ruby">class AddPhoneToUsers &lt; ActiveRecord::Migration[5.1]
  def change
    add_column :users, :phone, :string
  end
end
</code></pre>
<p>执行：</p>
<pre><code>rake db:migrate
</code></pre>
<p>修改<code>app/controllers/users/registrations_controller.rb</code>的configure_sign_up_params method：</p>
<pre><code class="Ruby">def configure_sign_up_params
  devise_parameter_sanitizer.permit(:sign_up, keys: %i[phone token])
end
</code></pre>
<p>这样在授权页面用户必须输入手机和验证码才能通过。</p>
<p>修改<code>app/models/user.rb</code>，添加验证码的检验，如下：</p>
<pre><code class="Ruby">class User &lt; ActiveRecord::Base
  # Include default devise modules. Others available are:
  # :confirmable, :lockable, :timeoutable and :omniauthable
  devise :database_authenticatable, :registerable,
         :recoverable, :rememberable, :trackable, :validatable, :omniauthable

  attr_accessor :token
  CELLPHONE_RE = /^1[3|4|5|6|7|8][0-9]&#123;9&#125;$/

  before_validation :set_password
  validates_presence_of :phone
  validate :validate_phone, on: :create

  def self.from_omniauth(auth)
    ......
  end

  def self.new_with_session(params, session)
    ......
  end

  def email_required?
    false
  end

  private
  def set_password
    self.password ||= Devise.friendly_token[0, 20]
  end

  def validate_phone
    if phone.nil?
      errors.add :base, &#39;手机号不能为空&#39;
    elsif !PhoneToken.find_by(phone: phone, token: token)
      errors.add :phone, &#39;手机验证码不正确或已过期,请重填&#39;
    end
  end

end
</code></pre>
<p>通过validate_phone 这个method，来检验用户输入的token是否正确。</p>
<p>OK，基本功能已经完成！</p>
<p>最后，简单的美化一下弹窗。</p>
<p><strong>Step6、美化报错的弹窗</strong></p>
<p>上面<code>new.html.erb</code>中的alert是自带的弹窗，无法定制，很是难看，此外，当用户输入错误的验证码后，<code>user.rb</code>中error message也会弹出，置于页面顶层，很难看：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcly1fqccjt2h6sj30b90fl750.jpg"></p>
<p><a href="https://github.com/Tencent/weui">weui</a>提供了<a href="https://github.com/Tencent/weui/wiki/Dialog">Dialog</a>组件，我们用这个。</p>
<p>鉴于这里涉及的代码较多，就不放了，参看这个<a href="https://gist.github.com/Lupeipei/d8fcb48b588c2c0fb217052baa482eed">gist</a>，修改<code>app/views/devise/registrations/new.html.erb</code>, 最后的效果长这样：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcly1fqcc4szg58j30a50hfmxp.jpg"></p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>因为没有搜到合适的教程，所以参考的是付费课程<a href="https://fullstackhelper.herokuapp.com/lessons/3">手机短信验证码注册、短信通知</a>，跟着修修改改做的，该课程的最终参考来源：<a href="https://eggman.tv/">蛋人网</a>。</p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
        <tag>WeChat</tag>
      </tags>
  </entry>
  <entry>
    <title>梭子蟹与鳗鱼</title>
    <url>/posts/pike-and-eel/</url>
    <content><![CDATA[<p>好久没更了。</p>
<span id="more"></span>

<p>大概是意识到自己水平太菜, 想要写能入脑的东西, 却感觉空无一货。</p>
<p>但也不必太妄自菲薄, 不是吗?</p>
<p>北野武曾写过本书, 很短, 《菊次郎与佐纪》, 讲述他的父母, 但让我印象深刻的却是吴念真在推荐序中提到的一个故事。</p>
<blockquote>
<p>據說早年台灣鰻魚銷售到日本的時候，因為保鮮技術尚未成熟，運送過程中死亡率偏高。後來有人便想出一個辦法，就是在每隻鰻魚箱裡放進一隻梭子蟹，鰻魚因為害怕梭子蟹攻擊，一路上，不得不逼迫自己分分秒秒活在生死一線間的警戒狀態裡，於是抵達終點時，果然每條鰻魚都還雄赳赳、活跳跳。</p>
</blockquote>
<p>所以, 应该感谢那些梭子蟹。</p>
<p>前段时间, 整理2020年自己是如何继续荒废时光时, 发现刷的大部分纪录片都是二刷, 意外的惊喜是《生活万岁》。</p>
<p>一部好作品。</p>
<p>片中穿插着多个小故事，透过镜头，安静地看着那些同你我一般的人们，如何面对着生活给予的那些梭子蟹。</p>
<p>“你听着啊，凡所有相，皆是虚妄，若见诸相非相, 即见如来, 你是一个好人喔。”</p>
<p>“撒手, 我不跟你说话了, 你说我是一个好人, 我这么恶心，怎么会是一个好人呢。”</p>
<p>真实本身, 已经足够精彩。</p>
<p>如同《悉达多》中那句: 一切未受尽的苦, 未获得的救赎, 都会重来。</p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>Life</tag>
      </tags>
  </entry>
  <entry>
    <title>浪费风起的时候</title>
    <url>/posts/poetry-by-liyuansheng/</url>
    <content><![CDATA[<p>不小心刷到一首李云胜的诗, 读完很喜欢, 分享下.</p>
<span id="more"></span>

<h4 id="我想和你虚度时光"><a href="#我想和你虚度时光" class="headerlink" title="我想和你虚度时光"></a>我想和你虚度时光</h4><p>我想和你虚度时光，比如低头看鱼</p>
<p>比如把茶杯留在桌子上，离开</p>
<p>浪费它们好看的阴影</p>
<p>我还想连落日一起浪费，比如散步</p>
<p>一直消磨到星光满天</p>
<p>我还要浪费风起的时候</p>
<p>坐在走廊发呆，直到你眼中乌云</p>
<p>全部被吹到窗外</p>
<p>我已经虚度了世界，它经过我</p>
<p>疲倦，又像从未被爱过</p>
<p>但是明天我还要这样，虚度</p>
<p>满目的花草，生活应该像它们一样美好</p>
<p>一样无意义，像被虚度的电影</p>
<p>那些绝望的爱和赴死</p>
<p>为我们带来短暂的沉默</p>
<p>我想和你互相浪费</p>
<p>一起虚度短的沉默，长的无意义</p>
<p>一起消磨精致而苍老的宇宙</p>
<p>比如靠在栏杆上，低头看水的镜子</p>
<p>直到所有被虚度的事物</p>
<p>在我们身后，长出薄薄的翅膀</p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>Life</tag>
      </tags>
  </entry>
  <entry>
    <title>Rails中的多态关联polymorphic associations</title>
    <url>/posts/polymorphic-associations-in-rails5/</url>
    <content><![CDATA[<p>多态关联（polymorphic associations）算是个挖了很久的坑，一直没填，这次填了这个坑。</p>
<span id="more"></span> 

<h4 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h4><p>Polymorphic Associations help when <strong>one table must belongs_to multiple other tables</strong>。</p>
<p>大白话可以这样理解：当存在多个model 同时 has_many 一个model时，可以使用多态关联，来实现model层面的DRY。【我是这样理解的……】</p>
<p>官方给到的图解案例是这样滴：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fqiz6399vrj30ht0k9ta8.jpg"></p>
<p>Employee和Product同时拥有多个pictures，Picture里面必须包含两个字段：imageable_id，imageable_type。这样就不需要新增EmployeePicture和ProductPicture两个model了，只需要一个Picture就可以了。</p>
<p>这么说好像没啥感觉，通过一个小例子来实战一下。</p>
<h4 id="怎么玩？"><a href="#怎么玩？" class="headerlink" title="怎么玩？"></a>怎么玩？</h4><ul>
<li><p>新建一个rails项目 poly, 有article，event和comment，用户可以对article或者event进行评论，单个article，event可以拥有多个comments。</p>
<pre><code>rails new poly
cd poly
rails g model article title:string content:text
rails g model event title:string start_at:datetime end_at:datetime description:text
rake db:migrate
</code></pre>
<p>记得重启服务器：<code>rails s</code>。</p>
<p>建controller：</p>
<pre><code>rails g controller articles
rails g controller events
</code></pre>
<p>完成ArticlesController，EventsController中的7个action，这里就不一一列出了。</p>
<p>修改<code>routes.rb</code>：</p>
<pre><code class="ruby">Rails.application.routes.draw do
  resources :events
  resources :articles
  root &quot;articles#index&quot;
end
</code></pre>
<p>使用seeds或者task，生成一些测试数据，这里我用了seeds。</p>
<p>添加articles和events的index，show页面。</p>
<p>浏览器打开<code>localhost:3000</code>，类似这样：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fqjaoxvg4dj30l00cgq43.jpg"></p>
<p>现在请上comment。</p>
</li>
</ul>
<ul>
<li><p>建model comment</p>
<p>运行：</p>
<pre><code>rails g model comment
</code></pre>
<p>修改生成的migrate文件如下：</p>
<pre><code class="ruby">class CreateComments &lt; ActiveRecord::Migration[5.1]
  def change
    create_table :comments do |t|
      t.text :content
      t.belongs_to :commentable, polymorphic: true
      t.timestamps
    end
    add_index :comments, [:commentable_id, :commentable_type]
  end
end
</code></pre>
<p>这里<code>t.belongs_to :commentable, polymorphic: true</code>等同与</p>
<pre><code class="Ruby">      t.integer :commentable_id
      t.string :commentable_type
</code></pre>
<p>运行<code>rake db:migrate</code>， 重启服务器。</p>
</li>
</ul>
<ul>
<li><p>给article，event，comment建立联系：</p>
<p>修改<code>app/models/article.rb</code>, <code>app/models/event.rb</code>，添加上：</p>
<pre><code class="Ruby">has_many :comments, as: :commentable
</code></pre>
<p>好，我们去rails console 看看是不是可以给article和event添加comments。</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fqjdhgv3ukj30qo0b0wgt.jpg"></p>
<p>可以看到成功为article创建了comment。</p>
<p>修改<code>app/controllers/articles_controller.rb</code>的show部分：</p>
<pre><code class="Ruby">  def show
    @article = Article.find(params[:id])
    @comments = @article.comments
  end
</code></pre>
<p>修改<code>app/views/articles/show.html.erb</code></p>
<pre><code class="Html">&lt;div class=&quot;container-fluid&quot;&gt;
  &lt;h1&gt;&lt;%= @article.title %&gt;&lt;/h1&gt;
  &lt;p&gt;&lt;%= @article.content %&gt;&lt;/p&gt;
  &lt;ul&gt;
    &lt;% if @comments %&gt;
        &lt;% @comments.each do |comment| %&gt;
            &lt;li&gt;&lt;%= comment.content %&gt;&lt;/li&gt;
        &lt;% end %&gt;
    &lt;% end %&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</code></pre>
<p>打开<code>http://localhost:3000/articles/0</code>,可以看到刚刚添加的那个comment：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fqje66qmksj30mf05tmxj.jpg"></p>
</li>
<li><p>DRY comment view</p>
<p>新建comments controller：</p>
<pre><code>rails g controller comments
</code></pre>
<p>修改<code>app/controllers/comments_controller.rb</code>, 内容如下：</p>
<pre><code class="Ruby">class CommentsController &lt; ApplicationController
  before_action :load_commentable

  def index
    @comments = @commentable.comments
  end

  def new
    @comment = @commentable.comments.new
  end

  def create
    @comment = @commentable.comments.new(comment_params)
    if @comment.save
      redirect_to @commentable
    else
      render :new
    end
  end

  private

  def load_commentable
    resource, id = request.path.split(&#39;/&#39;)[1,2]
    @commetable = resource.singularize.classify.constantize.find(id)
  end

  def comment_params
    params.require(:comment).permit(:content)
  end
end
</code></pre>
<p>修改<code>routes.rb</code>：</p>
<pre><code class="Ruby">Rails.application.routes.draw do
  # For details on the DSL available within this file, see http://guides.rubyonrails.org/routing.html

  resources :events do
    resources :comments
  end
  resources :articles do
    resources :comments
  end
  root &quot;articles#index&quot;
end
</code></pre>
<p>新建 <code>app/views/comments/_form.html.erb</code>:</p>
<p>内容如下：</p>
<pre><code class="html">&lt;%= form_for [@commentable, @comment] do |f| %&gt;
    &lt;div class=&quot;field&quot;&gt;
      &lt;%= f.text_area :content %&gt;
    &lt;/div&gt;
    &lt;div class=&quot;action&quot;&gt;
      &lt;%= f.submit &quot;sumbit&quot; %&gt;
    &lt;/div&gt;
&lt;% end %&gt;
</code></pre>
<p>修改<code>app/controllers/articles_controller.rb</code>的show部分：</p>
<pre><code class="ruby">  def show
    @commentable = Article.find(params[:id])
    @comments = @commentable.comments
    @comment =  @commentable.comments.new
  end
</code></pre>
<p>修改<code>app/views/articles/show.html.erb</code>:</p>
<pre><code class="Html">&lt;div class=&quot;container-fluid&quot;&gt;
  &lt;h1&gt;&lt;%= @article.title %&gt;&lt;/h1&gt;
  &lt;p&gt;&lt;%= @article.content %&gt;&lt;/p&gt;
  &lt;ul&gt;
    &lt;% if @comments %&gt;
        &lt;% @comments.each do |comment| %&gt;
            &lt;li&gt;&lt;%= comment.content %&gt;&lt;/li&gt;
        &lt;% end %&gt;
    &lt;% end %&gt;
  &lt;/ul&gt;

  &lt;%= render &quot;comments/form&quot; %&gt;
&lt;/div&gt;
</code></pre>
<p>针对event做同样的处理，这样create comment就可以重复使用了。</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fqjfdf6zfsj30kl072gm6.jpg"></p>
<p>看看events：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fqjfretw42j30lu0903z3.jpg"></p>
</li>
</ul>
<p>OK!! 基本功能实现，想要美观地码楼的话，就要用到Ajax部分了，继续写就没完没了了 ，下次在码字: P</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://jarlowrey.com/blog/polymorphic-rails-5.html">Polymorphic Associations in Rails 5</a></p>
<p><a href="https://rubyplus.com/articles/3901-Polymorphic-Association-in-Rails-5">Polymorphic Association in Rails 5</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx + passenger  部署 Rails  踩坑</title>
    <url>/posts/problem-occured-when-deploy-rails-with-nginx-and-passenger/</url>
    <content><![CDATA[<p>时隔大半年，终于填了这个坑……</p>
<span id="more"></span>

<p>去年10月读完《苏东坡传》的时候，就想着做个小的诗词网站，中间因为懒，拖拖拉拉了很久，时隔大半年，算是马马虎虎填了坑，想着，页面丑是丑了些，呃，不管了，先部署了，让它来到这个世界再说。</p>
<p>因为钟情陶潜的《归去来兮辞》，就厚脸皮拿来做了title， 附上站点：<a href="https://www.welcomeback.cn/">归去来兮</a></p>
<p>这里记录下用 Nginx + passenger 部署时踩的坑。</p>
<h4 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h4><p> Ubuntu 1804， 参考官网给的<a href="https://www.phusionpassenger.com/library/install/nginx/install/oss/bionic/">Installing Passenger + Nginx on Ubuntu 18.04</a> 安装了 Nginx + passenger。</p>
<h4 id="Failed-to-parse-PID"><a href="#Failed-to-parse-PID" class="headerlink" title="Failed to parse PID"></a>Failed to parse PID</h4><p>nginx restart 后，执行:</p>
<pre><code>sudo service nginx status
</code></pre>
<p>看到报错，显示：</p>
<pre><code>nginx.service: Failed to parse PID from file /run/nginx.pid: Invalid argument
</code></pre>
<p>参考 <a href="https://bugs.launchpad.net/ubuntu/+source/nginx/+bug/1581864">nginx.service: Failed to read PID from file /run/nginx.pid: Invalid argument</a>, 貌似是Ubuntu的一个bug。</p>
<p>commits 部分给到的解决方法：</p>
<pre><code class="shell">mkdir /etc/systemd/system/nginx.service.d
printf &quot;[Service]\nExecStartPost=/bin/sleep 0.1\n&quot; &gt; /etc/systemd/system/nginx.service.d/override.conf
systemctl daemon-reload
</code></pre>
<p>「执行 最后一步 daemon-reload时需要输入密码，输入服务器登陆密码即可。」</p>
<p>重启nginx:</p>
<pre><code class="shell">sudo service nginx restart
sudo service nginx status
</code></pre>
<p>OK.</p>
<h4 id="cannot-load-such-file-–-bundler-setup"><a href="#cannot-load-such-file-–-bundler-setup" class="headerlink" title="cannot load such file – bundler/setup"></a>cannot load such file – bundler/setup</h4><p>使用  Capistrano deploy 之后，访问网站，报错 500，查看nginx 日志，看到如下的报错信息：</p>
<pre><code>The application encountered the following error: cannot load such file -- bundler/setup (LoadError)
</code></pre>
<p>但是 bundler 明明已经安装好，Google 半天，找到的解决方法，有些一言难尽。</p>
<p>后面想了想，安装 passenger 的时候需要设置 passenger_ruby，而我是用 rbenv 安装的ruby，大概是这里出了问题，bingo!</p>
<ul>
<li><p>终端执行<code>which ruby</code>,  复制地址</p>
</li>
<li><p>打开 <code>/etc/nginx/conf.d/mod-http-passenger.conf</code> 文件</p>
<p>找到<code>passenger_ruby /usr/bin/passenger_free_ruby;</code>， 修改  passenger_ruby 为正确的ruby 路径。</p>
</li>
</ul>
<p>重启 nginx，再次访问，OK！</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p> <a href="https://bugs.launchpad.net/ubuntu/+source/nginx/+bug/1581864">nginx.service: Failed to read PID from file /run/nginx.pid: Invalid argument</a></p>
<p><a href="https://www.phusionpassenger.com/library/install/nginx/install/oss/bionic/">Installing Passenger + Nginx on Ubuntu 18.04</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Publishing your gem</title>
    <url>/posts/publishing-your-gem/</url>
    <content><![CDATA[<p>小激动。</p>
<span id="more"></span> 

<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>成功发布了一个轮子，<a href="https://rubygems.org/gems/i18n-processes">i18n-processes</a> ,  一个在<a href="https://rubygems.org/gems/i18n-tasks">i18n-tasks</a>上进行了改造的轮子，看到它发布成功的那一刻，真的是开心到飞起，虽然这个gem并不是那么useful， 但是造轮子的感觉还是很赞的。</p>
<p>好，回正题，继上一篇<a href="http://luciaca.cn/2018/03/21/create-your-first-rubygem/">创建你的第一个gem</a>， 这篇详细写一下如何publish your gem，同时记录下遇到的问题。</p>
<h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><p>发布其实很简单，三步走：</p>
<ul>
<li><p>注册或者登陆rubygems官网<a href="https://rubygems.org/">https://rubygems.org</a>, 搜索下，确保你的gem名唯一 。</p>
</li>
<li><p>在你gem文件所在的目录下，创建gem, 终端运行：</p>
<pre><code>gem build yourgem-name
</code></pre>
<p>这一步很重要，如果没有做，发布的时候，会出现<code>While executing gem ... (Gem::Package::FormatError)</code>的报错。</p>
</li>
<li><p>发布</p>
<p>终端运行：</p>
<pre><code class="Shell">gem push yourgem-name-version.gem
## version 为版本号，比如: gem push i18n-processes-0.1.0.gem
</code></pre>
</li>
<li><p>更新版本</p>
<p>比如你的初始版本是0.1.0， 你更新了这个gem，添加了一些新的功能，修复了一些bug or whatever, 总之你的版本升级了，比如改为0.1.1，如何让published的0.1.0也更新到0.1.1？</p>
<p><code>git add</code> ,<code> git commit</code> ,<code> git push</code>后，确保everything up-to-date，终端运行：</p>
<pre><code>rake release
</code></pre>
<p>请确保你已经修改了版本号，否则会出现：<code>Repushing of gem versions is not allowed.</code>的报错。</p>
<p>一切无误后，会出现<code>Pushed yourgem-name version to rubygems.org</code>, 表示已经成功了。  </p>
</li>
</ul>
<p>遇到的问题：</p>
<ul>
<li><p>HTTP Basic: Access denied.</p>
<p>呃，这是个有点白痴的问题，检查你的email和password，确认没有输入错误，基本就OK了。之所以提到这个问题，是rubygem的issues<a href="https://github.com/rubygems/rubygems.org/issues/583">Cannot gem push (HTTP Basic: Access Denied) #583</a>中有这块的讨论，有人提到了gem版本的问题，但是只要你的gem不是特别老，比如2.0.6啥的，是不会因为gem版本的原因而出现上诉报错的。</p>
<p>just check your email and password, that’s enough.</p>
</li>
</ul>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="http://guides.rubygems.org/publishing/#introduction">publishing your gem</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
      </tags>
  </entry>
  <entry>
    <title>Rails中一些常用的数据查询命令</title>
    <url>/posts/query-in-rails/</url>
    <content><![CDATA[<p>写一写Rails中一些常用的查询。</p>
<span id="more"></span> 

<h4 id="group"><a href="#group" class="headerlink" title="group"></a>group</h4><p>等同与SQL中的group_by，使用：</p>
<pre><code class="ruby">Student.group(:gender).count
</code></pre>
<p>即：</p>
<pre><code class="sql">SELECT COUNT (*) AS count_all, gender
FROM &quot;students&quot; GROUP BY gender
</code></pre>
<h4 id="join"><a href="#join" class="headerlink" title="join"></a>join</h4><p>School 与Clazz是一对多的关系。</p>
<pre><code class="ruby">Clazz.joins(:school)
</code></pre>
<p>对应的SQL：</p>
<pre><code class="sql">SELECT &quot;clazzes&quot;.*  FROM &quot;clazzes&quot; INNER JOIN &quot;schools&quot;  ON &quot;schools&quot;.&quot;id&quot;=&quot;clazzes&quot;.&quot;school_id&quot;
</code></pre>
<p>同样：</p>
<pre><code class="ruby">School.joins(:clazzes)
</code></pre>
<p>对应的SQL：</p>
<pre><code class="sql">SELECT &quot;schools&quot;.*  FROM &quot;schools&quot; INNER JOIN &quot;clazzes&quot;  ON &quot;clazzes&quot;.&quot;school_id&quot;=&quot;schools&quot;.&quot;id&quot;
</code></pre>
<p>这里joins的参数的单复数很重要，School 与Clazz是一对多的关系，Clazz.joins(:school)，school必须是单数，School.joins(:clazzes)时，clazzes则是复数，即<strong>参数对应的不是表名，而是association names</strong>。</p>
<p>多对多的joins, 比如找出hello老师所在的所有班级：</p>
<pre><code class="ruby">Clazz.joins(:teachers).where(teachers: &#123; name: &quot;hello&quot; &#125;)
</code></pre>
<p>对应的SQL：</p>
<pre><code class="sql"> SELECT &quot;clazzes&quot;.* FROM &quot;clazzes&quot; INNER JOIN &quot;teachers&quot; ON &quot;teachers&quot;.&quot;clazz_id&quot; = &quot;clazzes&quot;.&quot;id&quot;

 SELECT &quot;clazzes&quot;.* FROM &quot;clazzes&quot; INNER JOIN &quot;teacherships&quot; ON &quot;teacherships&quot;.&quot;clazz_id&quot; = &quot;clazzes&quot;.&quot;id&quot; INNER JOIN &quot;teachers&quot; ON &quot;teachers&quot;.&quot;id&quot; = &quot;teacherships&quot;.&quot;teacher_id&quot; WHERE &quot;teachers&quot;.&quot;name&quot;=&quot;hello&quot;
</code></pre>
<p>多表连接查询，比如查找 1班 A组的老师：</p>
<pre><code class="ruby">Teacher.joins(:clazzes, :groups).where(clazzes: &#123; name: &quot;1班&quot; &#125;, groups: &#123; name: &quot;A组&quot; &#125;)
</code></pre>
<p>对应的SQL：</p>
<pre><code class="sql">SELECT &quot;teachers&quot;.* FROM &quot;teachers&quot;
INNER JOIN &quot;teacherships&quot; ON &quot;teacherships&quot;.&quot;teacher_id&quot; = &quot;teachers&quot;.&quot;id&quot;
INNER JOIN &quot;clazzes&quot; ON &quot;clazzes&quot;.&quot;id&quot; = &quot;teacherships&quot;.&quot;clazz_id&quot;
INNER JOIN &quot;groups&quot; ON &quot;groups&quot;.&quot;teacher_id&quot; = &quot;teachers&quot;.&quot;id&quot;
WHERE &quot;clazzes&quot;.&quot;name&quot; = &quot;1班&quot; AND &quot;groups&quot;.&quot;name&quot; = &quot;A组&quot;
</code></pre>
<p>嵌套连接nested joins， 比如找出第一中学1班 A组的老师：</p>
<pre><code class="ruby">Teacher.joins( :groups, clazzes: [:school]).where(clazzes: &#123; name: &quot;1班&quot; &#125;, groups: &#123; name: &quot;A组&quot; &#125;,schools: &#123; name: &quot;第一中学&quot; &#125;)
</code></pre>
<p>对应的SQL：</p>
<pre><code class="sql">SELECT &quot;teachers&quot;.* FROM &quot;teachers&quot;
INNER JOIN &quot;groups&quot; ON &quot;teachers&quot;.id = &quot;groups&quot;.&quot;teacher_id&quot;
INNER JOIN &quot;teacherships&quot; ON &quot;teacherships&quot;.&quot;teacher_id&quot; = &quot;teachers&quot;.&quot;id&quot;
INNER JOIN &quot;clazzes&quot; ON &quot;clazzes&quot;.&quot;id&quot; = &quot;teacherships&quot;.&quot;clazz_id&quot; INNER JOIN &quot;schools&quot; ON &quot;schools&quot;.&quot;id&quot; = &quot;clazzes&quot;.&quot;school_id&quot; WHERE &quot;clazzes&quot;.&quot;name&quot; = &quot;1班&quot; AND &quot;groups&quot;.&quot;name&quot; = &quot;A组&quot; AND &quot;schools&quot;.&quot;name&quot; = &quot;第一中学&quot;
</code></pre>
<p>附上一份各种JOIN的差异对比，帮助我自己记忆：P</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1ftrwrp7v1mj30sg0iaac2.jpg"></p>
<p>图片来源: <a href="https://blog.jooq.org/2016/07/05/say-no-to-venn-diagrams-when-explaining-joins/">say no to venn digrams when explaining joins</a></p>
<h4 id="includes"><a href="#includes" class="headerlink" title="includes"></a>includes</h4><p>N+1效能查询的解决方法。</p>
<pre><code class="ruby">clazzes = Clazz.includes(:school).limit(10)
</code></pre>
<p>对应的SQL：</p>
<pre><code class="sql">SELECT &quot;clazzes&quot;.* FROM &quot;clazzes&quot; LIMIT 10
SELECT &quot;schools&quot;.* FROM &quot;schools&quot;
  WHERE &quot;schools&quot;.&quot;id&quot; IN (617,1604,783,2554,1841,1469,446,2820,1566,2741)
</code></pre>
<p>这里先找到10个clazz，然后根据这10个clazz查找对应的school， 有重复的school_id则去重复查询。</p>
<p>类似joins，includes也可以关联多表：</p>
<pre><code class="ruby">Clazz.includes(:school, :orders).limit(10)
</code></pre>
<p>对应的SQL：</p>
<pre><code class="sql">SELECT &quot;clazzes&quot;.* FROM &quot;clazzes&quot; LIMIT 10
SELECT &quot;schools&quot;.* FROM &quot;schools&quot; WHERE &quot;schools&quot;.&quot;id&quot; IN (617,1604,783,2554,1841,1469,446,2820,1566,2741)
SELECT &quot;orders&quot;.* FROM &quot;orders&quot; WHERE &quot;orders&quot;.&quot;clazz_id&quot; IN (4732,1648,3715,963,278,4525,7096,9064,10299,7980)
</code></pre>
<p>嵌套includes：</p>
<pre><code class="ruby">Clazz.includes(:school, orders: [:product]).limit(10)
</code></pre>
<p>对应的SQL：</p>
<pre><code class="sql">SELECT &quot;clazzes&quot;.* FROM &quot;clazzes&quot; LIMIT 10
SELECT &quot;schools&quot;.* FROM &quot;schools&quot; WHERE &quot;schools&quot;.&quot;id&quot; IN (2741,2742，2743，2744)
SELECT &quot;orders&quot;.* FROM &quot;orders&quot; WHERE &quot;orders&quot;.&quot;clazz_id&quot; IN (4732,1648,3715,963,278,4525,7096,9064,10299,7980)
SELECT &quot;products&quot;.* FROM &quot;products&quot; WHERE &quot;products&quot;.&quot;id&quot; IN (7,4,16)
</code></pre>
<p>nested部分，根据clazz的ID，找到对应的order，然后根据order的ID，再找到product，这里可以看成有一层Order.includes(:product)。</p>
<p>通过explain方法可以很清楚看到SQL的查询步骤【后面会提到】</p>
<p>上述nested includes，对应的SQL查询步骤：</p>
<pre><code class="sql">=&gt; EXPLAIN for: SELECT  &quot;clazzes&quot;.* FROM &quot;clazzes&quot; LIMIT $1 [[&quot;LIMIT&quot;, 10]]
                            QUERY PLAN
-------------------------------------------------------------------
 Limit  (cost=0.00..0.42 rows=10 width=99)
   -&gt;  Seq Scan on clazzes  (cost=0.00..399.53 rows=9553 width=99)
(2 rows)

EXPLAIN for: SELECT &quot;schools&quot;.* FROM &quot;schools&quot; WHERE &quot;schools&quot;.&quot;id&quot; IN ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10) [[&quot;id&quot;, 617], [&quot;id&quot;, 1604], [&quot;id&quot;, 783], [&quot;id&quot;, 2554], [&quot;id&quot;, 1841], [&quot;id&quot;, 1469], [&quot;id&quot;, 446], [&quot;id&quot;, 2820], [&quot;id&quot;, 1566], [&quot;id&quot;, 2741]]
                                      QUERY PLAN
--------------------------------------------------------------------------------------
 Seq Scan on schools  (cost=0.00..40.53 rows=10 width=141)
   Filter: (id = ANY (&#39;&#123;617,1604,783,2554,1841,1469,446,2820,1566,2741&#125;&#39;::integer[]))
(2 rows)

EXPLAIN for: SELECT &quot;orders&quot;.* FROM &quot;orders&quot; WHERE &quot;orders&quot;.&quot;clazz_id&quot; IN ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10) [[&quot;clazz_id&quot;, 4732], [&quot;clazz_id&quot;, 1648], [&quot;clazz_id&quot;, 3715], [&quot;clazz_id&quot;, 963], [&quot;clazz_id&quot;, 278], [&quot;clazz_id&quot;, 4525], [&quot;clazz_id&quot;, 7096], [&quot;clazz_id&quot;, 9064], [&quot;clazz_id&quot;, 10299], [&quot;clazz_id&quot;, 7980]]
                                               QUERY PLAN
--------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on orders  (cost=47.22..1262.09 rows=392 width=194)
   Recheck Cond: (clazz_id = ANY (&#39;&#123;4732,1648,3715,963,278,4525,7096,9064,10299,7980&#125;&#39;::integer[]))
   -&gt;  Bitmap Index Scan on index_orders_on_clazz_id  (cost=0.00..47.12 rows=392 width=0)
         Index Cond: (clazz_id = ANY (&#39;&#123;4732,1648,3715,963,278,4525,7096,9064,10299,7980&#125;&#39;::integer[]))
(4 rows)

EXPLAIN for: SELECT &quot;products&quot;.* FROM &quot;products&quot; WHERE &quot;products&quot;.&quot;id&quot; IN ($1, $2, $3) [[&quot;id&quot;, 7], [&quot;id&quot;, 4], [&quot;id&quot;, 16]]
                        QUERY PLAN
----------------------------------------------------------
 Seq Scan on products  (cost=0.00..1.62 rows=3 width=391)
   Filter: (id = ANY (&#39;&#123;7,4,16&#125;&#39;::integer[]))
(2 rows)
</code></pre>
<p>includes后，如果添加where条件，则需要传递一个hash给到where，如果不是hash，则需要使用references强制连接table。</p>
<p>比如：</p>
<pre><code class="ruby">Clazz.includes(:school).where(&quot;schools.name =&#39;第一小学&#39;&quot;).references(:schools)
## 等同于
Clazz.includes(:school).where(schools: &#123; name: &quot;第一小学&quot;&#125;)
</code></pre>
<p>注意到includes接受的参数同joins，是association names，而references则是表名。</p>
<h4 id="counter-cache"><a href="#counter-cache" class="headerlink" title="counter_cache"></a>counter_cache</h4><p>用来快速获取关联计数，假设school model中有teachers_count这个字段，那么：</p>
<pre><code class="ruby">class Teacher &lt; ApplicationRecord
  belongs_to :school, :counter_cache =&gt; true
end
</code></pre>
<p>这样<em>ActiveRecord</em>就会自动更新schools中的teachers_count的值。</p>
<p>这里counter_cache对应的列名可以自定义，比如说老师和学生之间是一对多的关系，给老师这张表添加一个字段total_students_count ,则可以在student的model中这么设置：</p>
<pre><code class="ruby">class Student &lt; ApplicationRecord
  belongs_to :teacher, counter_cache: &quot;total_students_count&quot;
end
</code></pre>
<h4 id="find-each"><a href="#find-each" class="headerlink" title="find_each"></a>find_each</h4><p>find_each 分批查询， 默认每次捞出1000条记录。</p>
<p>有三个参数可以设置：</p>
<ul>
<li>batch_size</li>
<li>start</li>
<li>finish</li>
</ul>
<p><strong>batch_size</strong></p>
<p>指定每次捞出的数据量。</p>
<pre><code>School.find_each(batch_size: 200) do
end
</code></pre>
<p>那么每次则捞出200条记录，对应到SQL中，则是limit的值变成了200。</p>
<p>默认是按照primary key(id) 升序排序查询结果：</p>
<pre><code class="sql">SELECT  &quot;schools&quot;.* FROM &quot;schools&quot; ORDER BY &quot;schools&quot;.&quot;id&quot; ASC LIMIT 200
SELECT &quot;schools&quot;.* FROM &quot;schools&quot; WHERE &quot;schools&quot;.&quot;id&quot; &gt; 200 ORDER BY &quot;schools&quot;.&quot;id&quot; ASC LIMIT 200
……
</code></pre>
<p><strong>start</strong></p>
<p>从哪条记录开始查询， 默认参数是ID。</p>
<p>比如：</p>
<pre><code class="ruby">School.find_each(start: 200) do
end
</code></pre>
<p>对应的SQL：</p>
<pre><code class="sql">SELECT  &quot;schools&quot;.* FROM &quot;schools&quot; WHERE &quot;schools&quot;.&quot;id&quot; &gt;= 200 ORDER BY &quot;schools&quot;.&quot;id&quot; ASC LIMIT 1000
</code></pre>
<p><strong>finish</strong></p>
<p>指定到哪条记录截止， 默认参数是ID。</p>
<p>比如：</p>
<pre><code class="ruby">School.find_each(finish: 2000) do
end
</code></pre>
<p>对应的SQL：</p>
<pre><code class="sql">SELECT  &quot;schools&quot;.* FROM &quot;schools&quot; WHERE &quot;schools&quot;.&quot;id&quot; &lt;= 2000 ORDER BY &quot;schools&quot;.&quot;id&quot; ASC LIMIT 1000
</code></pre>
<p>start搭配finish：</p>
<pre><code class="ruby">School.find_each(start: 200, finish: 2000) do
end
</code></pre>
<p>对应的SQL：</p>
<pre><code class="sql">SELECT  &quot;schools&quot;.* FROM &quot;schools&quot; WHERE &quot;schools&quot;.&quot;id&quot; &gt;= 200 AND &quot;schools&quot;.&quot;id&quot; &lt;= 2000 ORDER BY &quot;schools&quot;.&quot;id&quot; ASC LIMIT 1000
</code></pre>
<h4 id="explain方法"><a href="#explain方法" class="headerlink" title="explain方法"></a>explain方法</h4><p>可以用来查看SQL的执行步骤。<br><code>rails c</code>进入console，执行：<code>User.where(id: 1).explain</code>， 会得到如下结果：</p>
<pre><code class="ruby">=&gt; EXPLAIN for: SELECT &quot;users&quot;.* FROM &quot;users&quot; WHERE &quot;users&quot;.&quot;id&quot; = $1 [[&quot;id&quot;, 1]]
                                QUERY PLAN
--------------------------------------------------------------------------
 Index Scan using users_pkey on users  (cost=0.42..8.44 rows=1 width=387)
   Index Cond: (id = 1)
(2 rows)
</code></pre>
<p>显示了数据查询的过程，扫描users的index，最后找到id为1的user。</p>
<p>看一个joins的例子：</p>
<pre><code class="ruby">Teacher.joins(:clazzes, :groups).explain
</code></pre>
<p>对应的输出：</p>
<pre><code class="ruby">=&gt; EXPLAIN for: SELECT &quot;teachers&quot;.* FROM &quot;teachers&quot; INNER JOIN &quot;clazzes&quot; ON &quot;clazzes&quot;.&quot;id&quot; = &quot;teachers&quot;.&quot;clazz_id&quot; INNER JOIN &quot;groups&quot; ON &quot;groups&quot;.&quot;teacher_id&quot; = &quot;teachers&quot;.&quot;id&quot;
                                                   QUERY PLAN
------------------------------------------------------------------------------------------
 Nested Loop  (cost=0.99..2382.37 rows=1 width=387)
   -&gt;  Nested Loop  (cost=0.71..2382.05 rows=1 width=391)
         -&gt;  Seq Scan on groups  (cost=0.00..6.02 rows=302 width=4)
         -&gt;  Index Scan using teachers_pkey on teachers  (cost=0.42..7.86 rows=1 width=387)
               Index Cond: (id = groups.teacher_id)
   -&gt;  Index Only Scan using clazzes_pkey on clazzes  (cost=0.29..0.33 rows=1 width=4)
         Index Cond: (id = teacherships.clazz_id)
(7 rows)
</code></pre>
<p> 看一个includes的例子，多表includes:</p>
<pre><code class="ruby">Clazz.includes(:school, :groups).limit(10).explain
</code></pre>
<p>对应的输出：</p>
<pre><code class="sql">=&gt; EXPLAIN for: SELECT  &quot;clazzes&quot;.* FROM &quot;clazzes&quot; LIMIT $1 [[&quot;LIMIT&quot;, 10]]
                            QUERY PLAN
-------------------------------------------------------------------
 Limit  (cost=0.00..0.42 rows=10 width=99)
   -&gt;  Seq Scan on clazzes  (cost=0.00..399.53 rows=9553 width=99)
(2 rows)

EXPLAIN for: SELECT &quot;schools&quot;.* FROM &quot;schools&quot; WHERE &quot;schools&quot;.&quot;id&quot; IN ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10) [[&quot;id&quot;, 617], [&quot;id&quot;, 1604], [&quot;id&quot;, 783], [&quot;id&quot;, 2554], [&quot;id&quot;, 1841], [&quot;id&quot;, 1469], [&quot;id&quot;, 446], [&quot;id&quot;, 2820], [&quot;id&quot;, 1566], [&quot;id&quot;, 2741]]
                                      QUERY PLAN
--------------------------------------------------------------------------------------
 Seq Scan on schools  (cost=0.00..40.53 rows=10 width=141)
   Filter: (id = ANY (&#39;&#123;617,1604,783,2554,1841,1469,446,2820,1566,2741&#125;&#39;::integer[]))
(2 rows)

EXPLAIN for: SELECT &quot;groups&quot;.* FROM &quot;groups&quot; WHERE &quot;groups&quot;.&quot;clazz_id&quot; IN ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10) [[&quot;clazz_id&quot;, 4732], [&quot;clazz_id&quot;, 1648], [&quot;clazz_id&quot;, 3715], [&quot;clazz_id&quot;, 963], [&quot;clazz_id&quot;, 278], [&quot;clazz_id&quot;, 4525], [&quot;clazz_id&quot;, 7096], [&quot;clazz_id&quot;, 9064], [&quot;clazz_id&quot;, 10299], [&quot;clazz_id&quot;, 7980]]
                                          QUERY PLAN
----------------------------------------------------------------------------------------------
 Seq Scan on groups  (cost=0.00..9.79 rows=14 width=36)
   Filter: (clazz_id = ANY (&#39;&#123;4732,1648,3715,963,278,4525,7096,9064,10299,7980&#125;&#39;::integer[]))
(2 rows)
</code></pre>
<p>可以很清楚地看到分开两步，查询到clazz对应的ID后，分别查询了schools和groups，呃，不多说了，太明显了。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://dev.to/eviedently/a-rubyists-guide-to-postgresqls-explain">A Rubyist’s Guide to Postgresql’s Explain</a></p>
<p><a href="https://guides.rubyonrails.org/active_record_querying.html">Active Record Query Interface</a></p>
<p><a href="https://api.rubyonrails.org/">Ruby on Rails API</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
      </tags>
  </entry>
  <entry>
    <title>quickly start Curl</title>
    <url>/posts/quickly-start-curl/</url>
    <content><![CDATA[<p>列出常用的Curl命令以备忘。</p>
<span id="more"></span> 

<h4 id="请求页面"><a href="#请求页面" class="headerlink" title="请求页面"></a>请求页面</h4><p>默认使用get，直接在终端输出response。</p>
<pre><code class="shell"># 直接请求，此时response的内容可能会是301 Moved。
curl https://google.com

# 使用-L选项，允许重定向, 终端会输出Google首页的HTML。
curl -L https://google.com

# 使用-I， 只查看header部分, 终端将只输出Headers内容。
curl -I -L https://google.com
</code></pre>
<h4 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h4><p>将输出结果存储在文件中：</p>
<pre><code class="shell"># -O: 「 大写O 」不指定目标文件名，直接使用URL中的文件名，response保存在index.html文件中。
curl -O https://www.centos.org/index.html

# -o：「 小写o 」指定目标文件名, response保存在centos.html文件中。
curl -o centos.html https://www.centos.org

# 不使用 -o/O， 直接保存到指定文件
curl https://www.centos.org &gt; centos.html

# -z: 版本比本地指定文件版本要新时，才下载
curl -z centos.html https://www.centos.org &gt; centos.html

# 给定时间点，在该时间点之后有更新，才下载
curl -z &quot;Jan 1 2018&quot; https://www.centos.org &gt; centos.html

# -C: 从上一次下载中断的地方继续下载, -C 也可跟-T一起使用，继续上传。
curl -C -o centos.html https://www.centos.org

# 一次下载多个文件: curl -O URL1 -O URL2，建议指定目标文件名，如果都是index.html会被覆盖
curl -O https://www.centos.org/index.html -O https://github.com/index.html
</code></pre>
<h4 id="指定代理"><a href="#指定代理" class="headerlink" title="指定代理"></a>指定代理</h4><p>使用<code>-x</code>.</p>
<pre><code class="shell"># 基本格式 curl -x your-proxy:your-port URL
curl -x http://127.0.0.1:1087 https://www.youtube.com
</code></pre>
<p>这里的x为小写，大写的X有另外的意思，比如下面这个。</p>
<h4 id="指定请求"><a href="#指定请求" class="headerlink" title="指定请求"></a>指定请求</h4><p>使用<code>-X </code>指定其他请求命令</p>
<pre><code class="shell"># 指定request command为DELETE，删除某个gist
curl -X DELETE -H &quot;Authorization: token OAUTH_TOKEN&quot; https://api.github.com/gists/gist_id
</code></pre>
<h4 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h4><p>使用<code>-T</code></p>
<pre><code class="shell"># 上传通常都需要授权，使用-u，带上用户名和密码信息
curl -T uploadfile -u user:password ftp://ftp.upload.com/file

# -a : 将本地文件追加到服务器中某个文件
curl -T uploadfile -a -u user:password ftp://ftp.upload.com/file

# -C: 从上一次中断的地方继续上传
curl -C -T uploadfile -u user:password ftp://ftp.upload.com/file

# 上传多个文件:
curl -T file1 ftp://ftp.com/moo.exe -T file2 ftp://ftp.com/moo2.txt
</code></pre>
<h4 id="限制网速"><a href="#限制网速" class="headerlink" title="限制网速"></a>限制网速</h4><p>使用<code>--limit-rate</code></p>
<pre><code class="shell"># 限制下载速度不超过10KB/s
curl -O --limit-rate 10K https://www.youtube.com/index.html

# 限制上传速度不超过1MB/s
curl -T --limit-rate 1M ftp://ftp.upload.com/file
</code></pre>
<h4 id="授权访问"><a href="#授权访问" class="headerlink" title="授权访问"></a>授权访问</h4><p>涉及到用户名的部分，使用 <code>-u</code>。</p>
<p>以GitHub API的授权为例：</p>
<pre><code class="shell"># 基本授权，用户名和密码
curl -u username:password https://api.github.com

# 或者下面这种更安全，回车，终端会提示输入密码，密码不明文输入，以防浏览历史记录时泄露密码
curl -u username https://api.github.com

# 指定代理，并授权访问
curl -u username https://api.github.com -x http://127.0.0.1:1087

# OAuth2 token，作为参数
curl https://api.github.com/?access_token=OAUTH-TOKEN

# OAuth2 token，放在header中传递，使用 -H
curl -H &quot;Authorization: token OAUTH-TOKEN&quot; https://api.github.com
</code></pre>
<h4 id="存取cookies"><a href="#存取cookies" class="headerlink" title="存取cookies"></a>存取cookies</h4><p>某些场景下需要存储cookies. 比如访问GitHub:</p>
<pre><code class="shell"># 返回的header中带有Set-Cookie
curl -I https://github.com

# 部分输出
Set-Cookie: has_recent_activity=1; path=/; expires= xxxxx
Set-Cookie: logged_in=no; domain=.github.com; path=/; expires= xxxx; secure; HttpOnly
</code></pre>
<p>通常的Set-Cookie是带有sessionId=xxxx，每次访问指定的path时都要求带上sessionId。</p>
<p>保存及使用cookies：</p>
<pre><code class="shell"># 保存cookie: Netscape HTTP Cookie File
curl -c cookies.txt https://github.com

# 使用保存的cookies
curl -b cookies.txt https://github.com
</code></pre>
<h4 id="发送POST"><a href="#发送POST" class="headerlink" title="发送POST"></a>发送POST</h4><p>使用<code>-d</code> 或者<code>-F</code>.</p>
<p><code>-d</code> 使用的是application/x-www-form-urlencoded mime-type， 如果涉及到文件上传时，使用<code>-F</code>.</p>
<pre><code class="shell"># -d:&lt;data&gt;, 值为编译后的字符串，基本样式 &lt;variable1&gt;=&lt;data1&gt;&amp;&lt;variable2&gt;=&lt;data2&gt;
curl -d &quot;client_id=xxxx&amp;client_secret=yyyy&quot; https://api.github.com

# 上面同样的数据，使用-F &quot;name=contents&quot;，则是这样传
curl -F &quot;client_id=xxxx&quot; -F &quot;client_secret=yyyy&quot; https://api.github.com

# 传multipart/form-data,文件名前面要加上@
curl -F &quot;files=@file1.txt&quot; https://api.github.com

# 可传多个文件并指定文件类型，不指定时curl会根据文件后缀名来猜。
curl -F &quot;files=@file1.gif;type=image/gif, file2.html, file2.jpg&quot;
</code></pre>
<h4 id="设置User-Agent"><a href="#设置User-Agent" class="headerlink" title="设置User-Agent"></a>设置User-Agent</h4><p>使用<code>-A</code>:</p>
<pre><code class="shell"># 设置
curl -A &#39;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.96 Safari/537.36&#39; https://api.github.com
</code></pre>
<h4 id="追踪记录"><a href="#追踪记录" class="headerlink" title="追踪记录"></a>追踪记录</h4><p>使用<code>-v</code>或者 <code>--trace</code> 记录更多详细信息，个人理解为记录日志，方便在出错时debug。</p>
<pre><code class="shell"># -v：verbose，记录更多信息
curl -v https://www.google.com

# --trace: 追踪curl命令的细节
curl --trace trace.txt https://github.com
</code></pre>
<p><code>less trace.txt</code> ，查看trace的具体内容：</p>
<pre><code>== Info: Rebuilt URL to: https://github.com/
== Info:   Trying 127.0.0.1...
== Info: TCP_NODELAY set
== Info: Connected to 127.0.0.1 (127.0.0.1) port 1087 (#0)
== Info: Establish HTTP proxy tunnel to github.com:443
=&gt; Send header, 112 bytes (0x70)
0000: 43 4f 4e 4e 45 43 54 20 67 69 74 68 75 62 2e 63 CONNECT github.c
0010: 6f 6d 3a 34 34 33 20 48 54 54 50 2f 31 2e 31 0d om:443 HTTP/1.1.
0020: 0a 48 6f 73 74 3a 20 67 69 74 68 75 62 2e 63 6f .Host: github.co
0030: 6d 3a 34 34 33 0d 0a 55 73 65 72 2d 41 67 65 6e m:443..User-Agen
0040: 74 3a 20 63 75 72 6c 2f 37 2e 35 34 2e 30 0d 0a t: curl/7.54.0..
0050: 50 72 6f 78 79 2d 43 6f 6e 6e 65 63 74 69 6f 6e Proxy-Connection
0060: 3a 20 4b 65 65 70 2d 41 6c 69 76 65 0d 0a 0d 0a : Keep-Alive....
......
</code></pre>
<p>果然详细，画风有没有很Wireshark？</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://curl.haxx.se/docs/manual.html">Manual – curl usage explained</a></p>
<p><a href="https://www.cnblogs.com/gbyukg/p/3326825.html">curl 常用命令</a></p>
<p><a href="https://www.thegeekstuff.com/2012/04/curl-examples/">15 Practical Linux CURL command examples</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>CURL</tag>
      </tags>
  </entry>
  <entry>
    <title>Rails API：Header中传递pagination</title>
    <url>/posts/rails-api-expose-pagination-in-headers/</url>
    <content><![CDATA[<p>原来Header可以这么玩。</p>
<span id="more"></span> 

<h4 id="需求："><a href="#需求：" class="headerlink" title="需求："></a>需求：</h4><p>前端调用接口，需要后端返回指定页面的数据。由于之前的接口没有涉及到分页，需要做微调，前端调用接口时，传参数page。</p>
<p>比如：api/v2/users?page=2， 返回第二页的用户列表信息。</p>
<p>返回的分页信息要求放在header而不是body中。</p>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>google到的解决思路是：</p>
<p>先在服务器端设置Access-Control-Expose-Headers，让前端调用接口时，可以拿到header信息。【如果不设置，前端通过response.header拿到的就只有cache-control, content-type.】</p>
<p>然后再将需要传递的分页信息，比如pageCount, perPage塞进response的header中即可。</p>
<p>一步步来。</p>
<p>后台Rails项目中，已经安装了gem：<a href="https://github.com/cyu/rack-cors">rack-cors</a> 和 <a href="https://github.com/kaminari/kaminari">kaminari</a>, 将借用这两个gem来完成这项工作。</p>
<p>Step1:</p>
<p>查看<a href="https://github.com/cyu/rack-cors">rack-cors</a>文档，找到用于设置Access-Control-Expose-Headers的options <strong>expose</strong>。</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79ly1fz7lq4oxk0j31na0jodn9.jpg"></p>
<p>参考文档，修改Rack的配置，假定我们需要塞进header中的是：<strong>X-Pagination-Current-Page, X-Pagination-Page-Count, X-Pagination-Per-Page,  X-Pagination-Total-Count</strong>。</p>
<pre><code class="ruby">use Rack::Cors do
  allow do
    origins &#39;*&#39;
    resource &#39;/public/*&#39;,
      headers: :any,
      methods: :any
      expose: [&#39;X-Pagination-Current-Page&#39;, &#39;X-Pagination-Page-Count&#39;, &#39;X-Pagination-Per-Page&#39;, &#39;X-Pagination-Total-Count&#39;]
  end
end
</code></pre>
<p>重启服务器。</p>
<p>Step2:</p>
<p><a href="https://github.com/kaminari/kaminari">kaminari</a>的文档中，列出了current_page, total_pages等多个可以获取分页信息的方法。</p>
<p>以User的index 接口为例，修改<code>users_controller.rb</code>文件，在index部分的最后，添加如下代码：</p>
<pre><code class="ruby">def index
    .....
    if params[:page]
        @users = @users.page(params[:page])
        response.headers[&#39;X-Pagination-Current-Page&#39;] = @users.current_page
        response.headers[&#39;X-Pagination-Page-Count&#39;] = @users.total_pages
        response.headers[&#39;X-Pagination-Per-Page&#39;] = @users.limit_value
        response.headers[&#39;X-Pagination-Total-Count&#39;] = @users.total_count
    end
end
</code></pre>
<p>【鉴于其他接口也难免会涉及到分页，可以将这部分代码封装成一个方法，放在API的BaseController中，让所有继承该类的controllers可直接调用该方法。】</p>
<p>OK，搞定。</p>
<p>这时前端调接口，可以看到获取的header中含有pagination相关信息：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79ly1fz7lo917plj31gs0720ug.jpg"></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
        <tag>API</tag>
      </tags>
  </entry>
  <entry>
    <title>用rails new遇到的一个报错</title>
    <url>/posts/rails5-requires-ruby-2-or-newer/</url>
    <content><![CDATA[<p>使用<code>rails new </code>新开一个项目的时候，遇到的一个报错。</p>
<span id="more"></span> 

<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><pre><code>   Rails 5 requires Ruby 2.2.2 or newer.

    You&#39;re running
      ruby 2.0.0p648 (2015-12-16 revision 53162) [universal.x86_64-darwin16]

    Please upgrade to Ruby 2.2.2 or newer to continue.
</code></pre>
<p>输入：<code>ruby -v</code>，得到的版本：ruby 2.3.6p384，明明2.3.6啊！为什么说我的是ruby2.0.0？</p>
<p>我以为是有旧的ruby版本存在，终端输入：<code>rvm list</code>， 得到如下结果：</p>
<pre><code class="Shell">rvm rubies

   ruby-2.3.1 [ x86_64 ]
=* ruby-2.3.6 [ x86_64 ]
   ruby-2.4.0 [ x86_64 ]

# =&gt; - current
# =* - current &amp;&amp; default
#  * - default
</code></pre>
<p>这就很奇怪了，随后终端输入:<code>rails -v</code>， 报错，内容与rails new一样。</p>
<p>怎么回事？！</p>
<h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><p>Google到了解答， 在这里<a href="https://github.com/rails/rails/issues/27569"><code>rails new</code> fails to read my Ruby version and won’t create a new project </a></p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79ly1fpoa9x9455j30ja037js1.jpg"></p>
<p>原来rails检查的是system的ruby，先check下：</p>
<ul>
<li><p>终端输入<code>rvm system</code> ，得到</p>
<pre><code>ruby 2.0.0p648 (2015-12-16 revision 53162) [universal.x86_64-darwin16]
</code></pre>
<p>果然，是ruby2.0.0。</p>
</li>
<li><p>切换到之前的版本</p>
<pre><code>rvm use ruby-2.3.6 --default
</code></pre>
<p>OK!!!  <code>rails new yourproject</code>， 继续开始新的征程～～</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4></li>
</ul>
<p><a href="https://github.com/rails/rails/issues/27569"><code>rails new</code> fails to read my Ruby version and won’t create a new project </a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
      </tags>
  </entry>
  <entry>
    <title>使用ruby的异常处理来读取rest client中的bad request</title>
    <url>/posts/read-the-body-of-400-response-with-ruby-exception-handling/</url>
    <content><![CDATA[<p>我们在使用rest-client去发出请求时，result code是200 固然很好，但有时候我们也希望能读取到Exceptions， 例如读取result code是400bad request的response内容，怎么做？</p>
<span id="more"></span> 

<p>看个例子。</p>
<h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><p>场景：用户A想要通过接口获取到个人信息，代码如下：</p>
<pre><code class="JSON"> respoonse = RestClient.get &#39;http://example.com/myprofile?access_token=#&#123;access_token&#125;&#39;
 profile_response = JSON.parse(respoonse.body)
</code></pre>
<p>其中，如果<code>access_token</code>过期或者无效，用户希望得到这样的结果：</p>
<ul>
<li>返回 400 Bad Request</li>
<li>返回一个JSON格式的reponse body ，内容像这样：</li>
</ul>
<pre><code class="JSON">&#123;          
   &quot;code&quot;: 400,
   &quot;error&quot;: &#123;
      &quot;message&quot;: &quot;The access token could not be decrypted&quot;,
      &quot;type&quot;: &quot;OAuthException&quot;
   &#125;
&#125;
</code></pre>
<p>这时，如果你的<code>access_token</code>是过期或者无效的，终端运行的时候，会报错400 Bad Request ，但是却没有返回对应的response。</p>
<p>如何解决？</p>
<p>其实，如果你熟悉ruby的异常处理，就会发现很简单，把上述的代码改成如下：</p>
<pre><code class="JSON">body = begin
  respoonse = RestClient.get &#39;http://example.com/myprofile?access_token=#&#123;access_token&#125;&#39;
  response.body
rescue RestClient::ExceptionWithResponse  =&gt; e
  e.response.body
end

profile_response = JSON.parse(body)
</code></pre>
<p>这里，使用了<code>rescue RestClient::ExceptionWithResponse  =&gt; e </code> 获取异常对象，并赋给了变量e，通过<code>e.response.body</code>来回传需要的error信息。</p>
<p>大功告成。</p>
<p>其实，看到这里，你就明白，不仅仅是 400bad request的response内容可以读取，其他如403 Forbidden，404 not found 等的response内容也是可以依葫芦画瓢来做的。：P</p>
<h4 id="The-end"><a href="#The-end" class="headerlink" title="The end"></a>The end</h4><p>参考：</p>
<ul>
<li><a href="https://stackoverflow.com/questions/23623330/reading-the-body-of-a-400-response">Reading the body of a 400 response?</a></li>
<li><a href="https://stackoverflow.com/questions/23623330/reading-the-body-of-a-400-response">Response callbacks, error handing</a></li>
</ul>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>近期出错小记I</title>
    <url>/posts/recent-error-recording-1/</url>
    <content><![CDATA[<p>记录下近期遇到的一些问题以及所犯的低级错误，考虑每个单独写一篇内容太少，索性一锅炖。</p>
<span id="more"></span> 

<h4 id="Rspec-针对model-的attribute进行-stub"><a href="#Rspec-针对model-的attribute进行-stub" class="headerlink" title="Rspec 针对model 的attribute进行 stub"></a>Rspec 针对model 的attribute进行 stub</h4><p>一个简单的测试例子：</p>
<p>有model  Payment,  含字段channel，string 类型。</p>
<pre><code class="ruby">  it &#39;test&#39; do
    allow_any_instance_of(Payment).to receive(:channel).and_return &#39;wxpay&#39;
    a = Payment.new
    expect(a.channel).to eql &#39;wxpay&#39;
  end
</code></pre>
<p>看着没什么问题，但是终端跑测试，报错：</p>
<pre><code>Payment does not implement #channel
</code></pre>
<p>参考<a href="https://stackoverflow.com/questions/40535640/rails-rspec-allow-any-instance-of-raises-does-not-implement-error-for-activere">Rails Rspec allow_any_instance_of raises “does not implement” error for ActiveRecord object attributes</a></p>
<p>有两种解决方法：</p>
<ul>
<li>将<code>allow_any_instance_of(Payment)</code>改为 <code>allow_any_instance_of(Payment.new.class) </code> 【原因看这里<a href="https://relishapp.com/rspec/rspec-mocks/v/3-2/docs/verifying-doubles/dynamic-classes">Dynamic classes</a>】</li>
<li>改用<code>instance_double(&#39;Payment&#39;, channel: &#39;wxpay&#39;)</code> ， 替换掉<code>allow_any_instance_of .....</code></li>
</ul>
<p>修改测试代码【这里用instance_double】：</p>
<pre><code class="ruby">  it &#39;test&#39; do
    instance_double(&#39;Payment&#39;, channel: &#39;wxpay&#39;)
    # 或者 allow_any_instance_of(Payment.new.class).to receive(:channel).and_return &#39;wxpay&#39;
    a = Payment.new
    expect(a.channel).to eql &#39;wxpay&#39;
  end
</code></pre>
<p>OK，passed.</p>
<h4 id="PostgreSQL-中对array类型的attr查询"><a href="#PostgreSQL-中对array类型的attr查询" class="headerlink" title="PostgreSQL 中对array类型的attr查询"></a>PostgreSQL 中对array类型的attr查询</h4><p>场景：</p>
<p>model product 中有一属性 categories，数据类型为array.</p>
<p>现有如下数据：</p>
<pre><code> product1.categories = [&#39;aa&#39;, &#39;bb&#39;]
 product2.categories = [&#39;cc&#39;]
 product3.categories = [&#39;dd&#39;, &#39;aa&#39;] 
</code></pre>
<p>给定字符串S, 比如 ‘aa’，如何查询出Product中所有类别包含’aa’的记录？ [肉眼看出，是product1,product3]</p>
<p>在<code>product.rb</code>中的添加一个scope：</p>
<pre><code class="ruby">  scope :categroy_cont, -&gt; (categroy) &#123; where(&quot;? = ANY(categories)&quot;, categroy)&#125;
</code></pre>
<p>执行<code>Product.all.category_cont(&#39;aa&#39;)</code> 即可。</p>
<h4 id="复制整个文件夹，丢失权限和links"><a href="#复制整个文件夹，丢失权限和links" class="headerlink" title="复制整个文件夹，丢失权限和links"></a>复制整个文件夹，丢失权限和links</h4><p>之前复制了一个Rails项目，终端执行：</p>
<pre><code>bin/yarn xxxx
</code></pre>
<p>报错，显示 <strong>permission denied: bin/yarn</strong> </p>
<p>终端执行： </p>
<pre><code>ls -al bin
</code></pre>
<p>bin下面有yarn文件，但是文件属性中没有可执行的权限，, 执行：</p>
<pre><code>chmod +x bin/*
</code></pre>
<p>解决了。</p>
<p>当时只知道copy 文件的时候，文件的权限遗失，但是不知道为什么会出现这种情况。</p>
<p>后面偶然发现了原因，手贱啊，原来是自己当时手动复制了整个文件夹，然后重命名了复制的那个文件夹，结果导致新项目中的link和可执行权限全部丢失了。</p>
<p>正确的复制方式，保留link 和权限：</p>
<pre><code class="shell">cp -a fold1 fold2
</code></pre>
<p>这样复制后，得到的fold2下，所有的权限和link都不会丢失。</p>
<h4 id="git-文件名大小写"><a href="#git-文件名大小写" class="headerlink" title="git 文件名大小写"></a>git 文件名大小写</h4><p>记录下这个，纯粹是因为在大小写这个问题上踩的坑有些过分了。</p>
<p>直接使用命令：</p>
<pre><code class="shell">git mv oldfileName newfileName
</code></pre>
<p>比如文件名为Hello.rb， 修改为hello.rb:</p>
<pre><code>git mv Hello.rb hello.rb
</code></pre>
<p>或者稍微麻烦一点：</p>
<p>先将文件重命名为Hello1.rb，提交，commit，然后再重命名为hello.rb，再提交，最后将两个commit合并 rebase成一个commit。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://github.com/rspec/rspec-rails/issues/1357">Dynamic method verification fails when method stubbed using allow_any_instance_of on a class not previously instantiated</a></p>
<p><a href="https://relishapp.com/rspec/rspec-mocks/v/3-2/docs/verifying-doubles/dynamic-classes">Dynamic classes</a></p>
<p><a href="https://stackoverflow.com/questions/40535640/rails-rspec-allow-any-instance-of-raises-does-not-implement-error-for-activere">Rails Rspec allow_any_instance_of raises “does not implement” error for ActiveRecord object attributes</a></p>
<p><a href="https://blog.sundaycoding.com/blog/2017/01/22/rails-plus-postgres-array-plus-any-like/">Rails + Postgres Array + ANY LIKE</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
        <tag>PostgreSQL</tag>
        <tag>ErrorTracking</tag>
      </tags>
  </entry>
  <entry>
    <title>近期出错小记II</title>
    <url>/posts/recent-error-recording-2/</url>
    <content><![CDATA[<p>记录下近期遇到的问题及解决方法。</p>
<span id="more"></span>

<h4 id="本机ulimit设置"><a href="#本机ulimit设置" class="headerlink" title="本机ulimit设置"></a>本机ulimit设置</h4><p><strong>问题描述</strong>：</p>
<p>本地跑rspec，报错：</p>
<pre><code>Too many open files @ rb_sysopen..........
</code></pre>
<p>终端查看ulimit:「ulimit 用于显示和设置resource limits」</p>
<pre><code class="shell">ulimit -a

# 输出：
-t: cpu time (seconds)              unlimited
-f: file size (blocks)              unlimited
-d: data seg size (kbytes)          unlimited
-s: stack size (kbytes)             8192
-c: core file size (blocks)         0
-v: address space (kbytes)          unlimited
-l: locked-in-memory size (kbytes)  unlimited
-u: processes                       1418
-n: file descriptors                4864
</code></pre>
<p><strong>解决方法</strong>：</p>
<p>报错显示 too many open files, 所以扩大对文件的限制就好了。</p>
<pre><code class="shell">ulimit -n 10240

ulimit -a

# 输出：
-t: cpu time (seconds)              unlimited
-f: file size (blocks)              unlimited
-d: data seg size (kbytes)          unlimited
-s: stack size (kbytes)             8192
-c: core file size (blocks)         0
-v: address space (kbytes)          unlimited
-l: locked-in-memory size (kbytes)  unlimited
-u: processes                       1418
-n: file descriptors                10240
</code></pre>
<p>OK.</p>
<h4 id="webpacker升级的问题"><a href="#webpacker升级的问题" class="headerlink" title="webpacker升级的问题"></a>webpacker升级的问题</h4><p><strong>问题描述：</strong></p>
<p>同事升级了项目的webpacker，拉最新代码后，终端跑<code>rails c</code>, 报错：</p>
<pre><code class="ruby">error &quot;@rails/webpacker#@babel/core&quot; is wrong version: expected &quot;^7.4.5&quot;, got &quot;7.4.3&quot;
error &quot;@rails/webpacker#@babel/plugin-proposal-class-properties&quot; is wrong version: expected &quot;^7.4.4&quot;, got &quot;7.4.0&quot;
error &quot;@rails/webpacker#@babel/plugin-proposal-object-rest-spread&quot; is wrong version: expected &quot;^7.4.4&quot;, got &quot;7.4.3&quot;
error &quot;@rails/webpacker#@babel/plugin-transform-destructuring&quot; is wrong version: expected &quot;^7.4.4&quot;, got &quot;7.4.3&quot;
error &quot;@rails/webpacker#@babel/plugin-transform-regenerator&quot; is wrong version: expected &quot;^7.4.5&quot;, got &quot;7.4.3&quot;
error &quot;@rails/webpacker#@babel/plugin-transform-runtime&quot; is wrong version: expected &quot;^7.4.4&quot;, got &quot;7.4.3&quot;
error &quot;@rails/webpacker#@babel/runtime&quot; is wrong version: expected &quot;^7.4.5&quot;, got &quot;7.4.3&quot;
error &quot;@rails/webpacker#js-yaml&quot; is wrong version: expected &quot;^3.13.1&quot;, got &quot;3.12.0&quot;
error &quot;eslint#js-yaml&quot; is wrong version: expected &quot;^3.13.0&quot;, got &quot;3.12.0&quot;
error &quot;webpack-dev-server#chokidar&quot; is wrong version: expected &quot;^2.1.6&quot;, got &quot;2.1.5&quot;
error &quot;webpack-dev-server#portfinder&quot; is wrong version: expected &quot;^1.0.21&quot;, got &quot;1.0.20&quot;
.....
</code></pre>
<p><strong>解决方法</strong>：</p>
<p>刚开始是自己手动改package.json， 后面发现不对劲，越改坑越深，直接重装node_modules.</p>
<pre><code class="shell">rm -rf node_modules
yarn install
</code></pre>
<p>简单粗暴，但是有效！</p>
<h4 id="网页自适应的另一种打开方式"><a href="#网页自适应的另一种打开方式" class="headerlink" title="网页自适应的另一种打开方式"></a>网页自适应的另一种打开方式</h4><p><strong>问题描述：</strong></p>
<p>网页在部分用户的电脑上无法正常显示，准确的说，显示的页面不完整，下面的页面直接被截断了。</p>
<p><strong>解决方法：</strong></p>
<p>涉及到网页自适应问题。</p>
<p>项目用的是nuxt 的框架，第一反应是设置meta.</p>
<p>在config中，设置了meta，生成的页面中，可以看到</p>
<pre><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;
</code></pre>
<p>不过上面的问题依然存在，毛线效果都没有。</p>
<p>最后，老大用了一个我个人觉得很巧妙的方式解决了，这里简单记录下。</p>
<p>解决思路是根据 screen 的 height 和 width，设置对应的字体大小，使得整个屏幕可以完整显示。</p>
<p>具体是，在设置html的 CSS文件中，做类似如下的修改：</p>
<pre><code class="css">html &#123;
  font-size: 16px;

  @media screen and (max-height: 700px) &#123;
    font-size: 12px;
  &#125;
&#125;
..........
</code></pre>
<p>上诉代码意为：默认字体大小16px， 当浏览器窗口高度 &lt;= 700px时，设置字体大小为12px。</p>
<p>如果项目中使用了 bootstrap，可以直接使用其自带的 media breakpoint, 比如：</p>
<pre><code class="css">html &#123;
  font-size: 16px;

  @include media-breakpoint-down(&quot;lg&quot;) &#123;
    font-size: 14px;
  &#125;
  @include media-breakpoint-down(&quot;sm&quot;) &#123;
    font-size: 12px;
  &#125;
&#125;
..........
</code></pre>
<p>这方式是不是挺巧的？😄</p>
<h4 id="虚拟机访问Mac主机的本地站点"><a href="#虚拟机访问Mac主机的本地站点" class="headerlink" title="虚拟机访问Mac主机的本地站点"></a>虚拟机访问Mac主机的本地站点</h4><p><strong>问题描述：</strong></p>
<p>VM中安装了Windows10，需要在window中访问本机站点localhost:3000。「需求点在于本地这边修改了代码后，希望在虚拟机的windows10中，可以开 IE浏览器查看网页效果。」</p>
<p><strong>解决方法：</strong></p>
<p>Google后找到了解决方法，但是对其原理并不了解，这里仅附上解决方法。</p>
<p><code> ifconfig</code>查看本机Mac 的IP，比如是192.168.11.142。</p>
<p>在window虚拟机中，开cmd, 输入：</p>
<pre><code>ping 192.168.11.142
</code></pre>
<p>确保虚拟机可以访问主机。</p>
<p>「网上有很多提到修改VM网络连接配置的，但是我自己的VM默认的网络连接是NAT，所以对这块未进行任何改动。」</p>
<p>此时，打开IE，访问：<code>http://192.168.11.142:3000/</code>, 发现仍无法访问。</p>
<p>回到本机Mac，重启rails，绑定 0.0.0.0：</p>
<pre><code class="ruby">rails s -b 0.0.0.0
</code></pre>
<p>虚拟机中IE再次访问，OK。</p>
<p>嗯，enjoy yourself in the IE world.</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="http://landoflinux.com/linux_ulimit_command.html">ulimit command</a></p>
<p><a href="https://www.zhangxinxu.com/wordpress/2012/08/window-devicepixelratio/">设备像素比简单介绍</a></p>
<p><a href="https://www.w3schools.com/cssref/css3_pr_mediaquery.asp">CSS @media Rule</a></p>
<p><a href="https://getbootstrap.com/docs/4.3/layout/overview/#responsive-breakpoints">Bootstrap responsive-breakpoints</a></p>
<p><a href="https://segmentfault.com/q/1010000000095271">虚拟机如何访问Mac主机的本地站点？</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>ErrorTracking</tag>
      </tags>
  </entry>
  <entry>
    <title>近期出错小记III</title>
    <url>/posts/recent-error-recording-3/</url>
    <content><![CDATA[<p>记录下近期遇到的问题及解决方法。</p>
<span id="more"></span>
<h4 id="Nuxt-中引入-select2"><a href="#Nuxt-中引入-select2" class="headerlink" title="Nuxt 中引入 select2"></a>Nuxt 中引入 select2</h4><p>安装select2：</p>
<pre><code>yarn add select2
yarn add select2-bootstrap-theme
</code></pre>
<p>引入 css：</p>
<p>在assets/stylesheets/中添加<code>select2.scss</code>:</p>
<pre><code>@import &#39;select2/dist/css/select2.css&#39;;
@import &#39;select2-bootstrap-theme/dist/select2-bootstrap.css&#39;;
</code></pre>
<p>在<code>nuxt.config.js</code>文件中，css部分添加：</p>
<pre><code>  css: [
      ......
    &#39;~assets/stylesheets/select2.scss&#39;,
    .....
  ]  
</code></pre>
<p>新增组件<code>Select2.vue</code>:</p>
<pre><code class="vue">&lt;template&gt;
  &lt;select id=&quot;select2&quot; :name=&quot;name&quot; multiple=&quot;multiple&quot;&gt;
    &lt;option v-for=&quot;item in items&quot; :key=&quot;item.id&quot; :value=&quot;getValue(item)&quot;&gt;&#123;&#123; getLabel(item) &#125;&#125;&lt;/option&gt;
  &lt;/select&gt;
&lt;/template&gt;

&lt;script&gt;
import $ from &#39;jquery&#39;
import select2 from &#39;select2&#39;

export default &#123;
  props: &#123;
    items: &#123; required: true &#125;,
    name: &#123; required: true &#125;,
    valueMethod: &#123; default: &#39;id&#39; &#125;,
    labelMethod: &#123; default: &#39;name&#39; &#125;
  &#125;,
  mounted() &#123;
    $(this.$el).select2(&#123;
      theme: &quot;bootstrap&quot;
    &#125;)
  &#125;,
  methods: &#123;
    getValue(obj) &#123;
      return _.result(obj, this.valueMethod)
    &#125;,
    getLabel(obj) &#123;
      return _.result(obj, this.labelMethod)
    &#125;
  &#125;
&#125;
&lt;/script&gt;
</code></pre>
<h4 id="rails-迁移-array-类型数据"><a href="#rails-迁移-array-类型数据" class="headerlink" title="rails 迁移 array 类型数据"></a>rails 迁移 array 类型数据</h4><p>问题描述：</p>
<p>数据库PG，添加 array 类型， 迁移数据:</p>
<pre><code class="ruby">class Poem &lt; ActiveRecord::Base; end
def change
    change_table :poems do |t|
        t.string :content, array: true, default: []
    end

    Poem.update_all(content: [ &quot;test&quot; ])
end
</code></pre>
<p><code>rake db:migrate</code> 时 ，一直报错：can’t quote Array.</p>
<p>解决方法：</p>
<p>使用类方法： <a href="https://apidock.com/rails/ActiveRecord/Base/reset_column_information/class">reset_column_information</a></p>
<p>修改上面的migration代码：</p>
<pre><code class="ruby">class Poem &lt; ActiveRecord::Base; end
def change
    change_table :poems do |t|
        t.string :content, array: true, default: []
    end

    Poem.reset_column_information
    Poem.update_all(content: [ &quot;test&quot; ])
end
</code></pre>
<p>ok.</p>
<h4 id="SSH-AuthenticationFailed"><a href="#SSH-AuthenticationFailed" class="headerlink" title="SSH AuthenticationFailed"></a>SSH AuthenticationFailed</h4><p>问题描述：</p>
<p>远端ssh 正常登录服务器，但是部署的时候，执行报错：</p>
<pre><code class="shell">cap staging deploy:check

Caused by:
Net::SSH::AuthenticationFailed: Authentication failed for user deploy@118.190.xxx.xxx
</code></pre>
<p>终端：</p>
<pre><code class="shell">ssh deploy@118.190.xxx.xxx
</code></pre>
<p>正常登录。</p>
<p>解决方法：</p>
<p>Google一圈，参考<a href="https://stackoverflow.com/questions/41369406/netsshauthenticationfailed-authentication-failed-for-user">Net::SSH::AuthenticationFailed: Authentication failed for user</a> 。</p>
<p>服务器执行：</p>
<pre><code>ssh-add -l
</code></pre>
<p>显示：</p>
<pre><code>The agent has no identities.
</code></pre>
<p>执行：</p>
<pre><code>ssh-add -k ~/.ssh/authorized_keys
</code></pre>
<p>显示：</p>
<pre><code>@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@         WARNING: UNPROTECTED PRIVATE KEY FILE!          @
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Permissions 0644 for &#39;/home/deploy/.ssh/authorized_keys&#39; are too open.
It is required that your private key files are NOT accessible by others.
This private key will be ignored.
</code></pre>
<p>执行：</p>
<pre><code class="shell">sudo chmod 600 ~/.ssh/authorized_keys
ssh-add -k ~/.ssh/authorized_keys
</code></pre>
<p>报错：</p>
<pre><code>Error loading key &quot;/home/deploy/.ssh/authorized_keys&quot;: invalid format
</code></pre>
<p>玩伤。</p>
<p>最后奇葩的解决方法竟然是：</p>
<p> 本地 <code>vi ~/.ssh/config</code>, 添加 host:</p>
<pre><code>Host space
  HostName 118.190.xxx.xxx
  User deploy
  IdentityFile ~/.ssh/id_rsa
  AddKeysToAgent yes
</code></pre>
<p>再次执行：</p>
<pre><code>cap staging deploy:check
</code></pre>
<p>OK了「但不知道为什么就突然好了，应该是修改文件权限的功劳……」</p>
<h4 id="Vim-register"><a href="#Vim-register" class="headerlink" title="Vim register"></a>Vim register</h4><p>Vim  中的 register 用来存储信息。</p>
<blockquote>
<p>Vim uses it registering commands you enter, files you open, text you input, etc. What vim does is to save all this data on a <code>.viminfo</code> file.</p>
</blockquote>
<p>register 有几种，在 command mode 下使用 <code>:help registers</code>可以查看。</p>
<p>说其中两种。</p>
<ul>
<li><p>unnamed register</p>
<p>匿名寄存器，d,c,s,x 被删除的字符会存在匿名寄存器，所以 insert mode下使用<code>&lt;Ctrl+r&gt; + &quot;</code> 会粘贴上一步删除的字符。</p>
</li>
<li><p>26 named registers</p>
<p>命名的register，register的名字是<code>a-z</code> 或者 <code>A-Z</code> 中的任意一个。</p>
<p>比如normal mode 下，复制光标所在位置一行的内容，放到register d 中：</p>
<pre><code>&quot;dyy
</code></pre>
<p>下次粘贴时， normal mode下：</p>
<pre><code>&quot;dp
</code></pre>
<p>如果想要在register d 中追加内容，可以使用D。</p>
<pre><code>&quot;Dyy
</code></pre>
<p>会将该行追加到register d 中，下次粘贴时，会是追加了新内容的register d。</p>
</li>
</ul>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://apidock.com/rails/ActiveRecord/Base/reset_column_information/class">reset_column_information</a></p>
<p><a href="https://stackoverflow.com/questions/41369406/netsshauthenticationfailed-authentication-failed-for-user">Net::SSH::AuthenticationFailed: Authentication failed for user</a></p>
<p><a href="https://medium.com/vim-drops/vim-registers-the-powerful-native-clipboard-19b1c97891bd">Vim Registers, The Powerful Native Clipboard!</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>ErrorTracking</tag>
      </tags>
  </entry>
  <entry>
    <title>Rails中同一个model被两次引用</title>
    <url>/posts/reference-the-same-model-twice/</url>
    <content><![CDATA[<p>呃，感觉标题有点不够精确，不过暂时没想到合适的词语去描述，先将就着。</p>
<span id="more"></span> 

<h4 id="场景："><a href="#场景：" class="headerlink" title="场景："></a>场景：</h4><p>现有一个model：group群组，一个model： user用户，每一个群组被一个user创建，每一个user可以创建多个group，很明显，两者之间是一对多关系。现在每个group可以添加一个管理员，管理员与group也是一对多的关系，而群组group的管理员和创建人都来自user这个model。</p>
<p>也就是说，user这个model需要两次被引用，group与user之间建立了两个一对多的关联。</p>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>分两种情况：</p>
<ul>
<li>如果是新建一个项目，不涉及到数据迁移部分，可以参考<a href="https://www.sitepoint.com/community/t/referencing-the-same-model-twice-in-rails/254243">Referencing the same model twice in Rails?</a> 完成。</li>
<li>model已经建立，group与user之间建立了一对多的关系，同时group有一个外键是user_id, 这个外键的约束来自user。</li>
</ul>
<p>针对后者说一下具体的解决方法。</p>
<p>分两步：</p>
<ul>
<li><p>给group添加两个字段creator_id，admin_id，作为reference，同时与user建立一对多的关联</p>
</li>
<li><p>迁移数据，将user_id的数据迁移给到creator_id，同时删除user_id</p>
</li>
</ul>
<p>好，一步步来。</p>
<p>目前的group表结构如下：</p>
<pre><code class="Ruby">groups：
  string   &quot;title&quot;
  text     &quot;description&quot;
  datetime &quot;created_at&quot;,  null: false
  datetime &quot;updated_at&quot;,  null: false
  bigint  &quot;user_id&quot;
  index [&quot;user_id&quot;], name: &quot;index_groups_on_user_id&quot;
</code></pre>
<p>用户部分使用devise生成了user model。</p>
<p><strong>第一步：给group添加字段，重新生成一对多关联</strong></p>
<p>终端执行：</p>
<pre><code>rails g migration add_creator_and_admin_to_group
</code></pre>
<p>在新生成的migration表中，添加如下内容：</p>
<pre><code class="Ruby">class AddCreatorAndAdminToGroup &lt; ActiveRecord::Migration[5.0]
  def change
    add_reference :groups, :creator
    add_reference :groups, :admin
    add_foreign_key :groups, :users, column: :creator_id, primary_key: :id
    add_foreign_key :groups, :users, column: :admin_id, primary_key: :id
  end
end
</code></pre>
<p>终端执行：</p>
<pre><code>rake db:mgirate
</code></pre>
<p>这里为group添加了两个reference, creator_id, admin_id，同时通过add_foreign_key，将creator_id，admin_id指定成外键。</p>
<p>在<code>app/models/group.rb</code>中，添加:</p>
<pre><code class="Ruby">class Group &lt; ApplicationRecord
  ......
  belongs_to :creator, class_name: &#39;User&#39;
  belongs_to :admin, class_name: &#39;User&#39;, optional: true
end
</code></pre>
<p>这里对于admin添加了<code>optional: true</code>，这样创建group的时候，不必指定admin。</p>
<p>在<code>app/models/user.rb</code>中，添加:</p>
<pre><code class="Ruby">class User &lt; ApplicationRecord
  ......
  has_many :created_groups, class_name: &#39;Group&#39;, foreign_key: &#39;creator_id&#39;
  has_many :admined_groups, class_name: &#39;Group&#39;, foreign_key: &#39;admin_id&#39;
end
</code></pre>
<p>此时<code>rails c</code> 进入rails控制台， 可以检查下刚刚创建的关系是否成功。</p>
<pre><code class="Ruby">User.create(email: &quot;admin@mail.com&quot;, password: &quot;123456&quot;, password_confirmation: &quot;123456&quot;)
=&gt;  #&lt;User id: 2, email: &quot;admin@mail.com&quot;, created_at: &quot;2018-06-09 05:43:58&quot;, updated_at: &quot;2018-06-09 05:43:58&quot;&gt;

User.create(email: &quot;creator@mail.com&quot;, password: &quot;123456&quot;, password_confirmation: &quot;123456&quot;)

=&gt; #&lt;User id: 3, email: &quot;creator@mail.com&quot;, created_at: &quot;2018-06-09 05:44:17&quot;, updated_at: &quot;2018-06-09 05:44:17&quot;&gt;

a = Group.new(title: &quot;rubyist&quot;, description: &quot;for search&quot;)
=&gt; #&lt;Group:0x007ff3d0a04030
 id: nil,
 title: &quot;rubyist&quot;,
 description: &quot;for search&quot;,
 created_at: nil,
 updated_at: nil,
 user_id: nil,
 creator_id: nil,
 admin_id: nil&gt;

 a.user = User.last
=&gt; #&lt;User id: 3, email: &quot;creator@mail.com&quot;, created_at: &quot;2018-06-09 05:44:17&quot;, updated_at: &quot;2018-06-09 05:44:17&quot;&gt;

 a.creator = User.last
=&gt; #&lt;User id: 3, email: &quot;creator@mail.com&quot;, created_at: &quot;2018-06-09 05:44:17&quot;, updated_at: &quot;2018-06-09 05:44:17&quot;&gt;

a.admin = User.find(2)
=&gt; #&lt;User id: 2, email: &quot;admin@mail.com&quot;, created_at: &quot;2018-06-09 05:43:58&quot;, updated_at: &quot;2018-06-09 05:43:58&quot;&gt;

a.save
=&gt; true

User.last.created_groups
=&gt; [#&lt;Group:0x007ff3ce0a3ee8
  id: 5,
  title: &quot;rubyist&quot;,
  description: &quot;for search&quot;,
  created_at: Sat, 09 Jun 2018 05:47:49 UTC +00:00,
  updated_at: Sat, 09 Jun 2018 05:47:49 UTC +00:00,
  user_id: 3,
  creator_id: 3,
  admin_id: 2&gt;]

User.second.admined_groups
=&gt; [#&lt;Group:0x007ff3cd61ff80
  id: 5,
  title: &quot;rubyist&quot;,
  description: &quot;for search&quot;,
  created_at: Sat, 09 Jun 2018 05:47:49 UTC +00:00,
  updated_at: Sat, 09 Jun 2018 05:47:49 UTC +00:00,
  user_id: 3,
  creator_id: 3,
  admin_id: 2&gt;]
</code></pre>
<p>OK! 基本功能实现。下面我们将user_id的数据赋给creator_id，同时删除掉user_id这个外键。</p>
<p><strong>第二步：数据迁移</strong></p>
<p>没有迁移前，进<code>rails c</code> ， 查看Group的第一个record：</p>
<pre><code class="ruby">Group.first
&gt; #&lt;Group:0x007ff3d093d9d0
 id: 3,
 title: &quot;group1&quot;,
 description: &quot;groups&quot;,
 created_at: Sat, 09 Jun 2018 05:46:29 UTC +00:00,
 updated_at: Sat, 09 Jun 2018 05:46:29 UTC +00:00,
 user_id: 1,
 creator_id: nil,
 admin_id: nil&gt;
</code></pre>
<p>可以看到creator_id此时为nil， user_id 为1。我们需要把user_id给到creator_id。</p>
<p>终端执行：</p>
<pre><code>rails g migration remove_user_id_on_group
</code></pre>
<p>在新生成的migration表中，添加如下内容：</p>
<pre><code class="Ruby">class RemoveUserIdOnGroup &lt; ActiveRecord::Migration[5.0]
  class Group &lt; ActiveRecord::Base
  end
  def change
    Group.where.not(user_id: nil).find_each do |g|
      g.update(creator_id: g.user_id)
    end
    remove_foreign_key :groups, column: :user_id
  end
end
</code></pre>
<p>终端执行：</p>
<pre><code>rake db:mgirate
</code></pre>
<p>这样数据就迁移过来了，同时group的外键user_id也被删除了。</p>
<p>进<code>rails console</code> 看看：</p>
<pre><code class="Ruby">Group.first
&gt; #&lt;Group:0x007ff3d093d9d0
 id: 3,
 title: &quot;group1&quot;,
 description: &quot;groups&quot;,
 created_at: Sat, 09 Jun 2018 05:46:29 UTC +00:00,
 updated_at: Sat, 09 Jun 2018 06:05:24 UTC +00:00,
 creator_id: 1,
 admin_id: nil&gt;
</code></pre>
<p>可以看到数据已经成功迁移了。</p>
<p>但是，还没有完，需要清理下代码。</p>
<p>在<code>app/models/group.rb</code>中，删除<code>belongs_to :user</code></p>
<p>在<code>app/models/user.rb</code>中，删除<code>has_many :groups</code></p>
<p>在<code>app/controllers/groups_controller.rb</code> 与group对应的views中，将user更换成creator。</p>
<p>OK！ 完成 ：）</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://stackoverflow.com/questions/2057210/ruby-on-rails-reference-the-same-model-twice/10260455#10260455">Ruby on rails - Reference the same model twice?</a></p>
<p><a href="https://www.sitepoint.com/community/t/referencing-the-same-model-twice-in-rails/254243">Referencing the same model twice in Rails?</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
      </tags>
  </entry>
  <entry>
    <title>remove the app stuck in &quot;waiting&quot; mode</title>
    <url>/posts/remove-app-stuck-in-waiting-mode/</url>
    <content><![CDATA[<p>Mac上遇到的一个小麻烦。</p>
<span id="more"></span> 

<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>在App Store上下载应用一个doc应用，在launchpad中一直显示waiting：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fq5esqd9uaj309k04t3yh.jpg"></p>
<p>Google后，尝试了三种方法：</p>
<ul>
<li><p>有人指出可以长按应用直到抖动，会出现 X按钮，在弹出的窗口中，点击delete即可。</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fq5eudzhvej30ep06jq37.jpg"></p>
<p>乖乖照做，可惜一点效果也没有，还是waiting……</p>
</li>
</ul>
<ul>
<li><p>去App Store找到该应用，发现它的状态显示install，即可以install，于是点击了install，想着会不会重新安装，结果继续卡，依然waiting……</p>
</li>
<li><p>终端运行：<code>pkill -9 storeagent storedownloadd</code>， 终止了进程storeagent,  storedownloadd，查看launchpad，依然还在，稳稳地waiting着……</p>
<p>怎么解决？</p>
</li>
</ul>
<h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><p>关机重启。是的，就这么简单，restart 。</p>
<p>事后想了想，应该是我前面删除app有效，只是Mac没那么迅速地反应，launchpad依然显示状态是waiting而已。重启后，launchpad中就没有waiting的app了。</p>
<p>果然，重启治百病。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://apple.stackexchange.com/questions/54441/how-to-remove-an-app-stuck-in-waiting-mode-from-the-mac-app-store">How to remove an app stuck in “waiting” mode from the Mac App Store?</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在Rails中切换不同主题的show页面？</title>
    <url>/posts/render-different-show-pages-in-ruby-on-rails/</url>
    <content><![CDATA[<p>换个主题，生活如此多彩。</p>
<span id="more"></span> 

<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>场景是这样的：</p>
<p>有model project，要求project的show页面可以切换不同的主题，比如主题1，主题2。</p>
<p>类似这样：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fo70rntbj5g30sa07wt9s.gif"></p>
<p>貌似很简单，切换页面而已。不过rails中，project 的show页面只有一个<code>show.html.erb</code>， 你可能想到替换部分的页面，加上ajax特效来实现，如果你这么想，那先恭喜你！你已成功入坑！你要给按钮的点击行为添加method，点击时，将需要切换的主题参数传递给controller，然后controller根据这个来决定替换哪个主题页面。</p>
<p>为了不刷新页面就完成切换，你需要用上ajax，而对于保存页面主题这块， 你可能会想到给project添加个字段theme啥的，用来判断该切换到哪一部分……好吧，其实不用这么复杂。「这些我踩过的坑就不要再踩了， 整个过程会让你想多灌自己两听可乐……」</p>
<h4 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h4><p>其实，仔细想想，就是render到不同的show页面，动两处就好了。</p>
<p>我们假定在app/views/projects下， 两个主题对应的页面分别是<code>theme1.html.erb</code>，  <code>theme2.html.erb</code>。</p>
<p>两步走。</p>
<p>一、project 的controller中show部分：</p>
<p>在<code>projects_controller.rb</code>文件中，在show部分，添加如下内容：</p>
<pre><code class="Ruby">class ProjectsController &lt; ApplicationController
  .......
  def show
    .......
    theme = params[:theme]
    if theme == &quot;theme2&quot;
      render &#39;theme2&#39;
    else
      render &#39;theme1&#39;
    end
  end
....
end
</code></pre>
<p>二、 <strong>所有跳转到project show页面的按钮，都添加一个参数：theme</strong>。比如在<code>theme1.html.erb</code>中的button部分：</p>
<pre><code class="html">.....
&lt;span class=&quot;btn btn-info pull-right&quot;&gt;
   &lt;%= link_to(&quot;切换到主题2&quot;, project_path(@project, theme: &quot;theme2&quot;)) %&gt;
&lt;/span&gt;
......          
</code></pre>
<p> <code>theme2.html.erb</code>的button部分与之类似：</p>
<pre><code class="Html">.....
&lt;span class=&quot;btn btn-info pull-right&quot;&gt;
   &lt;%= link_to(&quot;切换到主题1&quot;, project_path(@project, theme: &quot;theme1&quot;)) %&gt;
&lt;/span&gt;
......   
</code></pre>
<p>其他需要跳转到show 页面的link都做这样的处理，至于theme的值，如果你的默认主题是theme1， 则取默认主题即可。</p>
<p>超级简单有没有？！</p>
<p>你可能会问，为什么会想到这个解决方法？</p>
<p>启发来自这里：👇</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fo70blzaw1j30kq0aswfp.jpg"></p>
<p>虽然只有一个vote，但是不妨碍它好用啊！点赞Ankit Pandey.</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://stackoverflow.com/questions/43558477/render-different-show-pages-with-category-in-ruby-on-rails">render different show pages with category in ruby on rails</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
      </tags>
  </entry>
  <entry>
    <title>Rails中如何给action设置特定的layout？</title>
    <url>/posts/rendering-layout-for-special-action/</url>
    <content><![CDATA[<p>render action with custom layout page.</p>
<span id="more"></span> 

<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>默认情况下，controller 中action的layout都是<code>application.html.erb</code>，也可以统一更换，在controller中，添加：</p>
<pre><code class="Ruby">layout &#39;my_layout&#39;
</code></pre>
<p>现在假定，针对action new，需要使用layout：my_layout， 其他的actions都采用application, 如何实现？</p>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>我曾一厢情愿地以为应该可以这样， 在controller中添加如下语句👇：</p>
<pre><code class="Ruby">layout &#39;my_layout&#39;, :only =&gt; :new
</code></pre>
<p>显然，一厢情愿的结果常常都面临着悲剧。</p>
<p>正确的脱坑方式是这样的👇：</p>
<p>在controller中定义一个private method， 然后在该method中进行设置：</p>
<pre><code class="Ruby">layout :my_layout
.....

 private

def my_layout
    params[:action] == &#39;new&#39; ? &#39;my_layout&#39; : &#39;application&#39;
end
</code></pre>
<p>如果是指定的多个action都是my_layout呢？</p>
<p>这么设置：</p>
<pre><code class="Ruby">layout :my_layout
.....

 private

def my_layout
    %w[action1 action2 action3……].include?params[:action] ? &#39;my_layout&#39; : &#39;application&#39;
end
</code></pre>
<p>Ok。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://stackoverflow.com/questions/9903261/rendering-layout-for-specific-actions">Rendering Layout for specific actions</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
      </tags>
  </entry>
  <entry>
    <title>清除PG table column 中的 non break space</title>
    <url>/posts/replace-no-break-space-in-postgresql/</url>
    <content><![CDATA[<p>清除PG cell中的 non break space.</p>
<span id="more"></span>

<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>Postgresql 10.4.</p>
<p>现有 table posters， 含 column content_html， content_html 中可能包含类似<code>&lt;td&gt;&amp;nbsp;&lt;/td&gt;</code>的内容。需要移除该column中的出现的non-break space，但该column 关联其他的attribute，不能直接使用replace来修改，需要先找到对应的poster记录，然后一并修改。</p>
<p>尝试查找对应记录：</p>
<pre><code class="ruby">Poster.where(&quot;content_html LIKE ?&quot;, &#39;%&amp;nbsp;%&#39;)
</code></pre>
<p>无效。</p>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>Google后尝试：</p>
<pre><code class="ruby">Poster.where(&quot;content_html LIKE ?&quot;, &quot;%\xc2\xa0%&quot;)
</code></pre>
<p>看stack overflow上<a href="https://stackoverflow.com/questions/36849886/replacing-nonbreaking-spaces-a0-in-postgres">Replacing nonbreaking spaces (%A0) in Postgres</a>，有人说该方法无效，可能是PG版本问题？PG 10.4是可以的。</p>
<p>或者改用Unicode characters：</p>
<pre><code class="ruby">Poster.where(&quot;content_html LIKE ? OR content_html LIKE ?&quot;, &quot;%\u00a0%&quot;, &quot;%\u2002%&quot;)
</code></pre>
<p>更新时，使用:</p>
<pre><code class="ruby">poster.content_html.tr(&quot;%\xc2\xa0%&quot;, &quot; &quot;)
# or
poster.content_html.tr(&quot;%\u00a0%&quot;, &quot; &quot;)
poster.content_html.tr(&quot;%\u2002%&quot;, &quot; &quot;)
</code></pre>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://stackoverflow.com/questions/36849886/replacing-nonbreaking-spaces-a0-in-postgres">Replacing nonbreaking spaces (%A0) in Postgres</a></p>
<p><a href="%5Bhttp://www.fileformat.info/info/unicode/category/Zs/list.htm%5D(http://www.fileformat.info/info/unicode/category/Zs/list.htm)">Unicode Characters in the ‘Separator, Space’ Category</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
        <tag>PostgreSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Rspec basic</title>
    <url>/posts/rspec-basic/</url>
    <content><![CDATA[<p>Rspec是Ruby社区流行的测试框架之一，另一个是Minetest。</p>
<span id="more"></span> 

<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>RSpec包含：</p>
<blockquote>
<p> respec-core</p>
<p>respec-expectations</p>
<p>rspec-mocks</p>
<p>rspec-rails</p>
<p>rspec-support</p>
</blockquote>
<p>安装了rspec后，在终端执行：<code>rspec --version</code>，可以看到每个部分的版本。</p>
<p>对于RSpec框架，Rails项目里面用的比较多的是Rspec-rails。</p>
<p>最佳效果：写最少的测试，测最多的东西。</p>
<h4 id="基本结构："><a href="#基本结构：" class="headerlink" title="基本结构："></a>基本结构：</h4><p>最简单的一个场景一个例子:</p>
<p>describe/it:</p>
<pre><code class="Ruby">RSpec.describe &quot;something&quot; do
  it &quot;does something&quot; do
  end
end
</code></pre>
<p>嵌套:</p>
<pre><code class="Ruby">RSpec.describe &quot;something&quot; do
  context &quot;in one context&quot; do
    it &quot;does one thing&quot; do
    end
  end

  context &quot;in another context&quot; do
    it &quot;does another thing&quot; do
    end
  end
end
</code></pre>
<p>在测试前，通常需要创建测试数据，一般会在每个测试案例中单独创建，也可以借助before【hook methods】来简化，减少重复创建。before调用有两种形式：</p>
<ul>
<li>before(:each, &amp;block) - default mode</li>
<li>before(:all, &amp;block)</li>
</ul>
<p>使用before(:each )  创建的测试数据，在每个测试结束后都会回滚，即每个测试里面的数据都是独立的。每次执行context前，都会重新执行一次before(:each)，而before(:all) 只执行一次，被这个describe／context下的所有it公用。使用before(:all)时，建议配after(:all) 来清空数据，保证多个describe之间的独立性，同时使用before(:each) 来重新加载数据，以获取最新的数据。</p>
<p>比如：</p>
<pre><code class="Ruby">before(:all) do
  @widget = Widget.create!
end

before(:each) do
  @widget.reload
end

after(:all) do
  @widget.destroy
end
</code></pre>
<h4 id="Shared-examples"><a href="#Shared-examples" class="headerlink" title="Shared examples"></a>Shared examples</h4><p>shared_examples 是Rspec的类方法，用于定义class 或者 module的行为，shared的含义就是共享，个人的理解是把多个测试中，重合度高的地方抽出来，封装起来，类似于include module，在module中定义常用方法，每个类include 该module后，就拥有了该module的实例方法。</p>
<p>可以使用以下四种方式来将定义的shared_examples include到context中：</p>
<pre><code class="Ruby">include_examples &quot;name&quot;      # include the examples in the current context
it_behaves_like &quot;name&quot;       # include the examples in a nested context
it_should_behave_like &quot;name&quot; # include the examples in a nested context
matching metadata            # include the examples in the current context
</code></pre>
<p>备注：metadata是什么？describe的部分常会看到 type: :model，这个就是RSpec metadata.【官网中举了相关的例子，还不是很懂】</p>
<p>看个官方的例子：</p>
<pre><code class="ruby">require &quot;set&quot;

RSpec.shared_examples &quot;a collection&quot; do
  let(:collection) &#123; described_class.new([7, 2, 4]) &#125;

  context &quot;initialized with 3 items&quot; do
    it &quot;says it has three items&quot; do
      expect(collection.size).to eq(3)
    end
  end

  describe &quot;#include?&quot; do
    context &quot;with an item that is in the collection&quot; do
      it &quot;returns true&quot; do
        expect(collection.include?(7)).to be_truthy
      end
    end

    context &quot;with an item that is not in the collection&quot; do
      it &quot;returns false&quot; do
        expect(collection.include?(9)).to be_falsey
      end
    end
  end
end

RSpec.describe Array do
  it_behaves_like &quot;a collection&quot;
end

RSpec.describe Set do
  it_behaves_like &quot;a collection&quot;
end
</code></pre>
<p>带参数的shard_example:</p>
<pre><code class="Ruby">RSpec.shared_examples &quot;a measurable object&quot; do |measurement, measurement_methods|
  measurement_methods.each do |measurement_method|
    it &quot;should return #&#123;measurement&#125; from ##&#123;measurement_method&#125;&quot; do
      expect(subject.send(measurement_method)).to eq(measurement)
    end
  end
end

RSpec.describe Array, &quot;with 3 items&quot; do
  subject &#123; [1, 2, 3] &#125;
  it_should_behave_like &quot;a measurable object&quot;, 3, [:size, :length]
end

RSpec.describe String, &quot;of 6 characters&quot; do
  subject &#123; &quot;FooBar&quot; &#125;
  it_should_behave_like &quot;a measurable object&quot;, 6, [:size, :length]
end
</code></pre>
<p>也可以在context中定义shared_examples，然后在该context中调用，注意，可将context看作是一个作用域，出了这个context，则不能调用定义在该context 中的shared_examples：</p>
<pre><code class="Ruby">RSpec.describe &quot;shared examples&quot; do
  context &quot;per context&quot; do

    shared_examples &quot;shared examples are nestable&quot; do
      it &#123; expect(true).to eq true &#125;
    end

    it_behaves_like &quot;shared examples are nestable&quot;
  end
end
</code></pre>
<p>如果在另一个context中调用，则会报错：</p>
<pre><code class="Ruby">RSpec.describe &quot;shared examples&quot; do
  context &quot;per context&quot; do

    shared_examples &quot;shared examples are nestable&quot; do
      it &#123; expect(true).to eq true &#125;
    end
  end

  context &quot;another context&quot; do
    it_behaves_like &quot;shared examples are nestable&quot;
  end
end
</code></pre>
<h4 id="Shared-context"><a href="#Shared-context" class="headerlink" title="Shared context"></a>Shared context</h4><p>shared_context顾名思义，将多个context中共用的部分抽出来，定义成method来反复调用。</p>
<p>调用已定义好的shared_context的方式有两种，一是include_context，而是metadata。</p>
<p>看一段简单的例子，先定义一个shared_context:</p>
<pre><code class="Ruby">### one describe
RSpec.describe &quot;somethings 1&quot; do
 context &quot;context 1&quot; do
   let(:a) &#123; create :a &#125;
   let(:b) &#123; create :b &#125;
   let(:c) &#123; create :c &#125;
   let(:d) &#123; create :d &#125;
   ........ # do something
 end
end

### another describe

RSpec.describe &quot;somethings 2&quot; do
 context &quot;context 2&quot; do
   let(:a) &#123; create :a &#125;
   let(:b) &#123; create :b &#125;
   let(:c) &#123; create :c &#125;
   let(:d) &#123; create :d &#125;
   ........ # do something
 end
end
</code></pre>
<p>使用shared_context简化，定义shared_context :</p>
<p>在spec/support下定义一个文件，比如shared_context.rb：</p>
<pre><code class="Ruby">RSpec.shared_context &quot;shared data&quot; do
  let(:a) &#123; create :a &#125;
  let(:b) &#123; create :b &#125;
  let(:c) &#123; create :c &#125;
  let(:d) &#123; create :d &#125;
end
</code></pre>
<p>简化之前的测试：</p>
<pre><code class="Ruby">### one describe
RSpec.describe &quot;somethings 1&quot; do
  context &quot;context 1&quot; do
    include_context &quot;shared data&quot;
    ........ # do something
  end
end

### another describe

RSpec.describe &quot;somethings 2&quot; do
  context &quot;context 2&quot; do
    include_context &quot;shared data&quot;
    ........ # do something
  end
end
</code></pre>
<p>如果使用metadata，如何调用？参考官网的例子，需要修改下刚刚创建的这个shared_data.rb文件：</p>
<pre><code class="Ruby">RSpec.configure do |rspec|
  rspec.shared_context_metadata_behavior = :apply_to_host_groups ## 用于设置metadata调用后的作用域
end

RSpec.shared_context &quot;shared data&quot;, :shared_context =&gt; :metadata do
  let(:a) &#123; create :a &#125;
  let(:b) &#123; create :b &#125;
  let(:c) &#123; create :c &#125;
  let(:d) &#123; create :d &#125;
end

RSpec.configure do |rspec|
  rspec.include_context &quot;shared data&quot;, :include_shared =&gt; true
end
</code></pre>
<p>那么上面的例子，就可以这样调用了：</p>
<pre><code class="Ruby">### one describe
RSpec.describe &quot;somethings 1&quot;, :include_shared =&gt; true do
  context &quot;context 1&quot; do
    ........ # do something
  end
end

### another describe

RSpec.describe &quot;somethings 2&quot;, :include_shared =&gt; true do
  context &quot;context 2&quot; do
    ........ # do something
  end
end
</code></pre>
<p>看到这里，说一下shared_context与shared_example的区别，一个是context层面，一个是class／module层的，如果多个describe中，含有重合度高的context／describe，那么用shared_example来抽出共同的行为进行简化，如果是在多个context中，含有重合度高的代码，比如新建各种测试数据等，更偏向setup，则使用shared_context。</p>
<h4 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h4><ul>
<li><p><strong>测试数据重置：</strong></p>
<p>使用gem：database_rewinder</p>
<p>配置rewinder：</p>
<pre><code class="ruby"># spec/support/rspec_helper.rb
RSpec.configure do |config|
  config.before :suite do
    DatabaseRewinder.clean_all
  end

  config.after :each do
    DatabaseRewinder.clean
  end
end
</code></pre>
</li>
<li><p><strong>Shoulda-matchers</strong></p>
<p>使用Shoulda-matchers 来测试关联和验证：</p>
<pre><code class="ruby">require &#39;rails-helper&#39;

descirbe User do
  it &#123; should has_many(:posts).dependent(:destroy) &#125;
  it &#123; should has_many(:groups).through(:groupships) &#125;
  it &#123; should validate_presence_of :name &#125;
end
</code></pre>
</li>
<li><p><strong>is_expected vs expect</strong></p>
<p>is_expected 等价于expect(subject)</p>
<p>比如下面这个例子：</p>
<pre><code class="Ruby">it &#123; is_expected.to validate_presence_of(:title) &#125;

# equals to

it &#123; expect(subject).to validate_presence_of(:title) &#125;
</code></pre>
<p> RSpec测试缺省都有一个subject，值为described_class.new，而descirbed_class 是对应需要测试的class的实例，可以当成ruby中的self，如果是model，则是model.new, controller,则是controller.new。</p>
</li>
</ul>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://relishapp.com/rspec/rspec-core/v/3-8/docs/example-groups/shared-examples">rspec-core v 3.8</a></p>
<p>注：代码部分基本取自官网。</p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>RSpec</tag>
      </tags>
  </entry>
  <entry>
    <title>读《Ruby元编程》之对象模型</title>
    <url>/posts/ruby-metaprogramming-part1-the-object-model/</url>
    <content><![CDATA[<p>《Ruby元编程》之对象模型笔记。</p>
<span id="more"></span> 

<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>看完了<a href="https://book.douban.com/subject/26575429/">Ruby元编程(第2版)</a>，全书三大part，共13章，第一部分Ruby元编程是重点，也是基础，理解了part 1， part 2的Rails元编程也就七七八八了，part 3是附录，供延伸阅读。</p>
<p>part 1读起来让人有种醍醐灌顶之感，很是惊喜，part 2告诉了你rails源代码中一些故事，针对这两块简单做了些笔记，打算整理出来，加深理解，也顺带梳理一下Ruby的知识点。</p>
<p>这篇来写写Ruby中的对象，类及方法调用。</p>
<h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><p>对象是由一组实例变量和对自身类的引用构成。</p>
<ul>
<li><p>实例变量</p>
<p>看个书中的例子：</p>
<pre><code class="Ruby">class MyClass
    def my_method
        @v = 1
    end
end

object = MyClass.new # 这时object.instance_variables是[]
object.my_method # 这时object.instance_variables是@v
</code></pre>
<p>这里，@v是实例变量，object 创建时，并没有任何实例变量，当object调用my_method时，它有了实例变量@v。你可以通过<code>object.instance_variables</code>来验证。</p>
</li>
</ul>
<ul>
<li><p>方法</p>
<p>通过<code>object.methods</code>可以得到对象object的所有方法，这些都是MyClass类的实例方法。</p>
<p>方法存放在类中，而不是对象中，实例变量则存放在对象中。也就是<strong>同一个类的对象共享同样的方法，但不共享实例变量</strong>。</p>
</li>
</ul>
<h4 id="类"><a href="#类" class="headerlink" title="类"></a>类</h4><p>类是一个对象（Class类的一个实例）加一组实例方法和一个对其超类（superclass）的引用。</p>
<p>类本身也是对象，它是Class的一个实例。Class.class是Class。</p>
<p>Class.superclass是Module，因此一个类也是一个模块。</p>
<p> 在一些静态语言中，比如Java，实例是类的一个不可修改的对象，但是Ruby允许你打开修改， 这种操作又称之为打开类。</p>
<p>可使用class_eval method来打开任意类。</p>
<ul>
<li><p>打开类(open class)与猴子补丁（monkey patch）</p>
<p>看个简单的例子：</p>
<pre><code class="Ruby">class A
  def a; &#39;a&#39;; end
end

class A
  def b; &#39;b&#39;; end
end

obj = A.new
obj.a
obj.b
</code></pre>
<p>这里，Ruby先是定义了这个类A，并定义了method a，随后，Ruby重新打开了类A，定义了method b。</p>
<p>打开类是Ruby很强大的利器，可以动态修改已经存在的类，即使是String，Array这类标准库中的类也不例外。</p>
<p>不过利剑用的不好，容易伤着自己。打开类容易带来<a href="https://en.wikipedia.org/wiki/Monkey_patch"><strong>猴子补丁</strong></a>的问题。</p>
<p>书中举的例子很好，这里直接引用：</p>
<pre><code class="Ruby">class Array
  def replace(original, replacement)
    self.map &#123;|e| e == original ? replacement : e&#125;
  end
end
</code></pre>
<p>这里，打开了Array这个标准库中的类，然后定义了一个replace的method，我们知道Array自身已经有一个replace的method了，那么重新定义，会覆盖掉原来的replace，而你的程序中的其他部分极有可能依赖于原来的replace，这可能会导致危险的后果。这种method就属于猴子补丁。</p>
<p>如何解决？</p>
<p>两种方法。</p>
<ul>
<li><p>换个名字</p>
<p>比如replace换成substitute，同时仔细检查该类中是否有同名的方法，确保新的名字不存在monkey patch的情况。</p>
</li>
<li><p>用<strong>细化（Refinement）</strong></p>
<p>先定义一个module，然后在这个module里面定义这个method，然后使用using方法来启用这个method，<strong>细化的作用范围只在声明了using的模块内部有效</strong>。看例子：</p>
<pre><code class="Ruby">module ArrayExtensions
  refine Array do
    def replace(original, replacement)
      self.map &#123;|e| e == original ? replacement : e&#125;
    end
  end
end

module  ArrayStuff
  using ArrayExtensions
  [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;].replace(&quot;a&quot;, &quot;d&quot;) # =&gt; [&quot;d&quot;, &quot;b&quot;, &quot;c&quot;]
end

[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;].replace([&quot;a&quot;, &quot;d&quot;]) # =&gt; [&quot;a&quot;, &quot;d&quot;]
</code></pre>
<p> 前者调用的是在ArrayExtensions中refine的method replace，而且只在声明了using ArrayExtensions的module ArrayStuff有效， 后者调用的则是Array标准库中的replace method。</p>
<p>它只在你希望它生效的地方生效，这真的蛮好。不过<strong>细化也有其陷阱</strong>，看段代码：</p>
<pre><code class="Ruby">class MyClass
  def my_method
    puts &quot;original my_method&quot;
  end

  def my_other_method
    my_method
  end
end

module MyClassRefinement
  refine MyClass do
    def my_method
      puts &quot;refined my_method&quot;
    end
  end
end

using MyClassRefinement
MyClass.new.my_method  # =&gt; &quot;refined my_method&quot;
MyClass.new.my_other_method # =&gt; &quot;original my_method&quot;
</code></pre>
<p>这里，my_other_method对my_method的调用，是在using之后，所以后面还是调用了之前未细化的my_method，所以用细化的时候还是要小心些。</p>
</li>
</ul>
</li>
<li><p>Superclass</p>
<p>superclass是一个类方法，可以获取当前类的父类。像上面细化例子里面的MyClass，它的superclass是Object。</p>
<pre><code class="Ruby">Array.superclass # =&gt; Object
Object.superclass # =&gt; BasicObject
BasicObject.superclass # =&gt; nil
</code></pre>
<p>以MyClass为例，obj是它的实例对象，对应的class, superclass如下：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79ly1fp7v0xt72bj31hc0u0493.jpg"></p>
</li>
<li><p>模块Module</p>
<pre><code>Class.superclass =&gt; Module
</code></pre>
<p>Module可以看成是一堆method的集合，类和模块很接近，使用的时候，如果你希望自己的代码包含在别的代码中，使用module，如果希望某段代码被实例化或者被继承，用类。</p>
</li>
</ul>
<ul>
<li><p>常量</p>
<p>任何以大写字母开头的引用都是常量，包括<strong>类名</strong>和<strong>模块名</strong>。</p>
<p>Ruby中的常量类似变量，它的值是可以修改的，那么它与变量有什么区别？最大的区别在于作用域。</p>
<p>Ruby代码中的常量类似于文件系统中的文件，类和模块就像是目录。类似不同目录下，不同文件可以有相同的名字，不同的模块和类中，也可以有相同名字的常量。</p>
<p>看个例子：</p>
<pre><code class="Ruby">module M
  MyContant = &#39;outer contant&#39;
  class C
    MyContant = &#39;inner contant&#39;
  end
  C::MyContant # =&gt; &quot;inner contant&quot;
  M::MyContant # =&gt; &quot;outer contant&quot;
end

M::C::MyContant # =&gt; &quot;inner contant&quot;
</code></pre>
<p>这里，常量使用了路径引用的方式。用::进行分割。而M这种用来充当常量容器的模块，被称之为<strong>命名空间</strong>。</p>
</li>
<li><p>命名空间</p>
<p>我觉得命名空间的一个作用是隔离。比如下面这种：</p>
<pre><code class="Ruby">module N
  class C
    puts &quot;in module N&quot;
  end
end

module M
  class C
    puts &quot;in module M&quot;
  end
end

N::C # =&gt; in module N
M::C # =&gt; in module M
</code></pre>
<p>使用命名空间可以轻松解决<strong>类同名</strong>的问题。这里书中提到了一个细节，有关load的使用。</p>
<p>load用于加载代码，比如<code>load(&#39;demo.rb&#39;)</code>，demo.rb文件中如果定义了常量，就有可能污染当前程序的命名空间，怎么解决？通过参数来强制限定其只在自身范围内有效：<code>load(&#39;demo.rb&#39;, true)</code>.</p>
</li>
</ul>
<h4 id="方法的调用"><a href="#方法的调用" class="headerlink" title="方法的调用"></a>方法的调用</h4><p>方法的调用分为方法的查找和执行。</p>
<p>在细说之前，先说两个概念：<strong>接受者</strong>，<strong>祖先链</strong></p>
<p><strong>接收者</strong>：调用方法所在的对象，比如my_array.replace()， 这里my_array就是接收者。</p>
<p><strong>祖先链</strong>：以任意一个Ruby类为例，它从superclass一路往上找，superclass的superclass，直到BasicObject，其经历的路径，就是该类的祖先链。</p>
<p>查看某个class的祖先链，使用ancestors【这是一个类方法】。比如：</p>
<pre><code class="Ruby">Array.ancestors # =&gt; [Array, Enumerable, Object, Kernel, BasicObject]
</code></pre>
<p>这里Kernel模块是包含在Object这个class中的。于是，无论哪个对象都可以随意使用Kernel模块中的方法，这些方法又称之为<strong>内核方法</strong>（Kernel Method）.同样，你也可以<strong>打开Kernal，新增方法，这个方法就会对所有的对象可用了</strong>，cool吧？</p>
<p>祖先链中包含模块，当某个模块包含在某个类中时，Ruby就会把该模块加入到祖先链中。</p>
<p><strong>模块的位置在include它的类之上。如果是prepend， 则是在prepend它的类之下</strong>。</p>
<p>【prepend也是很好的方法包装术，后面的章节中它还会出场】</p>
<p>看几个例子加深理解：</p>
<pre><code class="Ruby">module M1; end

class C
  include M1
end

class D &lt; C; end
D.ancestors # =&gt; [D, C, M1, Object, Kernel, BasicObject]


class C2
  prepend M1
end

class D2 &lt; C2; end
D2.ancestors # =&gt; [D2, M1, C2, Object, Kernel, BasicObject]
</code></pre>
<p><strong>一个模块只会在祖先链中出现一次：</strong></p>
<pre><code class="Ruby">module M1; end
module M2
  include M1
end

module M3
  prepend M1
  include M2
end

M3.ancestors # =&gt; [M1, M3, M2]
</code></pre>
<p><strong>人生的出场顺序很重要，祖先链中也是：</strong></p>
<pre><code class="Ruby">module M1; end
module M2; end

class C
  include M1
  include M2
end

class C2
  include M2
  include M1
end

C.ancestors # =&gt; [C, M2, M1]
C2.ancestors # =&gt; [C2, M1, M2]
</code></pre>
<p>理解祖先链很有必要，它对于理解后面章节中，特别是单件类，类方法，实例方法等的覆写，扩展等很有帮助。</p>
<ul>
<li><p>方法查找</p>
<p>一句话：<strong>向右一步，再向上</strong></p>
<p><strong>搞懂了祖先链，其实也就知道了方法的查找</strong>，从接收者对应的class开始（向右一步），一直沿着祖先链往上找，直到找到这个method即可。</p>
<p>看个例子：</p>
<pre><code class="Ruby">module M1
  def hello
    puts &quot;hello, Ruby! this is M1&quot;
  end
end
module M2
  def hello
    puts &quot;hello, Ruby! this is M2&quot;
  end
end

class C
  include M1
  include M2
end

C.new.hello
</code></pre>
<p>这里hello是调用哪个？</p>
<p>我们知道C.ancestors是 [C, M2, M1]，M2中有hello这个method，所以它会找到最近的那个，也就是M2的hello ，输出：<code>hello, Ruby! this is M2</code>。</p>
</li>
<li><p>方法执行</p>
<p>Ruby中每一行代码都会在一个对象中被执行，这个对象就是所谓的当前对象，可以用self表示。</p>
<p>任何时刻，只有一个对象可以充当当前对象，当调用一个方法时，接收者就成为了self。</p>
<p>看个例子【书中的这个例子很好，直接拿来】：</p>
<pre><code class="Ruby">class C
  def test_self
    @var = 1
    my_method()
    self
  end

  def my_method
    @var = @var + 1
  end
end

obj = C.new

obj.test_self # =&gt; #&lt;C:0x007faf9d0588f0 @var=2&gt;
</code></pre>
<p>调用test_self时，obj就成为了self，@var成了obj的实例变量，执行my_method时，@var仍然是obj的实例变量， 最后返回self的引用，可以看到@var变为2。</p>
<p>有关self部分，可以顺带说说两种情况。</p>
<ul>
<li><p>顶层上下文（top level context）</p>
<p>如果没有调用任何方法，此时谁是self？运行irb，问Ruby：</p>
<pre><code class="Ruby">self # =&gt; main
self.class  # =&gt; Object
</code></pre>
<p>Ruby程序开始运行时，解释器会创建一个名为main的对象作为当前对象，也就是self。这个对象又叫做<strong>顶层上下文</strong>（top level context）。</p>
</li>
<li><p>类或模块中，self的角色由这个类或模块本身担任</p>
</li>
</ul>
<p>书中还提到了借助self，重新理解private。即：<strong>不能明确指定接收者来调用私有方法</strong>。</p>
<p>看个例子：</p>
<pre><code class="Ruby">class C
  def public_method
    self.private_method
  end

  private

  def private_method; end
  end
end  

C.new.public_method
</code></pre>
<p>运行时会报错：</p>
<pre><code>private method `private_method&#39; called for #&lt;C:0x007fce270f4478&gt; (NoMethodError)
</code></pre>
<p>因为此处用了self，所以调用public_method时，C的对象便成为了self， 而private_method是不能直接被实例对象调用的。去掉public_method中的self即可。</p>
<p>这部分的主要内容基本如上，是不是感觉学到了好多？: P</p>
</li>
</ul>
<h4 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h4><p>去年打开《Ruby元编程》的时候，看得云里雾里，无法继续，现在再次打开，却有种拨开云雾之感，好似你懂了你曾不懂的，不知如何准确描述这种欣喜的感觉。Whatever，I love it!</p>
<p>推荐这本<a href="https://book.douban.com/subject/26575429/">Ruby元编程(第2版)</a></p>
]]></content>
      <categories>
        <category>Reading</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>读《Ruby元编程》之方法</title>
    <url>/posts/ruby-metaprogramming-part2-the-methods/</url>
    <content><![CDATA[<p>《Ruby元编程》之方法笔记。</p>
<span id="more"></span> 

<h4 id="化繁为简"><a href="#化繁为简" class="headerlink" title="化繁为简"></a>化繁为简</h4><p>《Ruby元编程》的第3章说到了方法，从一段代码的重构说起，主线是动态方法dynamic methods和幽灵方法ghost methods，随后说了下ghost methods 的两个常见陷阱。</p>
<p>整章看下来，最大的感触就是重构后的代码真的是清爽啊。dynamic methods和ghost methods简直就是化繁为简的利器。</p>
<p>先来看段代码。</p>
<h4 id="一段需要重构的代码"><a href="#一段需要重构的代码" class="headerlink" title="一段需要重构的代码"></a>一段需要重构的代码</h4><p>引用书中的例子：</p>
<pre><code class="Ruby">class Computer

  def initialize(computer_id, data_source)
    @id = computer_id
    @data_source = data_source # data_source是一个对象
  end

  def mouse
    info = @data_source.get_mouse_info(@id)
    price = @data_source.get_mouse_price(@id)
    result = &quot;Mouse: #&#123;info&#125;($#&#123;price&#125;)&quot;
    return &quot;#&#123;result&#125;&quot; if price &gt;= 100
    result
  end

  def cpu
    info = @data_source.get_cpu_info(@id)
    price = @data_source.get_cpu_price(@id)
    result = &quot;Cpu: #&#123;info&#125;($#&#123;price&#125;)&quot;
    return &quot;#&#123;result&#125;&quot; if price &gt;= 100
    result
  end

  def keyboard
    info = @data_source.get_keyboard_info(@id)
    price = @data_source.get_keyboard_price(@id)
    result = &quot;Keyboard: #&#123;info&#125;($#&#123;price&#125;)&quot;
    return &quot;#&#123;result&#125;&quot; if price &gt;= 100
    result
  end

end
</code></pre>
<p>这段代码中，class Computer有三个method，且每个method的代码有很多共通的部分。如何解决这种代码繁复的问题？</p>
<p>解决方法就在dynamic methods和ghost methods。</p>
<h4 id="动态方法dynamic-methods"><a href="#动态方法dynamic-methods" class="headerlink" title="动态方法dynamic methods"></a>动态方法dynamic methods</h4><p>先来看看用动态方法如何重构上诉代码：</p>
<pre><code class="Ruby">class Computer

  def initialize(computer_id, data_source)
    @id = computer_id
    @data_source = data_source # data_source是一个对象
    @data_source.methods.grep(/^get_(.*)_info$/)
    &#123;Computer.define_component $1&#125;
  end

  def self.define_component(name)
    define_method(name) do
      info = @data_source.send &quot;get_#&#123;name&#125;_info&quot;, @id
      price = @data_source.send &quot;get_#&#123;name&#125;_price&quot;, @id
      result = &quot;#&#123;name.capitalize&#125;: #&#123;info&#125;($#&#123;price&#125;)&quot;
      return &quot;#&#123;result&#125;&quot; if price &gt;= 100
      result
    end
  end

end
</code></pre>
<p>这里使用了内省，即调用methods得到@data_source中所有匹配<code>/^get_(.*)_info$/</code>的methods，使用$1来保存，然后调用类方法define_component。而在类方法define_component中，则使用了动态方法，其中，define_method是定义动态方法，而send则是动态派发。</p>
<p>方法无非就是定义加调用，动态方法跟普通方法并没有什么大的区别。</p>
<ul>
<li><p>定义动态方法</p>
<p>用define_method来定义动态方法。看个例子：</p>
<pre><code class="Ruby">class MyClass
  define_method :my_method do |x, y|
    x + x * y
  end
end

obj = MyClass.new
obj.send(:my_method,1,2) # =&gt; 3
obj.my_method(1,2) # =&gt; 3
</code></pre>
<p>方法的定义由常规的def关键字变成了define_method关键字, 其他并没有什么变化。方法名作为参数，外加一个代码块block。我的理解是，它的灵活性与send其实很一致，就在于方法名是参数，可以动态定义方法。</p>
</li>
<li><p>调用动态方法</p>
<p>调用一个方法实际上是给对象发送一条信息。</p>
<p>send是Object的一个实例方法，第一个参数是方法的名字，由于方法名最好是不可修改的，所以通常是以符号的形式传递，剩下的，则是需要传递给方法的参数，可含代码块。</p>
<p>看个例子：</p>
<pre><code class="Ruby">class MyClass
  def my_method(x,y)
    x + yield(x,y)
  end
end

obj = MyClass.new
obj.send(:my_method,1,2)&#123;|x, y| x * y&#125; # =&gt; 3
obj.my_method(1,2) &#123;|x, y| x * y&#125; # =&gt; 3
</code></pre>
<p>使用send调用my_method， 和使用.my_method的调用是一样的。</p>
<p>那么使用send的意义在哪里？因为方法名成了参数，所以在代码运行中，可以决定调用哪个方法，上面重构后的代码便是如此，根据name的值，来决定需要调用哪个method。</p>
</li>
</ul>
<h4 id="幽灵方法-ghost-methods"><a href="#幽灵方法-ghost-methods" class="headerlink" title="幽灵方法 ghost methods"></a>幽灵方法 ghost methods</h4><p>见到了大名鼎鼎的method_missing了。</p>
<p>先看用幽灵方法重构Computer类的结果：</p>
<pre><code class="Ruby">class Computer &lt; BasicObject

  def initialize(computer_id, data_source)
    @id = computer_id
    @data_source = data_source # data_source是一个对象
  end

  def method_missing(name, *args)
    super if !@data_source.respond_to?(&quot;get_#&#123;name&#125;_info&quot;)
    info = @data_source.send &quot;get_#&#123;name&#125;_info&quot;, @id
    price = @data_source.send &quot;get_#&#123;name&#125;_price&quot;, @id
    result = &quot;#&#123;name.capitalize&#125;: #&#123;info&#125;($#&#123;price&#125;)&quot;
    return &quot;#&#123;result&#125;&quot; if price &gt;= 100
    result
  end

end
</code></pre>
<p>这里，注意到<strong>Computer继承自BasicObject</strong>，而不是默认的Object，这是为了避开method_missing的一个陷阱，而选择了BasicObject这个白板类（blank slates）【白板类：拥有极少方法的类】，这块留在陷阱部分说。</p>
<p>可以看到method_missing中send的身影，故它也使用了动态派发。</p>
<p>method_missing是BasicObject的一个私有实例方法。通过重定义method_missing来完成对方法调用的拦截，但是值得一提的是，它们不会出现在object#methods的列表中，故有幽灵方法之称。</p>
<p>书中举了<a href="https://github.com/huboard/ghee">Ghee</a>的例子，我去看了它的method_missing定义, 在lib/ghee的resource_proxy.rb中：</p>
<pre><code class="Ruby">## lib/ghee/resource_proxy.rb
def method_missing(message, *args, &amp;block)
  subject.send(message, *args, &amp;block)
end
</code></pre>
<p>这里连续调用了两次method_missing，先是将message转发给Ghee::ResourceProxy#method_missing方法，然后再从这里转给subject，而这个subject是一个Hassher::Mash对象，它又转给了Hassher::Mash#method_missing方法进行处理。这种捕获幽灵方法，并将它们转发给另一个对象，又称之为幽灵代理，即像Ghee::ResourceProxy这样的对象，就是幽灵代理。</p>
<h4 id="幽灵方法的两个陷阱"><a href="#幽灵方法的两个陷阱" class="headerlink" title="幽灵方法的两个陷阱"></a>幽灵方法的两个陷阱</h4><ul>
<li><p>在method_missing中调用了未定义的method，导致method_missing被不断回调，直到调用堆栈溢出</p>
<p>看段代码：</p>
<pre><code class="Ruby">class C
  def method_missing(name, *args)
    10.times do
      number = rand(10)
    end
    puts &quot;#&#123;number&#125;&quot;
  end
end
</code></pre>
<p>【这是一段没啥用的代码，仅仅用来作为例子】</p>
<p>这里其实涉及到作用域scope的问题，number定义在代码块中，等到代码块结束，执行puts “#{number}”时，ruby会把<strong>number当成是一个在self上省略了括号的方法调用</strong>，<strong>即self.number,</strong> 正常情况下，会出现nomethoderror，因为没有定义number这个method的，但是由于重写了method_missing，所以它会继续调用这个重写后的method_missing，导致出现死循环。</p>
<p>如何解？改number的作用域即可。</p>
<pre><code class="Ruby">class C
  def method_missing(name, *args)
    number = 0
    10.times do
      number = rand(10)
    end
    puts &quot;#&#123;number&#125;&quot;
  end
end
</code></pre>
</li>
<li><p>幽灵方法与真实方法重名，导致幽灵方法被忽略。</p>
<p>书中举了一个display的例子，我觉得挺好理解的，附上：</p>
<pre><code class="Ruby">my_computer = Computer.new(12, DS.new)
my_computer.display # =&gt; nil
</code></pre>
<p>这里，my_computer调用了display方法，其本意是要看显示器method，但是Object自带了一个display方法，Computer继承Object，所以也有一个display方法，导致调用的时候，忽略了幽灵方法，这里也可以看得出来，在调用方法时，必然是先搜遍了祖先链，然后再调用幽灵方法。</p>
<p>怎么破？两种方式。</p>
<ul>
<li><p>使用白板类</p>
<p>用幽灵方法重构代码那部分就提到了，Computer继承自BasicObject，用的就是白板类，从而没有了display这样的情况。</p>
</li>
<li><p>删除方法display</p>
<p>用两种删除方法的途径：undef_method【删除所有包括继承来的方法】， remove_method【删除接受者自己的方法】</p>
<p>看段代码：</p>
<pre><code class="Ruby">class Computer
  .....
  def self.hide(name)
    if instance_methods.include?(name)
      undef_method name
    end
  end
  hide(&#39;display&#39;)
end
</code></pre>
<p>这样就会删除掉继承自Object#display方法。个人觉得删除方法容易出问题，用白板会好一些</p>
<h4 id="使用原则"><a href="#使用原则" class="headerlink" title="使用原则"></a>使用原则</h4></li>
</ul>
</li>
</ul>
<p>由于幽灵方法并不是真正的方法，用的时候还容易踩坑，所以在可以使用动态方法的时候，尽量使用动态方法，除非必须使用幽灵方法，否则尽量不要使用它。</p>
]]></content>
      <categories>
        <category>Reading</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>读《Ruby元编程》之可调用对象</title>
    <url>/posts/ruby-metaprogramming-part3-callable-objects/</url>
    <content><![CDATA[<p>《Ruby元编程》之可调用对象笔记。</p>
<span id="more"></span> 

<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>这是《Ruby元编程》第4章代码块的学习笔记，我看完整章，觉得用可调用对象来概括整章可能更合适，所以， 我把标题改了。</p>
<p>好，进入正题。</p>
<h4 id="可调用对象"><a href="#可调用对象" class="headerlink" title="可调用对象"></a>可调用对象</h4><p>四种：</p>
<ul>
<li>代码块</li>
<li>proc：Proc类的对象，同时也是创建Proc类的一个method</li>
<li>lambda：Proc类的对象，同时也是创建Proc类的一个method</li>
<li>方法</li>
</ul>
<p>看个例子先。</p>
<p>同一个method，四种调用方式，注意最后一个调用方式有些不同：</p>
<pre><code class="Ruby"># 代码块
class C1
  def my_method(x)
    yield(x)
  end
end

obj = C1.new
obj.my_method(&quot;Ruby&quot;) &#123;|x| puts &quot;hello, #&#123;x&#125;&quot;&#125; # =&gt; hello, Ruby

# proc
class C1
  def my_method(x)
    yield(x)
  end
end

my_proc = Proc.new &#123;|x| puts &quot;hello, #&#123;x&#125;&quot;&#125;
obj = C1.new
obj.my_method(&quot;Ruby&quot;, &amp;my_proc) # =&gt; hello, Ruby

# lambda
class C1
  def my_method(x)
    yield(x)
  end
end

my_lambda = lambda &#123;|x| puts &quot;hello, #&#123;x&#125;&quot;&#125;
obj = C1.new
obj.my_method(&quot;Ruby&quot;, &amp;my_lambda) # =&gt; hello, Ruby


# 方法
class C2
  def my_method(x)
    puts &quot;hello, #&#123;x&#125;&quot;
  end
end

obj = C2.new
m = obj.method :my_method
m.call(&quot;Ruby&quot;) # =&gt; hello, Ruby
</code></pre>
<p>来认识下这四位小伙伴。</p>
<h4 id="代码块Blocks"><a href="#代码块Blocks" class="headerlink" title="代码块Blocks"></a>代码块Blocks</h4><p>Ruby中绝大多数都是对象，block则是个特例。【判断某个事物是不是对象，可以用<code>x.is_a? Object</code>来判断】</p>
<p>戳这里<a href="https://stackoverflow.com/questions/3429553/is-everything-an-object-in-ruby">Is everything an object in ruby?</a>看stack overflow上人们怎么说，不过对于Amadan的answer，我觉得不是特别准确，他提到“<strong>Methods</strong>, operators and blocks <strong>aren’t</strong>, but can be wrapped by objects (Proc).” 而实际上，如果你进irb, 运行<code>puts.is_a? Object</code>，你会发现它返回true，即puts是method，也是对象。</p>
<p>貌似跑题了，回正题。</p>
<ul>
<li><p>代码块的定义</p>
<p>代码块可以用大括号{}定义， 也可以用do … end关键字定义。</p>
<p>代码块可以有参数。</p>
<p>代码块最后一行代码执行的结果会被作为返回值。</p>
<p>只有在调用一个方法时，才可以定义一个块，块会被直接传递给这个方法，该方法会用yield关键字调用这个块。</p>
<p>可以通过内核方法block_given?来判断当前调用的方法中是否包含块。比如：</p>
<pre><code class="Ruby">def my_method
  return yield if block_given?
  &#39;no block&#39;
end

my_method # =&gt; no block
my_method &#123;&quot;Here&#39;s a block&quot;&#125; # =&gt; Here&#39;s a block
</code></pre>
</li>
<li><p>代码块是闭包closures</p>
<p>运行代码需要一个执行环境：局部变量，实例变量，self等，这些简称为绑定（binding）。</p>
<p>那么，块在哪里获得它的绑定呢？</p>
<p>定义一个块时，它会获取当前环境中的绑定，带着它们四处游荡。<strong>当块被传给一个方法时，它会带着这些绑定一块进入该方法。</strong>【注意它的这个特性，这也是为什么它被称之为闭包的原因】</p>
</li>
<li><p>作用域scope</p>
<p>ruby中没有嵌套式的作用域，它的作用域是截然分开的。一旦进入一个新的作用域，原先的绑定就会被替换。</p>
<ul>
<li><p>作用域门</p>
<p>程序会在三个地方关闭前一个作用域，同时开启一个新的作用域：</p>
<ul>
<li>类定义class</li>
<li>模块定义module</li>
<li>方法def</li>
</ul>
<p>这三种情况分别以class，module， def关键字作为标志，每个关键字都对应一个作用域门。</p>
<p>在class/module 与def之间有个小区别：类定义／模块定义中，代码会立即执行，但是在方法中则不会。</p>
</li>
<li><p>扁平化作用域与共享作用域</p>
<p><strong>用Class.new方法代替class关键字, Module.new方法代替module关键字, define_method方法代替def关键字</strong>， 就是扁平化作用域。即<strong>用方法调用来替代了作用域门</strong>，使得一个作用域看到另一个作用域里的变量，好似两个作用域挤压在一起，它们可以共享各自的变量。</p>
<p>看个例子理解下：</p>
<pre><code class="ruby">my_var = &quot;hello, ruby&quot;
class C
  # 需要在这里打印出my_var
  def my_method(x)
    # 在这里也要打印出my_var
  end
end
</code></pre>
<p>这里，my_var存在于顶级作用域中，但是一旦进入class／def这个作用域，my_var就不存在了。</p>
<p>你也许会说，把my_var 变成全局变量$my_var, 呃，coding的一个原则就是<strong>能不用全局变量就不要用全局变量，存在安全隐患，即使是顶级实例变量，也应当避免少用</strong>。</p>
<p>我们来扁平化作用域：</p>
<pre><code class="Ruby">my_var = &quot;hello, ruby&quot;
C = Class.new do
  puts &quot;#&#123;my_var&#125;&quot; # =&gt; hello, ruby
  define_method :my_method do
    puts &quot;#&#123;my_var&#125;&quot;
  end
end
C.new.my_method # =&gt; hello, ruby
</code></pre>
<p>说完扁平化作用域，来看看共享作用域。</p>
<p>当一个扁平作用域中，定义了多个方法，把这些方法用一个作用域门保护起来，它们就可以共享绑定，这种处理作用域的方法称之为共享作用域。</p>
<p>看个例子：</p>
<pre><code class="Ruby">def shared_banding
  shared = 1
  define_method :my_method do
    shared
  end
  define_method :my_other_method do |x|
    shared += x
  end
end
shared_banding # =&gt; 调用方法，切换到def shared_banding的作用域
my_method # =&gt; 1
my_other_method(4) # =&gt; 5
</code></pre>
<p>理解了扁平作用域，来看看<a href="http://ruby-doc.org/core-1.9.3/BasicObject.html#method-i-instance_eval">instance_eval</a>与<a href="http://ruby-doc.org/core-1.9.3/BasicObject.html#method-i-instance_exec">instance_exec</a>方法。</p>
</li>
</ul>
</li>
<li><p>instance_eval 与instance_exec</p>
<p>两者都是BasicObject的instance methods，打破封装的杠把子。instance_exec比instance_eval稍微灵活些，可以传递参数，Ruby <a href="http://ruby-doc.org/core-1.9.3/BasicObject.html#method-i-instance_eval">BasicObject 的doc</a> 里面也有举例。</p>
<p>看段书中的代码理解下：</p>
<pre><code class="Ruby">class C
  def initialize
    @v =1
  end
end

obj = C.new
obj.instance_eval do
  self
  @v
end

v = 2
obj.instance_eval &#123; @v &#125;  #=&gt; 1
obj.instance_eval &#123; @v =v &#125;  #=&gt; 2
obj.instance_eval &#123; @v &#125;  #=&gt; 2
obj.instance_exec(5) &#123;|x| @v + x&#125; #=&gt; 7
</code></pre>
<p>直接改变了obj中的实例变量@v，而针对传递给instance_eval与instance_exec的代码块，它有一个名字，叫做<strong>上下文探针</strong>（context probe），好似它们可以深入到对象的代码块中，对对象进行操作。</p>
</li>
<li><p>洁净室</p>
<p>洁净室是一个用来执行块的环境，类似一个白板类，比如BasicObject。当你希望多个方法在执行时，不共享实例变量，可以考虑洁净室。</p>
<p>OK，block部分暂时告一段落，我们看Proc。</p>
</li>
</ul>
<h4 id="Proc-与lambda"><a href="#Proc-与lambda" class="headerlink" title="Proc 与lambda"></a>Proc 与lambda</h4><p>lambda与Proc很相近，一起说。</p>
<p>由于代码块不是对象，当你想将代码块存起来以后调用时，就需要对象，有需求便有供应，Proc类应运而生。</p>
<p>它是由块转换来的对象，可以与块进行互相切换。建一个Proc的对象，有四种方法：</p>
<pre><code class="Ruby"># Proc.new
p1 = Proc.new &#123;|x| puts &quot;#&#123;x&#125;&quot;&#125;
p1.call(&quot;hi,ruby&quot;) # =&gt; hi,ruby

# proc method
p2 = proc &#123;|x| puts &quot;#&#123;x&#125;&quot;&#125;
p2.call(&quot;hi,ruby&quot;) # =&gt; hi,ruby

# lambda method
p3 = lambda &#123;|x| puts &quot;#&#123;x&#125;&quot;&#125;
p3.call(&quot;hi,ruby&quot;) # =&gt; hi,ruby

# stabby lambda
p4 = -&gt; (x) &#123;puts &quot;#&#123;x&#125;&quot;&#125;
p4.call(&quot;hi,ruby&quot;) # =&gt; hi,ruby
</code></pre>
<p>关于Proc，说两点：块与Proc的转换，proc与lambda的区别【这是个频繁被问的问题……】</p>
<ul>
<li><p>块与Proc的转换</p>
<p>先从块的传递开始。</p>
<p>在方法中，可以通过yield来直接运行一个代码块，但是当你想把代码块传递给一个方法时，就需要给代码块起一个名字，附加到一个绑定上。怎么破？</p>
<p>解决的方法是<strong>给方法添加一个特殊的参数，这个参数位于参数列表最后，且用&amp;表示</strong>。【还记得<code>block_given?</code>吗？】</p>
<p>&amp; 操作符的含义是：<strong>这是一个Proc对象，我想把它当作代码块使用，去掉&amp;操作符，就能得到一个Proc对象</strong> 【这里暗含着块与Proc的转换】</p>
<p>看例子：</p>
<pre><code class="ruby"># 去掉&amp; 得到一个Proc对象
def my_method(&amp;my_proc)
  my_proc
end

my_proc = my_method &#123;|x| puts &quot;#&#123;x&#125;&quot; &#125;
my_proc.class # =&gt; Proc
my_proc.call(&quot;hi&quot;) # =&gt; hi

# &amp; 把Proc转化为块传递给方法
def my_method(a)
  puts &quot;#&#123;a&#125;, #&#123;yield&#125;&quot;
end

my_proc = proc &#123;&quot;world&quot;&#125;
my_method(&quot;hi&quot;, &amp;my_proc) # =&gt; hi, world
</code></pre>
</li>
<li><p>Proc与lambda的对比</p>
<p>先说个区别：用lambda方法（包括 -&gt;）创建的Proc称为lambda，而用其他方法创建的则是Proc。可以用Proc#lambda来检测。</p>
<pre><code class="Ruby"># proc method
p2 = proc &#123;|x| puts &quot;#&#123;x&#125;&quot;&#125;
p2.call(&quot;hi,ruby&quot;) # =&gt; hi,ruby
p2.lambda? # =&gt; false

# lambda method
p3 = lambda &#123;|x| puts &quot;#&#123;x&#125;&quot;&#125;
p3.call(&quot;hi,ruby&quot;) # =&gt; hi,ruby
p3.lambda? # =&gt; true
</code></pre>
<p>最重要的区别有两个：</p>
<ul>
<li><p>return有不同的含义</p>
<p>在proc中，return不是从proc中返回，而是从定义proc的作用域返回。</p>
<p>觉得书中的例子不够典型，改良了下，可以很明显看出二者的区别：</p>
<pre><code class="ruby">def my_double
  a = lambda &#123;return 10&#125;
  result = a.call
  return result * 2
end
my_double # =&gt; 20

def my_other_double
  my_proc = Proc.new &#123;return 10&#125;
  result = my_proc.call
  return result * 2 # =&gt; 这段代码不会运行！
end
my_other_double # =&gt; 10
</code></pre>
</li>
<li><p>参数问题</p>
<p>在参数问题上，lambda比proc要严格，而proc则宽容很多。</p>
<p>比如：</p>
<pre><code class="Ruby">p = Proc.new &#123;|a, b| puts &quot;#&#123;a&#125;:#&#123;b&#125;&quot;&#125;
p.call(1,2,3) # =&gt; 1:2
p.call(1) # =&gt; 1:

p2 = lambda &#123;|a, b| puts &quot;#&#123;a&#125;:#&#123;b&#125;&quot;&#125;
p2.call(1,2,3) # =&gt; wrong number of arguments (given 3, expected 2) (ArgumentError)
</code></pre>
<p>Google下，会发现很多前辈都写过这方面的文章，这里就不多说了，stack overflow上也有一些精彩的answer：<a href="https://stackoverflow.com/questions/1740046/whats-the-difference-between-a-proc-and-a-lambda-in-ruby">What’s the difference between a proc and a lambda in Ruby?</a>， 可加深理解。</p>
</li>
</ul>
</li>
</ul>
<h4 id="方法method"><a href="#方法method" class="headerlink" title="方法method"></a>方法method</h4><p>  第3章刚刚提到过dynamic methods和ghost methods。不过这里要讲的是方法的另一种定义方式：<strong>使用method方法来定义，调用时call</strong>。最开始那个class C2例子中的my_method就是这样调用的。</p>
<p>  方法这部分没有什么特别的，书中提到了自由方法unbound method，即一个方法从最初定义它的类或者module中脱离出来。</p>
<p>  使用Method#unbound可以把一个方法变成自由方法， 使用UnboundMethod#bind可以把它再绑定到一个对象上，不过绑定的对象需要是该类及其子类的对象，而module则不需要。</p>
<p>  原谅我不是很理解自由方法存在的意义。书中也提到了它只在极个别场合发挥作用，这里不展开细说了。</p>
<h4 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h4><p>书中最后那个DSL例子，个人感觉很不错，特别是使用共享作用域，消除全局变量的代码重构，很精彩，推荐阅读。</p>
]]></content>
      <categories>
        <category>Reading</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>读《Ruby元编程》之类定义</title>
    <url>/posts/ruby-metaprogramming-part4-class-defination/</url>
    <content><![CDATA[<p>《Ruby元编程》之类定义笔记。</p>
<span id="more"></span> 

<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>这是《Ruby元编程》第五章类定义的学习笔记，这一章有很多的概念，类宏，单件方法，单件类，类扩展，环绕别名……还见到了我曾一度迷惑不解的 <a href="https://en.wikipedia.org/wiki/Duck_typing">duck typing</a>. 这应该算是全书最精彩的一个章节了。</p>
<p> 好，来看看都有些啥。</p>
<h4 id="当前类"><a href="#当前类" class="headerlink" title="当前类"></a>当前类</h4><p>像无所不在的当前对象一样，也有一个对应的当前类（模块）存在。</p>
<p>如何跟踪当前类？三种方式：</p>
<ul>
<li>在程序顶层，self是main，当前类是Object， main对象所属的类</li>
<li>在一个方法中，当前类是当前对象的类</li>
<li>用class关键字打开一个类（module打开一个模块）时，该类称为当前类</li>
</ul>
<p>这里第三种方法，存在一种情况：当类名不可知时，如何打开类？比如类名是一个变量。</p>
<p>用class_eval method。</p>
<h4 id="class-eval"><a href="#class-eval" class="headerlink" title="class_eval"></a>class_eval</h4><p>类似牛逼的instance_eval可以打破类的封装一样，class_eval可以打开类，给类定义实例方法。</p>
<p>看这段代码：</p>
<pre><code class="Ruby">def add_method_to(a_class)
  a_class.class_eval do
    def m; puts &#39;hi&#39;; end
  end
end

add_method_to String
&#39;abc&#39;.m  #=&gt; hi
</code></pre>
<p> 这里你一定也会想到这种打开类的方法，容易引起猴子补丁的问题，当然你可以用细化的方式来处理，不过还是要慎重使用class_eval。</p>
<p>类似instance_eval还有一个instance_exec的双胞胎兄弟一样，class_eval也有一个class_exec，它可以接受额外的代码块作为参数。</p>
<h4 id="class-eval与instance-eval"><a href="#class-eval与instance-eval" class="headerlink" title="class_eval与instance_eval"></a>class_eval与instance_eval</h4><p>其实instance_eval也可以修改类，修改的是当前对象的单件类。后面说到单件类时，可以看到。书中也有相应的例子。不要忘了，类也是对象。</p>
<p>那么class_eval与instance_eval如何选择？看目的。</p>
<ul>
<li>如果想要打开一个对象，用instance_eval更好</li>
<li>如果想要修改类，用class_eval打开</li>
</ul>
<p>第六章也提到了一个eval，执行包含ruby代码的字符串，不过它有些安全性上的问题。</p>
<h4 id="类实例变量和类变量"><a href="#类实例变量和类变量" class="headerlink" title="类实例变量和类变量"></a>类实例变量和类变量</h4><p>两者都是存储在类中的。不同之处在于：</p>
<ul>
<li>类实例变量只能被类本身访问，定义时用@</li>
<li>类变量可以被子类或者类的实例访问，定义时用@@，类变量属于类体系结构，并不真正属于类，存在类似全局变量的风险，慎重使用。</li>
</ul>
<p>对象也有实例变量，而且跟类实例变量看着还挺像，那么两者有什么区别？</p>
<p>当当前类充当self时，访问的变量是类实例变量，当类的实例充当self时，通常是调用了某个实例方法，然后拥有了该实例变量。</p>
<p>看例子加深理解：</p>
<pre><code class="Ruby">class C
  @var = 1
  def self.read; @var; end
  def read; @var; end
  def write; @var = 2; end
end

obj = C.new
obj.read
obj.write
obj.read #=&gt; 2
C.read #=&gt; 1
</code></pre>
<p>这里C和C的对象obj都拥有一个实例变量@var，但是两者是不同的。C访问的是类实例变量，obj访问的是类的对象的实例变量，也就是它调用了read后获得到实例变量。</p>
<h4 id="单件方法"><a href="#单件方法" class="headerlink" title="单件方法"></a>单件方法</h4><p>Ruby允许给单个对象增加一个方法。看个例子：</p>
<pre><code class="Ruby">my_array = [1,2,3,4]

def my_array.add_one
  self.map&#123;|x| x + 1&#125;
end

my_array.add_one #=&gt; [2,3,4,5]
my_array.methods.grep(/add_one/) #=&gt; [:add_one]
my_array.singleton_methods #=&gt; [:add_one]

[1,2].singleton_methods #=&gt; []
</code></pre>
<p>这里my_array拥有了add_one这个method，而其他对象没有。</p>
<p><strong>这种只对单个对象生效的方法，称为单件方法。</strong></p>
<p>通过调用singleton_methods可以查看某个对象的单件方法。</p>
<p>这里就要提一下 <a href="https://en.wikipedia.org/wiki/Duck_typing">duck typing</a>了。</p>
<p>有了单件方法，那么所有的对象都可以拥有自己的方法了，这里也就可以看出，Ruby中，对象的“类型”并不严格与它的类相关，<strong>“类型”只是对象能响应的一组方法</strong>。也就是说，一个对象是不是duck类的实例并不重要，重要的是它能不能响应walk，quack的方法，也就是谚语中所说的：“If it walks like a duck and it quacks like a duck, then it must be a duck.”</p>
<h4 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h4><p>类也是对象，而类名只是常量，所以在类上调用方法，就和对象调用方法一样。</p>
<p><strong>类方法的实质就是：它是一个类的单件方法</strong>。单件方法存放在哪里？存放在该类的单件类里。</p>
<p>类方法的定义有三种：</p>
<pre><code class="ruby">def MyClass.a_class_method; end

def MyClass
  def self.a_class_method; end
end

# 打开了该类的单件类，在单件类定义了类方法
def MyClass
  class &lt;&lt; self
    def yet_another_class_method; end
end
</code></pre>
<p>这里，class &lt;&lt; 打开了该类的单件类。</p>
<h4 id="类宏"><a href="#类宏" class="headerlink" title="类宏"></a>类宏</h4><p>像<strong>attr_accessor</strong>, <strong>attr_read</strong>, <strong>attr_writer</strong>这样的方法称之为类宏。</p>
<p>他们看起来像是关键字，其实只是普通的方法。估计你看到这里也就知道了，这些其实是类方法。</p>
<h4 id="单件类"><a href="#单件类" class="headerlink" title="单件类"></a>单件类</h4><p>单件类是一个对象的单件方法的存活之所，每个单件类都只有一个实例。</p>
<p>通过Object#singleton_class或者class &lt;&lt; 可以获得单件类。</p>
<p>看个例子来更好地了解下单件类：</p>
<pre><code class="Ruby">class C
  def a_method
    puts &#39;C#a_method()&#39;
  end

  def self.a_class_method
    puts &#39;C.a_class_method()&#39;
  end
end

class D &lt; C;end

obj = D.new

class &lt;&lt; obj
  def a_singleton_method
    puts &quot;obj#a_singleton_method()&quot;
  end
end

obj.singleton_class #= &gt; #&lt;Class:#&lt;D:0x007f9e23909f70&gt;&gt;
obj.singleton_class.superclass #= &gt; D

D.singleton_class #= &gt; #&lt;Class:D&gt;
D.singleton_class.superclass #= &gt; #&lt;Class:C&gt;

C.singleton_class #= &gt; #&lt;Class:C&gt;
C.singleton_class.superclass #= &gt; #&lt;Class:Object&gt;
</code></pre>
<p>查看obj单件类，D单件类的祖先链，会得到：</p>
<pre><code class="Ruby">obj.singleton_class.ancestors #=&gt; [#&lt;Class:#&lt;D:0x007fc2ee041790&gt;&gt;,D,C,Object, Kernel, BasicObject]
D.singleton_class.ancestors #=&gt; [#&lt;Class:D&gt;, #&lt;Class:C&gt;, #&lt;Class:Object&gt;, #&lt;Class:BasicObject&gt;, Class, Module, Object, Kernel,BasicObject]
</code></pre>
<p>我们来做出obj的祖先链图：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fpjld2vuu5j30u0140go6.jpg"></p>
<p>【跟书中稍稍不同，我把kernel加进来了，请无视这小学级别的英文书写】</p>
<p>可以发现：<strong>一个对象的单件类的超类是这个对象的类</strong>。</p>
<p>书中还列出了七条规则，但是我觉得理解了这个例子，能做出祖先链图，对单件类基本算是掌握了。</p>
<p>还记得instance_eval可以修改类？它修改的其实是对象的单件类，也就是给对象添加了单件方法，比如先前那个例子，还能这么做：</p>
<pre><code class="Ruby">my_array = [1,2,3,4]

my_array.instance_eval do
  def add_one
    self.map&#123;|x| x + 1&#125;
  end
end

my_array.add_one #=&gt; [2,3,4,5]
my_array.methods.grep(/add_one/) #=&gt; [:add_one]
my_array.singleton_methods #=&gt; [:add_one]
</code></pre>
<p>这里你可能会想，如果单件方法与类或者对象继承的方法同名，如何调用？<strong>先调用单件方法</strong>，也就是单件方法覆写了祖先链上游的同名方法，这种猴子补丁也有风险。</p>
<p>看个例子：</p>
<pre><code class="ruby">module MyModule
  def size; &quot;size&quot;; end
  def ancestors; &quot;ancestors&quot;; end
end

class C
  extend MyModule
end

obj = []
obj.extend MyModule

obj.size #= &gt; 调用的是单件类中的方法, 输出&quot;size&quot;
C.ancestors #= &gt; 调用的是单件类中的方法, 输出&quot;ancestors&quot;
</code></pre>
<p>如果类或者对象本身有这个方法，与扩展后的单件方法同名，调用的是自身的方法，而不是单件方法。</p>
<pre><code class="Ruby">module MyModule
  def size; &quot;size&quot;; end
end

class C
  def self.size
     &quot;it is C#size&quot;
  end
  extend MyModule
end

C.size #= &gt; 从祖先链开始找，调用的是自己的类方法, 输出&quot;it is C#size&quot;
</code></pre>
<h4 id="类属性"><a href="#类属性" class="headerlink" title="类属性"></a>类属性</h4><p>像attr_accessor, attr_read,attr_writer这样的方法可以给对象添加属性，那么如何给类添加属性?</p>
<p>属性实际上是一对方法，而且还是单件方法，所以针对指定类，添加类属性，则需要在它的单件类定义这个属性即可。</p>
<p>比如这段代码：</p>
<pre><code class="Ruby">class C
  class &lt;&lt; self
    attr_accessor :h
  end
end
C.h = &#39;hi&#39;
C.h #= &gt; hi
</code></pre>
<h4 id="类扩展与对象扩展"><a href="#类扩展与对象扩展" class="headerlink" title="类扩展与对象扩展"></a>类扩展与对象扩展</h4><p>通过向类的单件类中添加模块来定义类方法，这种技巧称之为类扩展，类是对象，相应地，这种技巧也能用在对象上，故也有对象扩展。</p>
<p>看段代码理解下：</p>
<pre><code class="Ruby">module MyModule
  def a_method; puts &quot;hello&quot;; end
end

class C
  class &lt;&lt; self
    include MyModule
  end
end

obj = []
class &lt;&lt; obj
  include MyModule
end

C.a_method #= &gt; hello
C.singleton_methods #= &gt; [:a_method]

obj.a_method #= &gt; hello
obj.singleton_methods #= &gt; [:a_method]
</code></pre>
<p>类C和对象obj【这里是个空数组】，都在其对应的单件类中包含了MyModule，把MyModule的普通方法a_method变成了其单件方法。</p>
<p>由于类扩展和对象扩展的普遍性，Ruby中专门提供了一个方法：Object#extend,所以上面的代码还可以这么写：</p>
<pre><code class="Ruby">module MyModule
  def a_method; puts &quot;hello&quot;; end
end

class C
  extend MyModule
end

obj = []
obj.extend MyModule

C.a_method #= &gt; hello
C.singleton_methods #= &gt; [:a_method]

obj.a_method #= &gt; hello
obj.singleton_methods #= &gt; [:a_method]
</code></pre>
<h4 id="方法包装器"><a href="#方法包装器" class="headerlink" title="方法包装器"></a>方法包装器</h4><p>方法包装器，即用一个方法包装另一个方法。怎么会有这样的需求？假定目前你有一个不能直接修改的方法，比如它在一个封装的库里，你希望为这个方法包装额外的特性。比如添加异常处理什么的。</p>
<p>有三种方式：环绕别名，细化封装器，下包含包装器。</p>
<ul>
<li><p>环绕别名</p>
<p>先来看看alias关键字，可以给方法起一个别名。</p>
<pre><code class="Ruby">class C
  def my_method
    puts &#39;C#my_method()&#39;
  end
  alias_method :m, :my_method
end
C.new.my_method #= &gt; C#my_method()
C.new.m #= &gt; C#my_method()
</code></pre>
<p>如果给方法起了别名，然后又重新定义了它，会如何？继续这个例子：</p>
<pre><code class="Ruby">class C
  def my_method
    puts &#39;C#my_method()&#39;
  end
  alias_method :m, :my_method

  def my_method
    puts &quot;redefine my_method&quot;
    m # 调用了m, 也就是原来的my_method
  end
end
C.new.my_method #= &gt; redefine my_method\n C#my_method()
C.new.m #= &gt; C#my_method()
</code></pre>
<p>这里重新定义了my_method，但是别名引用的仍然是原始的那个方法。</p>
<p>这里其实做了这样的事：</p>
<ul>
<li>给方法定义了别名（my_method多了别名m）</li>
<li>重定义了这个方法（my_method）</li>
<li>在新的方法中调用了老方法（m）</li>
</ul>
<p>新的my_method像是环绕在老的my_method方法之外，包装了新的功能，这种技巧就叫做环绕别名。</p>
<p>环绕别名的一个潜在危险与加载有关，特别是多次环绕别名时，所以才会有alias_method_chain的兴起与衰亡。【书中rails部分有提到】</p>
<p>而它最主要的问题在于它是一种猴子补丁。</p>
</li>
<li><p>细化封装器</p>
<p>跟细化方法一样，用refine来定义，在新的方法中使用super来调用旧方法。</p>
<p>细化封装器的作用范围从<code>using</code>开始，到文件末尾，这使得细化封装器比全局性的环绕别名更安全。</p>
</li>
<li><p>下包含包装器</p>
<p>是环绕别名的一种替代方式。使用Module#prepend方法，可以覆写类的同名方法，同时可以通过super来调用旧方法。比如上面的例子，用pretend可以这么写：</p>
<pre><code class="Ruby">module D
  def my_method
    puts &quot;redefine my_method&quot;
    super
  end
end

class C
  prepend D
  def my_method
    puts &#39;C#my_method()&#39;
  end
end
C.new.my_method #= &gt; redefine my_method\n C#my_method()
</code></pre>
<p>module D 中的my_method覆盖了class C中的实例方法my_method。</p>
</li>
</ul>
<h4 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h4><p>这章的很多知识点，在后面rails源代码赏析中都可以寻到踪迹，特别是类扩展和方法包装器，看完这章，突然有种拿到武功秘籍的错觉：P</p>
]]></content>
      <categories>
        <category>Reading</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>读《Ruby元编程》之eval和hooks</title>
    <url>/posts/ruby-metaprogramming-part5-evals-and-hooks/</url>
    <content><![CDATA[<p>《Ruby元编程》第6章编写代码的代码的学习笔记，主要内容是eval和钩子方法。</p>
<span id="more"></span> 

<h4 id="从需求说起"><a href="#从需求说起" class="headerlink" title="从需求说起"></a>从需求说起</h4><p>本章开始用一个boss提出的问题作为引子，我觉得这个例子很好。简述下问题：</p>
<p>创建一个名为attr_checked的类宏，这个类宏要满足两个条件：</p>
<ul>
<li>接受属性名和代码块，代码块用于验证属性值的有效性</li>
<li>只有当类包含某个模块，比如checkedAttributes时，才可以使用attr_checked</li>
</ul>
<p>解决思路可以转化成：</p>
<ul>
<li>如何定义一个类宏方法？【先用eval定义一个内核方法，然后再改造成类宏】</li>
<li>如何给一个类宏方法添加代码块？【method添加&amp;block参数即可】</li>
<li>定义模块checkedAttributes，通过钩子方法为指定的类添加attr_checked</li>
</ul>
<h4 id="认识下eval"><a href="#认识下eval" class="headerlink" title="认识下eval"></a>认识下eval</h4><p>定义自己的类宏方法前，先来认识下Kernel#eval。</p>
<p>eval是内核方法，参数是一段ruby代码文本。相比instance_eval， class_eval，<strong>它只能执行代码字符串</strong>。那instance_eval， class_eval是否能执行代码字符串？可以。</p>
<p>看个例子：</p>
<pre><code class="Ruby">my_array = [1,2,3]
my_array.instance_eval &quot;self.reduce(&amp;:+)&quot; #= &gt; 6
eval(&quot;my_array.inject &#123;|sum, x| sum + x&#125;&quot;) #= &gt; 6
</code></pre>
<p>这类代码字符串可以携带一个binding对象，然后在该对象的作用域中执行代码。</p>
<ul>
<li><p>eval与binding</p>
<p>Binding是一个用对象表示的作用域，可以通过Kernel#binding 来创建。ruby 还提供了TOPLEVEL_BINDING的预定义常量，表示顶级作用域的Binding对象。</p>
<p>看代码理解下：</p>
<pre><code class="Ruby">class MyClass
  def my_method
    @x = 1
    binding
  end
end
obj = MyClass.new.my_method
eval(&quot;@x&quot;,obj) #= &gt; 1
eval(&quot;self&quot;, TOPLEVEL_BINDING) #= &gt; main
</code></pre>
</li>
<li><p>eval的麻烦</p>
<p>最大的问题是安全性，因为执行的是一段字符串，ruby是不会对字符串进行语法检查的，容易引发代码注入攻击。</p>
<p>看个例子：</p>
<pre><code class="ruby">def explore_array(method)
  code = &quot;[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;].#&#123;method&#125;&quot;
  eval code
end

explore_array(&quot;include?(&#39;a&#39;)&quot;) #= &gt; true
explore_array(&quot;size&quot;) #= &gt; 3
explore_array(&quot;object_id; Dir.glob(&#39;*&#39;)&quot;) #= &gt; 列出了该文件所在目录下的所有文件
</code></pre>
<p>这里，运行类似<code>explore_array(&quot;object_id; Dir.glob(&#39;*&#39;)&quot;)</code>这样的恶意代码可能会带来意想不到的后果。所以，能用代码块就用代码块。</p>
<p>如何防止代码注入攻击？</p>
<ul>
<li><p>解析所有的代码字符串，不现实</p>
</li>
<li><p>改用动态方法和动态派发来替换eval</p>
<p>比如上面的例子，explore_array可以这样写：</p>
<pre><code class="Ruby">def explore_array(method, *arguments)
  [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;].send(method, *arguments)
end

explore_array(:include?, &#39;a&#39;) #= &gt; true
explore_array(:size) #= &gt; 3
</code></pre>
</li>
</ul>
</li>
<li><p>污染对象和安全级别</p>
<p>针对eval存在的安全问题，可以采用一些使它变得安全的方法。</p>
<p>Ruby会自动把不安全的对象标记为污染对象，你可以通过给$SAFE赋值（[0,1, 2,3]）来设置安全级别，禁止某些潜在的危险操作，其中0最低，3最高。</p>
<p>通过使用安全级别，可以为eval方法创造了一个可控的环境，像这样的环境称之为<a href="https://en.wikipedia.org/wiki/Sandbox_(software_development">沙盒</a>。</p>
</li>
</ul>
<h4 id="用eval来定义add-checked-attr"><a href="#用eval来定义add-checked-attr" class="headerlink" title="用eval来定义add_checked_attr"></a>用eval来定义add_checked_attr</h4><p>「其实，这里我并不是很理解，为什么要调用eval来定义这个method，然后又去掉它？为什么不直接用class_eval的方式来定义？难道这样绕一圈，仅仅是为了向读者介绍eval？」</p>
<p>不吐糟，直接看解答：</p>
<pre><code class="Ruby">def add_checked_attr(klass, attr)
  eval &quot;
  class #&#123;klass&#125;
    def #&#123;attr&#125;=(value)
      raise &#39;Invalid attribute&#39; unless value
      @#&#123;attr&#125; = value
    end
    def #&#123;attr&#125;
      @#&#123;attr&#125;
    end
  end
  &quot;
end
</code></pre>
<h4 id="去掉eval，加上block"><a href="#去掉eval，加上block" class="headerlink" title="去掉eval，加上block"></a>去掉eval，加上block</h4><p>鉴于eval的问题，改用class_eval来打开类，同时给方法添加一个block</p>
<pre><code class="Ruby">def add_checked_attr(klass, attr, &amp;validation)
  klass.class_eval do

    define_method &quot;#&#123;attr&#125;=&quot; do |value|
      raise &#39;Invalid attribute&#39; unless validation.call(value) # validation 是一个proc
      instance_variable_set(&quot;@#&#123;attr&#125;&quot;, value)
    end

    define_method attr do
      instance_variable_get(&quot;@#&#123;attr&#125;&quot;)
    end

  end
end
</code></pre>
<h4 id="改造成类宏"><a href="#改造成类宏" class="headerlink" title="改造成类宏"></a>改造成类宏</h4><p>为了让add_checked_attr对所有类都可用，可以将它定义在class中，另修改方法名为attr_checked，去掉类参数。</p>
<p>解答如下：</p>
<pre><code class="Ruby">class Class
  def attr_checked(attr, &amp;validation)
    define_method &quot;#&#123;attr&#125;=&quot; do |value|
      raise &#39;Invalid attribute&#39; unless validation.call(value) # validation 是一个proc
      instance_variable_set(&quot;@#&#123;attr&#125;&quot;, value)
    end

    define_method attr do
      instance_variable_get(&quot;@#&#123;attr&#125;&quot;)
    end
  end
end
</code></pre>
<p>最后请上我们的hooks。</p>
<h4 id="钩子方法"><a href="#钩子方法" class="headerlink" title="钩子方法"></a>钩子方法</h4><p>看个例子：</p>
<pre><code class="Ruby">module M
  def self.included(othermod)
    puts &quot;M was included into #&#123;othermod&#125;&quot;
  end
end

class C
  include M
end
#= &gt; M was included into C
</code></pre>
<p>Module#included在一个module被include时，被自动调用，这种方法称之为钩子方法，因为<strong>它们像钩子一样，钩住一个特定的事件</strong>。类似的方法还有Module#method_added, Module#extend_object等。</p>
<p>想要捕获单件方法的钩子事件，需要使用BasicObject的singleton_xxx方法，比如singleton_method_added。</p>
<p>针对上面的例子，可以覆写include方法得到一样的效果：</p>
<pre><code class="Ruby">module M;end

class C
  def self.include(*modules)
    puts &quot;#&#123;modules&#125; was included into C&quot;
    super
  end
  include M
end
#= &gt; [M] was included into C
</code></pre>
<p>注意这里覆写include中，最后<strong>调用了super</strong>，不然这个module是不会被include的。这种通过覆写添加额外功能的效果，也可以通过环绕别名的方式实现。</p>
<p>包含并扩展类的方式就用到了钩子，看个例子：</p>
<pre><code class="Ruby">module M
  def self.included(klass)
    klass.extend ClassMethods
  end
end

module ClassMethods
  def my_method
    puts &quot;it could be a class method&quot;
  end
end

class D
  include M
end

D.my_method #= &gt; it could be a class method
</code></pre>
<p>类D包含了模块M，调用了M的钩子方法:included， 这个钩子方法接着用module ClassMethods扩展了类D，使得module ClassMethods的my_method 成为了类D的类方法。</p>
<p>Rails中ActiveSupport有一个module Concern，就封装了包含并扩展的技巧。</p>
<p>使用这种技巧，完成最后一步。</p>
<pre><code class="Ruby">module CheckedAttributes
  def self.included(base)
    base.extend ClassMethods
  end

  module ClassMethods
    def attr_checked(attr, &amp;validation)
      define_method &quot;#&#123;attr&#125;=&quot; do |value|
        raise &#39;Invalid attribute&#39; unless validation.call(value) # validation 是一个proc
        instance_variable_set(&quot;@#&#123;attr&#125;&quot;, value)
      end

      define_method attr do
        instance_variable_get(&quot;@#&#123;attr&#125;&quot;)
      end
    end
  end
end
</code></pre>
<p>OK ！</p>
<h4 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h4><p>整本书到这里，基本算是走完了大半了，后面第二部分是有关rails中的元编程，篇幅就相对而言少了些，作者挑了几个板块说一下。我的感觉是，如果前面的六章理解的七七八八了，可以看一些gem的源代码，有利于加深理解。你会在其中发现很多元编程的身影。</p>
]]></content>
      <categories>
        <category>Reading</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>读《Ruby元编程》之Rails源代码赏析</title>
    <url>/posts/ruby-metaprogramming-part6-rails/</url>
    <content><![CDATA[<p>《Ruby元编程》之Rails源代码赏析笔记。</p>
<span id="more"></span> 

<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>《Ruby元编程》part 2 说的是rails中的元编程，相比part 1 ，这部分的篇幅少了很多。</p>
<p>主要说了这四块：</p>
<ul>
<li>ActiveRecord的组成</li>
<li>ActiveSupport的concern模块</li>
<li>alias_method_chain</li>
<li>属性方法</li>
</ul>
<p>来逐一看看。</p>
<h4 id="ActiveRecord的组成"><a href="#ActiveRecord的组成" class="headerlink" title="ActiveRecord的组成"></a>ActiveRecord的组成</h4><ul>
<li>是什么？</li>
</ul>
<p>ActiveRecord是一个库，用来将Ruby对象映射到数据库中，然后你就可以直接对model进行操作，使用类的对象与数据库交互，不需要通过传统的SQL语句，rails会帮你转化成SQL语句。</p>
<ul>
<li>依赖和组成</li>
</ul>
<p>ActiveRecord依赖ActiveSupport，ActiveModel，并且使用ActiveSupport::Autoload来扩展了类。</p>
<p>ActiveRecord::Base是它最重要的类，由一堆模块组装起来，通过extend，include 多个module，获得了大量的实例方法和类方法。</p>
<h4 id="ActiveSupport的concern模块"><a href="#ActiveSupport的concern模块" class="headerlink" title="ActiveSupport的concern模块"></a>ActiveSupport的concern模块</h4><p>concern模块是一个最小依赖管理系统，它的诞生，是为了解决包含并扩展类中链式包含的问题。</p>
<p>书中较详细地说明了concern的实现机制，通过覆写内核方法append_features来决定module是否进入祖先链 ,不过这段的代码真不好理解。</p>
<h4 id="alias-method-chain"><a href="#alias-method-chain" class="headerlink" title="alias_method_chain"></a>alias_method_chain</h4><p>它的兴起是为了处理别名机制，你可以把它看成是环绕别名的构建器，而这也是它消亡的原因。颇有“成也萧何，败也萧何”的味道。</p>
<p>既然它已经逐渐退出舞台，那么用什么来解决给原方法增加新功能的问题呢？</p>
<p>在第五章中提到的prepend，成了它的替代品。</p>
<h4 id="属性方法"><a href="#属性方法" class="headerlink" title="属性方法"></a>属性方法</h4><ul>
<li><p>是什么？</p>
<p>自动创建的访问器。比如你创建了一个类Student，它有name， age字段，可以通过Student.new创建对象，直接对其name， age读写。</p>
<pre><code class="Ruby">s = Student.new
s.name = &quot;Tom&quot;
s.age = 18
s.save
s.name #=&gt; Tom
</code></pre>
<p>这里<code>name =</code>， <code>name</code>， <code>age=</code>, <code>age</code>等方法，就是属性方法，都是ActiveRecord通过查看students表的字段进行创建的。</p>
</li>
<li><p>发展历史</p>
<p>Rails1.0时，通过幽灵方法来实现属性方法，由于幽灵方法并不是真正的方法，调用时要先完整搜过一遍祖先链，所以Rails2.0时，对属性方法的实现进行了改进。大致的思路是：第一次访问属性时，这个属性是个幽灵方法，ActiveRecord::Base#method_missing会在这时把这个幽灵方法转化为真实的方法，同时method_missing还动态地为数据库中的其他字段创建读，写，查询访问器，下一次再访问时，就会有一个真实的方法器可供访问，不再进入method_missing方法。</p>
</li>
</ul>
<h4 id="一点感触"><a href="#一点感触" class="headerlink" title="一点感触"></a>一点感触</h4><p>刚开始看元编程的时候，很激动，像是发现了宝似的，现在看完了，平静了很多。借用书中的一句话：元编程的目的不是为了让代码变得更聪明，而是让代码变得更灵活。</p>
<p>Happy metaprogramming!</p>
]]></content>
      <categories>
        <category>Reading</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>在Mac下运行Lisp程序</title>
    <url>/posts/running-lisp-under-mac-os/</url>
    <content><![CDATA[<p>在Mac下执行Lisp程序时，遇到了点坑，记录下。</p>
<p>这里的Lisp主要是指common lisp和scheme。</p>
<span id="more"></span> 

<h4 id="Common-lisp"><a href="#Common-lisp" class="headerlink" title="Common lisp"></a>Common lisp</h4><p>如何在终端跑common lisp文件？<br><a href="https://en.wikipedia.org/wiki/Common_Lisp">common lisp wiki</a> 上给出了很多免费的implementations。</p>
<p>如：Armed Bear Common Lisp (ABCL) ，Clozure CL(CCL),  Embeddable Common Lisp(ECL), Steel Bank Common Lisp (SBCL) 。</p>
<p>这里，我选了<a href="https://github.com/sbcl/sbcl">SBCL</a>。</p>
<p>先安装SBCL：</p>
<pre><code>brew install sbcl
</code></pre>
<p>执行某个文件：</p>
<pre><code>sbcl --script FILENAME
</code></pre>
<p>执行<code>sbcl --help</code>， 了解更多。</p>
<h5 id="更新-2019-03-29-："><a href="#更新-2019-03-29-：" class="headerlink" title="更新[2019-03-29]："></a>更新[2019-03-29]：</h5><p>练习common lisp的时候，想试试在终端运行指令，类似mit-scheme，发现sbcl没那么顺手，改用<a href="https://clisp.sourceforge.io/">clisp</a>。</p>
<p>安装:</p>
<pre><code>brew install clisp
</code></pre>
<p>安装后，终端直接 <code>clisp</code>， 进入交互环境。</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcly1g1jl0x336wj319i0i4whc.jpg"></p>
<p>使用 <code>(exit)</code> 或者 <code>(quit)</code> 退出clisp。</p>
<p>执行某个文件：</p>
<pre><code>clisp FILENAME
</code></pre>
<p>执行<code>clisp --help</code>， 了解更多。</p>
<h4 id="Scheme"><a href="#Scheme" class="headerlink" title="Scheme"></a>Scheme</h4><p>参考<a href="https://www.gnu.org/software/mit-scheme/">mit-scheme</a>, 下载MIT-scheme:</p>
<p>[对于Mac OS version 10.14 +，请不要直接在<a href="https://www.gnu.org/software/mit-scheme/">mit-scheme</a>下载适用于Mac OS 10.13的安装包，会坑得人莫名其妙……]</p>
<p>使用Homebrew：</p>
<pre><code>brew install mit-scheme
</code></pre>
<p>安装完成后，终端输入：</p>
<pre><code>mit-scheme
</code></pre>
<p>进入scheme交互环境:</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1g1bi2w09qej31ry0aijtk.jpg"></p>
<p>使用 <code>(exit)</code> 或者 <code>(quit)</code> 退出scheme。</p>
<p>执行某个文件：</p>
<pre><code>scheme &lt; FILENAME
</code></pre>
<p>执行<code>scheme --help</code>， 了解更多。</p>
<p>At last, Thanks, Homebrew,  you saved me.</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://en.wikipedia.org/wiki/Common_Lisp">common lisp wiki</a></p>
<p><a href="https://github.com/sbcl/sbcl">SBCL</a></p>
<p><a href="https://www.gnu.org/software/mit-scheme/">MIT/GUN Scheme</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Lisp</tag>
      </tags>
  </entry>
  <entry>
    <title>selenium unknown error - call function result missing &#39;value&#39;</title>
    <url>/posts/selenium-unknown-error-call-function-result-missing-value/</url>
    <content><![CDATA[<p>在selenium web driver test 中，遇到的一个问题。</p>
<span id="more"></span> 

<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>进行fill form操作时，会抛出error：<br><strong>unknown error: call function result missing ‘value’</strong></p>
<p>其中：chrome  version 65，chromedriver version 2.34，  Mac OS Sierra 10.12</p>
<h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><p>Google后，很快看到解答：来自stack overflow的<a href="https://stackoverflow.com/questions/49175711/q-codeceptjs-unknown-error-call-function-result-missing-value">Q: CodeceptJS “unknown error”: call function result missing ‘value’</a></p>
<p> <img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fpdjohdpuxj30k306uzlp.jpg"></p>
<p>chrome悄无声息地升级到了65，这个坑真的是让人无言以对……</p>
<p>解决方法也就是升级chrome driver ，那就开始吧。</p>
<h4 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h4><p>Mac下，使用brew:</p>
<pre><code>brew upgrade chromedriver
</code></pre>
<p>OK, 搞定！一步更新到最新版2.36。</p>
<p>再次运行测试，passed。</p>
<p>后记下：</p>
<p>现在看升级方法，很简单，但是最开始的时候，我用<code>brew upgrade chromedriver</code>出错了，以为不能这么升级【现在想想，当时应该是翻墙的原因】，然后我竟然脑抽地改用了<code>npm install chromedriver --chromedriver_version=LATEST</code>！！ 报错 http request error, Google后看<a href="https://github.com/vuejs/vue-cli/issues/562">ChromeDriver installation failed Error with http request: Error</a>，是翻墙的原因，还一本正经地采用了cdn的迂回方法，结果各种惨不忍睹 ……</p>
<p>写下这个，主要是希望同我一般的小白，别再踩坑了，白白浪费了大好时光，Mac下，直接<code>brew upgrade chromedriver</code>即可。当然，Linux下，还是用npm ： P</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://stackoverflow.com/questions/49175711/q-codeceptjs-unknown-error-call-function-result-missing-value">Q: CodeceptJS “unknown error”: call function result missing ‘value’</a></p>
<p><a href="https://stackoverflow.com/questions/48609069/org-openqa-selenium-webdriverexception-unknown-error-call-function-result-miss">org.openqa.selenium.WebDriverException: unknown error: call function result missing ‘value’</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Selenium</tag>
        <tag>ErrorTracking</tag>
      </tags>
  </entry>
  <entry>
    <title>给新建用户发送密码重置邮件</title>
    <url>/posts/send-password-reset-when-create-new-user/</url>
    <content><![CDATA[<p>用devise做用户登录，遇到的一个问题，记录下场景和leader指导出的解决方法。</p>
<span id="more"></span> 

<h4 id="场景："><a href="#场景：" class="headerlink" title="场景："></a>场景：</h4><p>添加项目成员member时，需要管理员新增用户user。</p>
<ul>
<li>管理员在新增用户页面中输入邮箱；</li>
<li>管理员提交表单，用户的初始密码随机生成，随后给新建的用户发送一份账户激活的邮件；</li>
<li>新增用户登录注册的邮箱，点击邮件中的链接【看似激活，实则为重置密码的链接】；</li>
<li>用户重置密码完成，自动登录。</li>
</ul>
<p>这里只涉及devise如何发送重置密码的邮件。</p>
<h4 id="准备工作："><a href="#准备工作：" class="headerlink" title="准备工作："></a>准备工作：</h4><p>三个model：</p>
<p>对应的表结构：</p>
<pre><code class="ruby"># == Schema Information
#
# Table name: members
#
#  id         :integer          not null, primary key
#  user_id    :integer
#  project_id :integer
#  created_at :datetime         not null
#  updated_at :datetime         not null

# Table name: projects
#
#  id         :integer          not null, primary key
#  title      :string
#  created_at :datetime         not null
#  updated_at :datetime         not null

# Table name: users
#
#  id                     :integer          not null, primary key
#  email                  :string           default(&quot;&quot;), not null
#  encrypted_password     :string           default(&quot;&quot;), not null
#  reset_password_token   :string
#  reset_password_sent_at :datetime
#  remember_created_at    :datetime
#  sign_in_count          :integer          default(0), not null
#  current_sign_in_at     :datetime
#  last_sign_in_at        :datetime
#  current_sign_in_ip     :string
#  last_sign_in_ip        :string
#  created_at             :datetime         not null
#  updated_at             :datetime         not null
</code></pre>
<h4 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h4><p>使用devise自带的sessions。在<code>routes.rb</code>中做如下修改：</p>
<pre><code class="ruby">### config/routes.rb

devise_for :users, path: &quot;&quot;, controllers: &#123;
    sessions: &quot;sessions&quot;
  &#125;
</code></pre>
<p>新建一个sessionscontroller：<code>rails g controller sessions</code></p>
<p> 继承<code>Devise::SessionsController</code>.</p>
<pre><code class="ruby">### app/controllers/sessions_controller.rb

class SessionsController &lt; Devise::SessionsController
end
</code></pre>
<p>如果希望root页面就是显示注册的页面，可以在<code>routes.rb</code>中添加如下代码：</p>
<pre><code class="ruby">### config/routes.rb

 devise_scope :user do
    get &quot;/&quot;, controller: :sessions, action: :new
  end
</code></pre>
<p>激活账户涉及confirmable模块，使用<code>rails g devise user</code> 创建user时，默认没有confirmable的，需要自己手动添加，请在创建user时，确保含有以下字段：</p>
<pre><code class="ruby">t.string   :confirmation_token
t.datetime :confirmed_at
t.datetime :confirmation_sent_at
t.string   :unconfirmed_email # Only if using reconfirmable
</code></pre>
<p>「如果已经创建，使用rail g migration，给user添加上这些字段，同时迁移数据，给现有用户的confirmed_at赋值，不然无法登录。」</p>
<p>修改<code>user.rb</code>, 添加上模块：<code>:confirmable</code></p>
<pre><code class="ruby">### app/models/user.rb

class User &lt; ApplicationRecord
  devise :database_authenticatable, :rememberable, :validatable, :recoverable, :confirmable
  ......
end
</code></pre>
<p>同时在新增成员的表单中，允许输入用户的邮箱，如果邮箱存在，则直接添加该用户到项目成员中，如果邮箱不存在，则给该邮箱发送确认的邮件。</p>
<p>修改member.rb, 添加：</p>
<pre><code class="ruby">### app/models/member.rb

arr_accessor :email
</code></pre>
<p>这样member的new.html.erb中就可以使用<code>f.input :email</code>，随后在controller的create action中，通过传过来的email来判断用户是否已经存在。修改create中原来的@member.save，改成@member.submit， 在<code>member.rb</code>中添加submit 函数：</p>
<pre><code class="ruby">### app/models/member.rb

  def submit(email)
    password = SecureRandom.hex(4)
    user = User.where(email: email).first_or_initialize(password: password, password_confirmation: password)
    user.save
    self.user = user
    self.save
    errors.empty?
  end

### 这里省略了errors的delegate，如果email是无效的，需要将user的error delegate给member。
</code></pre>
<p>在members_controller中，修改create action：</p>
<pre><code class="ruby">#### app/controllers/projects/members_controller.rb

 def create
    if @member.submit(member_params[:email])
      @user = @member.user
      @user.send_activation_instructions unless @user.confirmed?
    end
  end
</code></pre>
<p>而对于send_activation_instructions，发送确认邮件的method，可以参考<code>send_devise_notification</code> 在 devise 中的定义：</p>
<pre><code class="ruby">### app/models/authenticatable.rb

def send_devise_notification(notification, *args)
  message = devise_mailer.send(notification, self, *args)
  # Remove once we move to Rails 4.2+ only.
  if message.respond_to?(:deliver_now)
    message.deliver_now
  else
    message.deliver
  end
end
</code></pre>
<p>这里<code>message = devise_mailer.send(notification, self, *args)</code>，devise_mailer使用send，调用参数notification传过来的方法名。</p>
<p>看Devise::Mailer，里面定义了5个methods, 用于发送不同类型的邮件需求:</p>
<pre><code class="ruby">#### app/mailers/devise/mailer.rb

## 以下是confirmation_instructions。

def confirmation_instructions(record, token, opts=&#123;&#125;)
  @token = token
  devise_mail(record, :confirmation_instructions, opts)
end

.......
</code></pre>
<p>参考这个，我们可以写出activation_instructions。</p>
<p>在 user.rb中，定义: send_activation_instructions。</p>
<pre><code class="ruby">### app/models/user.rb

def send_activation_instructions
  token = set_reset_password_token ## 生成 reset_password_token,赋给token变量
  send_devise_notification(:activation_instructions, token, &#123;&#125;)
end
</code></pre>
<p>新增一个mailer： UserMailer，继承 devise_mailer, 定义 activation_instructions。</p>
<pre><code class="ruby">### app/mailers/user_mailer.rb

class UserMailer &lt; Devise::Mailer

  def activation_instructions(record, token, opts = &#123;&#125;)
    @token = token
    devise_mail(record, :activation_instructions, opts)
  end
end
</code></pre>
<p>修改<code>user.rb</code>，添加：</p>
<pre><code class="ruby">### app/models/user.rb

def devise_mailer
  UserMailer
end
</code></pre>
<p>同时，设置 reconfirmable 为false：</p>
<pre><code class="ruby">### app/models/user.rb
  devise :database_authenticatable, :rememberable, :trackable, :validatable, :recoverable, :confirmable, reconfirmable: false
  ......
</code></pre>
<p>这样在member调用submit时，user.save就不会抛出异常，要求confirm这个账户了。</p>
<p>在user_mailer的添加activation_instructions.html.erb 文件，文件内容可参考devise的<code>confirmation_instructions.html.erb</code>.</p>
<pre><code class="ruby">### app/views/user_mailer/activation_instructions.html.erb

&lt;p&gt;&lt;%= t(&#39;.greeting&#39;, recipient: @resource.name) %&gt;&lt;/p&gt;

&lt;p&gt;&lt;%= t(&#39;.instruction&#39;) %&gt;&lt;/p&gt;
&lt;p&gt;&lt;%= link_to t(&#39;.action&#39;), edit_reset_password_url(reset_password_token: @token) %&gt;&lt;/p&gt;
</code></pre>
<p>这里注意把<code>confirmation_instructions.html.erb</code>中，confirmation_url替换成 edit_reset_password_url，因为我们希望的是用户点击这个链接，跳转到密码修改的页面。</p>
<p>最后，把reset_password这个功能添加进来。</p>
<ul>
<li><p>修改routes.rb，跳过devise自带的confirmations和passwords，用reset_password来完成验证邮箱和密码重置的功能，添加：</p>
<pre><code class="ruby">### config/routes.rb

  devise_for :users, path: &quot;&quot;, controllers: &#123;
    sessions: &quot;sessions&quot;
  &#125;, skip: [ :confirmations, :passwords ]

  devise_scope :user do
    resource :reset_password
  end
</code></pre>
</li>
<li><p>新建controller，继承自devise的passwordsController:</p>
<pre><code class="ruby">class ResetPasswordsController &lt; Devise::PasswordsController

  def update
    super do |resource|
      resource.confirm if resource.errors.empty? &amp;&amp; !resource.confirmed?
    end
  end
end
</code></pre>
<p>这里重新定义了update, 调用super时，传递了一个block，如果user 没有confirmed过，同时更新密码成功，就调用confirm。在修改密码的同时，完成了用户的邮箱验证。</p>
</li>
<li><p>在app/views/reset_passwords下，添加edit.html.erb，用户收到邮件时，点击“确认我的账户”时，会跳转到该页面，在该页面进行密码重置。具体页面内容，此处略。</p>
</li>
</ul>
<p>BTW，有关邮箱的配置，可以参考rails的官方文档。在开发环境下，推荐安装 <a href="https://github.com/ryanb/letter_opener">letter_opener</a>这个gem, 就可以很轻松地查看是否正确发送了邮件了。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://github.com/plataformatec/devise">devise</a></p>
<p><a href="https://guides.rubyonrails.org/action_mailer_basics.html">Action Mailer Basics</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
      </tags>
  </entry>
  <entry>
    <title>给你的GitHub page blog自定义域名配上HTTPS</title>
    <url>/posts/set-up-https-on-github-pages-with-custom-domains-for-free/</url>
    <content><![CDATA[<p>发现自己的个人blog被贴上了广告。</p>
<span id="more"></span> 

<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>上图感受下：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fqastm6cmnj30yv0kldii.jpg"></p>
<p>无法忍受，立马Google，按<a href="https://jaeger.itscoder.com/web/2017/08/30/github-page-https">GitHub Page 博客自定义域名添加 HTTPS 支持</a>这篇的指引，注册了<a href="https://www.netlify.com/">Netlify</a> ，可惜卡在了Domain management - custom domain这，检查了步骤，没遗漏，不解，道不行，乘桴浮於海，此路不通咱换一个，改用了 <a href="https://www.cloudflare.com/">Cloudflare</a>，简单有效！</p>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><ul>
<li><p>注册 <a href="https://www.cloudflare.com/">Cloudflare</a> ；</p>
</li>
<li><p>注册后，它会让你输入你的网站域名，比如我的是luciaca.cn， 随后它会进行检测，输出结果，按照指示走即可；</p>
</li>
<li><p>随后会给到你新的DNS，要求你修改原DNS，直接去你的域名提供商那里「比如我的域名是在阿里云买的，直接登录阿里云修改DNS即可」，将你的DNS修改成Cloudflare给到的DNS；</p>
</li>
<li><p>修改好后，你的网站状态显示是not active，稍等几分钟，会发现ative了。</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fqatcjex1xj30r90840t9.jpg"></p>
</li>
<li><p>可是我发现网站竟然不能访问了，心慌慌，检查发现DNS records部分弹出了提醒信息：我的A, MX records都没有写，让我添加。</p>
<p>然后修改成这样：👇</p>
<p>「MX的那个 mail server 我写的是mail.luciaca.cn，这个是瞎蒙的。」</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fqaw2rhjexj30r20g40ux.jpg"></p>
</li>
<li><p>设置always use HTTPS</p>
<p>在Crypto部分，找到Always use HTTPS，选择on，这样就可以了。</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fqavtj5jxvj30qh04emxh.jpg"></p>
<p>​</p>
</li>
</ul>
<p>访问http时，会自动跳转到https。</p>
<p>最后的效果：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fqavbab5uzj30ng08dmxh.jpg"></p>
<p>哈哈，加上了小绿锁，效果很满意！</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://windard.com/project/2016/09/23/Add-HTTPS-To-Jekyll">给 Jekyll 配置 HTTPS</a></p>
<p><a href="https://jaeger.itscoder.com/web/2017/08/30/github-page-https">GitHub Page 博客自定义域名添加 HTTPS 支持</a></p>
<p><a href="https://sheharyar.me/blog/free-ssl-for-github-pages-with-custom-domains/">Set Up SSL on Github Pages With Custom Domains for Free</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>HTTPS</tag>
      </tags>
  </entry>
  <entry>
    <title>shell笔记之sed,tr,cut,paste</title>
    <url>/posts/shell-notes-of-sed-tr-cut-paste/</url>
    <content><![CDATA[<p>sed，tr, cut, paste 的扫盲笔记。</p>
<span id="more"></span>
<h4 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h4><p>sed: stream editor .</p>
<h5 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h5><p>处理流的神器。</p>
<h5 id="format"><a href="#format" class="headerlink" title="format"></a>format</h5><pre><code>sed command file
</code></pre>
<p>这里的 command 是 ed-style 的command。「ed: Ken Thompson发明，算是 vi 的前身。详情戳 <a href="https://en.wikipedia.org/wiki/Ed_(text_editor)">ed wiki</a>」</p>
<h5 id="examples"><a href="#examples" class="headerlink" title="examples"></a>examples</h5><pre><code class="shell">$ cat fruits
apples I have two apples.
bananas I have three bananas.
cherries I have lots of cherries.
cucumber I have a cucumber.
pear I have no pear.
watermelon I like watermelon.

$ sed &#39;s/like/have/&#39; fruits   # 将每一行出现的第一个 like 替换成 have
apples I have two apples.
bananas I have three bananas.
cherries I have lots of cherries.
cucumber I have a cucumber.
pear I have no pear.
watermelon I have watermelon.

$ sed &#39;s/apples/lemons/g&#39; fruits  # g stands for global, 全局替换 apples 为 lemons
lemons I have two lemons.
bananas I have three bananas.
cherries I have lots of cherries.
cucumber I have a cucumber.
pear I have no pear.
watermelon I like watermelon.
</code></pre>
<p>使用sed<strong>并不会改变文件原来的内容</strong>，如果想要将标准输出用于原文件，可以这样来：</p>
<pre><code class="shell">$ cat fruits
apples I have two apples.
bananas I have three bananas.
cherries I have lots of cherries.
cucumber I have a cucumber.
pear I have no pear.
watermelon I like watermelon.

$ sed &#39;s/like/have/&#39; fruits &gt; temp
$ mv temp fruits
$ cat fruits
apples I have two apples.
bananas I have three bananas.
cherries I have lots of cherries.
cucumber I have a cucumber.
pear I have no pear.
watermelon I have watermelon.
</code></pre>
<h5 id="n-option"><a href="#n-option" class="headerlink" title="-n option"></a>-n option</h5><p>sed默认输出所有的行，可以使用 -n 来指定输出的行。</p>
<p>例：</p>
<pre><code class="shell">$ sed -n &#39;1,2p&#39; fruits                            # 输出第1、2行
apples I have two apples.
bananas I have three bananas

$ sed -n &#39;1,$p&#39; fruits                            # 输出第1到最后一行，即所有行
apples I have two apples.
bananas I have three bananas.
cherries I have lots of cherries.
cucumber I have a cucumber.
pear I have no pear.
watermelon I have watermelon.

$ sed -n &#39;/pear/p&#39; fruits                     # 输出包含 pear 的行
pear I have no pear.

$ sed -n l fruits       # n 后面跟的是字母l,输出所有行，同时将分隔符转成\xx[octal value]一并打印出来
apples I have two apples.$
bananas I have three bananas.$
cherries I have lots of cherries.$
cucumber I have a cucumber.$
pear I have no pear.$
watermelon I have watermelon.$
</code></pre>
<p>常见的字符及对应的octal value可以参看这里 <a href="http://www.asciitable.com/">AsciiTable</a></p>
<h5 id="delete-lines"><a href="#delete-lines" class="headerlink" title="delete lines"></a>delete lines</h5><p>使用 d 可以删除行，这里d不是option，而是command。「当然，使用d并没有真的删除原文件，只是输出中删除了指定的行」</p>
<p>例：</p>
<pre><code class="shell">$ sed &#39;2,3d&#39; fruits                            # 删除第2，3行
apples I have two apples.
cucumber I have a cucumber.
pear I have no pear.
watermelon I have watermelon.

$ sed &#39;/watermelon/d&#39; fruits    # 删除含有 watermelon 的行
apples I have two apples.
bananas I have three bananas.
cherries I have lots of cherries.
cucumber I have a cucumber.
pear I have no pear.
</code></pre>
<h4 id="tr"><a href="#tr" class="headerlink" title="tr"></a>tr</h4><h5 id="用途-1"><a href="#用途-1" class="headerlink" title="用途"></a>用途</h5><p>用于转换或删除(-d option），比较常用的是大小写转换。</p>
<h5 id="format-1"><a href="#format-1" class="headerlink" title="format"></a>format</h5><pre><code>tr from-chars to-chars
</code></pre>
<p>一些特殊字符，比如tab，可以使用对应的octal value来代替。</p>
<h5 id="examples-1"><a href="#examples-1" class="headerlink" title="examples"></a>examples</h5><p>我们把fruits 文件内容都换成大写：</p>
<pre><code class="shell">$ tr &#39;[a-z]&#39; &#39;[A-Z]&#39; &lt; fruits
APPLES I HAVE TWO APPLES.
BANANAS I HAVE THREE BANANAS.
CHERRIES I HAVE LOTS OF CHERRIES.
CUCUMBER I HAVE A CUCUMBER.
PEAR I HAVE NO PEAR.
WATERMELON I HAVE WATERMELON.

$ tr &#39;[a-z]&#39; &#39;[A-Z]&#39; &lt; fruits | tr &#39;[A-Z]&#39; &#39;[a-z]&#39;
apples i have two apples.
bananas i have three bananas.
cherries i have lots of cherries.
cucumber i have a cucumber.
pear i have no pear.
watermelon i have watermelon.

$ date | tr &#39;&#39; &#39;\12&#39;  # 将空白符转换为换行符
Sat
Aug
10
18:40:01
CST
2019
</code></pre>
<h5 id="s-option"><a href="#s-option" class="headerlink" title="-s option"></a>-s option</h5><p>s stands for squeeze， 挤，榨。意思是转换后，to-chars里面连续出现的多个都会被”挤”成一个char。</p>
<p>比较常见的是移除不必要的空格。</p>
<p>例：</p>
<pre><code class="shell">$ cat lotsspaces
so    you   just   get
this    one!
Open         the    door, please!

$ tr -s &#39; &#39; &#39; &#39; &lt;  lotsspaces
so you just get
this one!
Open the door, please!
</code></pre>
<h5 id="d-option"><a href="#d-option" class="headerlink" title="-d option"></a>-d option</h5><p>使用 -d, tr 可以用来删除输入流中指定的字符。 </p>
<p>format长这样：</p>
<pre><code>tr -d from-chars
</code></pre>
<p>例：</p>
<pre><code class="shell">$ cat lotsspaces
so    you   just   get
this    one!
Open         the    door, please!

$ tr -d &#39; &#39; &lt; lotsspaces   # 删除空白符
soyoujustget
thisone!
Openthedoor,please!
</code></pre>
<p>这里需要记住，tr 仅可以作用于单个字符（single character) ，如果需要转换多个字符，比如将 apples 换成 lemons，建议使用sed.</p>
<h4 id="cut"><a href="#cut" class="headerlink" title="cut"></a>cut</h4><h5 id="用途-2"><a href="#用途-2" class="headerlink" title="用途"></a>用途</h5><p>从文件或者标准输出中提取指定的区域 (extract various fields of data from file or the output of a command)。</p>
<h5 id="format-2"><a href="#format-2" class="headerlink" title="format"></a>format</h5><pre><code>cut -cchars file
</code></pre>
<h5 id="examples-2"><a href="#examples-2" class="headerlink" title="examples"></a>examples</h5><pre><code class="shell">$ cat food

pizza    4    good
chesses    5    not so bad
coco    10    great!
chips    99    yeah!
sweets    9    I like them!

$ cat -c1-6 food                 #提取前6个字符
pizza
chesse
coco    1
chips
sweets

$ cut -c1-6,10- food    #提取前6个字符 和 第10个以后的所有字符
pizza    ood
chesse    not so bad
coco    1reat!
chips    yeah!
sweetsI like them!
</code></pre>
<h5 id="d-f-options"><a href="#d-f-options" class="headerlink" title="-d -f options"></a>-d -f options</h5><blockquote>
<p>-d: 指定界定符(specifying the field separator delimiter)</p>
<p>-f:指定想要抽取出的区域(the field you want to extract)</p>
</blockquote>
<p>看个例子就懂了。</p>
<pre><code class="shell">$ cat users                                 # 从 /etc/passwd 里面切出来的部分内容
nobody:*:-2:-2:Unprivileged User:/var/empty:/usr/bin/false
root:*:0:0:System Administrator:/var/root:/bin/sh
daemon:*:1:1:System Services:/var/root:/usr/bin/false
_uucp:*:4:4:Unix to Unix Copy Protocol:/var/spool/uucp:/usr/sbin/uucico
_taskgated:*:13:13:Task Gate Daemon:/var/empty:/usr/bin/false
_networkd:*:24:24:Network Services:/var/networkd:/usr/bin/false
_installassistant:*:25:25:Install Assistant:/var/empty:/usr/bin/false

$ cut -d: -f1 users                # 可以获得用户名
nobody
root
daemon
_uucp
_taskgated
_networkd
_installassistant
</code></pre>
<p>-d 可以后跟其他的分隔符，但是一些特殊的分隔符，比如tab, 就会抛错：bad delimiter, 这种情况下，可以考虑改用sed。</p>
<h4 id="paste"><a href="#paste" class="headerlink" title="paste"></a>paste</h4><h5 id="用途-3"><a href="#用途-3" class="headerlink" title="用途"></a>用途</h5><p>与cut 刚好相反，paste 用来连接多个区域。</p>
<h5 id="format-3"><a href="#format-3" class="headerlink" title="format"></a>format</h5><pre><code>paste files
</code></pre>
<h5 id="examples-3"><a href="#examples-3" class="headerlink" title="examples"></a>examples</h5><pre><code class="shell">$ cat students
张三
李四
王五
赵六
$ cat scores
89
90
100
89

$ paste students scores             # 默认用 Tab 分隔，可以用sed -n l 查看分隔符
张三    89
李四    90
王五    100
赵六    89

$ paste students scores | sed -n l # 分隔符为 \t

张三\t89$
李四\t90$
王五\t100$
赵六\t89$
</code></pre>
<h5 id="d-option-1"><a href="#d-option-1" class="headerlink" title="-d option"></a>-d option</h5><p>同 cut, -d用于指定 分隔符，默认为tab。 继续上面的例子：</p>
<pre><code class="shell">$ paste -d&#39;:&#39; students scores
张三:89
李四:90
王五:100
赵六:89

$ paste -d&#39;&gt;&#39; students scores
张三&gt;89
李四&gt;90
王五&gt;100
赵六&gt;89
</code></pre>
<p>注意 -d指定的分隔符只能是单个，如果指定了多个，会默认取第一个。</p>
<pre><code class="shell">$ paste -d&#39;&gt;++&gt;&gt;&#39; students scores
张三&gt;89
李四&gt;90
王五&gt;100
赵六&gt;89
</code></pre>
<p>为了安全性，建议分隔符用单引号包起来。不信试试下面这个 : P</p>
<pre><code class="shell">$ paste -d&gt; students scores
$ cat students
</code></pre>
<h5 id="s-option-1"><a href="#s-option-1" class="headerlink" title="-s option"></a>-s option</h5><p>将给定文件的每一行连接起来。(paste lines together)</p>
<p>看例子：</p>
<pre><code class="shell">$ paste -s students                  # 默认分隔符为 tab
张三    李四    王五    赵六

$ paste -d&#39;;&#39; -s students  # 指定分隔符为 ;
张三;李四;王五;赵六

$ ls | paste -d&#39;;&#39; -s -   # 当输入来自标准输出时，需要用 -
food;scores;students;users
</code></pre>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://en.wikipedia.org/wiki/Ed_(text_editor)">ed wiki</a></p>
<p> <a href="http://www.asciitable.com/">AsciiTable</a></p>
<p><a href="https://www.amazon.com/Shell-Programming-Unix-Linux-Developers-ebook/dp/B01L480ILM">shell programming in Unix Linux and OSX</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Web API中，使用Jbuilder来给你的controller瘦个身</title>
    <url>/posts/skinny-controller-with-jbuilder/</url>
    <content><![CDATA[<p>瘦身无处不在。</p>
<span id="more"></span> 

<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>MVC 框架中的一个设计原则：fat model, skinny controller。且不说这原则是不是绝对的正确，不过面对臃肿的controller，IDE也会发出提醒表示抗议。</p>
<p>比如在Web API中，一般用get获取资料的时候，返回的JSON中，字段会比较多，相应地，你在controller里面写的index或者show 也相对有些臃肿。那么如何简化？</p>
<p>试试<a href="https://github.com/rails/jbuilder">Jbuilder</a>。</p>
<p>下面用个简单的例子来说明下怎么给controller瘦身。</p>
<h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><p>假定你完成了一个products的API接口，对应的<code>app/controllers/api/v1/products_controller.rb</code>文件内容如下：</p>
<pre><code class="Ruby">class Api::V1::ProductsController &lt; ApiController
  before_action :authenticate_user!, only: %i[index show create update destroy]

  def index
    @products = Product.all
    render json: &#123;
        data: @products.map do |product|
          &#123;
              id: product.id,
              creator: product.user.user_name,
              name: product.name,
              description: product.description,
              price: product.price
          &#125;
        end
    &#125;
  end
  def create
    @product = Product.new(
        name: params[:name],
        description: params[:description],
        price: params[:price]
    )
    @product.user = current_user
    if @product.save
      render json: @product
    else
      render json: &#123; message: &#39;failed&#39;, errors: @product.errors &#125;, status: 400
    end
  end

  def show
    @product = Product.find(params[:id])
    render json: &#123;
        id: product.id,
        creator: product.user.user_name,
        name: product.name,
        description: product.description,
        price: product.price
    &#125;
  end

  def update
    @product = Product.find(params[:id])
    @product.update(name: params[:name], description: params[:description],price: params[:price])
    render json: &#123;
        message: &#39;update product successfully&#39;
    &#125;
  end

  def destroy
    @product = Product.find(params[:id])
    @product.destroy
    render json: &#123;
        message: &#39;product deleted&#39;
    &#125;
  end
end  
</code></pre>
<p>看着很冗长啊，怎么瘦？</p>
<p>分三步走：</p>
<ul>
<li>对index, show部分，用Jbuilder，</li>
<li>对create，update部分，用 strong params</li>
<li>对show, update, destory部分共有的@product，抽出来，用before_action</li>
</ul>
<p>第一步：简化index，show</p>
<p>这里可以看到show和index中重复代码较多，用上partial</p>
<ul>
<li><p>新建文件：<br><code>app/views/api/v1/products/_item.json.jbuilder</code>, <code>app/views/api/v1/products/show.json.jbuilder</code>,<br><code>app/views/api/v1/products/index.json.jbuilder</code>,</p>
</li>
<li><p>在<code>app/views/api/v1/products/_item.json.jbuilder</code>，添加如下内容：</p>
<pre><code class="json">json.id  product.id
json.creator product.user.user_name
json.name product.name
json.description product.description
json.price product.price
</code></pre>
</li>
<li><p>在<code>app/views/api/v1/products/show.json.jbuilder</code>，添加如下内容：</p>
<pre><code>json.partial! &#39;item&#39;, product: @product
</code></pre>
</li>
<li><p>在<code>app/views/api/v1/products/index.json.jbuilder</code>， 添加如下内容：</p>
<pre><code>json.array! @products, partial: &#39;item&#39;, as: :product
</code></pre>
</li>
<li><p>修改<code>app/controllers/api/v1/products_controller.rb</code>的index和show部分, 删除render：</p>
<pre><code class="Ruby">class Api::V1::ProductsController &lt; ApiController
  before_action :authenticate_user!, only: %i[index show create update destroy]

  def index
    @products = Product.all
  end
 .......

  def show
    @product = Product.find(params[:id])
  end

.......
end  
</code></pre>
<p>可以用postman测试一下，确保接口仍正常。</p>
</li>
</ul>
<p>第二步：简化create，update， 用params.require</p>
<ul>
<li><p>修改<code>app/controllers/api/v1/products_controller.rb</code>的create和update部分，如下：</p>
<pre><code class="Ruby">class Api::V1::ProductsController &lt; ApiController
  before_action :authenticate_user!, only: %i[index show create update destroy]
  .....
  def create
    @product = Product.new(product_params)
    @product.user = current_user
    if @product.save
      render json: @product
    else
      render json: &#123; message: &#39;failed&#39;, errors: @product.errors &#125;, status: 400
    end
  end
 .......

  def update
    @product = Product.find(params[:id])
    @product.update(product_params)
    render json: &#123;
        message: &#39;update product successfully&#39;
    &#125;
  end

.......
  private

  def product_params
    params.permit(:name, :description, :price)
  end         
end  
</code></pre>
<p>注意，这里**不能使用params.requrie(:product).permit(:name, :description, :price)**，因为你是调用接口来新建或者修改的。</p>
<p>可参见这个：<a href="https://stackoverflow.com/questions/38701746/when-json-data-posted-in-rails-throws-param-is-missing-or-the-value-is-empty-st">When JSON data posted in rails throws param is missing or the value is empty: stall</a></p>
</li>
</ul>
<p>第三步：简化show，update， destroy</p>
<ul>
<li><p>把show，update， destroy相同的部分： <code>@product = Product.find(params[:id])</code>抽出来：</p>
<pre><code class="Ruby">class Api::V1::ProductsController &lt; ApiController
  before_action :authenticate_user!, only: %i[index show create update destroy]
  before_action :find_product, only: %i[show update destroy]
.....
  def show; end

  def update
    @product.update(product_params)
    render json: &#123;
        message: &#39;update product successfully&#39;
    &#125;
  end

  def destroy
    @product.destroy
    render json: &#123;
        message: &#39;product deleted&#39;
    &#125;
  end

  private
.......

  def find_product
    @product = Product.find(params[:id])
  end
end
</code></pre>
</li>
</ul>
<p>最后瘦身的controller长这样：</p>
<pre><code class="Ruby">class Api::V1::ProductsController &lt; ApiController
  before_action :authenticate_user!, only: %i[index show create update destroy]
  before_action :find_product, only: %i[show update destroy]

  def index
    @products = Product.all
  end
  def create
    @product = Product.new(product_params)
    @product.user = current_user
    if @product.save
      render json: @product
    else
      render json: &#123; message: &#39;failed&#39;, errors: @product.errors &#125;, status: 400
    end
  end

  def show; end

  def update
    @product.update(product_params)
    render json: &#123; message: &#39;update product successfully&#39;&#125;
  end

  def destroy
    @product.destroy
    render json: &#123; message: &#39;product deleted&#39;&#125;
  end

  private

  def product_params
    param.permit(:name, :description, :price)
  end

  def find_product
    @product = Product.find(params[:id])
  end
end
</code></pre>
<p>是不是清爽了很多？看着舒服多了，大功告成！</p>
<p>这里多一句，如果你的某个method部分代码较多，也可以使用拆分的方式， 比如下面这个show：</p>
<pre><code class="Ruby">def show
  @category = Category.find(params[:id])
  @categories = Category.all
  @search = @category.products.approved.order(updated_at: :desc).ransack(params[:q])
  @products = @search.result.page(params[:page]).per(50)
  rate
end
</code></pre>
<p>可以换成：</p>
<pre><code class="ruby">before_action :fetch_current_category, only: [:show]
before_action :fetch_categories, only: [:show]
before_action :fetch_search_results, only: [:show]

def show
  rate
end

private

def fetch_current_category
  @category = Category.find(params[:id])
end

def fetch_categories
  @categories = Category.all
end

def fetch_search_results
  @search = @category.products.approved.order(updated_at: :desc).ransack(params[:q])
  @products = @search.result.page(params[:page]).per(50)
end
</code></pre>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://stackoverflow.com/questions/30932732/what-is-meant-by-assignment-branch-condition-size-too-high-and-how-to-fix-it">What is meant by ‘Assignment Branch Condition Size too high’ and how to fix it?</a></p>
<p>对于”<strong>fat model, skinny controller</strong>“这个原则，也有人反对，提出**”skinny everything”**， 戳链接了解：</p>
<p><a href="http://blog.joncairns.com/2013/04/fat-model-skinny-controller-is-a-load-of-rubbish/">“Fat model, skinny controller” is a load of rubbish</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
        <tag>API</tag>
      </tags>
  </entry>
  <entry>
    <title>Enumberable中的slice_before, slice_when, slice_after</title>
    <url>/posts/slice-before-after-when-in-ruby/</url>
    <content><![CDATA[<p>Enumberable中的三个method。</p>
<span id="more"></span> 

<h4 id="用途："><a href="#用途：" class="headerlink" title="用途："></a>用途：</h4><p>把一个enum拆分，最后返回一个enumerator，拆分的位置怎么定？循环enum中的元素，执行给到的block或者Pattern，当返回为true时，该element的位置就是拆分的位置。</p>
<p>slice_before, slice_after非常相似，可以接受block或者Pattern，区别仅在于拆分位置是在匹配元素的前面还是后面，而slice_when 只接受block作为参数，而且block中，需要有两个arguments。</p>
<p>官方文档中，给出了好些例子，感觉有点过于复杂，对我这种新手来说，不大友好：P</p>
<p>这里直接用最简单的例子来说明下它们三个的基本使用。</p>
<h4 id="使用："><a href="#使用：" class="headerlink" title="使用："></a>使用：</h4><p>[以下代码基于Ruby 2.4]</p>
<p>例子：</p>
<pre><code class="ruby">demo = [1, &#39;a&#39;, 2, &#39;b&#39;, &#39;c&#39;, 3, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;]

demo.slice_before &#123; |e| e.is_a?(Integer)&#125;.to_a

# =&gt; [[1, &quot;a&quot;], [2, &quot;b&quot;, &quot;c&quot;], [3, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;]]

demo.slice_before(Integer).to_a

# =&gt; [[1, &quot;a&quot;], [2, &quot;b&quot;, &quot;c&quot;], [3, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;]]


## after 基本类似,只是从匹配元素后开始拆分
demo.slice_after &#123; |e| e.is_a?(Integer)&#125;.to_a

# =&gt; [[1], [&quot;a&quot;, 2], [&quot;b&quot;, &quot;c&quot;, 3], [&quot;d&quot;, &quot;e&quot;, &quot;f&quot;]]

demo.slice_after(Integer).to_a

# =&gt; [[1], [&quot;a&quot;, 2], [&quot;b&quot;, &quot;c&quot;, 3], [&quot;d&quot;, &quot;e&quot;, &quot;f&quot;]]

demo.slice_when &#123;|x, y| x.is_a?(Integer)&#125;.to_a

# =&gt; [[1], [&quot;a&quot;, 2], [&quot;b&quot;, &quot;c&quot;, 3], [&quot;d&quot;, &quot;e&quot;, &quot;f&quot;]]
</code></pre>
<p>这里的Pattern是Integer，有必要提一下Pattern === elt。</p>
<p>slice_before, slice_after可以 使用Pattern === elt， 不过<code>===</code> 这个method在ruby的不同Object中，有着不一样的定义。<a href="https://ruby-doc.org/docs/ruby-doc-bundle/Manual/man-1.4/syntax.html">ruby doc</a>中的解释是：</p>
<p><strong>Behavior of the <code>===</code> method varies for each Object.</strong></p>
<p>在Object这个类中，===类似于#==，我的理解是, Object中的===，类似于elt.is_a?(Pattern)</p>
<p>比如：</p>
<pre><code class="ruby">Integer === 1
# =&gt; true

Integer === :hello  ## :hello 是一个symbol
# =&gt; false
</code></pre>
<p>在Regexp正则中，如果elt匹配pattern，则返回true，而在ruby2.5的文档中，对于Set类，===则是includes？的别名方法。如：</p>
<pre><code class="ruby">Set[1,2,3] === 2 ## true
Set[1,2,3] === 4 ## false
</code></pre>
<p>此外，上面的例子中，slice_when的执行结果与slice_after一样，呃，举的例子不好。</p>
<p>slice_when的block中，接受的两个参数，一个是current element，一个是previous element。 它在拆分出连续型数组部分很有用，看例子：</p>
<pre><code class="ruby">demo = [1, 3, 4, 5, 7, 8, 9, 10, 12]

demo.sort.slice_when &#123; |a, b| a + 1 != b &#125;.to_a

# =&gt; [[1], [3, 4, 5], [7, 8, 9, 10], [12]]
</code></pre>
<p>也可以用来找出数组中重复数据及其对应的重复个数:</p>
<pre><code class="ruby">demo = [1, 2, 3, 1, 1, 2, 3, 2, 2, 2, 3, 1]

demo.sort.slice_when(&amp;:!=).map &#123; |x| &#123; x.first =&gt; x.count&#125; &#125;

# =&gt; [&#123;1=&gt;4&#125;, &#123;2=&gt;5&#125;, &#123;3=&gt;3&#125;]
</code></pre>
<p>OK。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="http://blog.honeybadger.io/ruby-enumerable-slicing-before-when-and-after">Slicing and Dicing Ruby Enumerables</a></p>
<p><a href="http://ruby-doc.org/core-2.2.3/Enumerable.html">Enumberable</a></p>
<p><a href="https://www.sitepoint.com/new-methods-ruby-2-2/">new methods in Ruby 2.2</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>Rails部署到Nginx后静态文件加载不正常</title>
    <url>/posts/static-files-are-not-loaded-properly-when-depolyed-with-nginx/</url>
    <content><![CDATA[<p>鉴于我部署这块踩的坑不少，近来一位小伙伴在部署Rails的时候，就帮忙debug了下，中间遇到了一个问题：<strong>网站部署到Nginx后，页面加载不正常，所有的格式都没有加载进来</strong>。最后Google到了解决方法，觉得有必要记录一下，以备忘。</p>
<span id="more"></span> 

<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>本地运行的页面是这样的：👇</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1foccuxti6uj31kw0riqdl.jpg"></p>
<p>部署到Nginx后，浏览器打开的页面是这样的：👇</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1foccunilaij30ui0exq3o.jpg"></p>
<p>可以看出部署中，样式没有加载进来。</p>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>起先我以为可以通过assets:precompile来解决，但尝试后发现并不能。</p>
<p>点击右键，看chrome的console，报错如下：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1focd5l1xrnj30ex02374o.jpg"></p>
<p>报错显示是transferred with MIME type text/plain了，查看MIME <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types">官网</a>, 可以看到它的定义及应用：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1focdkrt9erj30li06w0uj.jpg"></p>
<p>看它的Discrete types列表：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1focdpcmtmcj30ck07q3ys.jpg"></p>
<p>它的multipart types：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1focdpxd603j30d9027jrd.jpg"></p>
<p>鉴于文件没有被拆分成多个部分，应该属于是discrete types， 再看console的报错，文件应该是默认用text/plain的方式处理了，看它的语法，你会发现：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1focdue52fzj30m002qwew.jpg"></p>
<p>二进制的docs都是用<strong>application/octet-stream</strong>的方式处理的，貌似找到钥匙了。可是，这要在哪里修改呢？我还是一头雾水。</p>
<p>Google后，在这一篇<a href="http://blog.csdn.net/m0_37904728/article/details/78745243"> Web部署到Nginx后静态文件加载不正常</a>里找到了解答，不废话了，直接上解答：</p>
<p>编辑<code>/etc/nginx/nginx.conf</code>文件，在http{}中，添加：</p>
<pre><code class="nginx">include /etc/nginx/mime.types;
default_type application/octet-stream;
</code></pre>
<p>然后再重启Nginx：</p>
<pre><code class="Shell">sudo service nginx restart
</code></pre>
<p>再次刷新网站，OK。</p>
<p>另，其实我也不大懂MIME，看定义知道是一种多用途互联网邮件扩展的规范，如果你好奇的话，打开你的任意一封email，选择<strong>查看原始邮件</strong>，会发现MIME的影子，有助加深理解。比如我gmail中的一份邮件：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1foceevsozwj30pd01wwex.jpg"></p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types">MIME types</a></p>
<p><a href="http://blog.csdn.net/m0_37904728/article/details/78745243"> Web部署到Nginx后静态文件加载不正常</a></p>
<p>BTW,  Google的时候，发现了阮一峰老师的这篇<a href="http://www.ruanyifeng.com/blog/2008/06/mime.html">MIME笔记</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Vuejs自定义日期组件支持v-model</title>
    <url>/posts/support-v-model-for-datetimepicker/</url>
    <content><![CDATA[<p>踩坑 v-model。</p>
<span id="more"></span> 

<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>在Vue项目中，使用<a href="https://flatpickr.js.org/">flatpickr</a> 做一个日期选择器DatePicker的组件，发现使用v-model时出了问题。</p>
<p>上图：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcly1g0d84e0y5ng30uz05vabf.gif"></p>
<p>这里当我更新新的日期时，v-model并没有同步更新，而是保持着初始值。</p>
<p>对应的HTML及组件定义的代码如下：</p>
<p>HTML：</p>
<pre><code class="vue">&lt;template&gt;
  &lt;div&gt;    
    &lt;div class=&quot;form-group row&quot;&gt;
      &lt;label class=&quot;col-form-label text-right col-4&quot;&gt;昵称&lt;/label&gt;
      &lt;div class=&quot;col&quot;&gt;
        &lt;input v-model=&quot;nickname&quot; name=&quot;nickname&quot; type=&quot;text&quot; class=&quot;form-control&quot;&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &#123;&#123; nickname &#125;&#125;

    &lt;div class=&quot;form-group row&quot;&gt;
      &lt;label class=&quot;col-form-label text-right col-4&quot;&gt;生日&lt;/label&gt;
      &lt;div class=&quot;col&quot;&gt;
        &lt;DatePicker v-model=&quot;birthday&quot; name=&quot;birthday&quot;&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &#123;&#123; birthday &#125;&#125;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
  export default &#123;
    data() &#123;
      return &#123;
        nickname: &#39;lucia&#39;,
        birthday: &#39;2018-12-26&#39;  
      &#125;  
    &#125;
  &#125;    
&lt;/script&gt;
</code></pre>
<p>DatePicker组件的内容：</p>
<pre><code class="vue">&lt;template&gt;
  &lt;div class=&quot;input-group flatpickr&quot; data-alt-input=&quot;true&quot; data-locale=&quot;zh&quot; data-alt-format=&quot;Y-m-d&quot;&gt;
    &lt;input :value=&quot;value&quot; :name=&quot;name&quot; class=&quot;flatpickr-input&quot; data-input=&quot;true&quot;&gt;
    &lt;a class=&quot;input-group-append&quot; data-toggle&gt;
      &lt;span class=&quot;input-group-text&quot;&gt;
        &lt;i class=&quot;far fa-calendar-alt&quot; /&gt;
      &lt;/span&gt;
    &lt;/a&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
import initFlatpickr from &#39;./flatpickr&#39;

export default &#123;
  props: [ &quot;value&quot;, &quot;name&quot; ],
  mounted() &#123;
    initFlatpickr(this.$el)
  &#125;
&#125;
&lt;/script&gt;
</code></pre>
<p>「其中initFlatpickr用于创建flatpickr实例，这里它不是重点，具体内容略去。」</p>
<p>Google后，参考<a href="https://alligator.io/vuejs/add-v-model-support/">Adding v-model Support to Custom Vue.js Components</a>，完美解决。</p>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>解决问题前，需要了解，v-model 是语法糖，以下两种写法得到的效果是一样的：</p>
<pre><code class="html">&lt;input v-model=&quot;message&quot; type=&quot;text&quot;&gt;

&lt;input :value=&quot;message&quot; @input=&quot;message = $event.target.value&quot; type=&quot;text&quot;&gt;
</code></pre>
<p>而对于组件DatePicker，我只需要在发生input事件时，将值传给父组件的input事件即可。</p>
<p>接下来就自然而然了。</p>
<p>修改DatePicker组件的input部分内容，监听input事件，当发生input事件后调用updateDate()方法，emit父组件的input事件，将用户选中的值传给父组件。</p>
<p>这里只显示修改部分的代码：</p>
<pre><code class="html">&lt;template&gt;
    ......
  &lt;input :value=&quot;value&quot; :name=&quot;name&quot; class=&quot;flatpickr-input&quot; data-input=&quot;true&quot; @input=&quot;update&quot; ref=&quot;datePicker&quot; @input=&quot;updateDate&quot;&gt;
    ......
&lt;/template&gt;


&lt;script&gt;
  .......
export default &#123;
  .......
  methods: &#123;
    updateDate() &#123;
      this.$emit(&#39;input&#39;, this.$refs.datePicker.value)
    &#125;
  &#125;
&#125;
&lt;/script&gt;
</code></pre>
<p>这时再看刚刚的页面，问题解决。</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcly1g0d82c579qg30uz05vwfv.gif"></p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://alligator.io/vuejs/add-v-model-support/">Adding v-model Support to Custom Vue.js Components</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Stub on any instance of a class</title>
    <url>/posts/stub-any-instance-of-a-class/</url>
    <content><![CDATA[<p>测试时遇到的一个问题。</p>
<span id="more"></span> 

<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><blockquote>
<p>新建一个对象，该对象新建后会自动保存，现在需要测试其无法保存的情景，使得obj.save返回为false。</p>
</blockquote>
<p>踩坑：</p>
<p>obj这个对象的创建中有一个属性attr设置了必填，同时该attr的值来自另一个对象a， 参考先前的代码，解决的思路是：</p>
<p>通过<code>a.save(validate: false)</code>, 让a在attr为空时保存，然后obj创建时，会取a的attr作为自己的attr，这样obj保存时必然是false，因为atrr为空，它无法过检验，但是运行后发现，不管是<code>a.save(validate: false)</code>还是<code>a.save!(validate: false)</code>, 再次执行<code>a.save</code>，都会回滚，返回false。虽然它们跳过了validation，但是save时，并没有成功，Google了半天，没有找出好的解决方法。后来，看到同事用stub的方式完美解决了，由衷觉得真是太赞了。</p>
<p>同一个问题，换个人解决，高下立判，只能说，知道和想到，隔了好几个山头啊。</p>
<p>记录下allow_any_instance_of的用法。</p>
<h4 id="allow-any-instance-of"><a href="#allow-any-instance-of" class="headerlink" title="allow_any_instance_of"></a>allow_any_instance_of</h4><p>允许一个class的任何实例stub任何一个method的，可设置返回值，也可以不设置，文档中说可以replace allow，但是allow接受的参数是对象，而allow_any_instance_of则是类。</p>
<p>看一些老的版本，比如2.99，会发现allow_any_instance_of的”前身”，any_instance.stub，我以为是前身，但是在该版本的Rspec-mock的message exception部分，已经出现了allow_any_instance_of，有些奇怪，不过用起来倒是都好用的，这里一并下记录下两者的用法。</p>
<ul>
<li><p>stub 单个method无参</p>
<p>单个method的stub，看官网的例子：</p>
<pre><code class="ruby">### allow_any_instance_of
RSpec.describe &quot;allow_any_instance_of&quot; do
  it &quot;returns a specified value on any instance of a class&quot; do
    allow_any_instance_of(Object).to receive(:foo).and_return(:return_value)
    obj = Ojbect.new
    expect(obj.foo).to eq(:return_value)
  end
end
</code></pre>
<p>用any_instance.stub 可以这样写：</p>
<pre><code class="ruby">### any_instance.stub
RSpec.describe &quot;any_instance.stub&quot; do
  it &quot;returns a specified value on any instance of a class&quot; do
    Object.any_instance.stub(:foo).and_return(:return_value)
    obj = Ojbect.new
    expect(obj.foo).to eq(:return_value)
  end
end
</code></pre>
</li>
<li><p>stub单个method有参</p>
<p>带参数的单个method，这样写：</p>
<pre><code class="ruby">### allow_any_instance_of
RSpec.describe &quot;allow_any_instance_of&quot; do
  context &quot;with arguments&quot; do
    it &quot;returns the stub value when arugments match&quot; do
      allow_any_instance_of(Object).to receive(:foo).with(:param_one, :param_two).and_return(:return_value_one)
      allow_any_instance_of(Object).to receive(:foo).with(:param_another_one, :param_another_two).and_return(:return_value_another_one)
      obj = Ojbect.new
      expect(obj.foo(:param_one, :param_two)).to eq(:return_value_one)
      expect(obj.foo(:param_another_one, :param_another_two)).to eq(:return_value_another_one)
    end
  end
end
</code></pre>
<p>换成any_instance.stub，可以这么来：</p>
<pre><code class="ruby">### any_instance.stub
RSpec.describe &quot;any_instance.stub&quot; do
  context &quot;with arguments&quot; do
    it &quot;returns the stub value when arugments match&quot; do
      Object.any_instance.stub(:foo).with(:param_one, :param_two).and_return(:return_value_one)
      Object.any_instance.stub(:foo).with(:param_another_one, :param_another_two).and_return(:return_value_another_one)
      obj = Ojbect.new
      expect(obj.foo(:param_one, :param_two)).to eq(:return_value_one)
      expect(obj.foo(:param_another_one, :param_another_two)).to eq(:return_value_another_one)
    end
  end
end
</code></pre>
</li>
<li><p>stub 多个method无参</p>
<p>多个method：</p>
<pre><code class="ruby">### allow_any_instance_of
RSpec.describe &quot;allow_any_instance_of&quot; do
 it &quot;stub multiple methods&quot; do
   allow_any_instance_of(Object).to receive_messages(:foo =&gt; &quot;foo&quot;, :bar =&gt; &quot;bar&quot;)
   obj = Ojbect.new
   expect(obj.foo).to eq(&quot;foo&quot;)
   expect(obj.bar).to eq(&quot;bar&quot;)
 end
end
</code></pre>
<p>用any_instance.stub：</p>
<pre><code class="ruby">### any_instance.stub
RSpec.describe &quot;any_instance.stub&quot; do
  it &quot;stub multiple methods&quot; do
    Object.any_instance.stub(:foo =&gt; &quot;foo&quot;, :bar =&gt; &quot;bar&quot;)
    obj = Ojbect.new
    expect(obj.foo).to eq(&quot;foo&quot;)
    expect(obj.bar).to eq(&quot;bar&quot;)
  end
end
</code></pre>
<p>any_instance.stub还有一些兄弟姐妹，比如any_instance.unstub，any_instance.stub_chain， 可以戳<a href="https://relishapp.com/rspec/rspec-mocks/v/2-99/docs/method-stubs/stub-on-any-instance-of-a-class">这里</a>了解更多。</p>
</li>
</ul>
<h4 id="warning"><a href="#warning" class="headerlink" title="warning"></a>warning</h4><p>官网上提到了慎用allow_any_instance_of,原因除了认为使用该方法<code> is often a design smell</code>，同时也是频频出bug的地方，be careful.</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://relishapp.com/rspec/rspec-mocks/v/2-99/docs/method-stubs/stub-on-any-instance-of-a-class">Stub on any instance of a class</a></p>
<p><a href="https://relishapp.com/rspec/rspec-mocks/docs/working-with-legacy-code/any-instance">any instance</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>RSpec</tag>
      </tags>
  </entry>
  <entry>
    <title>测试概念之mock篇</title>
    <url>/posts/test-concept-about-mock/</url>
    <content><![CDATA[<p>接上一篇，这篇说说mock是啥。</p>
<span id="more"></span> 

<p>呃，看了一些别人写的文章，似乎对于mocks，stubs，doubles没什么特别的限制，随便用的感觉。新手对此表示很懵逼。</p>
<p>以下内容属于小白对mock的理解，如有误人子弟的嫌疑，非常欢迎拍砖：P</p>
<h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><p>说mock前，先来说说double。</p>
<p>Double在英文中有替身的含义。当你double一个真实的对象时，相当于给这个对象创建了一个替身。</p>
<p>mocks 和stubs有时候也被称之为doubles。</p>
<p>那mocks 和stub有什么区别？</p>
<p>看到一篇文章<a href="http://www.jianshu.com/p/c5aca7d672c5">RSpec, Test Double, Mock, and Stub</a>， 上面提到<strong>Mock是对象层面的</strong>，<strong>Stub是方法层面</strong>，个人觉得挺在理的。</p>
<p>用实例来说说mock的使用。</p>
<p>接<a href="https://lupeipei.github.io/2017/10/24/test-concepts-about-stub/">上一篇</a>，测试了两个行为，验证search_tmbd是否调用了find_in_tmdb， 验证最后的结果是否render到了<code>search_tmbd.html.erb</code>这个template。但是还有一个我们没有测试的，就是find_in_tmdb返回的结果是否可用于这个template。</p>
<p>在<code>movies_controller.rb</code>中，修改search_tmbd这个method，将搜索结果赋值给到@movies：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fkup1kdwg1j30e902pglq.jpg"></p>
<p>然后我们的测试代码是这样子的：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fkup4vrh3zj30f309bwg9.jpg"></p>
<p>这里用mock(‘Moive’)，创建了一个假的movie对象，并赋值给@fake_results。用stub来调用find_in_tmdb后，返回值是@fake_results。最后<code>except assigns(:movies).to eq(@fake_results)</code> 显示我们预期实例变量movies的赋值结果是等于@fake_results的。</p>
<p>运行测试，pass。</p>
<p>说了这么多，我的理解是mock创建了对象的替身，来模拟对象的行为。</p>
<h4 id="The-End"><a href="#The-End" class="headerlink" title="The End"></a>The End</h4><p>附上一份RSpec的烹饪教程，来自Edx：</p>
<p><strong>RSpec Cookery</strong></p>
<ul>
<li>Each spec should test just one behavior</li>
<li>Use seams(stub,mock, double) as needed to isolate that behavior</li>
<li>Determine what type of expectation will check the behavior</li>
<li>Write the test and make sure it fails for the right reason</li>
<li>Add code until test is green</li>
<li>Look for opportunities to refactor/beautify</li>
</ul>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>RSpec</tag>
      </tags>
  </entry>
  <entry>
    <title>测试概念之stub篇</title>
    <url>/posts/test-concepts-about-stub/</url>
    <content><![CDATA[<p>学习测试的时候，一直不大懂stub，后来刷多了课程，感觉好像不那么懵逼了。</p>
<span id="more"></span> 

<p>决定结合自己的学习与思考，说说stub到底是个啥。</p>
<p>BTW，if  you want to be a rocking unit tester, you must know stub and mock.：P</p>
<h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><p>先来看一个问题：</p>
<p>你准备测试method A，method A 依赖于method B，比如method A要调用远端的API，而你只想测试method A有没有被正确调用，method B 存在与否，是不是返回了预期的结果，你并不care， 那么要怎么做才能保证测试的独立性？</p>
<p>这样的测试，就要用到stub。</p>
<p>下面以一个movie model来说明一下如何使用stub。</p>
<p>设想一个简单的movie影片查询情景：</p>
<p>用户在TMDb页面中输入影片名称，点击查询按钮，这时MoviesController 中对应的 search_tmdb method会去调用movie model里面真正执行search行为的method，这个method在数据库中进行搜索匹配，最后返回搜索结果，随后controller的 search_tmdb会render到搜索结果的页面，用户看到搜索结果，这样整个的搜索动作才算完成。</p>
<p>现在的情况是，movie model里面没有定义任何执行search 行为的method，而我们只想要验证controller的search_tmdb 调用了model里面执行search的method，不管这个method的存不存在，有没有返回预期结果，我们不care, 我们只想确定controller的search_tmdb做了正确的事，怎么破？</p>
<p>用stub来打破依赖。用一个伪造的method去替代，确保这个伪造的method被调用即可。</p>
<p>你的<code>movies_controller.rb</code>中定义了一个search_tmdb,但是里面啥也没有：</p>
<pre><code class="Ruby">def search_tmdb
end
</code></pre>
<p>你的test文件长这样：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNbRwgy1fktni1u9gaj30df05o3z5.jpg"></p>
<p>这时运行测试文件，会报错，因为你的search_tmdb并没有说让Movie去调用这个find_in_tmdb，如何让测试通过？</p>
<p>在<code>movies_controller.rb</code>中修改search_tmdb method，使它长这样：</p>
<pre><code class="Ruby">def search_tmdb
+ Movie.find_in_tmdb(params[:search_terms])
end
</code></pre>
<p>再次运行测试文件，通过！！</p>
<p>这里值得注意的是，你的movie model中，<strong>根本就没有find_in_tmdb这个method</strong>，很神奇是不是？</p>
<p>事实上，为了打破method之间的依赖，保证测试的独立性，这里伪造了一个针对find_in_tmdb的调用，<strong>即使这个find_in_tmdb本身存在model中，也会被忽视，overriding it</strong>。</p>
<p>这就是Stub了，很特别是不是？我第一次接触的时候，觉得很special。</p>
<p>看第二个测试： <strong>selects the Search Results template for rendering</strong></p>
<p>这里我们要确认controller的search_tmdb在调用find_in_tmdb后，是否render到了特定的template，即<code>search_tmdb.html.erb</code>。由于find_in_tmdb并没有定义，故这里也要用stub。怎么写呢？</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNbRwgy1fkuj2c03kjj30h606qgmv.jpg"></p>
<p>[这里用了matchers: render_template, response.]</p>
<p><code>Movie.stub(:find_in_tmbd)</code>： 假定执行了find_in_tmdb</p>
<p><code>expect(response).to render_template</code>:  验证最后的结果，是否render到了search_tmbd.html.erb这个template</p>
<p>运行测试文件，pass。</p>
<p>这里要注意，如果测试失败了，请检查一下你的app/views/movies/下是否存在search_tmbd.html.erb，如果不存在，新建，不然这个测试是无法通过的。</p>
<h4 id="The-End"><a href="#The-End" class="headerlink" title="The End"></a>The End</h4><p>记住一句话，有助于理解stub： The code you wish you had。</p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>RSpec</tag>
      </tags>
  </entry>
  <entry>
    <title>观《英雄本色》</title>
    <url>/posts/the-age-of-mark/</url>
    <content><![CDATA[<p>再看吴宇森1986年的黑帮片《英雄本色》，因为喜欢听原版发音，挑了粤语版。</p>
<span id="more"></span>

<p>厮杀不离兄弟情，江湖不离一个“义”字，来扯扯几个印象深刻的场景。</p>
<p>影片开始后的一个片段，小马哥Mark跟豪哥，阿成三人在酒吧一起喝酒，豪哥提到自己准备收手，小马哥随后说起自己如何拿下第一单生意，这段台词比较多，很考验演技，涉及面部表情，眼神，连带着手的动作，搭配着嚼火柴棍，最后说到“那是我第一次流眼泪”时，小马哥眼眶泛红，整个过程收放自如，特别自然，厉害啊，不愧是影帝。后面多处也有精彩表现，整个片子里，小马哥不是唯一的主角，可却是最出彩的那个。</p>
<p>豪哥出狱，找了份出租车司机的工作后，去看了昔日的兄弟小马哥，看到他穿着旧旧的工作服，跛着腿在擦洗车子，妈呀，hold不住，这一幕竟然看哭了……随后，阿成出场，小马哥给阿成开车门，被侮辱，车开走后，捡起散落在地的钞票【这里，在捡起钞票之前，小马哥还朝左右“不经意”地看了下，这个细节处理得真好】，想起《刀锋1937》里面区十四也是跛着腿，忍辱负重在一家酒店打杂，等着自己的老大庞德出狱后东山再起，剧中这个情节的设计莫不是借鉴了这里？</p>
<p>身为阿sir的弟弟阿杰在酒吧外面盘问豪哥，豪哥转过脸，然后转回来，咬着嘴唇【为什么我觉得他这个咬嘴唇的动作是为了憋住不让自己笑出来？】，说了句： “阿SIR，我没有当大哥已经很久了。“ 说完“阿SIR”，看豪哥的表情，好像那憋住的笑已经从脸上跑出来了，哈哈，原谅我，听完他这一句，笑喷了……</p>
<p>最后渡口一战，小马哥开船离开，开到半路，折返，在船上开火，浓烟滚滚，不得不说，此时贴着绑带的小马哥好帅啊！</p>
<p>后面有一个镜头，我觉得有点奇怪，渡口那场枪战，小马哥在教训阿杰的时候，说出那句：“做兄弟的……”，然后被枪射中，小马哥回身，被打成了筛子，那时候阿杰有枪的呀，他竟然不开枪，看到小马哥被杀，第一反应不是立马拿起枪对准阿成吗？估计是吓傻了？豪哥跑过去，抱起倒下的小马哥，看了眼弟弟，呃，阿杰此时竟然头一耷拉，是想要表现出自己误会了哥哥，不好意思直视哥哥，内心纠结？嗯，大概因为开枪是个体力活，他八成是打累了要休息会？毕竟张国荣哥哥那时候还很嫩，而演技是个技术活。</p>
<p>另外，谁能告诉我，为什么他们都不知道穿防弹衣啊！！！</p>
<p>此外，影片中有几处枪战，很多人都会被中间小马哥在酒家的那场圈粉，确实精彩，可是我觉得比起杜琪峰《放逐》中最后的那一幕旅馆枪战，还是觉得杜的更好看，BGM更是惊艳。不过高手就是高手，都能把枪战拍得如此华丽富有美感，看着特别畅快。</p>
<p>BTW， 《英雄本色》的英译竟然是 A better tomorrow， 挺特别的。</p>
<p>以上，一个二逼的观影扯淡。</p>
]]></content>
      <categories>
        <category>Film</category>
      </categories>
      <tags>
        <tag>Film</tag>
      </tags>
  </entry>
  <entry>
    <title>学车小记</title>
    <url>/posts/thoughts-on-driving/</url>
    <content><![CDATA[<p>脱坑的感觉贼好。</p>
<span id="more"></span> 

<p>今天考科三，一次过，考完很兴奋的跟朋友们报喜，活脱脱范进中举的翻版。</p>
<p>要知道考试前一天，教练已经跟我说了下补考的事宜，因为在他看来，我考过的几率实在是太低了。压线，挂错档，熄火，跑偏，靠边停车车头压线……所有你能想到的新手易错点，我在练车的过程中，统统犯了个遍，关键还屡犯不止。</p>
<p>从7月到9月，被教练骂得那叫一个狗血淋头。</p>
<p>所以考完那一刻，你大概能猜到为什么我跟个傻逼似的逐个汇报自己的战绩。</p>
<p>不过让我自己稍稍意外的是，考试的时候，我原以为自己会很紧张，结果却淡定的一逼。我那一批4个人，我排第二，前面那位大哥开得不好，两次机会都挂了。轮到我，一路开过，最后靠边停车被扣了10分，嗯，90分，够了，下了车，跑去签字，签完拿包走人。</p>
<p>从进考场，就仿佛有种很强烈的预感，那预感告诉我，一定会考过，现在想来，也不知这预感从何而来，毕竟考前那天，教练都告诫我不要想着一次过，做好补考的准备，思来想去，可能是大饼给的自信满仓了吧。</p>
<p>现在安静坐下来，回想这段练车的日子，虽说被骂惨了，心情常常很down，但细想下，还是在练车的过程中，有了一些成长的。</p>
<p>一个是自己对于问题的看法吧，因为被骂的次数太多，我曾一度怀疑自己是不是天生就是不适合开车，所幸这个念头并未在脑中占据很久，因为想明白了开车只是一个技能，既然是门技能，只要练的多，没有学不会的，心下坦然。所以，如果你也同我一样，练车很不顺，请不要因为别人说你玩不转就真的玩不转了，毕竟事实和看法是两回事。</p>
<p>另一个比较明显的改变也许是自己不那么的急躁了。</p>
<p>不知是不是职业病，我发现自己会很着急地想着去完成一些事，生怕来不及。体现在练车上，最明显就是挂挡，恨不能0.5秒挂进档位，多次挂错，多次死性不改，多次被骂，后面开始调整自己，慢一点，慢一点，来得及。果然，慢一点，真的会不一样。</p>
<p>想起那句我常用来给自己打鸡血的话：</p>
<p>Each time we face a fear, we gain strength, courage, and confidence in the doing.</p>
<p>送给那段时间被教练骂得灰头土脸的自己：坚持下来了，干得漂亮！</p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>Life</tag>
      </tags>
  </entry>
  <entry>
    <title>海南</title>
    <url>/posts/travels-of-hainan/</url>
    <content><![CDATA[<p>12月底，公司TB，去了海南，30号回上海后，匆匆赶回老家，回来后觉得还是有必要整理下，偷个懒， 少字多图，记录下沿途风景。</p>
<span id="more"></span> 

<p>玉带滩：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNbRwly1fysm1g2s78j31400u0427.jpg"></p>
<p>随处可见的小菠萝，水分足，推荐。</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNbRwly1fysmfcpqraj31400u0thy.jpg"></p>
<p>海水是咸的。</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNbRwly1fysmfc94usj30u0140tjt.jpg"></p>
<p>分界洲岛：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNbRwly1fysm1fldxij31400u0q5w.jpg"></p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNbRwly1fysm1ff7zwj31400u0tfl.jpg"></p>
<p>弹琴的小姐姐。</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNbRwly1fysmfav2owj30u0140qbq.jpg"></p>
<p>阳光从云缝中洒下来。</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNbRwly1fysm1fafb9j31400u042u.jpg"></p>
<p>天涯海角：</p>
<p>日出：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNbRwly1fysm1f2b97j31400u0q86.jpg"></p>
<p>正午：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNbRwly1fysm1fxkckj31400u0447.jpg"></p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNbRwly1fysm1fqbsdj31400u0tjb.jpg"></p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNbRwly1fysmfd6uj6j324i0u0wrn.jpg"></p>
<p>亚龙湾：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNbRwly1fysm1es4x0j31400u0dkl.jpg"></p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNbRwly1fysm1em3jlj31400u0whr.jpg"></p>
<p>over。</p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>Life</tag>
      </tags>
  </entry>
  <entry>
    <title>记徒步徽杭古道</title>
    <url>/posts/travels-of-huihang-ancient-road/</url>
    <content><![CDATA[<p>五一小长假徒步徽杭古道，来回近16个小时的大巴车程，对于高度晕车的人，算是拖着半条命回来了，出于对blog的偏爱，决定把出行也搬到blog上，前方多图预警。</p>
<span id="more"></span> 

<p>烟雾缭绕下的群山：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fqvv9zvbocj31400u0n1m.jpg"></p>
<p>古道：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fqvvhbn8afj31400u0wqc.jpg"></p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fqvvlzuq33j30u0140wsa.jpg"></p>
<p>走过陡峭的崖壁，前方便是人家：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fqvwdy5potj30u014015p.jpg"></p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fqvvm0k12hj30u0140qb9.jpg"></p>
<p>山间花，不知名：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fqvva1oqxyj30u0140ajg.jpg"></p>
<p>布满铁锈的扶手上爬出朵朵小黄花：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fqvva0ukc5j30u0140dl9.jpg"></p>
<p>一场夜雨后的农家樱桃树，红色可食用，酸酸甜甜，就是果核比较大：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fqvv9xivk6j30u0140grd.jpg"></p>
<p>随处可见的笋，然后三餐都吃了笋：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fqvv9ysfmnj30u0140wqn.jpg"></p>
<p>小胖子终于翻到一张可以见人的，还好比小朋友爬的快：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fqvvwh3gjjj30m80gowh2.jpg"></p>
<p>我的纯天然登山杖，可惜回来的时候，落在车上了：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fqvv9zf1oij30u0140dke.jpg"></p>
<p>山顶：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fqvwdxn9vxj31400u00z5.jpg"></p>
<p>瀑布：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fqvv9y2u0rj30u0140qf5.jpg"></p>
<p>领队的小驴玩偶：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fqvvm1566uj30u01407f7.jpg"></p>
<p>水坝：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fqvvhciisuj31400u0n41.jpg"></p>
<p>我见青山多妩媚，料青山见我应如是：P</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fqvvlzfjc8j31400u0n10.jpg"></p>
<p>Over。</p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>Life</tag>
      </tags>
  </entry>
  <entry>
    <title>月河与乌镇</title>
    <url>/posts/travels-of-jiaxing/</url>
    <content><![CDATA[<p>上周末跑去嘉兴, 逛了下月河街和乌镇, 简单记录下沿途.</p>
<span id="more"></span>

<h4 id="月河街"><a href="#月河街" class="headerlink" title="月河街"></a>月河街</h4><p>月河在南湖, 离车站很近,  跑去逛了下, 很安静的街, 游人很少.</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/imagesIMG_1423.jpg"></p>
<p>街道和苏州的建筑风格很像</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/imagesIMG_1424.jpg"></p>
<p>拉小轮车的人:</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/imagesIMG_1434.jpg"></p>
<p>清冷的酒吧街</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/imagesIMG_1437.jpg"></p>
<p>酒吧对面是家西式餐厅, 沿着湖边摆放了餐桌, 可以坐着喝茶+吹风+放空.</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/imagesIMG_1441.jpg"></p>
<p>离开前的一瞥, 酒吧街的绿植:</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/imagesIMG_1440.jpg"></p>
<h4 id="乌镇"><a href="#乌镇" class="headerlink" title="乌镇"></a>乌镇</h4><p>乌镇距离月河还是挺远的, 打车到乌镇已是傍晚, 简单收拾, 晚上8点多到西塘.</p>
<p>去西塘路过的长廊.</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/imagesIMG_1455.jpg"></p>
<p>坐船到对岸:</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/imagesIMG_1460.jpg"></p>
<p>夜景:</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/imagesIMG_1469.jpg"></p>
<p>半路上船的一对恋人, 坐在了船头. [船身在晃, 偷拍的镜头也跟着慌了慌 : P]</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/imagesIMG_1463.jpg"></p>
<p>明月挂枝头:</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/imagesIMG_1471.jpg"></p>
<p>夜色中的木心美术馆. [错过了开放时间]</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/imagesIMG_1474.jpg"></p>
<p>第二天上午去了南栅老街, 游人更少. 老街曾一时繁华但终归没落.</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/imagesIMG_1481.jpg"></p>
<p>偷拍拎包小哥:</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/imagesIMG_1482.jpg"></p>
<p>打道回府.</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/imagesIMG_1483.jpg"></p>
<p>再见, 乌镇.</p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>Life</tag>
      </tags>
  </entry>
  <entry>
    <title>镇江</title>
    <url>/posts/travels-of-zhenjiang/</url>
    <content><![CDATA[<p>踩着台风来临前的周末, 去了趟镇江. 简单记录下.</p>
<span id="more"></span>

<h4 id="景"><a href="#景" class="headerlink" title="景:"></a>景:</h4><p>金山:</p>
<p>感觉像是一个后花园, 风景很好, 淡淡荷花香.</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/imagesIMG_1255.jpg"></p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/imagesIMG_1249.jpg"></p>
<p>偶遇到苏东坡和佛印….</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/imagesIMG_1260.jpg"></p>
<p>西津渡:</p>
<p>傍晚逛的, 基本没什么人, 沿路有些冷清.</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/imagesIMG_1264.jpg"></p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/imagesIMG_1280.jpg"></p>
<p>不小心入镜的一位路人.</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/imagesIMG_1285.jpg"></p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/imagesIMG_1286.jpg"></p>
<p>北固山:<br>去了辛弃疾曾去过的地方.</p>
<p>东吴古道:</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/imagesWechatIMG34.jpeg"></p>
<p>长廊:<br><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/imagesWechatIMG32.jpeg"></p>
<p>甘露铁搭旁:</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/imagesWechatIMG36.jpeg"></p>
<p>天下第一江山:</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images371627358565_.pic.jpg"></p>
<p>城墙上的绿植:</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/imagesWechatIMG35.jpeg"></p>
<p>拍的照有些少, 但是北固山还是挺值得一去的, 无怪辛弃疾写出『天下英雄谁敌手？曹刘。生子当如孙仲谋』的词句.</p>
<h4 id="食"><a href="#食" class="headerlink" title="食:"></a>食:</h4><p>老宴春:</p>
<p>打卡了人民路的那家, 早茶10点后就不供应了, 匆匆赶上.</p>
<p>二楼一瞥.</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/imagesIMG_1239.jpg"></p>
<p>点了水晶肴肉, 汤包, 三丁包和油糕. [油糕很甜], 小馄饨量很多……..</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/imagesIMG_1240.jpg"></p>
<p>西津渡旁边周家二小姐的菜:</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/imagesIMG_1276.jpg"></p>
<p>大华面馆锅盖面:</p>
<p>打车的时候, 特意问了本地的司机师傅, 哪家的锅盖面最正宗. 然后去了师傅推荐的大华面馆[找到面馆的时候, 有些吃惊,以后自己走错了……]<br>双料面.</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/imagesIMG_1292.jpg"></p>
<p>火车站旁边的万达广场, 有家奶茶店, 店家送了个很可爱的小黄鸭糖果. 消灭它之前留个照.</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/imagesWechatIMG33.jpeg"></p>
<p>感觉镇江很小, 一天的时间, 基本可以逛个七七八八了. 因为台风缘故, 高铁停运, 在镇江多逗留了一夜, 第二天改坐绿皮火车回城, 重温了下从前慢的感觉….</p>
<p>over.</p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>Life</tag>
      </tags>
  </entry>
  <entry>
    <title>踩坑之validates_presence_of</title>
    <url>/posts/trouble-with-validates-presence-of/</url>
    <content><![CDATA[<p>记录下踩过的一个坑：</p>
<span id="more"></span> 

<p>类A与类B存在一对多关系，需要校验在创建b时，a存在，分别使用validates_presence_of :a 与 validates_presence_of :a_id，会发现当a尚未保存时，前者会成功创建b，后者则不行。</p>
<p>看个简单的例子：</p>
<p>group 与post 之间是一对多关系， post含字段group_id。</p>
<pre><code class="Ruby">### app/models/post.rb
class Post &lt; ApplicationRecord
  belongs_to :group, optional: true
  ## 为了方便找出两者的差异，这里使用optional: true，post创建时，group_id可为nil

  validates :content, presence: true
end

#### app/models/group.rb
class Group &lt; ApplicationRecord
  belongs_to :user
  has_many :posts

  validates :title, presence: true
end
</code></pre>
<p>此时，在终端执行：</p>
<pre><code class="Ruby">post = Post.new(content: &quot;this is a post&quot;)
post.save

# =&gt; true
</code></pre>
<p>接下来分别<code> validates_presence_of :group_id</code>和<code>validates_presence_of :group </code>来给post添加有效性校验，要求group必须存在。</p>
<ul>
<li><p>在post.rb中添加<code>validates_presence_of :group_id </code></p>
<p>进入console，执行如下代码：</p>
<pre><code class="Ruby">post = Post.new(content: &quot;my post&quot;)

post.save

#=&gt; rollback, 返回false, Validation failed: Group can&#39;t be blank

group = Group.new(title: &quot;hello&quot;, user_id: User.first.id)

post = Post.new(content: &quot;my post&quot;)

post.group = group

post.save

#=&gt; rollback, 返回false

post.save!

#=&gt; rollback, 显示 Validation failed: Group can&#39;t be blank
</code></pre>
<p>第一次创建post，没有给到group，无法新建，正常。</p>
<p>第二次创建post，使用post.group = group  给post的group赋值， 但是，你会发现虽然post.group有记录，不为nil， 但是post.group_id 依然为nil，保存时，校验group_id，为nil, 报错。</p>
</li>
<li><p>在post.rb中添加<code>validates_presence_of :group </code></p>
<pre><code class="Ruby">post = Post.new(content: &quot;my post&quot;)

post.save

#=&gt; rollback, 返回false, Validation failed: Group can&#39;t be blank

group = Group.new(title: &quot;hello&quot;, user_id: User.first.id)

post = Post.new(content: &quot;my post&quot;)

post.group = group

post.save

#=&gt; 返回true, 依次在Group，Post中插入了一条新的记录
</code></pre>
<p>第一次创建post，没有给到group，无法新建，正常，同<code>validates_presence_of :group_id</code> 的效果一样。</p>
<p>第二次创建post，使用post.group = group  给post的group赋值，此时，虽然post.group_id 依然为nil，但是由于post.group不为nil，检验通过，group存在，成功创建。</p>
<p>很显然，当我们创建post时，需要检验group必须存在，并不要求此时group已经创建，后者才是我们需要的校验方式。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
      </tags>
  </entry>
  <entry>
    <title>ufw常用命令</title>
    <url>/posts/ufw-common-commands/</url>
    <content><![CDATA[<p>刷docker的时候又遇到了ufw，上次踩的坑，这次又稳稳踩中。</p>
<span id="more"></span> 
<h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>UFW: uncomplicated Firewall.</p>
<p>ubuntu默认安装，配置文件地址：<code> /etc/default/ufw</code>.</p>
<h4 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h4><ul>
<li><p>查看所有指令：</p>
<pre><code class="shell">ufw --help

# 输出
Usage: ufw COMMAND

Commands:
 enable                          enables the firewall
 disable                         disables the firewall
 default ARG                     set default policy
 logging LEVEL                   set logging to LEVEL
 allow ARGS                      add allow rule
 deny ARGS                       add deny rule
 reject ARGS                     add reject rule
 limit ARGS                      add limit rule
 delete RULE|NUM                 delete RULE
 insert NUM RULE                 insert RULE at NUM
 route RULE                      add route RULE
 route delete RULE|NUM           delete route RULE
 route insert NUM RULE           insert route RULE at NUM
 reload                          reload firewall
 reset                           reset firewall
 status                          show firewall status
 status numbered                 show firewall status as numbered list of RULES
 status verbose                  show verbose firewall status
 show ARG                        show firewall report
 version                         display version information

Application profile commands:
 app list                        list application profiles
 app info PROFILE                show information on PROFILE
 app update PROFILE              update PROFILE
 app default ARG                 set default application policy
</code></pre>
</li>
<li><p>查看ufw 状态</p>
<pre><code class="shell">sudo ufw status
</code></pre>
<p>如果是inactive，可以enable ufw:</p>
<pre><code class="shell">sudo ufw enable
</code></pre>
<p>ufw 在 active的状态下，默认是deny all incoming connection, allow all outgoing connection.</p>
<p>也可自行设置：</p>
<pre><code class="shell">sudo ufw default deny incoming
sudo ufw default allow outgoing
</code></pre>
<p>如果enable ufw 后没做其他设置，直接退出服务器，再次ssh 登录，会发现一直time out， 此时需要设置allow SSH connection.</p>
</li>
<li><p>allow SSH connection</p>
<pre><code class="shell">sudo ufw allow ssh
</code></pre>
<p>等同于：</p>
<pre><code class="shell">sudo ufw allow 22
</code></pre>
<p>其他如：</p>
<p>allow http：</p>
<pre><code class="shell">sudo ufw allow http
# 等同于
sudo ufw allow 80
</code></pre>
<p>allow https:</p>
<pre><code class="shell">sudo ufw allow https
# 等同于
sudo ufw allow 443
</code></pre>
<p> allow specific port ranges:</p>
<pre><code>sudo ufw allow 6000:6007/tcp
</code></pre>
<p>allow specific IP address:</p>
<pre><code>sudo ufw allow from 14.141.14.15
</code></pre>
<p>allow PG from specific IP address:</p>
<p>PG 默认在端口5432 监听 .</p>
<p>假定 IP 地址是：14.141.14.15</p>
<pre><code>sudo ufw allow from 14.141.14.15 to any port 5432
</code></pre>
<p>更多有关mail 及 PG， SQL，参考 <a href="https://www.digitalocean.com/community/tutorials/ufw-essentials-common-firewall-rules-and-commands">UFW essentials common firewall rules and commands</a>。 </p>
</li>
<li><p>删除UFW rules:</p>
<p>两种方式：使用 delete [number]；delete 搭配 allow.</p>
<p>例子：</p>
<pre><code class="shell"># 列出所有的rules，带有number：
sudo ufw status numbered

# 输出
Status: active

     To                         Action      From
     --                         ------      ----
[ 1] 22/tcp                     ALLOW IN    Anywhere
[ 2] 80/tcp                     ALLOW IN    Anywhere
[ 3] 443/tcp                    ALLOW IN    Anywhere
[ 4] 22/tcp (v6)                ALLOW IN    Anywhere (v6)
[ 5] 80/tcp (v6)                ALLOW IN    Anywhere (v6)
[ 6] 443/tcp (v6)               ALLOW IN    Anywhere (v6)

sudo ufw delete 3
# 输出
Deleting:
 allow 443/tcp
Proceed with operation (y|n)? y
Rule deleted

# 或者直接：
sudo ufw delete allow https

# 等同于：
sudo ufw delete allow 80
</code></pre>
</li>
<li><p>disable ufw</p>
<p>设置 ufw 状态为 inactive:</p>
<pre><code>sudo ufw disable
</code></pre>
</li>
<li><p>reset ufw</p>
<p>重置：</p>
<pre><code>sudo ufw reset
</code></pre>
</li>
<li><p>reload ufw</p>
<p>通常，修改 <code>/etc/default/ufw</code>配置文件后，需要reload下。</p>
<pre><code>sudo ufw reload
</code></pre>
</li>
</ul>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p> <a href="https://www.digitalocean.com/community/tutorials/ufw-essentials-common-firewall-rules-and-commands">UFW essentials common firewall rules and commands</a></p>
<p><a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-a-firewall-with-ufw-on-ubuntu-14-04">how to set up a firewall with UFW on Ubuntu </a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>对scheme中collector的一点理解</title>
    <url>/posts/understanding-collector-in-scheme/</url>
    <content><![CDATA[<p>collector出现在《 the little schemer》chapter 08中，刷了两遍才算勉强理解，记录下。</p>
<span id="more"></span> 

<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>collector 的运用，对应着《 the little schemer》中提到了第10戒：<strong>Build functions to collect more than one value at a time.</strong> 简单理解为创建函数，一次收集多个值，然后对这些值进行再处理。</p>
<p>看个例子，加深对collector的理解。</p>
<h4 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h4><p>根据《the little schemer》chapter 08 中给出的奇偶数例子稍稍加以改编。</p>
<p>定义函数 <code>number-only*&amp;co</code>，给到一个list， 要求：找出这个list中的所有数字，并求出数字的总和。将总和和新的数字集一并输出。</p>
<p>比如：</p>
<pre><code class="scheme">; 输出结果的格式（sum newlist), list的第一个元素是求和的结果，第二个元素为所取到数字集。
;
(number-only*&amp;co (quote (9 apples 2 oranges 10 peaches 11 pears)) cal-number)
;Value : (32 (9 2 10 11))

(number-only*&amp;co (quote (9 apples (2 oranges) (10) peaches ((11)) pears)) cal-number)
;Value : (32 (9 (2) (10) ((11))))
</code></pre>
<p>这里<code>cal-number</code> 就是一个collector。</p>
<p>来看<code>number-only*&amp;co</code> 和 <code>cal-number</code>的定义：</p>
<pre><code class="scheme">; define number-only*&amp;co
;
(define number-only*&amp;co
  (lambda (l col)
    (cond
      ((null? l) (col (quote ()) 0))
      ((atom? (car l))
      (cond
        ((number? (car l))
         (number-only*&amp;co (cdr l)
          (lambda (newlat s)
            (col (cons (car l) newlat) (+ (car l) s)))))
        (else (number-only*&amp;co (cdr l) col))))
      (else (number-only*&amp;co (car l)
                           (lambda (al as)
                            (number-only*&amp;co (cdr l)
                              (lambda (dl ds)
                                (col (cons al dl) (+ as ds))))))))))
;
; define cal-number
;
(define cal-number
  (lambda (l s)
    (cons s (cons l (quote ())))))
;
</code></pre>
<p>  简单解释下：</p>
<p>  number-only*&amp;co 接受两个参数，一个是list，一个是collector。</p>
<p>  collector接受两个参数，一个是newlist,  一个是 s (s is short for sum)， newlist用来存 l 中的数字，s用来存数字求和的结果。</p>
<p>  collector的初始值是<code>col((quote ()) 0)</code>，也就是newlist 为空，s为0，理解这一点很重要。</p>
<ul>
<li><p>当 l 是空的 list 时，<code>number-only*&amp;co</code>的结果就是 <code> (col (quote ()) 0)</code>.</p>
</li>
<li><p>当 l 不为空时，判断 l 的第一个元素是不是一个atom:</p>
<ul>
<li><p><code>(atom? (car l))</code> 为 #t, 判断第一个元素是不是number：</p>
<ul>
<li><p>第一个元素是number，添加到newlist里面，同时s = s + (car l)。此时新的collector长这样:</p>
<pre><code class="scheme">(lambda (newlat s)
   (col (cons (car l) newlat) (+ (car l) s)))
</code></pre>
</li>
<li><p>第一个元素不是number，那就什么也不做，collector不变，仍然为col。</p>
</li>
</ul>
</li>
<li><p><code>(atom? (car l))</code> 为 #f:</p>
<p>这里就要定义 <code>(car l) </code> 后的collector了。这个collector需要使用<code>number-only*&amp;co</code> 来遍历 <code>(cdr l)</code>，挑出<code>(cdr l)</code>中的所有数字，并算出这些数字的和。所以，它应该长成这样：</p>
<pre><code class="scheme">(lambda (al as)
  (number-only*&amp;co (cdr l)
     (lambda (dl ds)
          ......)))
</code></pre>
<p>「这里al, as 是 <code>number-only*&amp;co</code>  处理<code> (car l)</code> 时得到的结果，而dl, ds 是 <code>number-only*&amp;co</code> 处理 <code>(cdr l)</code> 时得到的结果。」</p>
<p>有了al, dl, as, ds， 后面只需要将两者得到的结果整合起来即可。</p>
<p>所以，else语句中，最后的collector长这样：</p>
<pre><code class="scheme">(lambda (al as)
  (number-only*&amp;co (cdr l)
    (lambda (dl ds)
      (col (cons al dl) (+ as ds)))))
</code></pre>
</li>
</ul>
</li>
</ul>
<p>至此， <code>number-only*&amp;co</code>  的定义完成。</p>
<p>而<code>cal-number</code> 仅仅是一个collector，返回(sum newlist)， 没什么特别的。</p>
<p>也可以定义新的collector，比如只返回sum，或者只返回newlist。</p>
<pre><code class="scheme">(define sum-number
  (lambda (l s)
    s))
;
(define number-list
  (lambda (l s)
    l))
</code></pre>
<p>然后调用的时候，使用新的collector：</p>
<pre><code class="scheme">(number-only*&amp;co (quote (9 apples (2 oranges) (10) peaches ((11)) pears)) sum-number)
;Value: 32

(number-only*&amp;co (quote (9 apples (2 oranges) (10) peaches ((11)) pears)) number-list)
;Value : (9 (2) (10) ((11)))
</code></pre>
<p>OK。算是又刷了一遍，可以开启下一章的旅途了。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://mitpress.mit.edu/books/little-scheme-fourth-edition">《The little schemer》</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Scheme</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu下更新nodejs</title>
    <url>/posts/update-nodejs-in-ubuntu/</url>
    <content><![CDATA[<p>在部署Rails项目时，不小心掉进了nodejs版本的坑里面，记录下以免再次入坑。</p>
<span id="more"></span> 

<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>本地运行<code>cap production deploy</code>后，在<code>deploy:assets:precompile</code>部分，弹出如下信息：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fni6tlxilhj30u706o3zq.jpg"></p>
<p>显示node版本4.2.6 不支持，确实挺老了，而且可能带来bug， 好，那就升级下。</p>
<h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><p>登陆远程服务器，在终端输入：</p>
<pre><code>sudo apt-get update
npm -v
</code></pre>
<p>发现npm版本为3.5.2，升级下npm，在终端输入：</p>
<pre><code>npm install npm@latest -g
</code></pre>
<p>再次检查npm版本：</p>
<pre><code>npm -v
</code></pre>
<p>会弹出如下报错：</p>
<blockquote>
<p>ERROR: npm is known not to run on Node.js v4.2.6</p>
<p>Node.js 4 is supported but the specific version you’re running has<br>a bug known to break npm. Please update to at least 4.7.0 to use this<br>version of npm. You can find the latest release of Node.js at <a href="https://nodejs.org/">https://nodejs.org/</a></p>
</blockquote>
<p>这里显示nodejs版本过低，需要升级至4.7.0 + ，但是打开链接，显示的是mac下的安装包，找到<a href="https://nodejs.org/en/download/package-manager/#debian-and-ubuntu-based-linux-distributions">Debian and Ubuntu based Linux distributions</a>：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fni73b82dtj30pi0iagom.jpg"></p>
<p>先清一下npm, nodejs, 终端输入：</p>
<pre><code>sudo apt remove nodejs npm
</code></pre>
<p>重新安装：【v8或者v9都可以，这里选择了v8】</p>
<pre><code>curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -
sudo apt-get install -y nodejs
</code></pre>
<p>这时，再次在本地运行<code>cap production deploy</code>， OK了。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://stackoverflow.com/questions/46360567/error-npm-is-known-not-to-run-on-node-js-v4-2-6">Error: npm is known not to run on Node.js V4.2.6</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Node</tag>
      </tags>
  </entry>
  <entry>
    <title>allow user to update password with Devise and cancancan</title>
    <url>/posts/update-password-with-devise-and-cancancan/</url>
    <content><![CDATA[<p>踩坑 Devise 和 cancancan。</p>
<span id="more"></span> 

<h4 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h4><p>使用devise做用户管理，cancancan做权限管理，生成model user，user含有name，avatar等字段，现在需要让user可以修改自己的密码，姓名，头像等。即：</p>
<ul>
<li>用户可以不修改密码，只修改姓名或者头像</li>
<li>用户修改密码时，需要填写原来的密码来进行验证，同时新密码需要输入两次以确认</li>
</ul>
<p>也就是，当用户输入current_password, password, password_confirmation中的任意一个时，就进行相关的密码验证，如果三者均为空，则不更新密码部分，更新其他属性。</p>
<h4 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h4><p>在修改代码前，需要知道这两点：</p>
<ul>
<li><p>使用devise作用户管理时，如果你的 <code>app/models/user.rb</code>中，devise添加了validatable:</p>
<pre><code>devise :xxxx, :..., :validatable
</code></pre>
</li>
</ul>
<p>那么相当于给user添加了如下的validates：</p>
<pre><code class="Ruby">validates_uniqueness_of :email, allow_blank: true, if: :email_changed?
validates_format_of     :email, with: email_regexp, allow_blank: true, if: :email_changed?
validates_presence_of     :password, if: :password_required?
validates_confirmation_of :password, if: :password_required?
validates_length_of       :password, within: password_length, allow_blank: true
</code></pre>
<p>这里注意到<code>validates_presence_of     :password, if: :password_required?</code>,当password_required?为true时，password必填。password_required?这个method的源代码如下：</p>
<pre><code class="Ruby">def password_required?
  !persisted? || !password.nil? || !password_confirmation.nil?
end
</code></pre>
<p>如果更新的时候，我们不更新密码部分，只更新姓名或者头像，就会报错，因为此时表单送出的password是“”，即空值，但不是nil，这样 !password.nil? 就会为true，导致password_required?为true，所以我们需要重写这个method，当password为空时，也可以更新用户信息。</p>
<p>在<code>app/models/user.rb</code>中，添加如下代码：</p>
<pre><code class="Ruby">def password_required?
  new_record? || password.present? || password_confirmation.present?
end
</code></pre>
<p>这样添加后，当你修改用户信息时，如果password那一栏没有填写，不会出现如下报错：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcly1frux8wfmmaj30sd04zjs4.jpg"></p>
<ul>
<li><p>修改密码时，因为需要输入当前的密码，也就是current_password这个字段，而原先user中是没有添加这个字段的，所以需要在<code>app/models/user.rb</code>中，添加如下代码，保证current_password可读写。</p>
<pre><code class="Ruby">attr_writer :current_password
</code></pre>
</li>
</ul>
<p>好了，准备工作完成，算是解决了大半了，我们的重头戏来了。</p>
<p>新增一个controller account::user 来让让用户完成修改密码的操作：</p>
<pre><code>rails g controller account::user
</code></pre>
<p>在<code>routes.rb</code>中添加路径：【因为修改密码是用户单个个体的行为，所以我们使用resource】</p>
<pre><code class="Ruby">namespace :account do
  resource :user
end
</code></pre>
<p>我们添加上view，让用户可以修改个人信息：</p>
<pre><code>touch app/views/account/users/show.html.erb
</code></pre>
<p>在 <code>app/views/account/users/show.html.erb</code> 中添加如下内容：</p>
<pre><code class="Ruby">&lt;%= simple_form_for @user, url: &#123; action: :update &#125; do |f| %&gt;
  &lt;%= f.input :name %&gt;
  &lt;%= f.file_field :avatar %&gt;

  &lt;%= f.input :current_password %&gt;
  &lt;%= f.input :password %&gt;
  &lt;%= f.input :password_confirmation %&gt;

  &lt;%= f.submit &quot;更新&quot;, class: &quot;btn btn-success&quot;%&gt;    
&lt;% end %&gt;
</code></pre>
<p>同时需要在其他页面，比如navbar中提供入口，让用户可以进入该页面更新个人信息，这里略去。</p>
<p>在<code>app/controllers/account/users_controller.rb</code>中，添加如下内容：</p>
<pre><code class="Ruby">class Account::UsersController &lt; ApplicationController
  authorize_resource :user, parent: false
  def show
    @user = User.find(current_user.id)
  end

  def update
    @user = User.find(current_user.id)
    if user_params.values_at(:current_password, :password, :password_confirmation).any?(&amp;:present?)
      @user.update_with_password(user_params)
    else
      @user.update(user_params)
    end
    redirect_to profile_path
  end

  protected

  def user_params
    params.require(:user).permit(:name, :avatar, :current_password, :password, :password_confirmation)
  end    
end
</code></pre>
<p>其中，因为使用cancancan做权限管理，所以这里我们用<code>authorize_resource :user, parent: false</code>来给user授权authorize，让user可以有读写的权利， update action部分中，我们使用了devise的instance method <a href="https://github.com/plataformatec/devise/blob/715192a7709a4c02127afb067e66230061b82cf2/lib/devise/models/database_authenticatable.rb#L67">update_with_password</a>来修改密码，它会检查用户的:current_password, :password, :password_confirmation这三者的有效性。</p>
<p>上面的代码看着有些不够简洁，我们稍稍重构下：</p>
<p>把@user = User.find(current_user.id)拎出来，放在before action里面，把[:current_password, :password, :password_confirmation]这三个密码相关的变量用一个method包起来。</p>
<pre><code class="ruby">class Account::UsersController &lt; ApplicationController
  before_action -&gt; &#123; @user = User.find(current_user.id) &#125;
  authorize_resource :user, parent: false

  def show
  end

  def update
    if user_params.values_at(*password_param_lists).any?(&amp;:present?)
      @user.update_with_password(user_params)
    else
      @user.update(user_params)
    end
    redirect_to profile_path
  end

protected

  def user_params
    params.require(:user).permit(:name, :avatar, *password_param_lists)
  end

  def password_param_lists
    [:current_password, :password, :password_confirmation]
  end
end
</code></pre>
<p>OK!  基本功能实现。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://github.com/plataformatec/devise">devise</a></p>
<p><a href="https://github.com/CanCanCommunity/cancancan">cancancan</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
      </tags>
  </entry>
  <entry>
    <title>Rails5 升级 Rails6 记录</title>
    <url>/posts/upgrade-rails-6/</url>
    <content><![CDATA[<p>从  Rails 5.2.3 升级到 Rails6 遇到的一些问题。</p>
<span id="more"></span>

<h4 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h4><p>本地 rails 5.2.3，在项目根目录下，终端执行命令：</p>
<pre><code>bundle outdated
</code></pre>
<p>对于列出的 outdated 的gem，除了rails自带的那些，一个个过 changelog，衡量后升级即可。</p>
<p>gems 升级完成后，升级项目至 rails6。</p>
<p>新建一个rails 6 的demo：</p>
<pre><code class="shell">cd ~/Workspace
gem install rails -v 6.0.2.1

# Skip Sprockets files, Skip test files, Preconfigure postgresql as default database
rails new -d postgresql -T -S demo
</code></pre>
<p>使用文件对比软件【推荐<a href="https://www.araxis.com/">araxis merge</a> ，真的很好用。】，对比两个项目的不同处，斟酌处理。</p>
<h4 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h4><ul>
<li><p>gem <a href="https://github.com/hashie/hashie">hashie</a> 版本升级至 4.0.0，导致 <a href="https://github.com/omniauth/omniauth">omniauth</a> 当前1.9.0 版本不能使用，依赖 hashie 4.0 以下版本。</p>
<p>问题：</p>
<p>如上所述。</p>
<p>解决：</p>
<p>查看commits，问题在2019-11-17已解决，但新版本尚未发布。</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/imagesXnip2020-01-18_16-08-18.jpg"><br>取2019-11-17 的最后一个commit，Gemfile 更新：</p>
<pre><code class="ruby">gem &quot;omniauth&quot;, github: &#39;omniauth/omniauth&#39;, ref: &#39;ccee08f&#39;
</code></pre>
</li>
<li><p>使用了年久失修的gem <a href="https://github.com/mururu/capybara-user_agent">capybara-user_agent</a>，升级<a href="https://github.com/teamcapybara/capybara">capybara</a>至3.30.0后， 现有版本0.0.3的capybara-user_agent无法使用。</p>
<p>capybara-user_agent 要求  <code> 2.0.2 &lt;= capybara &lt; 3</code>。</p>
<p>解决：</p>
<p>老大教的一个小技巧。</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/imagesXnip2020-01-18_14-33-11.jpg"></p>
<p>去 insights 中 找 Network，看别人fork后的库，然后引用即可。</p>
<p>这里是<a href="https://github.com/aha-app/capybara-user_agent/tree/capybara-3">aha-app/capybara-user_agent</a>.</p>
<p>更新 Gemfile.</p>
<pre><code class="ruby">gem &quot;capybara-user_agent&quot;, github: &quot;aha-app/capybara-user_agent&quot;, branch: &#39;capybara-3&#39;
</code></pre>
</li>
<li><p>多个rails共存时，如何卸载指定版本的rails？</p>
<p>问题：</p>
<p>本地安装了rails6.0.2.1， rails 5.2.3，使用<code>gem uninstall rails -v 6.0.2.1 </code> 后，终端<code>rails -v </code>显示 rails 6.0.2.1。</p>
<p>解决：</p>
<pre><code class="shell">gem list | grep railties

gem uninstall railties -v 6.0.2.1

rails -v

Rails 5.2.3
</code></pre>
</li>
</ul>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://stackoverflow.com/questions/16164697/uninstall-rails-completely/19387352">uninstall rails completely</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
      </tags>
  </entry>
  <entry>
    <title>漏洞处理-GNU Wget缓冲区错误漏洞on Ubuntu</title>
    <url>/posts/upgrade-wget-on-ubuntu/</url>
    <content><![CDATA[<p>踩坑 GNU Wget缓冲区错误漏洞，完全懵逼。</p>
<span id="more"></span> 

<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>登录阿里云，看到醒目的红色警报，点开是主机上存在漏洞： <strong>GNU Wget缓冲区错误漏洞</strong>，给到的参考链接: <a href="https://securitytracker.com/id/1039661?spm=5176.2020520154.sas.66.528f79d6yN4eC4">securitytracker.com</a>显示要升级到版本1.19.2。</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fqzfuo5h2mj30cw01cdfu.jpg"></p>
<p>升级过程中，遇到了点问题，Google后解决，记录下整个升级步骤。</p>
<h4 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h4><p>查看版本</p>
<pre><code>wget -V
</code></pre>
<p>显示是<code>GNU Wget 1.17.1 built on linux-gnu.</code></p>
<p>删掉旧版本：</p>
<pre><code>apt-get remove wget
</code></pre>
<p>安装1.19.2或者更高版本，见<a href="http://ftp.gnu.org/gnu/wget/%EF%BC%8C">http://ftp.gnu.org/gnu/wget/，</a> 目前最新版本是1.19.4</p>
<pre><code>wget http://ftp.gnu.org/gnu/wget/wget-1.19.4.tar.gz
tar -zxvf wget-1.19.4.tar.gz
cd wget-1.19.4
./configure --with-ssl=openssl
</code></pre>
<p>执行完<code>./configure</code> 后报错：</p>
<pre><code>configure: error: The pkg-config script could not be found or is too old.  Make sure it
is in your PATH or set the PKG_CONFIG environment variable to the full
path to pkg-config.

Alternatively, you may set the environment variables XMEDCON_GLIB_CFLAGS
and XMEDCON_GLIB_LIBS to avoid the need to call pkg-config.
See the pkg-config man page for more details.
</code></pre>
<p>装pkg-config:</p>
<pre><code>apt-get install -y pkg-config
</code></pre>
<p>再次执行：</p>
<pre><code>./configure --with-ssl=openssl
</code></pre>
<p>成功的话，会发现最后生成了Makefile：</p>
<pre><code>config.status: creating Makefile
config.status: creating src/Makefile
config.status: creating doc/Makefile
config.status: creating util/Makefile
config.status: creating po/Makefile.in
config.status: creating tests/Makefile
config.status: creating lib/Makefile
config.status: creating testenv/Makefile
config.status: creating tests/certs/interca.conf
config.status: creating tests/certs/rootca.conf
config.status: creating src/config.h
config.status: executing depfiles commands
config.status: executing po-directories commands
config.status: creating po/POTFILES
config.status: creating po/Makefile
</code></pre>
<p>此时，执行：</p>
<pre><code>make &amp;&amp; make install
</code></pre>
<p>查看版本：</p>
<pre><code>wget -V
</code></pre>
<p>显示：<br>GNU Wget 1.19.4 built on linux-gnu.</p>
<p>OK!</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://blog.csdn.net/baidu_38083619/article/details/79948272">GNU Wget缓冲区溢出漏洞</a></p>
<p><a href="https://stackoverflow.com/questions/23202146/cannot-find-pkg-config-error">cannot find pkg-config-error</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Nuxt中实作图片上传组件</title>
    <url>/posts/upload-attachments-components-in-nuxt/</url>
    <content><![CDATA[<p>之前用JS写过文件上传，现在改用Vue的方式重新写一遍，发现清爽多了。附上成品及代码。</p>
<span id="more"></span> 

<h4 id="成品："><a href="#成品：" class="headerlink" title="成品："></a>成品：</h4><p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcly1g0wten50w4g30tj0ck4bn.gif"></p>
<h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><p>组件名：Attachment，props只有一个：最大允许上传的附件数量。</p>
<pre><code class="vue">&lt;template&gt;
  &lt;div class=&quot;attachment&quot;&gt;
    &lt;div class=&quot;p-2 rounded&quot;&gt;
      &lt;p class=&quot;mb-2&quot;&gt;请选择图片上传: &lt;span&gt;(最多可上传&#123;&#123; maxAttachmentsCount &#125;&#125;张图片)&lt;/span&gt;&lt;/p&gt;
      &lt;div class=&quot;preview d-block float-left&quot;&gt;
        &lt;div v-for=&quot;(file, index) in files&quot; :key=&quot;`file_$&#123;index&#125;`&quot; class=&quot;pre-item mr-2&quot;&gt;
          &lt;div class=&quot;cover rounded&quot;&gt;
            &lt;img :src=&quot;file.src&quot; /&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;label :class=&quot;&#123; &#39;hidden-label&#39;: files.length &gt;= parseInt(maxAttachmentsCount) &#125;&quot; class=&quot;d-flex align-items-center justify-content-center attachment-upload-area rounded bg-secondary border border-light mb-1&quot;&gt;
        &lt;i class=&quot;fas fa-camera fa-3x&quot; style=&quot;color: white;&quot;&gt;&lt;/i&gt;
        &lt;input type=&quot;file&quot; class=&quot;d-none&quot; @change=&quot;uploadAttachment&quot;&gt;
      &lt;/label&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
import $ from &#39;jquery&#39;

export default &#123;
  props: [ &#39;maxAttachmentsCount&#39; ],
  data() &#123;
    return &#123;
      files: []
    &#125;
  &#125;,
  methods: &#123;
    uploadAttachment(event) &#123;
      const file = $(event.target)[0]

      if (file.files[0].type.indexOf(&#39;image/&#39;) === -1) &#123;
        alert(&#39;只能上传图片，请重新上传。&#39;)
        return false
      &#125;

      if (file.files[0] !== undefined) &#123;
        const reader = new FileReader()
        reader.readAsDataURL(file.files[0])
        reader.onloadend = (e) =&gt; &#123;
          this.files.push(&#123; src: e.target.result &#125;)
        &#125;
        this.$el.querySelector(&#39;label&#39;).appendChild(event.target.cloneNode(true))
      &#125;
    &#125;
  &#125;
&#125;
&lt;/script&gt;

&lt;style scoped lang=&quot;scss&quot;&gt;
  .attachment &#123;
    margin-bottom: 1em;

    .pre-item &#123;
      position: relative;
      display: inline-block;
      vertical-align: bottom;
    &#125;

    .cover &#123;
      width: 80px;
      height: 80px;
      overflow: hidden;

      img &#123;
        max-height: 80px;
        width: auto;
        clip: rect(200px 300px 300px 200px);
      &#125;
    &#125;

    .attachment-upload-area &#123;
      height: 80px;
      width: 80px;
    &#125;
  &#125;

  .hidden-label &#123;
    visibility: hidden;
  &#125;
&#125;
&lt;/style&gt;
</code></pre>
<p>感觉没什么需要特别解释的。</p>
<p>over。</p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Nuxt</tag>
      </tags>
  </entry>
  <entry>
    <title>将Capybara的screenshot上传至阿里云的OSS</title>
    <url>/posts/upload-capybara-screenshot-to-aliyun-oss/</url>
    <content><![CDATA[<p>认识 capybara screenshot。</p>
<span id="more"></span> 

<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>网页测试中，有一个很棒的gem叫<a href="https://github.com/mattheworiordan/capybara-screenshot">capybara-screenshot</a> ，当你的scenario失败时，会自动将网页进行截图。</p>
<p>当然，你也可以手动截图。比如我想看看在step A中，我停留的网页长什么样子，直接用<code>Capybara::Screenshot.screenshot_and_open_image</code>, 终端运行cucumber或者rspec时，就可以看到网页的模样。</p>
<p>截图下来的图片，如果保存在本地，随着scenario的增多，自然会吃不消的，使用云存储是个好选择，比如放在阿里云上，还能通过生成的URL来将截图呈现在网页上，非常棒。</p>
<p>【当然你也可以在capybara中设置<code>Capybara::Screenshot.prune_strategy</code>的值，只保存最后的XX个或者最后一次运行的截图，这样截图就不会很多，但这里不讨论这种情况】</p>
<p>下面，简单来走一走如何将截图上传至阿里云的OSS。</p>
<h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><p>以howitzer_cucumber的一个登陆测试为例，来看看如何将截图传至阿里云。</p>
<ul>
<li><p>开通阿里云的OSS服务【点击，按照指示下单购买即可】</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fn2kck0bc0j30sa06hwfl.jpg"></p>
</li>
<li><p>新建存储空间bucket，获取你的aliyun_access_key， aliyun_secret_key，host【存储空间概览下面的endpoint】</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fn2kfi4tsvj30wa03ldgq.jpg"></p>
</li>
</ul>
<ul>
<li><p>在gemfile中添加<code>gem &#39;aliyun-oss-sdk&#39;</code>, 终端运行<code>bundle install</code></p>
</li>
<li><p>在 <code>features/support</code>中新建文件<code>aliyun.rb</code>，试试上传一张图片：</p>
<pre><code class="Ruby">require &#39;aliyun/oss&#39;
aliyun_access_key = &quot;你的access_key&quot;
aliyun_secret_key = &quot;你的secret_key&quot;
host = &#39;你的host&#39;
bucket = &#39;你的bucket&#39;
client = Aliyun::Oss::Client.new(aliyun_access_key, aliyun_secret_key, host: host, bucket: bucket)
client.bucket_create_object(&#39;images/image.png&#39;, File.new(/Users/xxx/xxx/image.png), &#123;&#39;Content-Type&#39; =&gt; &#39;image/png&#39; &#125;)
</code></pre>
<p>这里File.new中的参数，是你想要上传的本地图片的文件路径。</p>
<p>终端运行该脚本，在你刚刚新建的bucket中，查看“文件管理”，你会发现已经上传成功，很赞有没有？</p>
</li>
<li><p>接着我们上传截图，比如登陆测试的scenario长这样：</p>
<pre><code class="Ruby">  Scenario: 用户输入正确的邮箱和密码完成登录
    Given 我是已经注册的用户&quot;管理员张三&quot;
    And  我在登录页面
    When 我在登录页面的表格中输入邮箱:&quot;admin@123.com&quot;和密码:&quot;Password123456&quot;
    And 我点击登录按钮，提交表单
    Then 我可以看到我已经进入了个人的主页
</code></pre>
<p>现在我要截图一下登陆页面，可以这么来， 在对应的step的定义中，添加代码：</p>
<pre><code class="Ruby">And(/^我在登录页面$/) do
  LoginPage.open
 + LoginPage.on do
 +   file = Capybara::Screenshot.screen_shot_and_save_page
 + end
end
</code></pre>
<p>到这里你自然会想到，需要将上传这一步进行封装调用，我们先封装一下图片上传。</p>
<p>考虑到<code>Capybara::Screenshot.screen_shot_and_save_page</code>得到的是一个hash，而我们想要的其实是截图的文件路径，所以用<code>Dir.pwd + file[:image].sub(&#39;.&#39;,&#39;&#39;)</code> 来获取截图路径。</p>
<p>修改<code>aliyun.rb</code>文件：</p>
<pre><code class="Ruby">require &#39;aliyun/oss&#39;

aliyun_access_key = &quot;你的access_key&quot;
aliyun_secret_key = &quot;你的secret_key&quot;
host = &#39;你的host&#39;
bucket = &#39;你的bucket&#39;
$client = Aliyun::Oss::Client.new(aliyun_access_key, aliyun_secret_key, host: host, bucket: bucket)

module AliyunClient
  module Client
    def upload_image(filename, file)
      image_file = Dir.pwd + file[:image].sub(&#39;.&#39;,&#39;&#39;)
      $client.bucket_create_object(filename, File.new(image_file), &#123;&#39;Content-Type&#39; =&gt; &#39;image/png&#39; &#125;)
    end
  end
end

class Object
  include AliyunClient::Client
end
</code></pre>
<p>封装好了，直接调用我们的upload_image吧！</p>
<p>在刚刚的step的定义中，添加代码：</p>
<pre><code class="Ruby">And(/^我在登录页面$/) do
  LoginPage.open
  LoginPage.on do
    file = Capybara::Screenshot.screen_shot_and_save_page
 +   upload(&#39;images/image.png&#39;, file)
  end
end
</code></pre>
<p>OK!!</p>
<p>这里，我是上传到images文件夹下，文件名为image.png 。当然具体上传的目标文件及文件夹都是可以自定义的，也是需要自定义的，特别是多次上传，你肯定不希望图片都被覆盖掉了，具体可以查看<a href="https://github.com/aliyun-beta/aliyun-oss-ruby-sdk">aliyun-oss-ruby-sdk</a>。</p>
</li>
</ul>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://github.com/aliyun-beta/aliyun-oss-ruby-sdk">aliyun-oss-ruby-sdk</a></p>
<p><a href="https://github.com/mattheworiordan/capybara-screenshot">capybara-screenshot</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Howitzer</tag>
        <tag>aliyun</tag>
        <tag>Capybara</tag>
      </tags>
  </entry>
  <entry>
    <title>Rails中实作图片上传API</title>
    <url>/posts/upload-images-to-rails-API/</url>
    <content><![CDATA[<p>其实想说的是如何通过JSON文件的方式来上传图片。</p>
<span id="more"></span> 

<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>如标题所述，需要通过接口将图片上传到ROR项目中，如何实现？</p>
<h4 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h4><p>先说一个简单的。</p>
<p>以一个model picture为例，看一下具体步骤：</p>
<p>model picture的信息：</p>
<pre><code class="Ruby">Table name pictures

id          :integer
file_name    :string
image       :string
</code></pre>
<p>这里，设置routes, 建model，建controller的过程省略，可参见：<a href="http://luciaca.cn/2017/12/31/web-api-practice/">Rails：Web API接口实作</a>。</p>
<p>分三步走：</p>
<ul>
<li><p>装<a href="https://github.com/carrierwaveuploader/carrierwave">carrierwave</a></p>
<p>编辑 Gemfile</p>
<pre><code class="Ruby">gem &#39;carrierwave&#39;
gem &#39;mini_magick&#39;
</code></pre>
<p>终端执行<code>bundle</code>，重启服务器。</p>
</li>
<li><p>新增uploader</p>
<p>执行：<code>rails g uploader PicImage</code></p>
<p>编辑<code>app/uploaders/pic_image_uploader.rb</code></p>
<pre><code class="Ruby">class PicImageUploader &lt; CarrierWave::Uploader::Base
 + include CarrierWave::MiniMagick
 ......  
end
</code></pre>
<p>编辑 <code>app/models/picture.rb</code>，把 carrierwave 的 Uploader 挂上去。</p>
<pre><code class="Ruby">class Picture &lt; ApplicationRecord
  + mount_uploader :image, PicImageUploader
  ......
end
</code></pre>
</li>
<li><p> 设定create</p>
</li>
</ul>
<p>  编辑<code>app/controllers/api/v1/pictures_controller.rb</code> 中，create部分：</p>
<pre><code class="Ruby"># upload image through api
class Api::V1::PicturesController &lt; ApiController
  before_action :authenticate_user!, only: %i[create]

  def create
    @picture = Picture.new(picture_params)  
    if @picture.save
      render json: &#123; file_name: @picture.file_name, image: @picture.image &#125;
    else
      render json: &#123; message: &#39;failed&#39;, error: @picture.errors &#125;, status: 400
    end
  end
  .......
  private

  def picture_params
    params.permit(:file_name, :image)
  end

end
</code></pre>
<p>再来个复杂的。👇</p>
<h4 id="如何通过JSON文件来上传？"><a href="#如何通过JSON文件来上传？" class="headerlink" title="如何通过JSON文件来上传？"></a>如何通过JSON文件来上传？</h4><p>在搜索解答的过程中，发现了另一种方式，假定你需要通过JSON文件的方式去上传图片，如何实现？<br>即接口调用是这样的：<code>/api/v1/pictures.json</code>，由于JSON不支持嵌入式文件，所以会有些波折。</p>
<p>具体的实现方式是先将需要上传的图片file经base64编译后，调用接口创建一个实例， 然后在picture controller的create中，对传递过来的参数file_base64进行解析， 将解析后的文件写入temfile，并通过<code>ActionDispatch::Http::UploadedFile</code>来新建一个uploader file，如此，一个image从encoding到decoding的过程结束，再使用Picture.new创建即可。</p>
<p>具体来说，前面的步骤都一样，只是create部分会有些不同。</p>
<p>先给picture新增一个字段，file_base64, 它是图片经base64编译后得到的字符串。</p>
<p>执行：</p>
<pre><code>rails g migration add_file_base64_to_pictures file_base64:string
rake db:migrate
</code></pre>
<p>picture.json文件长这样：</p>
<pre><code>picture &#123;:file_base64 =&gt; &quot;file_base64&quot;, :file_name =&gt; &quot;file_name&quot;&#125;
</code></pre>
<p>  编辑<code>app/controllers/api/v1/pictures_controller.rb</code> 中，create部分：</p>
<pre><code class="Ruby">class Api::V1::PicturesController &lt; ApiController
  before_action :authenticate_user!, only: %i[create]

  def create
    if params[:picture][:file_base64]
      # create a new tempfile named file
      tempfile = Tempfile.new(&#39;file&#39;)
      tempfile.binmode
      # get the file ,decode it with base64, write it to the tempfile
      tempfile.write(Base64.decode64(params[:picture][:file_base64]))
      # create a new uploaded file
      @uploaded_file = ActionDispatch::Http::UploadedFile.new(tempfile: tempfile, filename: params[:picture][:file_name])
      @picture = Picture.new(params[:picture])
      @picture.image = @uploaded_file
      # delete the tempfile
      tempfile.delete
    end
    if @picture.save
      render json: @picture
    else
      render json: &#123; message: &#39;failed&#39;, error: @picture.errors &#125;, status: 400
    end
  end

end
</code></pre>
<p> 这里，create部分显得很臃肿，我们skinny一下，改成这样：</p>
<pre><code class="Ruby">class Api::V1::PicturesController &lt; ApiController
before_action :authenticate_user!, only: %i[create]
before_action :process_file, only: %i[create]

def create
  if @picture.save
    render json: @picture
  else
    render json: &#123; message: &#39;failed&#39;, error: @picture.errors &#125;, status: 400
  end
end

private

def process_file
  if params[:picture][:file_base64]
    tempfile = Tempfile.new(&#39;file&#39;)
    tempfile.binmode
    tempfile.write(Base64.decode64(params[:picture][:file_base64]))
    @uploaded_file = ActionDispatch::Http::UploadedFile.new(tempfile: tempfile, filename: params[:picture][:file_name])
    @picture = Picture.new(params[:picture])
    @picture.image = @uploaded_file
    tempfile.delete
  end
end

end
</code></pre>
<p>  呃，貌似process_file还是有点臃肿， 可以继续拆，这里就不实作了。</p>
<p>  OK. 用postman测试一下，确认正常。</p>
<p>  这里，你可能会问，编译后的文件在哪呢？在public/uploaders/picture/image下。</p>
<p>此外，上传的文件不需要 git commit， 在 <code>.gitignore</code> 中添加 <code>public/uploads</code> 这个目录即可。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://stackoverflow.com/questions/9758879/sending-files-to-a-rails-json-api">Sending files to a Rails JSON API</a></p>
<p><a href="https://stackoverflow.com/questions/9854916/base64-upload-from-android-java-to-ror-carrierwave">Base64 upload from Android/Java to RoR Carrierwave</a></p>
<p><a href="https://ruby-doc.org/stdlib-1.9.3/libdoc/tempfile/rdoc/Tempfile.html">Tempfile</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
        <tag>API</tag>
      </tags>
  </entry>
  <entry>
    <title>使用ActiveStorage记录</title>
    <url>/posts/usage-of-activestorage-on-rails5dot2/</url>
    <content><![CDATA[<p>ActiveStorage使用记录。</p>
<span id="more"></span> 

<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>activeStorage是Rails5.2 的新功能，官方给到的定义是：</p>
<blockquote>
<p>Active Storage facilitates uploading files to a cloud storage service like Amazon S3, Google Cloud Storage, or Microsoft Azure Storage and attaching those files to Active Record objects. It comes with a local disk-based service for development and testing and supports mirroring files to subordinate services for backups and migrations.</p>
</blockquote>
<p>开发及测试环境下，文件会默认存储在本地磁盘，生产环境下，可将文件直接上传到云端，比如Amazon S3, Google Cloud Storage, 或 Microsoft Azure Storage，同时会将这些文件关联到对应的 activeRecord对象。</p>
<p>这里结合自己最近踩的坑，记录下ActiveStorage的使用，主要涉及基本的用法，相关表结构及数据迁移部分。</p>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ul>
<li><p>生成表active_storage_blobs和active_storage_attachments</p>
<p>rails5.2自带ActiveStorage，终端直接执行：</p>
<pre><code>rails active_storage:install
</code></pre>
<p>随后会生成一个migration文件，文件内容长这样：</p>
<pre><code class="ruby">class CreateActiveStorageTables &lt; ActiveRecord::Migration[5.2]
  def change
    create_table :active_storage_blobs do |t|
      t.string   :key,        null: false
      t.string   :filename,   null: false
      t.string   :content_type
      t.text     :metadata
      t.bigint   :byte_size,  null: false
      t.string   :checksum,   null: false
      t.datetime :created_at, null: false

      t.index [ :key ], unique: true
    end

    create_table :active_storage_attachments do |t|
      t.string     :name,     null: false
      t.references :record,   null: false, polymorphic: true, index: false
      t.references :blob,     null: false

      t.datetime :created_at, null: false

      t.index [ :record_type, :record_id, :name, :blob_id ], name: &quot;index_active_storage_attachments_uniqueness&quot;, unique: true
    end
  end
end
</code></pre>
<p>终端执行：</p>
<pre><code>rake db:migrate
</code></pre>
<p>这会生成两张表，active_storage_blobs 和active_storage_attachments。这两张表很关键，后面会说到文件的存储与提取。</p>
</li>
<li><p>设置存储路径</p>
<p>在config/storage.yml 进行配置:</p>
<p>默认配置如下：</p>
<ul>
<li>开发：service是磁盘disk，上传的文件存放在storage中，你会发现新建一个rails5.2项目时，根目录下会自动生成一个storage文件夹，就是开发时上传文件的存储位置。</li>
<li>测试：service是磁盘disk，文件放在tmp/storage下</li>
<li>生产：service有三个云存储可选，Amazon S3, Google Cloud Storage, 或 Microsoft Azure Storage， 自己设置bucket即可。</li>
</ul>
<p>在config/environments下，可以看到三种环境对应的Rails active_storage的默认存储路径。</p>
<pre><code class="ruby">## 开发
config.active_storage.service = :local
## 生产
config.active_storage.service = :local
## 测试
config.active_storage.service = :test
</code></pre>
</li>
<li><p>单文件上传</p>
<p>假定现在有一个user model，每一个user有一个avatar，用户上传avatar。</p>
<p>传统做法是安装gem carrierwave， 然后<code>rails g uploader Avatar</code>，生成继承自CarrierWave::Uploader::Base的AvatarUploader，然后在<code>user.rb</code>中，添加<code>mount_uploader :avatar, AvatarUploader</code>即可。</p>
<p>而使用ActiveStorage，只需要在<code>user.rb</code>中，添加如下语句即可：</p>
<pre><code>has_one_attached :avatar
</code></pre>
<p>显示的使用，文件的URL通过<code>url_for(avatar)</code>来获取.</p>
</li>
<li><p>多文件上传</p>
<p>比如一个商品有多张图片pictures，在<code>product.rb</code>中，添加：</p>
<pre><code>has_many_attached :pictures
</code></pre>
<p>在对应的controller中，对于params部分，声明pictures是[]：</p>
<pre><code>def product_params
  params.require(:product).permit(:title, :xxxx, :xxxx, pictures: [])
end
</code></pre>
</li>
<li><p>数据的存储与文件的提取</p>
<p>以一个user的头像avatar为例，看avatar是如何存入的。</p>
<p>上面提到会生成两张表，active_storage_blobs 和active_storage_attachments。其中上传的文件信息会先存储在active_storage_blobs中，随后在 active_storage_blobs中写入新的记录，active_storage_blobs主要用于将上传的文件与对应的model ID建立关联。而通过<code>:record_type, :record_id, :name, :blob_id</code>可以定位到唯一的上传文件。</p>
<p>可以进入rails console，通过ActiveStorage::Blob，ActiveStorage::Attachment来进行数据的增删改查等。</p>
<p>以model User为例，看两条record感受一下：</p>
<pre><code> ### ActiveStorage::Blob.first
 id: 1,
 key: &quot;imaQysUeeTaW1xTEVzWHyEFP&quot;,
 filename: &quot;avatar.jpg&quot;,
 content_type: &quot;image/jpeg&quot;,
 metadata: &#123;&quot;identified&quot;=&gt;true, &quot;analyzed&quot;=&gt;true&#125;,
 byte_size: 92925,
 checksum: &quot;05OgljCf9r8a47QxgDIoRQ==&quot;,
 created_at: Fri, 18 May 2018 11:52:42 UTC +00:00&gt;s

  ### ActiveStorage::Attachment.first
 id: 1,
 name: &quot;file&quot;,
 record_type: &quot;User&quot;,
 record_id: 3,
 blob_id: 1,
 created_at: Fri, 18 May 2018 11:52:42 UTC +00:00&gt;
</code></pre>
<p>那么需要显示的时候，如何读取文件呢？</p>
<p>storage中，文件的读取及删除，都是通过key，你会发现在storage下有一堆文件。具体的文件实现可以在ActiveStorage源代码的lib/service目录下查看。大致的思路是通过make_path_for(key)，生成与key值相关的文件夹及文件，然后调用IO.copy_stream(io, make_path_for(key))，将文件的信息写入这些文件中，读取时，只需要读storage下的文件即可。</p>
</li>
<li><p>数据迁移</p>
<p>还是以User的avatar，单文件上传为例，场景如下：</p>
<p>先前User的avatar使用传统的uploader来实现上传，现在更换成Storage，这样就会造成一个问题，那就是users表中，有部分的记录，是active_storage_blobs 和active_storage_attachments这两张表中没有的，所以需要将users中的这部分数据迁移过来。</p>
<p>具体的实现思路是这样的：</p>
<p>遍历User，对于每一个user，先检查active_storage_attachments中是否存在record_id = user.id &amp;&amp; record_type: “User”的纪录，如果存在，则pass，如果不存在，则将该条user纪录添加到表active_storage_blobs 和active_storage_attachments中。</p>
<p>具体的添加方式有两种：</p>
<p>一种是直接对数据库进行操作，得到每一个属性的值，然后create即可。但是这里有一个问题，就是active_storage_blobs中的多个字段不那么容易获取，key, checksum,content_type, byte_size 。 我们知道之前上传图片的路径，进而可以读取到图片，通过图片来获取到byte_size，至于content_type则可以通过Mime::Type中的lookup_by_extension来获取，而对于key, checksum, 一番搜索，查看ActiveStorage的源代码，在<code>activestorage/app/models/active_storage/blob.rb</code>中可以知道key值和checksum是如何计算的：</p>
<pre><code class="Ruby">##  key
key = ActiveStorage::Blob.generate_unique_secure_token
## checksum
def compute_checksum_in_chunks(io)
      Digest::MD5.new.tap do |checksum|
        while chunk = io.read(5.megabytes)
          checksum &lt;&lt; chunk
        end
        io.rewind
      end.base64digest
    end  
</code></pre>
<p>这样大费周章得到这些属性的值后，可以将纪录放入active_storage_blobs中了，随后在active_storage_attachments中也写入对应的纪录就好了。</p>
<p>如你所见，这样的方法繁琐，而且还有一个致命的缺点，那就是没有了文件转换的步骤。通过直接操作数据库，记录确实补全了，但是你会发现，对于先前上传的文件，在storage下，你是看不到它们对应的文件的，也就是说，用url(avatar)来显示头像时，图片无法显示，读不出来，这就得再增一个步骤，把文件再进行一次处理，处理方式可以在<code>activestorage/lib/active_storage/service/</code>下找到【根据service的不同，有对应的文件，每个文件中都相应的处理方法】。</p>
<p>第二种方式，则是通过调用接口，也就是ActiveStorage::Blob的类方法，create_after_upload!来实现。这一步不仅建立了新的纪录，而且也在storage下生成了对应的文件用于读取，此外，文件部分，使用Rack::Test::UploadedFile的方法生成临时文件来进行操作。生成新的blob后，再通过ActiveStorageAttachment来创建对应的attachment即可。相比第一种【也就是我之前的思路】，这一种【老大的思路】才是迁移打开的正确方式。</p>
<p>具体的代码这里就不放了，大致思路如上。</p>
</li>
</ul>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://github.com/rails">rails source code</a></p>
<p><a href="http://guides.rubyonrails.org/active_storage_overview.html">Active Storage Overview</a></p>
<p><a href="https://www.rubydoc.info/github/brynary/rack-test/Rack/Test/UploadedFile">Rack::Test::UploadedFile</a></p>
<p><a href="http://api.rubyonrails.org/classes/Mime/Type.html">MIME type</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
        <tag>ActiveStorage</tag>
      </tags>
  </entry>
  <entry>
    <title>qs用法小结</title>
    <url>/posts/usage-of-qs/</url>
    <content><![CDATA[<p>使用axios发请求传参时，需要对参数进行处理，用到了qs，第一次接触，懵逼，刷了遍文档，简单记录下qs的使用。</p>
<span id="more"></span> 

<h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><p><a href="https://github.com/ljharb/qs">qs</a>: a querystring parse with nesting support.</p>
<p>主要方法：parse, stringily.</p>
<pre><code class="js">const qs = require(&#39;qs&#39;);

qs.parse(string, [options]);

qs.stringily(object, [options])
</code></pre>
<p>最新版本：6.6.0，示例代码以6.5.2为主， 所有代码参考其<a href="https://github.com/ljharb/qs">github主页</a>。</p>
<h4 id="parse"><a href="#parse" class="headerlink" title="parse"></a>parse</h4><p>可供设置的options及默认options：<a href="https://github.com/ljharb/qs/blob/d33a369e50f45d7d80c8dec4cc87fb9ad4cfd995/lib/parse.js#L7">default</a>.</p>
<p>看几个简单的例子：</p>
<pre><code class="js">const qs = require(&#39;qs&#39;);

console.log(qs.parse(&#39;foo[bar]=baz&#39;));
// 输出： foo: &#123; bar: &#39;baz&#39; &#125; &#125;

// 最多可以解析到5个子层
const fiveChilden = qs.parse(&#39;a[b][c][d][e][f][g][h][i]=j&#39;)
console.log(fiveChilden);
/* 输出：
&#123; a: &#123; b: &#123; c: [Object] &#125; &#125; &#125;
如果你的输出也是这样，别着急，是console的问题： console.log() is invariably limited to 2 levels.
*/


// 使用util.inspect再输出
const util = require(&#39;util&#39;);
console.log(util.inspect(fiveChilden, &#123;showHidden: false, depth: null&#125;))
// 输出： &#123; a: &#123; b: &#123; c: &#123; d: &#123; e: &#123; f: &#123; &#39;[g][h][i]&#39;: &#39;j&#39; &#125; &#125; &#125; &#125; &#125; &#125; &#125;


// 带 ?

console.log(qs.parse(&#39;?a=b&amp;c=d&#39;));
// 输出： &#123; &#39;?a&#39;: &#39;b&#39;, c: &#39;d&#39; &#125;

console.log(qs.parse(&#39;?a=b&amp;c=d&#39;, &#123; ignoreQueryPrefix: true &#125;));
// 输出： &#123; a: &#39;b&#39;, c: &#39;d&#39; &#125;

// 不带 ?
console.log(qs.parse(&#39;a=b&amp;c=d&#39;));
// 输出： &#123; a: &#39;b&#39;, c: &#39;d&#39; &#125;

// 带.
console.log(qs.parse(&#39;a.b=c&#39;));
// 输出： &#123; &#39;a.b&#39;: &#39;c&#39; &#125;

console.log(qs.parse(&#39;a.b=c&#39;, &#123; allowDots: true &#125;));
// 输出： &#123; a: &#123; b: &#39;c&#39; &#125; &#125;

// 带有 ,与文档中的comma设置输出不一致
console.log(qs.parse(&#39;a=b,c&#39;, &#123; comma: true &#125;));
// 输出：  &#123; a: &#39;b,c&#39; &#125;


// parse 数组

console.log(qs.parse(&#39;a[]=b&amp;a[]=c&#39;));
// 输出： &#123; a: [ &#39;b&#39;, &#39;c&#39; ] &#125;

//带索引，索引 &lt;= 20 才能正确解析
console.log(qs.parse(&#39;a[1]=b&amp;a[2]=c&#39;));
// 输出： &#123; a: [ &#39;b&#39;, &#39;c&#39; ] &#125;

console.log(qs.parse(&#39;a[20]=b&#39;));
// 输出： &#123; a: [ &#39;b&#39; ] &#125;

console.log(qs.parse(&#39;a[200]=b&#39;));
// 输出： &#123; a: &#123; &#39;200&#39;: &#39;b&#39; &#125; &#125;

// 数据有空值
console.log(qs.parse(&#39;a[]=&amp;a[]=b&#39;));
// 输出： &#123; a: [ &#39;&#39;, &#39;b&#39; ] &#125;

// 数组对象
console.log(qs.parse(&#39;a[][b]=c&#39;));
// 输出： &#123; a: [ &#123; b: &#39;c&#39; &#125; ] &#125;

// 传递null, 可设置 strictNullHandling true
console.log(qs.parse(&#39;a&amp;b=&#39;));
// 输出： &#123; a: &#39;&#39;, b: &#39;&#39; &#125;

console.log(qs.parse(&#39;a&amp;b=&#39;, &#123; strictNullHandling: true &#125;));
// 输出： &#123; a: null, b: &#39;&#39; &#125;
</code></pre>
<p>这里有些奇怪的是comma部分，跟文档输出不一致，stringily也出现了同样的问题。去看了issues，发现已经有人提出来了，详见<a href="https://github.com/ljharb/qs/issues/299">issue299</a>， 等新版本修复发布。</p>
<h4 id="stringily"><a href="#stringily" class="headerlink" title="stringily"></a>stringily</h4><p>可供设置的options及默认options：<a href="https://github.com/ljharb/qs/blob/d33a369e50f45d7d80c8dec4cc87fb9ad4cfd995/lib/stringify.js#L28">default</a>.</p>
<p>直接上代码：</p>
<pre><code class="javascript">const qs = require(&#39;qs&#39;);

// 对象
console.log(qs.stringify(&#123; a: &#123; b: &#39;c&#39; &#125; &#125;));
// 输出： a%5Bb%5D=c

console.log(qs.stringify(&#123; a: &#123; b: &#39;c&#39; &#125; &#125;, &#123; encode: false &#125;));
// 输出： a[b]=c

// 数组，默认 indices true
console.log(qs.stringify(&#123; a: [&#39;b&#39;, &#39;c&#39;, &#39;d&#39;] &#125;, &#123; encode: false &#125;));
// 输出： a[0]=b&amp;a[1]=c&amp;a[2]=d

console.log(qs.stringify(&#123; a: [&#39;b&#39;, &#39;c&#39;, &#39;d&#39;] &#125;, &#123; indices: false &#125;));
// 输出： a=b&amp;a=c&amp;a=d

// 使用 arrayFormat 来决定输出的Array样式

console.log(qs.stringify(&#123; a: [&#39;b&#39;, &#39;c&#39;] &#125;, &#123; arrayFormat: &#39;indices&#39;, encode: false &#125;));
// 输出： a[0]=b&amp;a[1]=c

console.log(qs.stringify(&#123; a: [&#39;b&#39;, &#39;c&#39;] &#125;, &#123; arrayFormat: &#39;brackets&#39;, encode: false &#125;));
// 输出： a[]=b&amp;a[]=c

console.log(qs.stringify(&#123; a: [&#39;b&#39;, &#39;c&#39;] &#125;, &#123; arrayFormat: &#39;repeat&#39;, encode: false &#125;));
// 输出： a=b&amp;a=c

// 与文档中的comma设置输出不一致
console.log(qs.stringify(&#123; a: [&#39;b&#39;, &#39;c&#39;] &#125;, &#123; arrayFormat: &#39;comma&#39;, encode: false &#125;));
// 输出： a[0]=b&amp;a[1]=c

// null 被当成空值处理
console.log(qs.stringify(&#123; a: null, b: &#39;&#39; &#125;));
// 输出： a=&amp;b=

// 跳过值为null的key
console.log(qs.stringify(&#123; a: &#39;b&#39;, c: null&#125;, &#123; skipNulls: true &#125;));
// 输出： a=b
</code></pre>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://github.com/ljharb/qs">qs</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Qs</tag>
      </tags>
  </entry>
  <entry>
    <title>RestClient的用法及封装</title>
    <url>/posts/usage-of-restclient/</url>
    <content><![CDATA[<p>RestClient 使用笔记。</p>
<span id="more"></span> 

<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p><a href="https://github.com/rest-client/rest-client">Rest-client</a>， 顾名思义，遵守RESTful规则的客户端，可以对服务器发出请求。</p>
<p>每次使用时以<code>RestClient.get／post/put/delete</code>起头，更高级的用法是以<code>RestClient::Request.execute()</code>为固定结构。</p>
<p>如果你的专案中多处需要用到rest-client，你一定希望可以封装起来，易于调用，让代码更优雅。</p>
<p>我们开始吧。</p>
<h4 id="用法简介"><a href="#用法简介" class="headerlink" title="用法简介"></a>用法简介</h4><p><a href="https://github.com/rest-client/rest-client">Rest-client</a>的<a href="http://www.rubydoc.info/github/rest-client/rest-client/RestClient#post-class_method">官方文档</a>中， 详细地列出了各个method的参数情况，我们挑出最重要的那四个：</p>
<pre><code>.get(url, headers = &#123;&#125;, &amp;block)
.post(url, payload, headers = &#123;&#125;, &amp;block)
.put(url, payload, headers = &#123;&#125;, &amp;block)
.delete(url, headers = &#123;&#125;, &amp;block)
</code></pre>
<p>会发现四个verb请求都带有headers，block，但是这两个参数都不是必填的。比如<code>get</code>， 只给一个URL就满足了。</p>
<p>在<a href="https://github.com/rest-client/rest-client">GitHub</a>库上有相关的实例，长这样：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1flbgi7h7mgj30oh07r407.jpg"></p>
<p>用起来很简单，那么在ruby中如何封装呢？比如有个图书model，我想要对某个书进行修改，使用put时，就要传递至少三个参数，冗长的URL表明是哪本书，你的登录信息，比如sessionId, 要更新的内容。类似这样：</p>
<pre><code>RestClient.post &#39;http://book.com/books/bookid&#39;, &#123;:sessionId =&gt; &#39;XXXXXXXX&#39;, :token =&gt; &quot;xxxx&quot;&#125;,&#123;&quot;name&quot;: &quot;XXX&quot;, &quot;description:&quot; &quot;XXXXX&quot; .......&#125;
</code></pre>
<p>代码看着很不整洁，如何改进？</p>
<p>别急，先来看看在ruby中如何实现全局调用一个method。</p>
<h4 id="call-method-from-the-global-scope"><a href="#call-method-from-the-global-scope" class="headerlink" title="call method from the global scope"></a>call method from the global scope</h4><p>比如你定义了method C</p>
<pre><code class="Ruby">def C(name)
    puts &quot;hello, #&#123;name&#125;&quot;
end
</code></pre>
<p>你想要在专案的多个文件中均可以调用这个method C，怎么实现？</p>
<p>使用module，这么来，在文件A.rb中，放入如下内容：</p>
<pre><code class="Ruby">module A
    module B
        def C(name)
            puts &quot;hello, #&#123;name&#125;&quot;
        end
    end
end
</code></pre>
<p>这时候，你引用C，需要写成A::B.C， 呃，这不是我们想要的结果，继续优化。</p>
<p>在Ruby中，任何一个method都绑定了一个对象。当我们调用比较常见的method，比如<code>puts</code>， <code>require</code>时，其实我们是在调用<code>main.puts</code>, <code>main.require</code>, 也就是它们有一个默认的object，叫做main。</p>
<p>那我们也想给C挂上这样的object，让它也可以像puts一样被直接调用，怎么做？</p>
<p>让Object这个class中，包含我们的A::B即可，修改文件A.rb：</p>
<pre><code class="Ruby">module A
    module B
        def C(name)
            puts &quot;hello, #&#123;name&#125;&quot;
        end
    end
end

class Object
    include A::B
end
</code></pre>
<p>这样当你在其他文件中，比如app.rb中调用C时，只要加上如下代码即可：</p>
<pre><code class="Ruby">require &#39;A&#39; #C定义的文件名
extend A::B
</code></pre>
<p>好，回到我们的restclient, 现在就很好做了。</p>
<h4 id="简化restclient的调用"><a href="#简化restclient的调用" class="headerlink" title="简化restclient的调用"></a>简化restclient的调用</h4><p>知道如何对method进行global 调用，我们可以这么玩。</p>
<p>新建<code>myclient.rb</code>文件，内容如下：</p>
<pre><code class="Ruby">require &#39;rest-client&#39;

module MyClient
  module Client
  end
end
</code></pre>
<p>里面没有任何method，我们加上get。</p>
<pre><code class="Ruby">require &#39;rest-client&#39;
$apiurl = http://example.com/api. #这是你API的URL，请自行修改
module MyClient
  module Client
    def get(url, headers = nil)
      response = RestClient.get(
          $apiurl + url,
          headers
      )
    end
   end
 end

class Object
  include MyClient::Client
end
</code></pre>
<p>这时，如果要在其他文件调用，比如app.rb文件中，使用get,就可以这么用了。</p>
<pre><code class="Ruby">require_relative &#39;my_client&#39;
extend MyClient::Client

......
headers =  &#123;:&#39;session&#39; =&gt; &#39;XXXX&#39;&#125;
get(&quot;/books&quot;, headers)
.....
</code></pre>
<p>同样的，将post，put， delete 加入，补全代码，如下：</p>
<pre><code class="Ruby">require &#39;rest-client&#39;
$apiurl = http://example.com/api. #这是你API的URL，请自行修改
module MyClient
  module Client
    def get(url, headers = nil)
      response = RestClient.get(
          $apiurl + url,
          headers
      )
    end

    def post(url, payload, headers = nil )
      response = RestClient.post(
          $apiurl + url,
          payload,
          headers
      )
    end

    def put(url, payload, headers = nil )
      response = RestClient.put(
          $apiurl + url,
          payload,
          headers
      )
    end

    def delete(url, headers = nil )
      response = RestClient.delete(
          $apiurl + url,
          headers
      )
    end
  end
end

class Object
  include MyClient::Client
end
</code></pre>
<p>搞定，可以欢快地调用啦！！</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://stackoverflow.com/questions/18964016/how-can-i-add-a-method-to-the-global-scope-in-ruby">How can I add a method to the global scope in Ruby?</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>RestClient</tag>
      </tags>
  </entry>
  <entry>
    <title>来认识下大名鼎鼎的vagrant</title>
    <url>/posts/usage-of-vagrant/</url>
    <content><![CDATA[<p>最近做部署的时候，老大推荐了一个特别好用的工具<a href="https://www.vagrantup.com/">Vagrant</a>，一个用于配置和管理虚拟软件开发环境的开源软件， 官方GitHub库<a href="https://github.com/hashicorp/vagrant">vagrant</a>。</p>
<span id="more"></span> 

<p>试了下，很赞，来认识一下vagrant。</p>
<p>「以下均以OS X为例，Window类似。」</p>
<h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><p>vagrant需要依赖于虚拟机，虚拟机常见的有virtual box 和 VMWare，官网上推出了<a href="https://www.vagrantup.com/vmware/index.html">vagrant + vmware 付费版</a>，但其默认是virtual box，所以我们选择virtual box : P</p>
<ul>
<li><p>装virtual box</p>
<p>去<a href="https://www.virtualbox.org/wiki/Downloads">官网</a>, 选择对应的安装包，点击下载：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fnjmua2dguj30m7056gmi.jpg"></p>
<p>下载好后，安装即可。</p>
</li>
<li><p>装Vagrant</p>
<p>戳这里<a href="https://www.vagrantup.com/downloads.html">download vagrant</a>，下载对应的安装包：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fnjmye7sl5j30kw0gdabd.jpg"></p>
<p>下载好后，安装即可。</p>
</li>
</ul>
<h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><ul>
<li><p><strong>创建<code> Vagrantfile</code> 文件</strong></p>
<p>终端输入：</p>
<pre><code>mkdir vagrant_started
cd vagrant_started
vagrant init
</code></pre>
<p>在vagrant_started目录下，会生成一个Vagrantfile文件，<code>vi Vagrantfile</code>打开看一下：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fnjnwdwz6bj30q209vtah.jpg"></p>
<p>可以看到里面的box，你可以理解成是镜像，是”base”。</p>
</li>
<li><p><strong>添加box</strong></p>
<p>终端输入<code>vagrant box add box&#39;name</code>来添加box，比如添加ubuntu/trusty64：</p>
<pre><code>vagrant box add ubuntu/trusty64
</code></pre>
<p><a href="https://vagrantcloud.com/boxes/search">HashiCorp’s Vagrant Cloud box catalog</a> 列出了很多box，随取随用，很方便。</p>
<p>添加box会有点慢，静等它添加完成，然后修改一下Vagrantfile， 把<code>base</code>改成<code>ubuntu/trusty64</code>：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fnjo73znhsj30pw07875q.jpg"></p>
</li>
</ul>
<p>​     也可以指定版本，使用<code>config.vm.box_version = &quot;X.X.X&quot;</code> ， 其中x.x.x是版本号。</p>
<p>​    <strong>当然上面的这两步【创建<code> Vagrantfile</code> 文件，添加box 】也可以合并成一步：</strong></p>
<pre><code> **终端输入：`vagrant init ubuntu/trusty64` 。** 【不要问为什么不早说，多敲点代码就当运动了……】
</code></pre>
<ul>
<li><p>开始启用吧</p>
<p>终端输入<code>vagrant up</code>,  启用ubuntu，再次输入<code>vagrant ssh</code>, 进入ubuntu虚拟环境，然后就可以好好玩了！退出使用<code>exit</code>。</p>
</li>
<li><p>文件同步【这个最酷啦！】</p>
<p>如果你按照官方文档的说明去做文件同步，是这样的：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fnjphz7zsvj30g804cmx7.jpg"></p>
<p>但是这里有个问题，输入<code>ls /vagrant</code>时，显示没有这个文件目录，那就新建个<code>mkdir vagrant</code>，当然里面是空的，终端输入：</p>
<pre><code>mkdir vagrant &amp;&amp; cd vagrant
vim foo
exit
</code></pre>
<p>退出后，在主机输入：<code>ls</code>， 并没有发现刚刚新建的foo文件，so , where is synced file?</p>
<p>这里有一步设置没有完成，详见：<a href="https://github.com/hashicorp/vagrant/issues/7157">default virtualbox synced folder doesn’t mount</a></p>
<p>解决方法也很简单：</p>
<p>在Vagrantfile中，找到config.vm.synced_folder：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fnjq0y7qboj30nd03ft97.jpg"></p>
<p>修改成： config.vm.synced_folder “.”, “/vagrant”, type: “virtualbox”</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fnjqdt327pj30jl02xq3f.jpg"></p>
<p>再试一下，会发现文件同步成功！</p>
</li>
<li><p>删除VM</p>
<p>想要删除VM时，使用<code>vagrant destroy</code>即可。</p>
</li>
</ul>
<p>​    OK，That‘s all.</p>
<p>​    有关provision， network等部分的玩法，可查阅vagrant的<a href="https://www.vagrantup.com/intro/getting-started/up.html">getting up</a>。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.vagrantup.com/intro/index.html">Introduction to Vagrant</a></p>
<h4 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h4><p>Google下“Vagrant的使用”，就会看到很多人写过Vagrant方面的文章，可以参考。</p>
<ul>
<li><a href="https://imququ.com/post/vagrantup.html">开始使用 Vagrant</a></li>
<li><a href="http://blog.csdn.net/hel12he/article/details/51069269">vagrant的安装与初识</a></li>
</ul>
<p>不过纸上得来终觉浅，自己动手去做会觉得很赞的，enjoy ：P</p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Vagrant</tag>
      </tags>
  </entry>
  <entry>
    <title>在rails中使用simple navigation</title>
    <url>/posts/use-simple-navigation-in-rails/</url>
    <content><![CDATA[<p><a href="https://github.com/codeplant/simple-navigation">simple navigation</a>是一个ruby库，用来生成navigation的，它的优势是可以定制自己的导航菜单，特别是当你有多个菜单或者你的菜单相对比较复杂的时候。</p>
<span id="more"></span> 

<p>可是官方只是给出了一个<a href="http://simple-navigation-demo.codeplant.ch/">online demo</a>，并没有给到具体的install  和 usage，这让初次接触simple navigation的小白有些被动，Google了一些文章，实做了一下，知道怎么玩啦，记录下以备用。</p>
<h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><ul>
<li><p>安装gem</p>
<p>在gemfile文件中，添加如下：【建议把bootstrap也安装了】</p>
<pre><code class="Ruby">gem &#39;bootstrap-sass&#39;
gem &#39;simple-navigation&#39;
gem &#39;simple-navigation-bootstrap&#39;
</code></pre>
<p>终端运行：</p>
<pre><code>bundle install
</code></pre>
<p>重启服务器：<code>rails s</code></p>
<p>将<code>application.css</code>文件更名为<code>application.scss</code>，终端输入：</p>
<pre><code>mv app/assets/stylesheets/application.css app/assets/stylesheets/application.scss
</code></pre>
<p>在<code>application.scss</code>文件中，添加如下：</p>
<pre><code>@import &quot;bootstrap-sprockets&quot;;
@import &quot;bootstrap&quot;;
</code></pre>
<p>生成menu 的configuration文件<code>navigation.rb</code>， 终端输入：</p>
<pre><code>bundle exec rails g navigation_config
</code></pre>
<p>此时，config文件下会生成一个<code>navigation.rb</code>文件，长这样：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fmjtnki6lbj30o007tmyr.jpg"></p>
<p>在文件的下方，已经列出了一些用法，包括如何添加有sub navigation的item，添加指定条件的item，比如登陆，是否为管理员等等。</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fmjtwnw2dzj30nv0gb42w.jpg"></p>
</li>
</ul>
<ul>
<li><p>设置menu</p>
<p>我们来改改，定制一下，比如下面这样：【当然，请确保你写的path是有效的……】</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fmjvdavg84j30le04n74t.jpg"></p>
</li>
<li><p>展示menu</p>
<p>在需要展示的页面中，添加:</p>
<pre><code>&lt;%= render_navigation(:expand_all =&gt; true)%&gt;
</code></pre>
<p>这里，expand_all 为true是指全部铺开，即子菜单未被激活也是展开的，效果类似这样：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fmjve7qr4oj305z04it8l.jpg"></p>
<p>这里可以用参数level来控制层级的显示，上面菜单 + 子菜单，只有两级，所以用</p>
<p><code>render_navigation(:level =&gt; 2)</code>也是可以的。如果改成：</p>
<pre><code>&lt;%= render_navigation(:level =&gt; 1)%&gt;
</code></pre>
<p>则显示一级菜单，像这样：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fmjvz5s8kej3063027q2r.jpg"></p>
<p>另：</p>
<p>看到GitHub 中提到使用<code>&lt;%= render_navigation(:expand_all =&gt; false)%&gt;</code> 来让未被激活的子菜单隐藏，没有设置的情况下，:expand_all是默认为false的, 我试了一下，没有成功，所有菜单还是全部铺开，有些奇怪。</p>
</li>
</ul>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://github.com/codeplant/simple-navigation">simple-navigation</a></p>
<p><a href="https://github.com/pdf/simple-navigation-bootstrap">simple-navigation-bootstrap</a></p>
<p><a href="http://www.xoen.org/2012/05/bootstrap-menus-in-rails/">bootstrap menu in rails</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac中使用Automator批量转换HEIC文件</title>
    <url>/posts/using-automator-to-convert-heic-in-macos/</url>
    <content><![CDATA[<p>PicGo不支持HEIC文件, 每次上传照片到图床时, 都要先转换成JPG. 参考 <a href="https://mackeeper.com/blog/convert-heic-to-jpg-on-mac/">3 Ways to Convert HEIC Files to JPGs Format on a Mac</a> 尝试了下 Mac 的Automator功能, 非常方便, 记录下.</p>
<span id="more"></span>

<h4 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h4><p>环境: macOS Big Sur 11.3.1</p>
<p>Applications 中找到 Automator, 打开 Automator, 选择 Quick Action.</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images20210829120241.png"></p>
<p>在打开的界面中, Workflow receives current 选择 Image Files.</p>
<p>然后左侧边栏选择 Library &gt; Photos &gt; Change  type of Images. 将 <strong>Change  type of Images</strong> 拖拽到 灰色区域创建Workflow.</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images20210829120416.png"></p>
<p>拖拽中会弹窗让你选择是否确认添加. 确认即可.</p>
<p>随后选择目标格式, 比如 JPEG, 同时在 Copy Finder Items 中选择转换格式后的图片生成位置, 这里我选择了Desktop, 它也提供了替换源图片的选项.</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images20210829121628.png"></p>
<p>然后选择 File &gt; Export - 命名你的Workflow 即可.</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images20210829121412.png"></p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images20210829121828.png"></p>
<p>保存后,  因为选择保存地址在Desktop, 所以去Desktop 双击打开刚刚保存的 workflow, 安装.</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images20210829122054.png"></p>
<p>安装后, 选中需要转换格式的图片, 选择 Services &gt; HEIC TO JPEG 即可.</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images20210829122502.png"></p>
<p>OK, 搞定.</p>
<p>另外, 如果不想要这个Workflow了, 可以在 <strong>System Preferences &gt; Extensions &gt; Finder</strong> 中找到它, 移除即可.</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images20210829124049.png"></p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://mackeeper.com/blog/convert-heic-to-jpg-on-mac/">3 Ways to Convert HEIC Files to JPGs Format on a Mac</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Chrome console快速获取及检验你的xpath, cssSelector</title>
    <url>/posts/using-chrome-console-to-evaluate-and-validate-xpath-and-cssselector/</url>
    <content><![CDATA[<p>快速找到心心念念的element。</p>
<span id="more"></span> 

<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>之前写过一篇有关<a href="http://luciaca.cn/2018/01/24/learning-selenium-webdriver-ruby-version/">Selenium webdriver</a> 的学习笔记，这里再补充个小技巧。</p>
<p>Selenium webdriver testing中，定位元素是非常基本的步骤，定位到了元素你才能对其进行操作。如果可以快速获取元素的xpath, cssSelector，同时也能检查自己写的xpath, cssselector是否正确，那就太赞了。</p>
<p>这里以能造轮子会拍照的Kenneth Reitz的<a href="https://github.com/kennethreitz">github</a>主页为例，来看看如何快速获取及检验你的xpath，cssSelector。</p>
<p>BTW，定位元素的方法有很多，我在学习笔记也有记录，能用id尽量用id，这里仅仅说一下如何借助console来完成xpath, cssSelector的定位，并不代表元素定位就这两种方式。</p>
<h4 id="如何获取？"><a href="#如何获取？" class="headerlink" title="如何获取？"></a>如何获取？</h4><p>假定我们希望对页面中unfollow这个按钮进行click的操作， 那么首先得要找到它。</p>
<p>chrome浏览器下，选中该元素，查看<strong>inspect</strong>，打开developer tool，然后右键，选择<strong>copy</strong>，就可以看到copy  selector, copy xpath两个选项了。</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fpdadi8mxsg31180izgyr.gif"></p>
<p>针对你需要的copy即可。不过提醒下，这里一般copy下来的cssSelector都特别长，你可以自行做一下删减。</p>
<p>比如上面这个，得到的selector：</p>
<pre><code>#js-pjax-container &gt; div &gt; div.h-card.col-3.float-left.pr-3 &gt; div.user-profile-following-container.js-user-profile-following-toggle.mb-3 &gt; span &gt; span.unfollow &gt; form &gt; button
</code></pre>
<p>得到的xpath是这样：</p>
<pre><code>//*[@id=&quot;js-pjax-container&quot;]/div/div[1]/div[5]/span/span[2]/form/button
</code></pre>
<p>Xpath不算太长，还能接受，不过xpath会将页面的所有元素进行扫描以完成定位，比较耗时，所以能用cssSelector的话，还是选择cssSelector。</p>
<p>那么上面那个太长了，怎么简化？把它的class复制下来：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fpdaob6bnfj311m0axaeb.jpg"></p>
<p>改成这样：</p>
<pre><code>button.btn.btn-block.top-0.js-sticky.js-user-profile-follow-button.js-toggler-target
</code></pre>
<p>那要如何确定自己写的这个selector是否正确呢？看下面👇：</p>
<h4 id="如何检测？"><a href="#如何检测？" class="headerlink" title="如何检测？"></a>如何检测？</h4><p>在developer tool的console中，<strong>使用$$(“xxx”)来检查cssSelector， 使用$x(“xxxx”)来检查xpath</strong>。</p>
<p>这里有两处console可供使用，一般直接用element下面的，方便直接查看定位到的元素。</p>
<p>来检查一下刚刚的selector是否正确。</p>
<p>输入后<code>$$(&quot;button.btn.btn-block.top-0.js-sticky.js-user-profile-follow-button.js-toggler-target&quot;)</code>，发现找到了两个元素，第一个是follow的按钮，第二个才是我们要的unfollow。</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fpdbb108vig30yw0k24qp.gif"></p>
<p>发现定位到了两个元素，这样怎么破？</p>
<p>仔细看，会发现这是一个Ajax的交互，点击unfollow后，向服务器发出unfollow的请求，执行user controller中对应的unfollow action，页面渲染，随后出现follow按钮。</p>
<p>鉴于这两个按钮的cssSelector一模一样，这种情况下，建议换成xpath。</p>
<p>用刚刚获取的xpath来检测一下：</p>
<p>如果你输入有语法错误，它会报错，这里注意双引号的使用。在双引号中嵌套了其他双引号，换成单引号。</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fpfi6bihaxg30yw0k2gz5.gif"></p>
<p>发现用xpath来定位时，只有一个。OK，完成定位。</p>
<p>PS.这里cssSelector的这个例子举的不是很好，但用法基本就是这么玩的。</p>
<h4 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h4><p>在Google selenium相关测试中，找到了这篇文章<a href="http://yizeng.me/2014/03/23/evaluate-and-validate-xpath-css-selectors-in-chrome-developer-tools/">Evaluate and validate XPath/CSS selectors in Chrome Developer Tools</a>，作者写的很详细，看完让我有种感觉：“人家都写的这么好了，我还写个啥？”……</p>
<p>当然，最终我还是决定要写写，加深印象:  P</p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Selenium</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac下搭建汇编环境</title>
    <url>/posts/using-dosbox-on-mac-os/</url>
    <content><![CDATA[<p>大概需要2分钟吧……</p>
<span id="more"></span>

<h4 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h4><ul>
<li>DosBox，官网<a href="https://www.dosbox.com/download.php?main=1">download</a></li>
<li>DEBUG.EXE，MASM.EXE 等程序 <a href="https://github.com/Lupeipei/Assembly/tree/master/masm">下载MASM等程序</a></li>
</ul>
<h4 id="快速入坑"><a href="#快速入坑" class="headerlink" title="快速入坑"></a>快速入坑</h4><p>一分钟搞定。</p>
<ul>
<li><p>先挂载，本地新建个目录给DosBox用。</p>
<p>在本地终端执行：</p>
<pre><code class="shell">cd ~
mkdir DosBox
mv Downloads/masm/** DosBox    ## 将下载的DEBUG.EXE，MASM.EXE 等程序文件放入DosBox里面。
</code></pre>
<p>这个新建的DosBox文件夹，就是后面DosBox要挂载到本地的目录。</p>
<p>「这个文件夹放哪里都没关系，也可以直接在下载后的DosBox文件夹下新建。」</p>
</li>
<li><p>打开DosBox，执行</p>
<pre><code>mount c ~/DosBox
c:
</code></pre>
<p>好啦。</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/imagesimage-20200228134542028.png"></p>
</li>
</ul>
<p>​    你可以通过 <code>dir</code> 命令查看目录下的内容。</p>
<h4 id="debug-程序"><a href="#debug-程序" class="headerlink" title="debug 程序"></a>debug 程序</h4><p>运行debug，来测试下是否可以正常使用。</p>
<ul>
<li><p>运行debug程序</p>
<pre><code>debug
r
</code></pre>
<p>r 用来查看CPU 寄存器情况。</p>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/imagesimage-20200228135258064.png"></p>
<ul>
<li><p>退出 debug 程序：</p>
<pre><code>q
</code></pre>
<p>如果要退出DosBox， <code>exit</code> 即可。</p>
</li>
</ul>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p> <a href="https://www.dosbox.com/DOSBoxManual.html">DOSBox v0.74-3 Manual</a></p>
<p><a href="https://www.youtube.com/watch?v=LKUO9HtECDc">How to use DosBox on Mac OS</a></p>
<p><a href="https://book.douban.com/subject/25726019/">《汇编语言》第三版</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Assembly</tag>
        <tag>CS</tag>
      </tags>
  </entry>
  <entry>
    <title>Rails中使用layer弹窗组件</title>
    <url>/posts/using-layer-on-Rails/</url>
    <content><![CDATA[<p>弹窗组件layer使用记录。</p>
<span id="more"></span> 

<h4 id="layer是什么？"><a href="#layer是什么？" class="headerlink" title="layer是什么？"></a>layer是什么？</h4><p>layer, 一款 web弹窗组件，你可以将它看作bootstrap中的modal， 详情可见：<a href="http://layer.layui.com/">官网</a>,  <a href="https://github.com/sentsin/layer">GitHub</a>。</p>
<p>layer是layui的一个内置模块，而layui则是一个前端UI框架，具体可见其<a href="http://www.layui.com/">官网</a>。</p>
<h4 id="怎么用？"><a href="#怎么用？" class="headerlink" title="怎么用？"></a>怎么用？</h4><p>由于layer是layui的弹窗组件，所以使用时既可以单独使用，也可以通过layui模块化使用，这里单独使用layer。</p>
<p>layer的单独使用在其<a href="http://layer.layui.com/hello.html">快速上手</a>里面有相关说明，这里记录下如何在Rails中使用layer。</p>
<ul>
<li><p>下载layer文件包</p>
<p>layer<a href="http://layer.layui.com/">官网首页</a>，点击<strong>绿色下载layer</strong>，或者去<a href="https://github.com/sentsin/layer">GitHub</a>上下载，下载后解压。</p>
<p>目前的版本是3.1.1：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1forbutw4b2j30uf03574z.jpg"></p>
</li>
<li><p>将文件放入项目的public目录下</p>
<p>将解压后的layer文件包，放入项目的public目录下</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1forbxearurj308g03nmx4.jpg"></p>
<p>​</p>
</li>
<li><p>使用</p>
<p>引入layer前，需要引入jQuery， 鉴于rails默认引入了jQuery，这里直接引入layer即可。</p>
<p>在需要使用弹窗的页面对应的layout中，比如<code>application.html.erb</code>，添加：</p>
<pre><code class="Html">......
&lt;head&gt;
......
&lt;%= javascript_include_tag &#39;application&#39; %&gt;
+ &lt;script src=&quot;/layer/layer.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;
</code></pre>
<p><strong>请务必将<code>&lt;script src=&quot;/layer/layer.js&quot;&gt;&lt;/script&gt;</code>置于<code>&lt;%= javascript_include_tag &#39;application&#39; %&gt;</code>之后。</strong></p>
<p>测试一下是否可以正常使用。在任何一个页面最后，比如landing page着陆页，添加：</p>
<pre><code class="javascript">......
&lt;div id=&quot;for_test&quot; class=&quot;btn btn-lg btn-danger&quot;&gt;test&lt;/div&gt;
&lt;script&gt;
  $(&#39;#for_test&#39;).on(&#39;click&#39;, function()&#123;
      layer.msg(&#39;hello world&#39;);
  &#125;);
&lt;/script&gt;
</code></pre>
<p>此时点击该页面的test按钮，会弹出一个含有“hello world”的弹窗，说明可以正常使用了。</p>
<p>它的弹窗使用有多种，可以在<a href="http://layer.layui.com/">官网首页</a>玩一下，还是蛮酷的，此外，文档写的也蛮有趣的，可以读读。</p>
<p>另：如果你使用layer.photos(options) - 相册层时，使用了JSON传入的方式【layer的photos有两种实现方式：JSON传入和直接读取页面图片】，不想肉眼检查自己的JSON文件格式是否正确，推荐使用这个在线json解析和格式验证的网站： <a href="https://www.json.cn/">JSON.cn</a>。</p>
</li>
</ul>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="http://layer.layui.com/">layer官网</a></p>
<p><a href="http://www.layui.com/doc/modules/layer.html">弹出层 layer</a></p>
<p><a href="http://fly.layui.com/">FLY 社区</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
        <tag>Layer</tag>
      </tags>
  </entry>
  <entry>
    <title>Rails中使用layer.photos来预览图片</title>
    <url>/posts/using-layer-photos-in-rails/</url>
    <content><![CDATA[<p>之前写了篇学习笔记<a href="http://luciaca.cn/2018/02/24/using-layer-on-Rails/">Rails中使用layer弹窗组件</a>， 这篇写写如何在Rails中使用layer的photos来实作图片预览。</p>
<span id="more"></span> 

<h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><p>在其文档的<a href="http://www.layui.com/doc/modules/layer.html#layer.photos">layer.photos</a>中，有用法的详细说明。两种方式：</p>
<ul>
<li>直接读取页面图片</li>
<li>传入json</li>
</ul>
<p>来看一下每种方式的具体使用。</p>
<h5 id="直接读取页面图片："><a href="#直接读取页面图片：" class="headerlink" title="直接读取页面图片："></a>直接读取页面图片：</h5><p>官方给到的示例如下：</p>
<pre><code class="Html">//HTML示例
&lt;div id=&quot;layer-photos-demo&quot; class=&quot;layer-photos-demo&quot;&gt;
  &lt;img layer-pid=&quot;图片id，可以不写&quot; layer-src=&quot;大图地址&quot; src=&quot;缩略图&quot; alt=&quot;图片名&quot;&gt;
  &lt;img layer-pid=&quot;图片id，可以不写&quot; layer-src=&quot;大图地址&quot; src=&quot;缩略图&quot; alt=&quot;图片名&quot;&gt;
&lt;/div&gt;

&lt;script&gt;
//调用示例
layer.photos(&#123;
  photos: &#39;#layer-photos-demo&#39;
  ,anim: 5 //0-6的选择，指定弹出图片动画类型，默认随机（请注意，3.0之前的版本用shift参数）
&#125;);
&lt;/script&gt;
</code></pre>
<p>这里要说一下，如果一个页面里面，你需要多个弹窗时，如何处理？</p>
<p>假定现在有一系列产品，每个产品对应有多张图片。类似这样：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fp1rwiwdzlj30js0azglk.jpg"></p>
<p>需要的效果是：这时，点击product1的某张图片，弹出的是product1的图片预览层，点击product2，弹出的是product2的图片预览层。</p>
<p>解决方法也很简单，套上一个动态的ID，需要用上JS，示例的代码如下：</p>
<pre><code class="Html">//HTML示例
&lt;% @products.each do |product| %&gt;
    &lt;div id=&quot;product-&lt;%= product.id %&gt;&quot; class=&quot;layer-photos-demo&quot;&gt;
      &lt;% product.images.each do |image |%&gt;
      &lt;img  onclick= &quot;getImage(&#39;&lt;%= product.id %&gt;&#39;);&quot; layer-src=&quot;&lt;%= image.src %&gt;&quot; src=&quot;&lt;%= image.thumb %&gt;&quot; alt=&quot;图片名&quot;&gt;
       &lt;% end %&gt;   
    &lt;/div&gt;
&lt;% end %&gt;

&lt;script&gt;
    function getImage(productId)&#123;
        layer.photos(&#123;
            photos: &#39;#product-&#39; + productId,
            anim:5
        &#125;);
    &#125;
&lt;/script&gt;
</code></pre>
<h5 id="JSON文件传入"><a href="#JSON文件传入" class="headerlink" title="JSON文件传入"></a>JSON文件传入</h5><p>官方文档示例：</p>
<pre><code class="Javascript">$.getJSON(&#39;/jquery/layer/test/photos.json&#39;, function(json)&#123;
  layer.photos(&#123;
    photos: json
    ,anim: 5 //0-6的选择，指定弹出图片动画类型，默认随机（请注意，3.0之前的版本用shift参数）
  &#125;);
&#125;);
</code></pre>
<p>返回的JSON需严格按照如下格式：</p>
<pre><code class="json">&#123;
  &quot;title&quot;: &quot;&quot;, //相册标题
  &quot;id&quot;: 123, //相册id
  &quot;start&quot;: 0, //初始显示的图片序号，默认0
  &quot;data&quot;: [   //相册包含的图片，数组格式
    &#123;
      &quot;alt&quot;: &quot;图片名&quot;,
      &quot;pid&quot;: 666, //图片id
      &quot;src&quot;: &quot;&quot;, //原图地址
      &quot;thumb&quot;: &quot;&quot; //缩略图地址
    &#125;
  ]
&#125;
</code></pre>
<p>在使用的时候，你可能会想是不是要生成一个JSON文件才能用这种方式? 其实并不需要。在Rails中可以用一个action的render，指定返回JSON格式的数据即可。</p>
<p>还是以product为例， 三步走：</p>
<ul>
<li><p>给它添加一个preview的action， 在routes中声明</p>
<p>在<code>routes.rb</code>中添加：</p>
<pre><code class="Ruby">resources :products do
  member do
    get :preview
  end
 end
</code></pre>
</li>
<li><p>在<code>products_controller.rb</code>中，定义preview的内容，返回JSON内容：</p>
<pre><code class="Ruby">def preview
  @product = Product.find(params[:id])
  @images = @product.images.all
  @photo = &#123;
      title: @product.title,
      id: @product.id,
      start: 0,
      data: @images.map do |image|
        &#123;
            alt: image.title,
            pid: image.id,
            src: image.src,
            thumb: image.thumb
        &#125;
      end
  &#125;
  render json: @photo
end
</code></pre>
<p>返回的JSON内容，格式需要严格按照指定的格式去写。</p>
</li>
<li><p>在对应的html中，比如product的index页面， 添加如下内容：</p>
<pre><code class="Html">&lt;% @products.each do |product| %&gt;
    &lt;div id=&quot;product-&lt;%= product.id %&gt;&quot; class=&quot;layer-photos-demo&quot;&gt;
      &lt;a href=&quot;javascript:getImageJson(&#39;&lt;%= product.id %&gt;&#39;);&quot;&gt;
      查看产品图片&lt;/a&gt;
    &lt;/div&gt;
&lt;% end %&gt;

&lt;script&gt;
    function getImageJson(productId) &#123;
        $.getJSON(&#39;/products/&#39; + productId + &#39;/preview&#39;, function(json)&#123;
            layer.photos(&#123;
                photos: json,
                anim: 5
            &#125;);
        &#125;);
    &#125;
&lt;/script&gt;
</code></pre>
</li>
</ul>
<p>刷新页面确认是否正常。</p>
<p>OK， 大功告成。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="http://www.layui.com/doc/modules/layer.html">弹层组件文档 - layui.layer</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
        <tag>Layer</tag>
      </tags>
  </entry>
  <entry>
    <title>Rails中使用log4r</title>
    <url>/posts/using-log4r-on-rails/</url>
    <content><![CDATA[<p>初尝log4r。</p>
<span id="more"></span> 

<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>日志的重要性自不用说，Rails中log的存放地址位于log目录下，有develogment.log， production.log等。开发的时候，我通常会单独开个terminal窗口，跑rails s， 出问题了，就在那个窗口看日志。现在看来，这还是挺低级的。</p>
<p>近来看一些前辈写的Rails相关知识，有推荐<a href="https://github.com/colbygk/log4r">log4r</a>，尝试了下， 还不错。日志按照日期分开存放，也很好查找。</p>
<p>除了rails，其他的ruby项目也可以用log4r（log for ruby），这里只说一下如何在Rails中使用log4r。</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>先吐槽下，看了不少轮子，没见过<a href="https://github.com/colbygk/log4r">log4r</a>这种的，没有常规的installation，usage，Wiki里面也没有说明。所有的信息，需要自己去doc里面看manual，index， 手法别样，上图感受下：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fp5na0nzx8j30is07pgmm.jpg"></p>
<p>好，不废话。看看如何在rails用它。</p>
<p>四步走。</p>
<ul>
<li><p>在gemfile中添加</p>
<pre><code class="Ruby">gemfile &#39;log4r&#39;
</code></pre>
<p>终端bundle, 重启服务器。</p>
</li>
<li><p>修改<code>config/application.rb</code></p>
<pre><code class="Ruby">require &#39;rails/all&#39;
# add these line for log4r
require &#39;log4r&#39;
require &#39;log4r/yamlconfigurator&#39;
require &#39;log4r/outputter/datefileoutputter&#39;

Bundler.require(:default, Rails.env) if defined?(Bundler)
module my_app
  class Application &lt; Rails::Application
    #...
    # assign log4r&#39;s logger as rails&#39; logger.
    include Log4r
    log4r_config= YAML.load_file(File.join(File.dirname(__FILE__),&quot;log4r.yml&quot;))
    YamlConfigurator.decode_yaml( log4r_config[&#39;log4r_config&#39;] )
    config.logger = Log4r::Logger[Rails.env]
  end
end
</code></pre>
</li>
<li><p>新增配置文件<code>config/log4r.yml</code>：</p>
<pre><code class="YMl">log4r_config:
  # define all loggers ...
  loggers:
    - name      : production
      level     : WARN
      trace     : &#39;false&#39;
      outputters :
      - datefile
    - name      : development
      level     : DEBUG
      trace     : &#39;true&#39;
      outputters :
      - datefile

  # define all outputters (incl. formatters)
  outputters:
  - type: DateFileOutputte
    name: datefile
    dirname: &quot;log&quot;
    filename: &quot;my_app.log&quot; # notice the file extension is needed!
    formatter:
      date_pattern: &#39;%H:%M:%S&#39;
      pattern     : &#39;%d %l: %m &#39;
      type        : PatternFormatter
</code></pre>
<p>这时，如果重启rails，会发现报错:</p>
<pre><code>undefined method `formatter&#39; for #&lt;Log4r::Logger:0x007fd97a78e780&gt; (NoMethodError)
</code></pre>
<p>我当时也是懵逼，不知道怎么解决，后来Google到了解决方法。<strong>对于Rail4.0+ ，需要添加文件，声明formatter这个method</strong>。</p>
</li>
<li><p>新增文件<code>config/initializers/log4r_patch_for_rails4.rb</code>:</p>
<pre><code class="Ruby">class Log4r::Logger
  def formatter()
  end
end
</code></pre>
</li>
</ul>
<p>配置完成！重启下服务器，然后你会发现不管做了什么操作，terminal终端什么也没有输出，一直保持如下内容：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fp5nyadi35j30ig065aaz.jpg"></p>
<p>而log文件夹下会出现按照日期分开的日志文件，类似：my_log_2018-03-08.log， my_log_2018-03-09.log</p>
<p>日志文件内容类似这样：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fp5o42hotyj308z023aaa.jpg"></p>
<p>因为outputters选择了DateFileOutputte，相比之前在rails s窗口查看，多了时间和logger类型。</p>
<p>具体的输出格式也可以在<code>config/log4r.yml</code>进行更换，log4r的GitHub库列出来所有的格式：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fp5o82pf20j30a40a8q3q.jpg"></p>
<p>OK，大功告成！！</p>
<p>另：建了个gist，上述提到的log4r的配置文件代码，可见<a href="https://gist.github.com/Lupeipei/7297b1a784e7bb4da39eeb7d26c8d834">using log4r on rails</a></p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="http://web.siwei.me/web_components/log4r.html">日志：log4r</a></p>
<p><a href="https://www.ruby-forum.com/topic/61764">using log4r and rails</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
        <tag>Log</tag>
      </tags>
  </entry>
  <entry>
    <title>Rails对接微信公众号简易指南</title>
    <url>/posts/using-wechat-starter-to-integrate-public-account-on-rails/</url>
    <content><![CDATA[<p>作为第一次整微信公众号开发的小白而言，刚开始是懵逼的。</p>
<span id="more"></span> 

<p>趁着不那么懵逼了，记录下Rails项目的公众号开发流程，给同样是小白的一个参考。</p>
<p>GitHub上有一个现成的模版<a href="https://github.com/goofansu/wechat-starter">wechat-starter</a>， 里面包含了认证，接口的调用，连支付都有，我们从这个template开始，同时申请一个测试账号试试水。</p>
<p>以下操作不涉及支付部分。</p>
<h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><ul>
<li><p>按照指示，clone下这个repos。</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fq5iz6vtqij30j705rjru.jpg"></p>
<p>执行<code>rake db:create</code>中，如果遇到<code>could not connect to server: No such file or directory</code>的问题，多半是PostgreSQL的版本兼容问题，可参见<a href="http://luciaca.cn/2018/04/05/Postgres-could-not-connect-to-server/">Postgres could not connect to server</a></p>
</li>
<li><p>新建config/application.yml，内容：</p>
<pre><code class="yml">wechat_app_id: &quot;AppID&quot;
wechat_secret: &quot;AppSecret&quot;
wechat_token:  &quot;Tokenwechatdemo&quot;
wechat_encoding_aes_key: &quot;EncodingAESKey&quot;
wechat_trusted_domain_fullname: &quot;http://your-domain&quot;
</code></pre>
<p>这里wechat_token的值可以自定义，这里我们写“Tokenwechatdemo”。</p>
<p>wechat_encoding_aes_key是指你的信息加密密钥，这里我们保持不变，测试公众号是不需要配置的，正式的公众号才需要。</p>
<p>wechat_app_id，wechat_secret，可以在申请公众号后得到。</p>
<p>wechat_trusted_domain_fullname，通过Ngrok获取。</p>
<p>好，我们一个个来获取需要的数据。</p>
</li>
<li><p>申请测试账号，得到appID，appsecret</p>
<p>去微信的公众平台申请一个测试账号，申请后会得到一个appID和appsecret。</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fq5jfufptaj30un04pq35.jpg"></p>
</li>
<li><p>使用Ngrok获取一个domain</p>
<p>如果已经安装了ngrok，终端运行：</p>
<pre><code>./ngrok http 3000
</code></pre>
<p>查看forwarding，会得到一个http，https的URL。这就是我们要获取的domain了。比如<a href="http://d81dbd6f.ngrok.io./">http://d81dbd6f.ngrok.io。</a></p>
<p>有关ngrok的使用，官网有详尽的说明，也可参见简易版<a href="http://luciaca.cn/2018/04/08/introduction-to-ngrok/">内网穿透神器Ngrok</a></p>
</li>
<li><p>完成<code>config/applicajtion.yml</code></p>
<p>根据得到的appID，appsecret，domain，更新文件<code>config/applicajtion.yml</code>， 修改gemfile，注释掉puma。 <code>bundle</code>，然后<code>rails s</code>。</p>
<p>这里选择注释掉puma， 改用rails默认的服务器WEBrick, 是为了后面可以与微信公众号成功对接，具体原因可参见 <a href="https://ruby-china.org/topics/31815">Rails 公众号开发碰到的一个小坑: 公众号对接失败</a></p>
</li>
<li><p>完成接口配置</p>
<p>在测试公众号中，添加URL和token，记得URL后面添加上<code>/wechat</code>，token要与<code>config/application.yml</code>中的token保持一致。</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fq57qe8kzrj30th0aygmw.jpg"></p>
<p>提交接口配置信息，弹出接口“配置成功”的信息。</p>
<p>「如果弹出“配置失败”，试试重启服务器<code>rails s</code>.」</p>
<p>在微信公众平台的测试号管理的网页账号中，添加授权回调页面域名：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fq53p5hzhwj30v008qdh1.jpg"></p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fq53q9pu0hj30jq0dcgm8.jpg"></p>
<p>记住，<strong>不要加上http://, 或者https://</strong></p>
<p>此时在微信开发者工具【<a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html">下载地址</a>】中，输入网址<a href="">http://d81dbd6f.ngrok.io</a>，会出现认证页面，类似：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcly1fq76l058ngj30bd0hijs6.jpg"></p>
<p>OK！！</p>
</li>
</ul>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>微信网页的授权是通过OAuth2.0机制实现的，使用的授权模式是授权码模式(authorization code)，关于该模式，推荐阮一峰老师写的<a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html">理解OAuth 2.0</a>， 深入浅出，对理解授权帮助很大。</p>
<p>有关接口的调用，因为这个template使用了gem<a href="https://github.com/Eric-Guo/wechat">WeChat</a> , 可以查阅它的<a href="https://github.com/Eric-Guo/wechat#command-line-mode">Command line mode</a>， 也可以自己写task来调用， 基本上可以满足大部分的调用需求。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://ruby-china.org/topics/31815">Rails 公众号开发碰到的一个小坑: 公众号对接失败</a></p>
<p><a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html">理解OAuth 2.0</a></p>
<p><a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1445241432">微信公众平台技术文档</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
        <tag>WeChat</tag>
      </tags>
  </entry>
  <entry>
    <title>新手入坑Vim</title>
    <url>/posts/vim-tips-and-tricks/</url>
    <content><![CDATA[<p>本文对 Vim 新手有一些帮助, 高手请忽略.</p>
<span id="more"></span> 

<p>之前一直使用 Atom 搭配 Vim 模式来工作, 前段时间彻底跟  Atom 拜拜, 重新配置了 Vim,用了一段时间, 渐渐习惯. 这里记录下使用过程中的一些感受和小技巧, 方便新手快速入坑.</p>
<p>本文基于 Vim 8.2.</p>
<h4 id="配置vimrc"><a href="#配置vimrc" class="headerlink" title="配置vimrc"></a>配置vimrc</h4><p>大部分新手一上来多是刷大牛们的<code>.vimrc</code>配置, 然后直接用, 把vim配置得非常 Modern, 我初来也是, 甚至连里面很多配置的语法都不大懂, 一上来什么都不管, 一顿瞎操作, 能用就行. 只能说 Copy + Paste 懒人模式害人不浅啊. 后面慢慢摸出感觉, 砍掉了很多插件, 只留下自己看得懂, 常用到的.</p>
<p>建议新手只配置一些简单的,  后面有需要再慢慢添加, 多看文档, 确保你知道安装的插件是用来做什么的.</p>
<p>一些常用插件:</p>
<ul>
<li><p><a href="https://github.com/tpope/vim-commentary">tpope/vim-commentary</a></p>
</li>
<li><p><a href="https://github.com/tpope/vim-surround">tpope/vim-surround</a></p>
</li>
<li><p><a href="https://github.com/preservim/nerdtree">preservim/nerdtree</a></p>
</li>
<li><p><a href="https://github.com/mattn/emmet-vim">mattn/emmet-vim</a></p>
</li>
</ul>
<p>主题系列, 推荐 <a href="https://github.com/vim-airline/vim-airline">vim-airline/vim-airline</a> 搭配 <a href="https://github.com/vim-airline/vim-airline-themes">vim-airline/vim-airline-themes</a></p>
<p>有关语言的插件, Github 自行搜索 vim-[language], 比如 vim-ruby, vim-go…..</p>
<h4 id="一些指令操作与技巧"><a href="#一些指令操作与技巧" class="headerlink" title="一些指令操作与技巧"></a>一些指令操作与技巧</h4><p>基本操作, 光标移动hjkl之类, 这里就略过了.简单提一些其他的操作指令.</p>
<p>保存并退出Vim:</p>
<blockquote>
<p>除了<code>:wq</code>, 还可以 ZZ (shift+z 两次) </p>
</blockquote>
<p>返回 Normal mode :</p>
<blockquote>
<p>除了常见的 <code>esc</code>, <code>Ctrl-[</code>, <code>Ctrl-c</code> 也可以.</p>
</blockquote>
<p>打开文件:</p>
<blockquote>
<p>最简单的是: <code>vim .</code>  打开当前目录, 或者 <code>vim file</code> 打开文件.</p>
<p>Vim 命令本身可以接受参数, 比如 <code>+&#123;cmd&#125;</code> 或者 <code>-c &#123;cmd&#125;</code> , 打开文件并执行相应命令.</p>
<pre><code class="shell">vim +&#123;cmd&#125; file
vim -c &#123;cmd&#125; file
</code></pre>
<p>这里的cmd 指的是在命令行模式下的命令, 比如打开文件 <code>text.txt</code> 并跳转到第10行:</p>
<pre><code class="shell">vim +10 text.txt
vim -c 10 text.txt
</code></pre>
<p>命令行模式下打开文件:</p>
<p>推荐用<code>:e xxx </code>,   同时结合 <a href="https://github.com/preservim/nerdtree">preservim/nerdtree</a> , 可以打开文件<code>:e file </code>, 也可以打开目录<code>:e folder </code>, 基本满足需求.</p>
</blockquote>
<p>无插件下查找文件:</p>
<blockquote>
<p>使用自带的 <code>find</code>, 记得搭配 set path , 设置好需要查找的目录, 同时巧用Tab 键补全. 比如:</p>
<pre><code>:set path+=app/models/
:find tes&lt;Tab&gt;
</code></pre>
</blockquote>
<p>搜索与替换:</p>
<blockquote>
<p>搜索: </p>
<p>在当前文件中搜索, 使用自带的<code>/content</code>,   <code>? content</code> </p>
<p>全文搜索, 建议用插件吧, 推荐 <a href="https://github.com/eugen0329/vim-esearch">eugen0329/vim-esearch</a>, 我自己用起来目前觉得够用,顺手.如果非要用自带的<code>:vim </code> 或者 <code>:grep</code> 可能导致弃坑…..</p>
<p>替换:</p>
<ul>
<li><code>:s/pattern/replace/g</code> - 全局替换当前行所有匹配.</li>
<li><code>:%s/pattern/replace/g</code> - 全局替换当前文件所有匹配.</li>
<li><code>:%s//replace/g</code> - 全局替换当前文件最后一次搜索结果.</li>
</ul>
</blockquote>
<p>撤销与反撤销</p>
<blockquote>
<p>u 撤销(Undo), 如果需要撤销刚刚的撤销操作 (Redo), 使用 <code>Ctrl-r</code></p>
</blockquote>
<p>Tab 创建与切换:</p>
<blockquote>
<p><code>:tabnew file</code> : 在新的 tab 中打开文件</p>
<p>打开文件时, 开多个tabs, 可以用:<code>vim -p file1 file2</code></p>
<p>跳转到 下一个 tab 用 <code>gt</code>, 前一个 tab 用 <code>gT</code></p>
</blockquote>
<p>窗口拆分与切换:</p>
<blockquote>
<p>Ctrl-w + n: 拆分窗口, 新增窗口</p>
<p>Ctrl-w + s:  将当前窗口分成水平窗口</p>
<p>Ctrl-w  + v: 将当前窗口分成竖直窗口</p>
<p>Ctrl-w + q /  c :  退出/关闭 当前窗口</p>
<p>Ctrl-w + h/j/k/l:  窗口左右上下切换</p>
</blockquote>
<p>Buffer切换:</p>
<blockquote>
<p><code>:bn</code> 切换到下一个buffer</p>
<p><code>:bp</code>切换到前一个buffer</p>
<p><code>:bd</code>  删除当前buffer, 可以<code>:bd + &#123;BufferNumber&#125;</code>, 删除指定 bufferNumber 的Buffer.</p>
<p>命令行使用<code>:ls</code> 列出buffer 列表, 如何去对应的Buffer?</p>
<p><code>:buffer + &#123;BufferNumber&#125;</code>  或者按键 bufferNumber  + <code>Ctrl-^</code>, 去指定 bufferNumber的Buffer.</p>
<p> <code>Ctrl-^</code> 也可以用来返回前一个编辑的buffer.</p>
</blockquote>
<p>Vim 和 终端切换:</p>
<blockquote>
<p>挂起Vim的三种方法:</p>
<ul>
<li><code>:suspend</code> </li>
<li><code>:stop</code>  </li>
<li>Ctrl-z</li>
</ul>
<p>终端输入: fg&lt;cr&gt; 返回到Vim. (&lt;cr&gt; 指 Enter键)</p>
</blockquote>
<p>执行命令:</p>
<blockquote>
<p><code>:!cmd</code>  其中 cmd 为 shell 命令.</p>
<p>对文件的操作, 可以考虑安装 <a href="https://github.com/tpope/vim-eunuch">tpope/vim-eunuch</a> 试试.[vim-eunuch 偶尔会让人抓狂..]</p>
</blockquote>
<p>屏幕刷新恢复:</p>
<blockquote>
<p>如果一顿操作后, 整个屏幕黑了(sooner or later….), 使用 <code>Ctrl+l</code>  或者命令 <code>:redraw</code>,  甚至强制刷新 <code>:redraw!</code>  回到现实. </p>
</blockquote>
<p>vim 文档阅读:</p>
<blockquote>
<p><code>:h(elp) &#123;content&#125;</code>  {content} 为需要搜索的内容.</p>
<p>比如 <code>:h i_CTRL-P</code> 查看 Insert 模式下 Ctrl-P 做什么. 如果查看Normal 模式下Ctrl-P 做什么, 用 <code>:h CTRL-P</code> </p>
<p>阅读文档时, 如何跳转?</p>
<p><code>Ctrl-]</code> 跳转到光标对应的文档</p>
<p><code>Ctrl-o</code> 返回上一个位置</p>
</blockquote>
<h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><p>Enjoy.</p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Vim</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac OSX终端访问GitHub走shadowsocks代理</title>
    <url>/posts/visit-github-through-terminal-using-https-proxy/</url>
    <content><![CDATA[<p>本地代码push到远端repos，终端执行<code>git push branch xxx</code>时，遇到了一个报错。</p>
<span id="more"></span> 

<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><pre><code>Server aborted the SSL handshake
</code></pre>
<p>SSL 握手失败？</p>
<p>老大扫了一眼，说终端访问GitHub要走代理，并告知了如何实现，666！</p>
<p>记录下整个实现步骤以备忘。</p>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>在使用shadowsocks的情况下，通过shadowsocks 获取HTTP Proxy Shell Export Line, 查看端口是1087.</p>
<pre><code>export http_proxy=http://127.0.0.1:1087;export https_proxy=http://127.0.0.1:1087;
</code></pre>
<p>下载<a href="https://github.com/elia/corkscrew">corkscrew</a>, 终端执行：</p>
<pre><code>brew install corkscrew
</code></pre>
<p>在根目录下，执行：</p>
<pre><code>vi .ssh/config
</code></pre>
<p>将文件内容修改为：</p>
<pre><code>Host github.com
    ProxyCommand corkscrew 127.0.0.1 xxxx %h %p
</code></pre>
<p>此处xxxx改成你走代理的端口号：比如上面的1087.</p>
<p>保存，切换到项目对应的目录下，重新执行：</p>
<pre><code>git push branch xxx
</code></pre>
<p>OK !！</p>
<p>看到有人提到了<a href="https://www.proxifier.com/">proxifier</a>， 也是个神器，鉴于自己没有用过，这里就不详述了。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://github.com/elia/corkscrew">corkscrew</a></p>
<p><a href="https://www.zybuluo.com/yiranphp/note/611721">解决 mac （windows）终端上代理的难题</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>Rails：Web API接口实作</title>
    <url>/posts/web-api-practice/</url>
    <content><![CDATA[<p>话说，好记性不如烂笔头「当然，主要是自己笨」，趁着假期，实作了一个简单的API接口，主要是CRUD + auth 认证部分，以加强对API接口部分的理解。</p>
<span id="more"></span> 

<h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><p>以用户对一个event活动进行CRUD操作的功能实现为例：</p>
<p>主要按如下步骤走：</p>
<ul>
<li><p>建model event，含字段title, description</p>
</li>
<li><p>设置路由，实作event的get, post, patch ,delete接口</p>
</li>
<li><p>添加认证API</p>
</li>
</ul>
<p><strong>最后的效果是：</strong></p>
<blockquote>
<p> 用户可以通过API接口来新建，修改，查看，删除event</p>
<p>用户在发出新建，修改，删除请求时，需要认证</p>
</blockquote>
<p>P.S：其实可以加个 rspec测试，不过这里我用postman直接测了，省去rspec部分，以免篇幅过长「主要还是因为，呃，你懂的，懒……」</p>
<p>好，开搞吧。</p>
<h5 id="一、新建一个project-event-api"><a href="#一、新建一个project-event-api" class="headerlink" title="一、新建一个project event_api"></a>一、新建一个project event_api</h5><pre><code>rails new event_api
cd event_api
git init
</code></pre>
<p>生成如下文件：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fmz03kpvxxj30970ba74o.jpg"></p>
<h5 id="二、建event-model，实作CRUD接口"><a href="#二、建event-model，实作CRUD接口" class="headerlink" title="二、建event model，实作CRUD接口"></a>二、建event model，实作CRUD接口</h5><ul>
<li><p>建event model,  终端输入：</p>
<pre><code>git checkout -b event # 切换分支，做烂了可以再开个
rails g model event title:string description:text uuid:string
rake db:migrate
</code></pre>
<p>「为了安全性，给event加上一个uuid的字段」</p>
<p>在<code>app/models/event.rb</code>中，给title加上有效性验证，并在创建时自动生成uuid：</p>
<pre><code class="Ruby">class Event &lt; ApplicationRecord
  validates_presence_of :title
  before_validation :generate_uuid, :only =&gt; :create
  def to_param
      self.uuid
  end

  protected

  def generate_uuid
    self.uuid = SecureRandom.uuid
  end
end
</code></pre>
</li>
<li><p>设置路由，在<code>config/routes.rb</code>中添加如下路由：</p>
<pre><code class="Ruby">  namespace :api, :defaults =&gt; &#123;:format =&gt; :json &#125; do
    namespace :v1 do
      resources :events, :only =&gt; [:index, :show, :create, :update, :destroy]
    end
  end
</code></pre>
</li>
<li><p>产生API controller，终端输入：</p>
<pre><code>rails g controller api --no-assets
</code></pre>
<p>修改<code>app/controllers/api_controller.rb</code>:</p>
<pre><code class="Ruby">- class ApiController &lt; ApplicationController
+ class ApiController &lt; ActionController::Base
end
</code></pre>
<p>改成继承自ActionController::Base，因为API 不需要 <code>protect_from_forgery with: :exception</code> 这一行的 CSRF 浏览器安全检查。</p>
</li>
<li><p>实作event的get, post, patch, delete</p>
<p>终端执行：</p>
<pre><code>rails g controller api::v1::events --no-assets
</code></pre>
<p>在<code>app/controllers/api/v1/events_controller.rb</code>中，填入以下内容：</p>
<pre><code class="Ruby">class Api::V1::EventsController &lt; ApiController

  def index
    @events = Event.all
    render :json =&gt; &#123;
        :data =&gt; @events.map &#123;|event|
        &#123;
            :id =&gt; event.id,
            :uuid =&gt; event.uuid,
            :title =&gt; event.title,
            :event_url =&gt; api_v1_event_url(event.id)
        &#125;&#125;
    &#125;
  end

  def create
    @event = Event.new(
                        :title =&gt; params[:title],
                        :description =&gt; params[:description])
    if @event.save
      render :json =&gt; &#123;
          :id =&gt; @event.id,
          :uuid =&gt; @event.uuid,
          :title =&gt; @event.title,
          :description =&gt; @event.description
      &#125;
    else
      render :json =&gt; &#123;
          :message =&gt; &quot;创建event失败&quot;, :errors =&gt; @event.errors
      &#125;, :status =&gt; 400
    end
  end

  def show
    @event = Event.find_by_uuid!(params[:id])
    render :json =&gt; &#123;
        :id =&gt; @event.id,
        :uuid =&gt; @event.uuid,
        :title =&gt; @event.title,
        :description =&gt; @event.description
    &#125;
  end

  def update
    @event = Event.find_by_uuid!(params[:id])
    @event.update(:title =&gt; params[:title],
                  :description =&gt; params[:description])
    render :json =&gt; &#123;:message =&gt; &quot;更新event成功&quot;&#125;
  end

  def destroy
    @event = Event.find_by_uuid!(params[:id])
    @event.destroy
    render :json =&gt; &#123;:message =&gt; &quot;删除event成功&quot;&#125;
  end
end
</code></pre>
<p>注意，将EventsController 修改为继承自ApiController</p>
<p>启服务器，<code>rails s</code>, 用postman测试看看：</p>
<p>create</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fmz1uqgyb4j30ms0d2abh.jpg"></p>
<p>index</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fmz1vk7e8oj30mi0fmmyj.jpg"></p>
<p>show：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fmz1wfaul9j30ms0bs3zj.jpg"></p>
<p>Update:</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fmz1x60l41j30mn0c8jsm.jpg"></p>
<p>发出get请求，看到event的详情中已经修改了title：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fmz1yceghkj30mn0bsq41.jpg"></p>
<p>destroy：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fmz1yvtjybj30mt0a4t9l.jpg"></p>
<p>看event的list, 发现event2018_updated已经删除：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fmz213gb40j30mn0de3zp.jpg"></p>
<p>OK！！</p>
</li>
</ul>
<h5 id="三、添加认证API"><a href="#三、添加认证API" class="headerlink" title="三、添加认证API"></a>三、添加认证API</h5><p>这里做event的API时候，都不需要认证的，让我们加上认证部分。</p>
<ul>
<li><p>装上devise</p>
<p>编辑 <code>Gemfile</code> 加上 <code>gem &quot;devise&quot;</code></p>
<p>终端运行：<code>bundle</code>, 重启服务器，终端执行：</p>
<pre><code>rails g devise:install
rails g devise user
rake db:migrate
</code></pre>
</li>
<li><p>给event和user挂上关系</p>
<p>在<code>app/models/user.rb</code>加上：</p>
<pre><code>has_many :events
</code></pre>
<p>在<code>app/models/event.rb</code> 加上：</p>
<pre><code>belongs_to :user
</code></pre>
<p> 将user_id添加到event中，终端执行：</p>
<pre><code>rails g migration add_user_id_to_events user_id:integer
rake db:migrate
</code></pre>
<p>修改<code>app/controllers/api/v1/events_controller.rb</code>， 在create部分填上@event.user = current_user</p>
<pre><code class="Ruby">......
  def create
    @event = Event.new(
                        :title =&gt; params[:title],
                        :description =&gt; params[:description])
    @event.user = current_user
    if @event.save
      render :json =&gt; &#123;
          :id =&gt; @event.id,
          :uuid =&gt; @event.uuid,
          :title =&gt; @event.title,
          :description =&gt; @event.description
      &#125;
    else
      render :json =&gt; &#123;
          :message =&gt; &quot;活动创建失败&quot;, :errors =&gt; @event.errors
      &#125;, :status =&gt; 400
    end
  end
  ......
</code></pre>
<p>这里也可以设置一下show，index部分，添加上creator的字段，显示是谁创建这个event的。「此处略去，不是重点」</p>
</li>
<li><p>给user加上token字段</p>
<p>终端运行：</p>
<pre><code>rails g migration add_auth_token_to_users
</code></pre>
<p>编辑文件<code>XXXX_add_auth_token_to_users.rb</code>文件:</p>
<pre><code class="Ruby">class AddAuthTokenToUsers &lt; ActiveRecord::Migration[5.1]
  def change
    + add_column :users, :auth_token, :string
    + add_index :users, :auth_token, :unique =&gt; true
  end
end
</code></pre>
<p>终端运行：</p>
<pre><code>rake db:migrate
</code></pre>
<p>编辑<code>app/models/user.rb</code>， 给user加上token:</p>
<pre><code class="Ruby">class User &lt; ApplicationRecord
  # Include default devise modules. Others available are:
  # :confirmable, :lockable, :timeoutable and :omniauthable
  devise :database_authenticatable, :registerable,
         :recoverable, :rememberable, :trackable, :validatable

  has_many :events

  before_create :generate_authentication_token

  def generate_authentication_token
    self.auth_token = Devise.friendly_token
  end

end
</code></pre>
</li>
<li><p>实作注册，登录，登出的API</p>
<p>在 <code>config/routes.rb</code> 加上路由：</p>
<pre><code class="Ruby">......
  namespace :api, :defaults =&gt; &#123;:format =&gt; :json &#125; do
    namespace :v1 do
      resources :events, :only =&gt; [:index, :show, :create, :update, :destroy]
     + post &quot;/signup&quot; =&gt; &quot;auth#signup&quot;
     + post &quot;/login&quot; =&gt; &quot;auth#login&quot;
     + post &quot;/logout&quot; =&gt; &quot;auth#logout&quot;
    end
  end
......  
</code></pre>
<p>生成auth的controller：</p>
<pre><code>rails g controller api::v1::auth --no-assets
</code></pre>
<p>编辑它：</p>
<pre><code class="Ruby">class Api::V1::AuthController &lt; ApiController
  before_action :authenticate_user!, :only =&gt; [:logout]

  def signup
    user = User.new(:email =&gt; params[:email], :password =&gt; params[:password])

    if user.save
      render :json =&gt; &#123;:user_id =&gt; user.id &#125;
    else
      render :json =&gt; &#123;:message =&gt; &quot;Failed&quot;, :errors =&gt; user.errors&#125;, :status =&gt; 400
    end
  end

  def login
    if params[:email] &amp;&amp; params[:password]
      user = User.find_by_email(params[:email])
    end
    if user &amp;&amp; user.valid_password?(params[:password])
      render :json =&gt; &#123;
          :message =&gt; &quot;ok&quot;,
          :auth_token =&gt; user.auth_token,
          :user_id =&gt; user.id
      &#125;
    else
      render :json =&gt; &#123;:message =&gt; &quot;Email or Password is wrong&quot;&#125;, :status =&gt; 400
    end
  end

  def logout
    current_user.generate_authentication_token
    current_user.save!
    render :json =&gt; &#123;:message =&gt; &quot;logout successful&quot;&#125;
  end
end
</code></pre>
<p>编辑<code>app/controllers/api_controller.rb</code>， 添加如下验证：</p>
<pre><code class="Ruby">  before_action :authenticate_user_from_token!

  def authenticate_user_from_token!
    if params[:auth_token]
      user = User.find_by_auth_token(params[:auth_token])
      sign_in(user, store: false) if user
    end
  end
</code></pre>
<p>这里可以改成将auth_token放在了header中传递，看这篇<a href="https://lupeipei.github.io/2017/12/29/pass-auth-token-through-header-rails-api/">如何将auth token放入headers进行传递？</a></p>
<p>重启服务器，用postman测试看看：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fmz38xhtclj30mq0b3t9m.jpg"></p>
<p>login ,获取auth_token</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fmz3xbnayjj30n10c40tv.jpg"></p>
<p>logout, 传递auth_token</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fmz3y7tr8nj30mr0acdgs.jpg"></p>
</li>
</ul>
<ul>
<li><p>最后，给event添加上认证，修改<code>app/controllers/api/v1/events_controller.rb</code>中，添加：</p>
<pre><code class="Ruby">......
before_action :authenticate_user!, :only =&gt; [:create, :update, :destroy]
....
</code></pre>
<p>用postman测试看看，现在新建event需要传递一个auth_token才行：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fmz45zlkyej30mn0bydgy.jpg"></p>
<p> 添加上auth_token， 创建成功：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fmz48dnhi8j30mo0dnjsp.jpg"></p>
<p>Patch, delete同理，可以用postman 进行测试看看，这里就不细看了。</p>
<h4 id="The-End"><a href="#The-End" class="headerlink" title="The End"></a>The End</h4><p>我这边列出来的都是非常基础的API接口，其他复杂点的都是可以按照这个方式来做的，比如你可以在这个的基础上，添加comment，让用户通过接口给event做评论，点赞，自定义like method等等。</p>
<p>对于routes的写法，上面我用了rails自身的resource方式：<code>resources :events, :only =&gt; [:index, :show, :create, :update, :destroy]</code>， 也用了较易于理解的逐条列出路径的方式：<code>post &quot;/signup&quot; =&gt; &quot;auth#signup&quot;</code>, 可根据实际情况自行选择.</p>
<p>Happy coding! : )</p>
</li>
</ul>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
        <tag>API</tag>
      </tags>
  </entry>
  <entry>
    <title>Together网站搭建之踩坑系列1</title>
    <url>/posts/web-together-build-1/</url>
    <content><![CDATA[<p>听闻，光说不练都是扯淡。</p>
<span id="more"></span> 

<p>所以决定做一个类似线下meetup召集令的网站来练练手，起名暂时叫做together，做的过程中，难免踩坑不断，不过也对ROR越来越有感觉了。</p>
<p>不多说，上成品：</p>
<p><a href="https://togetherisbetter.cn/">作品网站</a></p>
<p><a href="https://github.com/Lupeipei/Together">作品源码</a></p>
<p>非常欢迎拍砖。</p>
<p>有种路，叫做一步一坑，所幸坑坑有解，越踩越稳健。</p>
<p>决定列出遇到的那些坑及相关解法，给踏上踩坑之旅的小伙伴做个参考。</p>
<p>先来一波小坑。</p>
<h4 id="如何给rails项目重命名？"><a href="#如何给rails项目重命名？" class="headerlink" title="如何给rails项目重命名？"></a>如何给rails项目重命名？</h4><p>Google下，以下方法针对：rails4.0+</p>
<p>两步走：</p>
<p>1、装gem，在<code>gemfile</code>中添加：</p>
<pre><code>gem &#39;rename`
</code></pre>
<p>终端执行：<code>bundle install</code></p>
<p>2、终端输入：</p>
<pre><code>rails g rename:app_to new_name
</code></pre>
<p>搞定。</p>
<p>stackoverflow上有不少方法，详见<a href="https://stackoverflow.com/questions/20988813/how-to-rename-rails-4-app">how to rename rails4 app</a>, 不过个人觉得这个最简单易用，亲测有效。</p>
<h4 id="设置时间格式"><a href="#设置时间格式" class="headerlink" title="设置时间格式"></a>设置时间格式</h4><p>基于DRY原则，这里直接跳过strftime, 使用to_s统一进行设置：</p>
<p>1、在<code>config/application.rb</code>中，添加时区和显示格式设置，这里设置成北京时间：</p>
<pre><code class="Ruby">config.time_zone = &quot;Beijing&quot;
Time::DATE_FORMATS.merge!(:default =&gt; &#39;%Y/%m/%d %I:%M %p&#39;, :ymd =&gt; &#39;%Y/%m/%d&#39;)
</code></pre>
<p>说明：</p>
<blockquote>
<p>default是指默认的时间显示格式，根据你的需要进行设置即可，后面时间的显示就会自动采用这个默认格式了。</p>
<p>此外，这里新建了一个ymd, 只显示日期年月日，如果要用ymd, 如何引用呢？以event的created_at为例，</p>
<p>写成<code>&lt;%= event.created_at.to_s(:ymd) %&gt;</code>即可。</p>
</blockquote>
<p>2、 重启rails s服务器，大功告成。</p>
<h4 id="footer置底"><a href="#footer置底" class="headerlink" title="footer置底"></a>footer置底</h4><p>被footer置底也是折腾了不少时间的，找到了最简单的一个，附上：</p>
<p>比如说，你的<code>_footer.html.erb</code>长这样：</p>
<pre><code class="Ruby">&lt;div class=&quot;footer&quot;&gt;
  &lt;p class=&quot;text-center&quot;&gt;@2017 Together All rights reserved
  &lt;/p&gt;
&lt;/div&gt;
</code></pre>
<p>如何设置成置底形式？</p>
<p>在<code>application.scss</code>中，添加如下代码：</p>
<pre><code class="Css">html &#123;
    min-height: 100%;
    position: relative;
&#125;

body &#123;
  margin-bottom: 80px;
&#125;
// footer
.footer &#123;
  position: absolute;
  bottom: 0;
  width: 100%;
  height: 80px; //这里，height要 &lt;= body中的margin-bottom
  text-align: center;
&#125;
</code></pre>
<p>ok.</p>
<h4 id="部署到heroku-登录heroku，重命名了app，那么在本地如何修改？"><a href="#部署到heroku-登录heroku，重命名了app，那么在本地如何修改？" class="headerlink" title="部署到heroku,登录heroku，重命名了app，那么在本地如何修改？"></a>部署到heroku,登录heroku，重命名了app，那么在本地如何修改？</h4><p>终端输入以下代码：</p>
<pre><code>heroku login #登录heroku
git remote -v
git remote rm heroku
git remote -v
git remote add heroku https://git.heroku.com/new-name.git #new-name指的是你app的新名字
git push heroku  #最新分支:master
</code></pre>
<p>还有多个方案可解决，参考资料：</p>
<p><a href="http://xyy601-blog.logdown.com/posts/1387963-the-basics-how-to-rename-your-heroku-app-name">怎样重新命名你的heroku app的名称</a></p>
<h4 id="heroku-qiniu报错"><a href="#heroku-qiniu报错" class="headerlink" title="heroku + qiniu报错"></a>heroku + qiniu报错</h4><p>如果你的seeds文档中，有图片URL，且你的项目中使用了七牛云来存储图片，那么在部署到heroku后，</p>
<p>运行seeds文档时，终端可能会出现这样的问题：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fjp9k7eibjj30qf02fdgk.jpg"></p>
<p>这时，莫慌，莫急，不是你的问题，heroku服务器的问题，建议再次运行2～3次，如果还是报错，，第二天起个早，运行2～3次，基本就OK了。</p>
<h4 id="格式在本地显示正常，但是部署到heroku后，显示不正常，怎么破？"><a href="#格式在本地显示正常，但是部署到heroku后，显示不正常，怎么破？" class="headerlink" title="格式在本地显示正常，但是部署到heroku后，显示不正常，怎么破？"></a>格式在本地显示正常，但是部署到heroku后，显示不正常，怎么破？</h4><p>比如你安装了 ckeditor, 本地和heroku显示不一致。</p>
<p>上图：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fjp9fxghmrj30vs0id762.jpg"></p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fjp9g0moh3j30u30ev0ug.jpg"></p>
<p>先是Google，没找到相关的，然后在GitHub上，找到ckeditor的repos，看完README ,有提到deploy部分，如下：</p>
<blockquote>
<p>For Rails 4 and 5, add the following to <code>config/initializers/assets.rb</code>:</p>
</blockquote>
<pre><code class="Ruby">Rails.application.config.assets.precompile += %w( ckeditor/* )
</code></pre>
<p>这一步我已经做了，可是并没有解决问题，不是我要找的答案，在slack上发出求助，找到了解答：</p>
<p>终端运行：</p>
<pre><code>bundle exec rake assets:precompile
git add .
git commit -m &quot;XXXX&quot;
git push heroku master #这里你的最新分支在master
heroku run rake db:migrate
</code></pre>
<p>Ok ！</p>
<p>后续在添加<code>bootstrap-datepicker-rails</code>这个gem的时候，也遇到了一样的问题，再一次运行了一次<code>bundle exec rake assets:precompile</code>, so easy！</p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
      </tags>
  </entry>
  <entry>
    <title>Together网站搭建之踩坑系列2</title>
    <url>/posts/web-together-build-2/</url>
    <content><![CDATA[<p>打算后面写一些功能实现方面的小文章，详见目录。</p>
<span id="more"></span> 

<p>完整作品源码及效果，看这里<a href="https://togetherisbetter.cn/">作品网站</a>,   <a href="https://github.com/Lupeipei/Together">作品源码</a>。</p>
<p>今天先来一个收藏功能+Ajax优化.</p>
<h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><ul>
<li>给活动添加收藏功能，并使用Ajax进行优化</li>
<li><a href="https://lupeipei.github.io/2017/09/29/web-together-build-3/">给活动Events添加分类筛选</a></li>
<li><a href="https://lupeipei.github.io/2017/09/30/web-together-build-4/">添加省市自治区地址, 并实现热门城市筛选</a></li>
<li><a href="https://lupeipei.github.io/2017/10/01/web-together-build-5/">添加时间筛选</a></li>
<li><a href="https://lupeipei.github.io/2017/10/02/web-together-build-6/">添加评论区，并使用ajax优化</a></li>
<li><a href="https://lupeipei.github.io/2017/10/03/web-together-build-7/">实作活动申请</a></li>
<li><a href="https://lupeipei.github.io/2017/10/04/web-together-build-8/">在个人中心实作密码修改</a></li>
</ul>
<h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><p>先上效果图：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fjw79s6kufg30zv0j74qp.gif"></p>
<p>咱分两步走：</p>
<h5 id="Step1、制作收藏功能"><a href="#Step1、制作收藏功能" class="headerlink" title="Step1、制作收藏功能"></a>Step1、制作收藏功能</h5><ul>
<li><p>新建一个favorite model，终端运行：</p>
<pre><code>rails g model favorite user_id:integer event_id:integer
rake db:migrate
</code></pre>
</li>
<li><p>建立favorite与user，event的关系</p>
<ul>
<li><p>在app/models/favorite.rb中，加入：</p>
<pre><code>  belongs_to :user
  belongs_to :event
</code></pre>
</li>
<li><p>在<code>app/models/event.rb</code>中，加入：</p>
<pre><code>has_many :favorites
has_many :fans, through: :favorites, source: :user
</code></pre>
</li>
<li><p>在<code>app/models/user.rb</code>中，加入：</p>
<pre><code>has_many :favorites
has_many :favorite_events, through: :favorites, source: :event
</code></pre>
</li>
<li><p>在<code>app/models/user.rb</code>中，加入是否已收藏活动的判断，及收藏与取消收藏的method：</p>
<pre><code class="Ruby">  def is_favorite_of?(event)
    favorite_events.include?(event)
  end

  def favorite!(event)
    favorite_events &lt;&lt; event
  end

  def unfavorite!(event)
    favorite_events.delete(event)
  end
</code></pre>
</li>
</ul>
</li>
<li><p>修改<code>config/routes.rb</code>中events 部分：</p>
<pre><code class="Ruby">  resources :events do
    put :favorite, on: :member
  end
</code></pre>
</li>
<li><p>在需要添加收藏的页面，比如event的show或者index，加上收藏及取消收藏，代码以index页面为例：</p>
<p>【这里，建议你安装<code>font-awesome-rails</code>这个gem，如果没有，也没关系，用button代替即可】</p>
<p>装了<code>font-awesome-rails</code>，可以这么来：</p>
<pre><code class="Ruby">&lt;% @events.each do |event| %&gt;
.......
&lt;% if current_user &amp;&amp; current_user.is_favorite_of?(event)%&gt;
    &lt;%= link_to favorite_event_path(event,type: &quot;unfavorite&quot;), method: :put do %&gt;
    &lt;i class=&quot;fa fa-star&quot;&gt; 已收藏 &lt;/i&gt;
    &lt;% end %&gt;
&lt;% else %&gt;
    &lt;%= link_to favorite_event_path(event,type: &quot;favorite&quot;), method: :put do %&gt;
    &lt;i class=&quot;fa fa-star-o&quot;&gt; 收藏&lt;/i&gt;
    &lt;% end %&gt;
&lt;% end %&gt;
.......
</code></pre>
<p>没有装，咱可以这么来：</p>
<pre><code class="Ruby">&lt;% @events.each do |event| %&gt;
.......
&lt;% if current_user &amp;&amp; current_user.is_favorite_of?(event)%&gt;
    &lt;%= link_to(&#39;已收藏&#39;,favorite_event_path(event,type: &quot;unfavorite&quot;), method: :put, class: &quot;btn btn-default&quot;) %&gt;
&lt;% else %&gt;
    &lt;%= link_to(&#39;收藏&#39;,favorite_event_path(event,type: &quot;favorite&quot;), method: :put, class: &quot;btn btn-success&quot;) %&gt;
&lt;% end %&gt;
.......
</code></pre>
</li>
<li><p>编辑<code>app/controller/events_controller.rb</code>，加上favorite方法，同时在before_action中加上favorite</p>
<pre><code class="Ruby">before_action :authenticate_user!, only: [:favorite, .....]

.....

  def favorite
    @event = Event.find(params[:id])
    type = params[:type]
    if type == &quot;favorite&quot;
      current_user.favorite!(@event)
    else type == &quot;unfavorite&quot;
      current_user.unfavorite!(@event)
    end
    redirect_to :back
  end

  ......
</code></pre>
<p>到这里，功能基本OK了，下面我们请上Ajax.</p>
</li>
</ul>
<h5 id="Step2、Ajax优化"><a href="#Step2、Ajax优化" class="headerlink" title="Step2、Ajax优化"></a>Step2、Ajax优化</h5><p>目标：实现快速收藏，同时显示收藏人数</p>
<ul>
<li><p>编辑<code>app/views/events/index.html.erb</code>,把原来用作收藏的html部分删除，放入partial中：</p>
<pre><code class="Ruby">&lt;% @events.each do |event| %&gt;
.......
-  &lt;% if current_user &amp;&amp; current_user.is_favorite_of?(event)%&gt;
-     &lt;%= link_to(&#39;已收藏&#39;,favorite_event_path(event,type: &quot;unfavorite&quot;), method: :put, class: &quot;btn btn-default&quot;) %&gt;
-  &lt;% else %&gt;
-     &lt;%= link_to(&#39;收藏&#39;,favorite_event_path(event,type: &quot;favorite&quot;), method: :put, class: &quot;btn btn-success&quot;) %&gt;
- &lt;% end %&gt;

+    &lt;div id=&quot;favorite-&lt;%= event.id %&gt;&quot;&gt;
+     &lt;%= render :partial =&gt; &quot;favorite&quot;, :locals =&gt; &#123;:event =&gt; event &#125;%&gt;
+   &lt;/div&gt;

.......
</code></pre>
</li>
<li><p>新建<code>app/views/events/_favorite.html.erb</code>， 添加如下代码到<code>_favorite.html.erb</code>中：</p>
<pre><code class="Ruby">&lt;% if current_user &amp;&amp; current_user.is_favorite_of?(event) %&gt;
    &lt;%= link_to favorite_event_path(event,type: &quot;unfavorite&quot;), method: :put, :remote =&gt; true do %&gt;
    &lt;i class=&quot;fa fa-star&quot;&gt; 已收藏 (&lt;span id=&quot;favorite-counts-&lt;%= event.id %&gt;&quot;&gt;&lt;%= event.favorites.count%&gt;&lt;/span&gt;)&lt;/i&gt;
    &lt;% end %&gt;
&lt;% else %&gt;
    &lt;%= link_to favorite_event_path(event,type: &quot;favorite&quot;), method: :put, :remote =&gt; true do %&gt;
    &lt;i class=&quot;fa fa-star-o&quot;&gt; 收藏 (&lt;span id=&quot;favorite-counts-&lt;%= event.id %&gt;&quot;&gt;&lt;%= event.favorites.count%&gt;&lt;/span&gt;)&lt;/i&gt;
    &lt;% end %&gt;
&lt;% end %&gt;
</code></pre>
<p>【这里默认已安装了<code>font-awesome-rails</code>这个gem】</p>
</li>
<li><p>编辑<code>app/controllers/events_controller.rb</code>, 去掉favorite中的redirect_to:</p>
<pre><code class="Ruby">.....

  def favorite
    @event = Event.find(params[:id])
    type = params[:type]
    if type == &quot;favorite&quot;
      current_user.favorite!(@event)
    else type == &quot;unfavorite&quot;
      current_user.unfavorite!(@event)
    end
  - redirect_to :back
  end

  ......
</code></pre>
</li>
</ul>
<ul>
<li><p>新建<code>app/views/events/favorite.js.erb</code>，添加如下代码到<code>favorite.js.erb</code>中：</p>
<pre><code class="JavaScript">str = &quot;&lt;%=j render :partial =&gt; &quot;favorite&quot;, :locals =&gt; &#123;:event =&gt; @event &#125; %&gt;&quot;;
$(&quot;#favorite-&lt;%= @event.id %&gt;&quot;).html(str);
$(&quot;#favorite-counts-&lt;%= @event.id %&gt;&quot;).html(&quot;&lt;%= @event.favorites.count %&gt;&quot;);
</code></pre>
</li>
</ul>
<p>啦啦啦，大功告成！！</p>
<p>参考文章：<a href="https://forum.qzy.camp/t/topic/1432">如何做出收藏工作的功能？</a></p>
<p><strong>稍稍加个餐：</strong></p>
<p>BTW，简单提一个在用 Ajax 优化时，遇到的bug。</p>
<p>在未登录的情况，用户进行点赞及收藏，应该跳出登录界面，但网站没有任何反应，而你的controller里面已经有了<code>before_action :authenticate_user!</code>， 貌似没起效果，怎么破？</p>
<p>上图：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fjw6juewvrg30zv0j7wji.gif"></p>
<p>附上服务器报错信息：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcly1fjw73e80pgj30mv05pt9u.jpg"></p>
<p>Google后，会发现一堆相关的，包括在<code>config/initializers/devise</code>设置<code>config.http_authenticatable_on_xhr = false</code>， 修改<code>routes.rb</code>的，设置CSRF token的……试了好些个，没能解决。比较好笑的是，最后找到的解决办法，有些过于简单，哈哈。<br>附上:</p>
<p>在<code>app/controllers/events_controller.rb</code>中，添加如下代码：</p>
<pre><code class="Ruby">class EventsController &lt; ApplicationController
  before_action :check_user, only: [:favorite, :like]

  ......
  def check_user
  return if user_signed_in?
  redirect_to new_user_session_path, error: &#39;请先登录&#39;
 end
......
end
</code></pre>
<p>现在点击收藏或点赞，会跳转到登录页面，OK!</p>
<p>参考：<a href="https://stackoverflow.com/questions/45168122/rails-4-401-unauthorized-error-handling">rails 4- 401 Unauthorized error handling</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
      </tags>
  </entry>
  <entry>
    <title>Together网站搭建之踩坑系列3</title>
    <url>/posts/web-together-build-3/</url>
    <content><![CDATA[<p>这是功能实现的第二篇，扯一扯<strong>如何添加分类筛选功能</strong>。</p>
<span id="more"></span> 

<p>完整作品源码及效果，看这里<a href="https://togetherisbetter.cn/">作品网站</a>,   <a href="https://github.com/Lupeipei/Together">作品源码</a>。</p>
<h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><ul>
<li><a href="https://lupeipei.github.io/2017/09/28/web-together-build-2/">给活动添加收藏功能，并使用Ajax进行优化</a></li>
<li>给活动Events添加分类筛选</li>
<li><a href="https://lupeipei.github.io/2017/09/30/web-together-build-4/">添加省市自治区地址, 并实现热门城市筛选</a></li>
<li><a href="https://lupeipei.github.io/2017/10/01/web-together-build-5/">添加时间筛选</a></li>
<li><a href="https://lupeipei.github.io/2017/10/02/web-together-build-6/">添加评论区，并使用ajax优化</a></li>
<li><a href="https://lupeipei.github.io/2017/10/03/web-together-build-7/">实作活动申请</a></li>
<li><a href="https://lupeipei.github.io/2017/10/04/web-together-build-8/">在个人中心实作密码修改</a></li>
</ul>
<h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><p>先上效果图：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fjqcf5bajjg30x40i0k2j.gif"></p>
<p><strong>如何实现？</strong></p>
<ul>
<li><p>新建model category</p>
<pre><code>rails g model category name:string
rake db:migrate
</code></pre>
</li>
<li><p>在event中新增category的栏位</p>
<pre><code>rails g migration add_category_id_to_event category_id:integer
rake db:migrate
</code></pre>
</li>
<li><p>建立category和event的关系，在<code>event.rb</code>中添加</p>
<pre><code class="Ruby">belongs_to :categroy
</code></pre>
<p><code>category.rb</code>中添加：</p>
<pre><code class="Ruby">has_many :events
</code></pre>
</li>
<li><p>在event的new ，edit中添加如下：</p>
<pre><code>&lt;%= select_tag(:category_id, options_for_select(@categories), :prompt =&gt; &quot;类别&quot;) %&gt;
</code></pre>
<p>如果是simple_form格式，可添加如下：</p>
<pre><code class="Html">  &lt;div class=&quot;form-group&quot;&gt;
    &lt;%= f.association :category %&gt;
  &lt;/div&gt;
</code></pre>
</li>
<li><p>在<code>events_controller.rb</code>中，将category_id添加到params白名单中：</p>
<pre><code class="Ruby">  def event_params
    params.require(:event).permit(:title, ......, :category_id)
  end
</code></pre>
</li>
<li><p>为方便后续部署到heroku,可在seeds文档中新建category。在seeds.rb中添加如下代码：</p>
<pre><code class="Ruby"># Category部分
Category.delete_all

Category.create!(id:1, name: &quot;音乐&quot;)
Category.create!(id:2, name: &quot;户外&quot;)
Category.create!(id:3, name: &quot;约厨&quot;)
Category.create!(id:4, name: &quot;交友&quot;)
Category.create!(id:5, name: &quot;读书&quot;)
Category.create!(id:6, name: &quot;游戏&quot;)
</code></pre>
</li>
<li><p>在event 的index页面显示分类列表，在event的<code>index.html.erb</code>中添加如下代码：</p>
<pre><code class="Ruby">&lt;div class=&quot;btn-group&quot;&gt;
    &lt;%= link_to &quot;全部&quot;, events_path, :class =&gt; &quot;btn btn-default btn-group #&#123;(params[:category].blank?)? &quot;active&quot; : &quot;&quot;&#125;&quot;%&gt;
    &lt;% Category.all.each do |c| %&gt;
      &lt;%= link_to c.name, events_path(category: c), :class =&gt; &quot;btn btn-default btn-group #&#123;(params[:category] == c)? &quot;active&quot; : &quot;&quot; &#125;&quot;%&gt;
    &lt;% end %&gt;
&lt;/div&gt;
</code></pre>
</li>
<li><p>用上scope，在<code>event.rb</code>中加入以下代码：</p>
<pre><code class="Ruby">scope :by_category, -&gt;(c)&#123;where( :category_id =&gt; c )&#125;
</code></pre>
</li>
<li><p>修改<code>events_controller.rb</code>，修改index部分：</p>
<pre><code class="Ruby">  def index
    @events = Event.order(&quot;created_at DESC&quot;)
    if params[:category].present?
      @events = @events.by_category(params[:category]).order(&quot;created_at DESC&quot;)
    end
  end
</code></pre>
</li>
</ul>
<p>大功告成！</p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
      </tags>
  </entry>
  <entry>
    <title>Together网站搭建之踩坑系列4</title>
    <url>/posts/web-together-build-4/</url>
    <content><![CDATA[<p>这是功能实现的第三篇，扯一扯<strong>如何添加省市自治区地址, 并实现热门城市筛选功能</strong>。</p>
<span id="more"></span> 

<p>完整作品源码及效果，看这里<a href="https://togetherisbetter.cn/">作品网站</a>,   <a href="https://github.com/Lupeipei/Together">作品源码</a>。</p>
<h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><ul>
<li><a href="https://lupeipei.github.io/2017/09/28/web-together-build-2/">给活动添加收藏功能，并使用Ajax进行优化</a></li>
<li><a href="https://lupeipei.github.io/2017/09/29/web-together-build-3/">给活动Events添加分类筛选</a></li>
<li>添加省市自治区地址, 并实现热门城市筛选</li>
<li><a href="https://lupeipei.github.io/2017/10/01/web-together-build-5/">添加时间筛选</a></li>
<li><a href="https://lupeipei.github.io/2017/10/02/web-together-build-6/">添加评论区，并使用ajax优化</a></li>
<li><a href="https://lupeipei.github.io/2017/10/03/web-together-build-7/">实作活动申请</a></li>
<li><a href="https://lupeipei.github.io/2017/10/04/web-together-build-8/">在个人中心实作密码修改</a></li>
</ul>
<h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><p>先说<strong>如何添加省市区地址</strong>。</p>
<p>上效果图：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79ly1fjzauggy8ig30zh0i2aby.gif"></p>
<p><strong>Step1、安装相应的gem及配件</strong></p>
<ul>
<li><p>在gemfile中添加：</p>
<pre><code>gem &#39;china_city&#39;
</code></pre>
</li>
<li><p>终端运行：<code>bundle install</code></p>
</li>
<li><p>在<code>app/assets/javascripts/application.js</code>中，添加：</p>
<pre><code class="javascript">//= require jquery
//= require &#39;china_city/jquery.china_city&#39;
</code></pre>
<p>注意：如果文件中已经添加了jquery， 则无需再添加</p>
</li>
<li><p>在<code>config/routes.rb</code>中添加：</p>
<pre><code class="Ruby">mount ChinaCity::Engine =&gt; &#39;/china_city&#39;
</code></pre>
</li>
</ul>
<p><strong>Step2、使用</strong></p>
<p>代码以together网站为例</p>
<ul>
<li><p>给event添加省区、城市栏位，终端运行：</p>
<pre><code>rails g migration add_province_and_city_to_events
</code></pre>
<p>修改<code>db/migration/xxx_add_province_and_city_to_events</code>:</p>
<pre><code class="Ruby">class AddProvinceAndCityToEvents &lt; ActiveRecord::Migration[5.0]
  def change
    add_column :events, :province, :string
    add_column :events, :city, :string
  end
end
</code></pre>
<p>终端运行：<code>rake db:migrate</code></p>
</li>
<li><p>将新增的province，city添加到<code>app/controllers/events_controller.rb</code>的params中。</p>
<pre><code class="Ruby">  def event_params
  -  params.require(:event).permit(:title, :logo,.....)
  +  params.require(:event).permit(:province, :city, :title, :logo,.....)
  end
</code></pre>
</li>
<li><p>在events的<code>new.html.erb</code> 及<code>edit.html.erb</code>中添加如下代码, 让用户新建活动时选择省市区：【这里是用simple_form格式】</p>
<pre><code class="Ruby"> ......
 &lt;div class=&quot;form-group&quot;&gt;
    &lt;div class=&quot;city-group&quot;&gt;
      &lt;%= f.select :province, ChinaCity.list.unshift([&quot;--省份--&quot;, 230000]), &#123;&#125;, class: &quot;city-select&quot;%&gt;
      &lt;%= f.select :city, ChinaCity.list(f.object.province).presence || [[&quot;--城市--&quot;, 230900]], &#123;&#125;, class: &quot;city-select&quot;%&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  ......
</code></pre>
</li>
<li><p>回显省份及城市，这里，在需要回显的地方, 如index页面，添加如下代码：</p>
<pre><code class="Ruby">&lt;% @events.each do |event| %&gt;
......
    &lt;div class=&quot;city&quot;&gt;
      &lt;%= ChinaCity.get(event.province) %&gt; - &lt;%= ChinaCity.get(event.city)%&gt;
    &lt;/div&gt;
.....
</code></pre>
<p>这里，显示的都是XX省XX市， 如果只希望显示城市， 且没有”市”这个后缀，可以改成：</p>
<pre><code class="Ruby">&lt;% @events.each do |event| %&gt;
......
    &lt;div class=&quot;city&quot;&gt;
      &lt;%= ChinaCity.get(event.city).split(&quot;市&quot;).first %&gt;
    &lt;/div&gt;
.....
</code></pre>
</li>
</ul>
<p>OK！</p>
<p>接下来，看看如何实现热门城市筛选功能。</p>
<p>上效果图：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79ly1fjzaug4ip2g30zh0i21kz.gif"></p>
<p><strong>Step1、建model</strong></p>
<ul>
<li><p>建立city model，终端运行:</p>
<pre><code>rails g model city city:string
rake db:migrate
</code></pre>
</li>
<li><p>这里，为了跟ChinaCity中城市的<a href="http://www.stats.gov.cn/tjsj/tjbz/xzqhdm/201504/t20150415_712722.html">行政区划代码</a>保持一致，在<code>app/models/city.rb</code>中，添加了北上广深杭州，成都的行政区划代码：</p>
<pre><code class="Ruby">class City &lt; ApplicationRecord

 + CITY = [&quot;110000&quot;,&quot;310000&quot;,&quot;440100&quot;,&quot;440300&quot;,&quot;330100&quot;,&quot;510100&quot;]
 + validates_inclusion_of :city, :in =&gt; CITY

end
</code></pre>
<p>BTW，最开始的时候，我想着如果根据活动添加的情况，将所有出现的city都罗列出来，那这个筛选项就是动态的，可能存在并发的情况，固定城市反而更好。</p>
</li>
<li><p>在seeds文档中，添加如下代码：</p>
<pre><code class="Ruby"># City部分
City.delete_all

City.create!(city: &quot;110000&quot;)
City.create!(city: &quot;310000&quot;)
City.create!(city: &quot;440100&quot;)
City.create!(city: &quot;440300&quot;)
City.create!(city: &quot;330100&quot;)
City.create!(city: &quot;510100&quot;)
</code></pre>
</li>
</ul>
<p><strong>Step2、添加城市列表筛选</strong></p>
<ul>
<li><p>显示筛选项，在events的 <code>index.html.erb</code>中，添加如下代码：</p>
<pre><code class="Ruby">&lt;div class=&quot;submenu&quot; style=&quot;margin-bottom: 3px;&quot;&gt;
  &lt;span&gt;&lt;i class=&quot;fa fa-paper-plane fa-lg&quot;&gt;&lt;/i&gt; 城市: &lt;/span&gt;
  &lt;div class=&quot;btn-group&quot; style=&quot;margin-left: 20px;&quot;&gt;
    &lt;%= link_to &quot;全部&quot;, events_path, :class =&gt; &quot;btn btn-default btn-group #&#123;(params[:city].blank?)? &quot;active&quot; : &quot;&quot;&#125;&quot;%&gt;
    &lt;% City.all.each do |c| %&gt;
      &lt;%= link_to ChinaCity.get(c.city).split(&quot;市&quot;).first, events_path(city: c.city), :class =&gt; &quot;btn btn-default btn-group #&#123;(params[:city] == c.city)? &quot;active&quot; : &quot;&quot; &#125;&quot;%&gt;
    &lt;% end %&gt;
  &lt;/div&gt;
&lt;/div&gt;
</code></pre>
</li>
<li><p>在<code>event.rb</code>中加入以下代码：</p>
<pre><code class="Ruby">scope :by_city, -&gt;(c)&#123;where( :city =&gt; c )&#125;
</code></pre>
</li>
<li><p>在<code>events_controller.rb</code>，添加如下代码：</p>
<pre><code class="Ruby">  def index
    @events = Event.order(&quot;created_at DESC&quot;)
    ......
  + if params[:city].present?
  +  @events = @events.by_city(params[:city]).order(&quot;created_at DESC&quot;)
  + end
  end
</code></pre>
</li>
</ul>
<p>做到这里，试一试筛选功能，你会发现一个bug，直辖市是筛选不出来的，比如北京，上海这种，怎么回事？</p>
<p>因为这些市，保存在了province这个栏位里面，而它们对应的city则保存了“市辖区”，“县”对应的区划代码。我们来修改一下：</p>
<ul>
<li><p>在<code>events_controller.rb</code>，对于create部分，做如下修改：</p>
<pre><code class="Ruby">  def create
    @event = Event.new(event_params)
    @event.user = current_user
  +  if ChinaCity.get(@event.city) ==  &quot;市辖区&quot; || ChinaCity.get(event.city) == &quot;县&quot;
  +   @event.city = @event.province
  + end
    ......
  end
</code></pre>
<p>现在试试，可以筛选啦！</p>
</li>
</ul>
<p>P.S. 是不是发现跟前面一篇添加分类筛选有相似之处？</p>
<p>参考：</p>
<p><a href="https://forum.qzy.camp/t/topic/1659/5">省市区详细地址教程</a></p>
<p><a href="https://github.com/saberma/china_city">Rails Engine Gem China_City</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
      </tags>
  </entry>
  <entry>
    <title>Together网站搭建之踩坑系列5</title>
    <url>/posts/web-together-build-5/</url>
    <content><![CDATA[<p>这是功能实现的第四篇，扯一扯<strong>如何添加时间筛选功能</strong>。</p>
<span id="more"></span> 

<p>完整作品源码及效果，看这里<a href="https://togetherisbetter.cn/">作品网站</a>,   <a href="https://github.com/Lupeipei/Together">作品源码</a>。</p>
<h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><ul>
<li><a href="https://lupeipei.github.io/2017/09/28/web-together-build-2/">给活动添加收藏功能，并使用Ajax进行优化</a></li>
<li><a href="https://lupeipei.github.io/2017/09/29/web-together-build-3/">给活动Events添加分类筛选</a></li>
<li><a href="https://lupeipei.github.io/2017/09/30/web-together-build-4/">添加省市自治区地址, 并实现热门城市筛选</a></li>
<li>添加时间筛选</li>
<li><a href="https://lupeipei.github.io/2017/10/02/web-together-build-6/">添加评论区，并使用ajax优化</a></li>
<li><a href="https://lupeipei.github.io/2017/10/03/web-together-build-7/">实作活动申请</a></li>
<li><a href="https://lupeipei.github.io/2017/10/04/web-together-build-8/">在个人中心实作密码修改</a></li>
</ul>
<h4 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h4><p>老规矩，上效果图先：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fjzd6h5bqtg30zh0i2e85.gif"></p>
<p><strong>具体步骤：</strong></p>
<p>这里，我用了 bootstrap-datepicker-rails来作为日期筛选，没有用date_field_tag, 既为了美观，也为了避免出现浏览器支援的问题。</p>
<p>好，开始吧。</p>
<ul>
<li><p>安装，在gemfile中加入：</p>
<pre><code>gem &#39;bootstrap-datepicker-rails&#39;
</code></pre>
<p>终端运行<code>bundle install</code></p>
</li>
<li><p>编辑<code>app/assets/stylesheets/application.scss</code>，加入：</p>
<pre><code>@import &quot;bootstrap-datepicker3&quot;;
</code></pre>
</li>
<li><p>编辑<code>app/assets/javascripts/application.js</code>，加入：</p>
<pre><code>//= require bootstrap-datepicker/core
//= require bootstrap-datepicker/locales/bootstrap-datepicker.zh-CN
</code></pre>
<p>这里，引入了中文版</p>
</li>
<li><p>在<code>app/views/events/index.html.erb</code>中，加入日期输入框：</p>
<pre><code class="Ruby">......
&lt;div class=&quot;submenu&quot;&gt;
    &lt;span&gt;&lt;i class=&quot;fa fa-calendar fa-lg&quot;&gt;&lt;/i&gt; 时间: &lt;/span&gt;
    &lt;div class=&quot;form-group&quot; style=&quot;margin-left: 80px; margin-top: -20px;&quot;&gt;
    &lt;%= form_tag events_path, :method =&gt; :get do %&gt;
      &lt;%= text_field_tag :start_on, params[:start_on]%&gt; ~  &lt;%= text_field_tag :end_on, params[:end_on]%&gt;
      &lt;%= submit_tag &quot;确认&quot;, :class =&gt; &quot;btn btn-default&quot;%&gt;
    &lt;% end %&gt;
    &lt;/div&gt;
&lt;/div&gt;
.....
</code></pre>
</li>
<li><p>在<code>app/views/events/index.html.erb</code>中，将script放在最下面。</p>
<pre><code class="javaScript">&lt;script&gt;
  $(&quot;#start_on&quot;).datepicker(&#123;format: &quot;yyyy-mm-dd&quot;&#125;);
  $(&quot;#end_on&quot;).datepicker(&#123;format: &quot;yyyy-mm-dd&quot;&#125;);
&lt;/script&gt;
</code></pre>
<p>这里，<code>start_on</code>, <code>end_on</code> 可以通过查看chrome的inspect，得到id。</p>
<p>另，如果需要指定多语言，可以修改script成这样：</p>
<pre><code class="javaScript">&lt;script&gt;
  $(&quot;#start_on&quot;).datepicker(&#123;format: &quot;yyyy-mm-dd&quot;, language: &quot;&lt;%= I18n.locale %&gt;&quot;&#125;);
  $(&quot;#end_on&quot;).datepicker(&#123;format: &quot;yyyy-mm-dd&quot;, language: &quot;&lt;%= I18n.locale %&gt;&quot;&#125;);
&lt;/script&gt;
</code></pre>
</li>
<li><p>编辑<code>app/controllers/events_controller.rb</code>, 在index部分，加入如下代码：</p>
<pre><code class="Ruby">  def index
    @events = Event.order(&quot;created_at DESC&quot;)
    ......
    if params[:start_on].present?
      @events = @events.where(&quot;start_time &gt;= ?&quot;, Date.parse(params[:start_on]).beginning_of_day)
    end

    if params[:end_on].present?
      @events = @events.where(&quot;end_time &lt;= ?&quot;, Date.parse(params[:end_on]).end_of_day)
    end
    ......
  end
</code></pre>
</li>
</ul>
<p>重启<code>rails s</code>, 试一下，可以根据时间筛选啦！</p>
<p>对啦，如果要部署到heroku， 记得运行<code>bundle exec rake assets: precompile</code>后再deploy。</p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
      </tags>
  </entry>
  <entry>
    <title>Together网站搭建之踩坑系列6</title>
    <url>/posts/web-together-build-6/</url>
    <content><![CDATA[<p>这是功能实现的第五篇，扯一扯<strong>如何添加评论区，并使用ajax优化</strong>。</p>
<span id="more"></span> 

<p>完整作品源码及效果，看这里<a href="https://togetherisbetter.cn/">作品网站</a>,   <a href="https://github.com/Lupeipei/Together">作品源码</a>。</p>
<h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><ul>
<li><a href="https://lupeipei.github.io/2017/09/28/web-together-build-2/">给活动添加收藏功能，并使用Ajax进行优化</a></li>
<li><a href="https://lupeipei.github.io/2017/09/29/web-together-build-3/">给活动Events添加分类筛选</a></li>
<li><a href="https://lupeipei.github.io/2017/09/30/web-together-build-4/">添加省市自治区地址, 并实现热门城市筛选</a></li>
<li><a href="https://lupeipei.github.io/2017/10/01/web-together-build-5/">添加时间筛选</a></li>
<li>添加评论区，并使用ajax优化</li>
<li><a href="https://lupeipei.github.io/2017/10/03/web-together-build-7/">实作活动申请</a></li>
<li><a href="https://lupeipei.github.io/2017/10/04/web-together-build-8/">在个人中心实作密码修改</a></li>
</ul>
<h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><p>上效果图先：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fjzf3flg56g30zb0kmk6a.gif"></p>
<p>功能描述：用户可以新增，删除自己的评论。</p>
<p>步骤如下：</p>
<ul>
<li><p>新增review model，终端运行：</p>
<pre><code>rails g model review comment:string user_id:integer event_id:integer
rake db:migrate
</code></pre>
</li>
<li><p>建立review与event，user的关系：</p>
<ul>
<li><p>在<code>review.rb</code>中，添加：</p>
<pre><code class="Ruby">belongs_to :user
belongs_to :event
</code></pre>
</li>
<li><p>在<code>event.rb</code>中，添加：</p>
<pre><code class="Ruby">has_many :reviews
</code></pre>
</li>
<li><p>在<code>user.rb</code>中，添加：</p>
<pre><code class="Ruby">has_many :reviews
</code></pre>
</li>
</ul>
</li>
<li><p>编辑<code>config/routes.rb</code>,在resources :events中添加：</p>
<pre><code class="Ruby">  resources :events do
  + resources :reviews
    .....
    end
</code></pre>
</li>
<li><p>新建review controller</p>
<pre><code>rails g controller reviews
</code></pre>
</li>
<li><p>编辑<code>app/controllers/reviews_controller.rb</code></p>
<pre><code class="Ruby">class ReviewsController &lt; ApplicationController
  before_action :authenticate_user!

  def new
    @event = Event.find(params[:event_id])
    @review = Review.new
  end

  def create
    @event = Event.find(params[:event_id])
    @review = Review.new(review_params)
    @review.event = @event
    @review.user = current_user
    @review.save
    redirect_to :back, alert: &quot;评论已经创建&quot;
  end

  def destroy
    @event = Event.find(params[:event_id])
    @review = Review.find(params[:id])
    @review.destroy
    redirect_to :back, alert: &quot;评论已经删除&quot;
  end

  private

  def review_params
    params.require(:review).permit(:comment)
  end

end
</code></pre>
</li>
<li><p>编辑<code>app/controllers/events_controller.rb</code>, 在show部分，添加：</p>
<pre><code class="Ruby">......
def show
  @event = Event.find(params[:id])
+ @reviews = @event.reviews.all
end
......
</code></pre>
</li>
<li><p>编辑event的<code>show.html.erb</code>，给评论区腾出位置，这里用了两次partial来引用review，后面会建相应的文档:</p>
<pre><code class="Ruby">......
&lt;!-- 活动讨论区 --&gt;
  &lt;div class=&quot;event_reviews&quot;&gt;
    &lt;div class=&quot;row&quot;&gt;
      &lt;div class=&quot;col-md-8 col-md-offset-2&quot;&gt;
        &lt;%= render :partial =&gt; &quot;reviews/form&quot;, :locals =&gt; &#123;:event =&gt; @event &#125; %&gt;
        &lt;hr&gt;
        &lt;% if @reviews.blank? %&gt;
          &lt;p&gt;该活动还没有人讨论，来侃几句吧？&lt;/p&gt;
        &lt;% else %&gt;
        &lt;div id=&quot;reviews_list&quot;&gt;
          &lt;% @reviews.each do |review| %&gt;
        &lt;%= render :partial =&gt; &quot;reviews/review&quot;, :locals =&gt; &#123; :review =&gt; review &#125;%&gt;
          &lt;% end %&gt;
        &lt;/div&gt;
        &lt;% end %&gt;
        &lt;hr&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
 ......
</code></pre>
<p>​</p>
</li>
<li><p>在<code>app/views/reviews</code>下，新增<code>_review.html.erb</code>, <code>_form.html.erb</code> 。<code>_review.html.erb</code>用来显示评论区列表，<code>_form.html.erb</code>则用于新增评论。</p>
<ul>
<li><p>编辑<code>_review.html.erb</code></p>
<pre><code class="Ruby">&lt;div id=&quot;reivew-&lt;%= review.id %&gt;&quot; class=&quot;reviews&quot; style=&quot;text-align: left;&quot;&gt;
    &lt;!-- 显示用户头像 --&gt;
  &lt;ul&gt;
    &lt;div class=&quot;user_avatar&quot; style=&quot;float: left;&quot;&gt;
      &lt;% if review.user.avatar.present? %&gt;
        &lt;%= image_tag(review.user.avatar.thumb.url, class: &quot;review_avatar&quot;)%&gt;
      &lt;% else %&gt;
        &lt;%= image_tag(&quot;https://ws4.sinaimg.cn/large/006tNc79gy1fj8fv5d1tdj30zk0npdig.jpg&quot;, class: &quot;review_avatar&quot;)%&gt;
      &lt;% end %&gt;
    &lt;/div&gt;
  &lt;/ul&gt;
  &lt;!-- 显示其他信息 --&gt;
    &lt;div class=&quot;row&quot;&gt;
      &lt;div class=&quot;col-md-9 review-user-info&quot;&gt;
        &lt;%= review.user.display_name %&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col-md-3&quot;&gt;
        &lt;%= review.created_at %&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;review-comment&quot;&gt;
      &lt;%= review.content %&gt;
    &lt;/div&gt;
    &lt;!-- 用户可以删除自己的评论 --&gt;
    &lt;% if current_user == review.user %&gt;
    &lt;div class=&quot;pull-right&quot;&gt;
      &lt;%= link_to(&quot;delete&quot;, event_review_path(review.event,review), method: :delete, :remote =&gt; true)%&gt;
    &lt;/div&gt;
  &lt;% end %&gt;
&lt;/div&gt;
</code></pre>
</li>
<li><p>编辑<code>_form.html.erb</code></p>
<pre><code class="Ruby">&lt;div class=&quot;contain&quot;&gt;
  &lt;div class=&quot;row&quot; style=&quot; margin-top: 50px;&quot;&gt;
    &lt;div class=&quot;col-md-12&quot;&gt;
      &lt;%= simple_form_for [@event, @event.reviews.build ], :remote =&gt; true do |f| %&gt;
        &lt;div class=&quot;form-group&quot;&gt;
          &lt;%= f.input :content, label: &quot;吐糟或者提问，请随意&quot;, input_html: &#123; class: &quot;form-control&quot;&#125;%&gt;
        &lt;/div&gt;
        &lt;div class=&quot;form-action&quot;&gt;
          &lt;%= f.submit &quot;我来说两句&quot;, disable_with: &quot;Submiting....&quot;, class: &quot;btn btn-danger&quot;%&gt;
        &lt;/div&gt;
      &lt;% end %&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
</code></pre>
</li>
</ul>
</li>
<li><p>编辑<code>app/controllers/events_controller.rb</code>， 拿掉create, destroy 的redirect_to：</p>
<pre><code class="Ruby">......
def create
    @event = Event.find(params[:event_id])
    @review = Review.new(review_params)
    @review.event = @event
    @review.user = current_user
    @review.save
  - redirect_to :back, alert: &quot;评论已经创建&quot;
  end

  def destroy
    @event = Event.find(params[:event_id])
    @review = Review.find(params[:id])
    @review.destroy
  - redirect_to :back, alert: &quot;评论已经删除&quot;
  end
  ......
</code></pre>
</li>
<li><p>新增<code>app/views/reviews/create.js.erb</code>, <code>app/views/reviews/destroy.js.erb</code>, 分别编辑：</p>
<ul>
<li><p><code>app/views/reviews/create.js.erb</code></p>
<pre><code class="Ruby">&lt;% if @review.valid? %&gt;
  $(&quot;#reviews_list&quot;).prepend(&quot;&lt;%=j render :partial =&gt; &quot;review&quot;, :locals =&gt; &#123;:review =&gt; @review &#125; %&gt;&quot;);
  $(&quot;#review_content&quot;).val(&quot;&quot;);
&lt;% else %&gt;
  alert(&quot;评论失败&quot;);
&lt;% end %&gt;
</code></pre>
</li>
<li><p><code>app/views/reviews/destroy.js.erb</code>中，</p>
<pre><code>$(&quot;#reivew-&lt;%= @review.id %&gt;&quot;).remove();
</code></pre>
</li>
</ul>
</li>
</ul>
<p>大功告成！试试吧！美化部分，可以根据需要写相应的CSS。</p>
<hr>
<p>这里说明一下：</p>
<ul>
<li>rails5.0以前的版本已经默认安装<code>gem &#39;jquery-rails&#39;</code>, 如果你版本过高，需要自行安装，不然ajax部分会无法正常实现</li>
</ul>
<ul>
<li>涉及ajax的部分，没有说得太细，可自行Google ajax相关内容了解。</li>
</ul>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
      </tags>
  </entry>
  <entry>
    <title>Together网站搭建之踩坑系列7</title>
    <url>/posts/web-together-build-7/</url>
    <content><![CDATA[<p>这是功能实现的第六篇，扯一扯<strong>如何实作活动申请</strong>.</p>
<span id="more"></span> 

<p>完整作品源码及效果，看这里<a href="https://togetherisbetter.cn/">作品网站</a>,   <a href="https://github.com/Lupeipei/Together">作品源码</a>。</p>
<h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><ul>
<li><a href="https://lupeipei.github.io/2017/09/28/web-together-build-2/">给活动添加收藏功能，并使用Ajax进行优化</a></li>
<li><a href="https://lupeipei.github.io/2017/09/29/web-together-build-3/">给活动Events添加分类筛选</a></li>
<li><a href="https://lupeipei.github.io/2017/09/30/web-together-build-4/">添加省市自治区地址, 并实现热门城市筛选</a></li>
<li><a href="https://lupeipei.github.io/2017/10/01/web-together-build-5/">添加时间筛选</a></li>
<li><a href="https://lupeipei.github.io/2017/10/02/web-together-build-6/">添加评论区，并使用ajax优化</a></li>
<li>实作活动申请</li>
<li><a href="https://lupeipei.github.io/2017/10/04/web-together-build-8/">在个人中心实作密码修改</a></li>
</ul>
<h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><p>具体说，是实作以下两个功能：</p>
<ul>
<li>用户可申请参与活动<ul>
<li>如果活动已过期，则无法申请，显示已结束；</li>
<li>如果人数已满，则显示活动已经满员，报名截止；</li>
<li>既未过期，也没有满员，则用户可申请参与活动；</li>
</ul>
</li>
</ul>
<ul>
<li>用户可以查看自己的申请列表</li>
</ul>
<p>一步步来：</p>
<p>BTW，请无视CSS部分，只讲如何实作功能。</p>
<p><strong>Step1、 用户可以申请参与活动</strong></p>
<p>效果图：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fk0k6757yzg30yb0jyhdu.gif"></p>
<ul>
<li><p>新建model apply_event，终端：</p>
<pre><code>rails g model apply_event user_id:integer event_id:integer
</code></pre>
</li>
<li><p>建立apply_event, user, event三者之间的关系:</p>
<ul>
<li><p>在<code>app/models/apply_event.rb</code>中添加：</p>
<pre><code class="Ruby">class ApplyEvent &lt; ApplicationRecord
 + belongs_to :user
 + belongs_to :event
end
</code></pre>
</li>
<li><p>在<code>app/models/event.rb</code>中添加：</p>
<pre><code class="Ruby">......
has_many :apply_events
has_many :appliers, :through =&gt; :apply_events, :source =&gt; :user
......
</code></pre>
</li>
<li><p>在<code>app/models/user.rb</code>中添加：</p>
<pre><code class="Ruby">......
has_many :apply_events
has_many :applied_events, through: :apply_events, source: :event
......
</code></pre>
</li>
</ul>
</li>
<li><p>用户可以申请参加活动或取消申请</p>
<ul>
<li><p>在<code>app/models/user.rb</code>中添加：</p>
<pre><code class="Ruby">  ......
  def apply_already?(event)
    applied_events.include?(event)
  end

  def apply!(event)
    applied_events &lt;&lt; event
  end

  def cancel!(event)
    applied_events.delete(event)
  end
  ......
</code></pre>
<p>​</p>
</li>
<li><p>在<code>app/controllers/events_controller.rb</code>中添加：</p>
<pre><code class="Ruby">class EventsController &lt; ApplicationController
  ......
  def apply
    @event = Event.find(params[:id])
    type = params[:type]
    if type == &quot;apply&quot;
      current_user.apply!(@event)
    else type == &quot;cancel&quot;
      current_user.cancel!(@event)
    end
    redirect_to :back
  end
  ......
end
</code></pre>
<p>申请参加活动，需要用户在登录状态下，修改<code>app/controllers/events_controller.rb</code>的<code>before_action :authenticate_user!</code>部分，加上apply</p>
<pre><code class="Ruby">- before_action :authenticate_user!, only: [:new, :create,.....]
+ before_action :authenticate_user!, only: [:apply,:new, :create,.....]
</code></pre>
</li>
<li><p>修改<code>config/routes.rb</code>， 添加如下代码：</p>
<pre><code class="Ruby">  ......
  resources :events do
    ......
  + put :apply, on: :member
  end
  ......
</code></pre>
</li>
<li><p>修改<code>app/views/events/show.html.erb</code>， 添加如下代码：</p>
<pre><code class="Ruby">......
&lt;% if @event.end_time &lt; Time.now %&gt;
    &lt;label class=&quot;label label-default event-over&quot;&gt;活动已结束&lt;/label&gt;
&lt;% elsif @event.appliers.count &gt;= @event.limited_num %&gt;
    &lt;label class=&quot;label label-default event-over&quot;&gt;活动已满员&lt;/label&gt;
&lt;% else %&gt;
  &lt;% if current_user &amp;&amp; current_user.apply_already?(@event) %&gt;
    &lt;%= link_to(&quot;取消申请&quot;, apply_event_path(@event, type: &quot;cancel&quot;), method: :put, class: &quot;btn btn-default event-apply&quot;)%&gt;
  &lt;% else %&gt;
    &lt;%= link_to(&quot;申请赴约&quot;, apply_event_path(@event, type: &quot;apply&quot;), method: :put, class: &quot;btn btn-success event-apply&quot;)%&gt;
  &lt;% end %&gt;
&lt;% end %&gt;
......
</code></pre>
<p>现在看看，可以实现申请及取消申请了。但是，你很快就会发现，点击按钮后页面会refresh一下，这个不好不好，我们请上ajax。</p>
</li>
</ul>
</li>
<li><p>使用ajax来优化</p>
<ul>
<li><p>新增<code>app/views/events/_apply.html.erb</code>, <code>app/views/events/apply.js.erb</code></p>
</li>
<li><p>修改<code>app/views/events/show.html.erb</code>, 给这块要动态变化的区域加上ID</p>
<pre><code class="Ruby">+ &lt;div class=&quot;col-md-2&quot; id=&quot;apply-&lt;%= @event.id %&gt;&quot;&gt;
-              &lt;% if @event.end_time &lt; Time.now %&gt;
-                  &lt;label class=&quot;label label-default event-over&quot;&gt;活动已结束&lt;/label&gt;
-              &lt;% elsif @event.appliers.count &gt;= @event.limited_num %&gt;
-                  &lt;label class=&quot;label label-default event-over&quot;&gt;活动已满员&lt;/label&gt;
-              &lt;% else %&gt;
-                &lt;% if current_user &amp;&amp; current_user.apply_already?(@event) %&gt;
-                  &lt;%= link_to(&quot;取消申请&quot;, apply_event_path(@event, type: &quot;cancel&quot;), method: :put, class: &quot;btn btn-default event-apply&quot;)%&gt;
-                &lt;% else %&gt;
-                  &lt;%= link_to(&quot;申请赴约&quot;, apply_event_path(@event, type: &quot;apply&quot;), method: :put, class: &quot;btn btn-success event-apply&quot;)%&gt;
-                &lt;% end %&gt;
-              &lt;% end %&gt;
+              &lt;%= render :partial =&gt; &quot;apply&quot;, :locals =&gt; &#123;:event =&gt; @event &#125;%&gt;
+ &lt;/div&gt;
</code></pre>
</li>
<li><p>编辑<code>app/views/events/_apply.html.erb</code>, 添加如下代码：</p>
<pre><code class="Ruby">&lt;% if event.end_time &lt; Time.now %&gt;
  &lt;label class=&quot;label label-default event-over&quot;&gt;活动已结束&lt;/label&gt;
&lt;% elsif event.appliers.count &gt;= event.limited_num %&gt;
  &lt;label class=&quot;label label-default event-over&quot;&gt;活动已满员&lt;/label&gt;
&lt;% else %&gt;
  &lt;% if current_user &amp;&amp; current_user.apply_already?(event) %&gt;
    &lt;%= link_to apply_event_path(event, type: &quot;cancel&quot;), method: :put, :remote =&gt; true do %&gt;
    &lt;span class=&quot;btn btn-default event-apply&quot;&gt;取消申请&lt;/span&gt;
    &lt;% end %&gt;
  &lt;% else %&gt;
    &lt;%= link_to apply_event_path(event, type: &quot;apply&quot;), method: :put, :remote =&gt; true do %&gt;
    &lt;span class=&quot;btn btn-success event-apply&quot;&gt;申请赴约&lt;/span&gt;
    &lt;% end %&gt;
  &lt;% end %&gt;
&lt;% end %&gt;
</code></pre>
</li>
<li><p>编辑<code>app/views/events/apply.js.erb</code>, 添加如下代码：</p>
<pre><code class="Ruby">str = &quot;&lt;%=j render :partial =&gt; &quot;apply&quot;, :locals =&gt; &#123;:event =&gt; @event &#125; %&gt;&quot;;
$(&quot;#apply-&lt;%= @event.id %&gt;&quot;).html(str);
</code></pre>
</li>
<li><p>编辑<code>app/controllers/events_controller.rb</code>， 拿掉apply的redirect_to</p>
<pre><code class="Ruby">  ......
  def apply
    ......
    # redirect_to :back
  end
  ......
</code></pre>
</li>
</ul>
<p>现在试试，可以快速申请，快速取消啦，棒棒哒！！</p>
</li>
</ul>
<p><strong>Step2、 用户可以查看自己的申请列表</strong></p>
<p>效果图：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fk1chgct37g310b0gs7wh.gif"></p>
<p>这部分就比较简单啦。</p>
<ul>
<li><p>新增controller，终端运行：</p>
<pre><code class="Ruby">rails g controller account::apply_events
</code></pre>
</li>
<li><p>修改<code>config/routes.rb</code>， 添加如下代码：</p>
<pre><code class="Ruby">  ......
  namespace :account do
    ......
  + resources :apply_events
  end
  ......
</code></pre>
</li>
<li><p>编辑<code>app/controllers/account/apply_events_controller.rb</code>，添加</p>
<pre><code class="Ruby">class Account::ApplyEventsController &lt; ApplicationController
  before_action :authenticate_user!

  def index
    @events = current_user.applied_events
  end
end
</code></pre>
</li>
<li><p>新增<code>app/views/account/apply_events/index.html.erb</code>, 添加如下代码：</p>
</li>
</ul>
<pre><code class="Ruby">&lt;h1 class=&quot;text-center&quot;&gt;我的申请&lt;/h1&gt;

&lt;div class=&quot;col-md-10 col-md-offset-1&quot; style=&quot;margin-top: 20px;&quot;&gt;
  &lt;table class=&quot;table table-bordered&quot;&gt;
    &lt;thead&gt;
      &lt;tr&gt;
        &lt;th&gt;活动名称&lt;/th&gt;
        &lt;th&gt;开始时间&lt;/th&gt;
        &lt;th&gt;结束时间&lt;/th&gt;
        &lt;th&gt;地点&lt;/th&gt;
        &lt;th&gt;主办方&lt;/th&gt;
        &lt;th&gt;类别&lt;/th&gt;
        &lt;th&gt;人数限额&lt;/th&gt;
        &lt;th&gt;剩余名额&lt;/th&gt;
        &lt;th&gt;状态&lt;/th&gt;
      &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
      &lt;% @events.each do |event| %&gt;
        &lt;tr&gt;
          &lt;td&gt;
            &lt;% link_to event_path(event)%&gt;
             &lt;% if event.logo.present? %&gt;
              &lt;%= link_to image_tag(event.logo.thumb.url, class:&quot;event_logo_sm&quot;)%&gt;
            &lt;% else %&gt;
              &lt;%= link_to image_tag(&quot;http://placehold.it/100x100&amp;text=No Pic&quot;, class: &quot;event_logo_sm&quot;)%&gt;
            &lt;% end %&gt;
            &lt;%= link_to(event.title, event_path(event)) %&gt;&lt;/td&gt;
          &lt;td&gt;&lt;%= event.start_time %&gt;&lt;/td&gt;
          &lt;td&gt;&lt;%= event.end_time %&gt;&lt;/td&gt;
          &lt;td&gt;&lt;%= event.address %&gt;&lt;/td&gt;
          &lt;td&gt;&lt;%= event.sponsor %&gt;&lt;/td&gt;
          &lt;td&gt;&lt;%= event.category.name %&gt;&lt;/td&gt;
          &lt;td&gt;&lt;%= event.limited_num %&gt;&lt;/td&gt;
          &lt;td&gt;&lt;%= event.limited_num - event.appliers.count %&gt;&lt;/td&gt;
          &lt;td&gt;&lt;%= t(event.status, :scope =&gt; &quot;event.status&quot;) %&gt;&lt;/td&gt;
        &lt;/tr&gt;
      &lt;% end %&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/div&gt;


&lt;!-- 分页 --&gt;
&lt;div class=&quot;text-center&quot;&gt;
  &lt;%= will_paginate @events, renderer: BootstrapPagination::Rails, :previous_label =&gt; &#39;上一页&#39;, :next_label =&gt; &#39;下一页&#39; %&gt;
&lt;/div&gt;
</code></pre>
<ul>
<li><p>编辑<code>app/views/common/_navbar.html.erb</code>，加上<strong>我的申请</strong>入口：</p>
<pre><code class="Ruby">......
+ &lt;li&gt;&lt;%= link_to(&quot; 我的申请&quot;,account_apply_events_path(current_user), class: &quot;btn btn-default&quot;)%&gt;&lt;/li&gt;
......
</code></pre>
</li>
</ul>
<p>试试看，可以啦！</p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
      </tags>
  </entry>
  <entry>
    <title>Together网站搭建之踩坑系列8</title>
    <url>/posts/web-together-build-8/</url>
    <content><![CDATA[<p>这是功能实现的第七篇，扯一扯<strong>如何在个人中心实作密码修改</strong>.</p>
<span id="more"></span> 

<p>完整作品源码及效果，看这里<a href="https://togetherisbetter.cn/">作品网站</a>,   <a href="https://github.com/Lupeipei/Together">作品源码</a>。</p>
<h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><ul>
<li><a href="https://lupeipei.github.io/2017/09/28/web-together-build-2/">给活动添加收藏功能，并使用Ajax进行优化</a></li>
<li><a href="https://lupeipei.github.io/2017/09/29/web-together-build-3/">给活动Events添加分类筛选</a></li>
<li><a href="https://lupeipei.github.io/2017/09/30/web-together-build-4/">添加省市自治区地址, 并实现热门城市筛选</a></li>
<li><a href="https://lupeipei.github.io/2017/10/01/web-together-build-5/">添加时间筛选</a></li>
<li><a href="https://lupeipei.github.io/2017/10/02/web-together-build-6/">添加评论区，并使用ajax优化</a></li>
<li><a href="https://lupeipei.github.io/2017/10/03/web-together-build-7/">实作活动申请</a></li>
<li>在个人中心实作密码修改</li>
</ul>
<h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><p>这里修改用户名和头像简单带过，我们专注于<strong>密码修改</strong>。</p>
<p>来动动我们熟悉的devise。</p>
<p>先看效果，在个人中心添加密码修改板块：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcly1fk1dhibubej30wx0j4dip.jpg"></p>
<p>具体步骤：</p>
<ul>
<li><p>终端运行：<code>rails g controller account::users</code></p>
</li>
<li><p>在<code>app/controllers/account/users_controller.eb</code>中，仅有头像和用户名的update：</p>
<pre><code class="Ruby">class Account::UsersController &lt; ApplicationController
  before_action :authenticate_user!

  def index
    @user = current_user
  end

  def show
    @user = current_user
  end

  def edit
    @user = current_user
  end

  def update
    @user = current_user
    if @user.update(user_params)
      redirect_to account_user_path, notice: &quot;信息更新成功&quot;
    else
      render :edit
    end
  end

  private

  def user_params
    params.require(:user).permit(:username, :avatar)
  end
end
</code></pre>
</li>
</ul>
<ul>
<li><p>在<code>app/views/account/users/show.html.erb</code>中，添加密码修改部分：</p>
<pre><code class="Ruby">........
&lt;%= simple_form_for [:account, @user] do |f| %&gt;
 ......
  &lt;div class=&quot;my_password&quot;&gt;
    &lt;h4&gt;修改密码： &lt;/h4&gt;
    &lt;%= f.input :current_password, label: &quot;旧密码：&quot;, hint: false, error_html: &#123; id: &#39;password_error&#39;&#125; %&gt;
    &lt;%= f.input :password, label: &quot;新密码：&quot;, hint: false, error_html: &#123; id: &#39;password_error&#39;&#125; %&gt;
    &lt;%= f.input :password_confirmation, label: &quot;密码确认：&quot;%&gt;
  &lt;/div&gt;
  &lt;br&gt;
  .......
  &lt;div class=&quot;form-group&quot;&gt;
    &lt;%= f.submit &quot;更新&quot;, class: &quot;btn btn-success&quot;%&gt;
  &lt;/div&gt;
&lt;% end %&gt;
.......
</code></pre>
</li>
<li><p>在<code>app/controllers/account/users_controller.eb</code>中，做如下修改：</p>
<pre><code class="Ruby">  ......
  def update
    @user = current_user
  - if @user.update(user_params)
  -   redirect_to account_user_path, notice: &quot;信息更新成功&quot;
  +  if @user.update_with_password(user_params)
  +     bypass_sign_in(@user)
  +     redirect_to account_user_path, notice: &quot;密码更新成功&quot;
  +  elsif @user.update(user_params)
  +     redirect_to account_user_path, notice: &quot;信息更新成功&quot;
    else
        render :edit
    end
  end

  private

  def user_params
  -    params.require(:user).permit(:username, :avatar)
  + params.require(:user).permit(:username, :avatar, :password, :password_confirmation)
  end
</code></pre>
</li>
</ul>
<p>这样就OK啦，可以在个人中心页面修改密码，保存后退出，重新登陆，会发现密码已经修改了。</p>
<p><strong>参考：</strong></p>
<p><a href="https://github.com/plataformatec/devise/wiki/How-To:-Allow-users-to-edit-their-password">how to allow user to edit their password</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
      </tags>
  </entry>
  <entry>
    <title>网站加密后，没有挂上小绿锁?</title>
    <url>/posts/website-padlock-green-issue/</url>
    <content><![CDATA[<p>踩坑HTTPS。</p>
<span id="more"></span> 

<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>在给自己的网站加密后，网址从http变成https了，可是我却发现网站成了这样：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fks9mass87j30ey03x0u2.jpg"></p>
<p>预期中的它应该是长这样子👇：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fks9njubhqj303g00vjr7.jpg"></p>
<p>仔细检查了Nginx中的配置文档，没有发现问题，推测不是配置的问题，那么为什么会这样？</p>
<p>【BTW, 阿里云有免费的SSL证书，可以让网站从HTTP换成HTTPS，戳这里直达<a href="https://common-buy.aliyun.com/?spm=5176.2020520163.cas.1.2arDtO&commodityCode=cas#/buy">阿里云</a>。】</p>
<p>请确保你的Nginx配置是正确的，下面的解决思路是以配置无误为前提的。</p>
<h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><p>google后找到了这篇文章：【Google，大神】</p>
<p><a href="https://support.comodo.com/index.php?/Knowledgebase/Article/View/1057/0/why-isnt-my-sites-padlock-green-or-doesnt-have-green-address-bar">Why isn’t my Site’s padlock green or doesn’t have green address bar ?</a></p>
<p>按照文章的提示，解决了问题，以chrome为例，具体步骤如下：</p>
<p>打开网站，右击，选择检查（inspect），</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fks9wu7e2lj30q90ixhcb.jpg"></p>
<p>然后选择security安全，可以看到这样的页面：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fks9sjsqjbj30uc0kz1bn.jpg"></p>
<p>在mixed content中，提示让你重新加载页面，OK，我们reload一下。</p>
<p>这时，可以发现mixed content中出现这样的链接：<br><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fksa0let1rj30so0i7aoa.jpg"></p>
<p>点击，查看：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1fksa0kw4csj30pr0h0dj6.jpg"></p>
<p>OK，问题找到了，是图片链接用了http导致的。</p>
<p>原来因为网站用了七牛云存储，图片的链接为http，解决的办法是去七牛买个加速域名，换成https……</p>
<h4 id="The-End"><a href="#The-End" class="headerlink" title="The End"></a>The End</h4><p>每个人遇到的情况不一样，这里我只是贴出我是如何找到解决方法的，希望对遇到了同样问题的小伙伴有所帮助。<br>Happy coding!</p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>当undef_method遇上method_missing</title>
    <url>/posts/when-using-undef-method-with-rails-attribute-methods/</url>
    <content><![CDATA[<p>使用undef_method， 遇到的一个问题，想不明白rails是如何处理的。最后在rubyChina上<a href="https://ruby-china.org/topics/37438">发帖</a>求助，没成想得到了很耐心的解答，贴上，以期可飨同惑者。</p>
<span id="more"></span> 

<h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><p>先看一段调用undef_method的代码：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">MyModule</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">my_value</span></span></span><br><span class="line">    <span class="string">&quot;my_value in MyModule&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span></span><br><span class="line">  <span class="keyword">attr_accessor</span> <span class="symbol">:my_value</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(value)</span></span></span><br><span class="line">    <span class="variable">@my_value</span> = value</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySubClass</span> &lt; MyClass</span></span><br><span class="line">  <span class="keyword">include</span> MyModule</span><br><span class="line">  undef_method <span class="symbol">:my_value</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">object = MySubClass.new(<span class="number">20</span>)</span><br><span class="line">puts object.my_value</span><br></pre></td></tr></table></figure>

<p>执行，很明显，会报错，抛出<strong>NoMethodError</strong></p>
<figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line">undefined <span class="function"><span class="keyword">method</span> `<span class="title">my_value</span>&#x27; <span class="title">for</span> #&lt;<span class="title">MySubClass</span>:</span><span class="number">0</span>x007fbdc4065818 @my_value=<span class="number">20</span>&gt;</span><br></pre></td></tr></table></figure>

<p> 没毛病，正常，ruby 2.5中对<a href="https://ruby-doc.org/core-2.5.0/Module.html#method-i-undef_method">undef_method</a> 的定义就是这样的，prevents the current class from responding to calls to the named methods。</p>
<p>But，你会发现rails中有一个神奇的地方，以一个简单的user model为例：</p>
<p>user model含有字段name， 同时include了一个module UserAddon，使用undef_method来禁止调用引入的name方法，按照undef_method的定义， 此时User的对象调用name时，应该会报错，但是进入终端后，发现没有，反而返回了正确的结果。</p>
<p>代码如下：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">## app/models/user.rb</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># == Schema Information</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Table name: users</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  id                          :integer          not null, primary key</span></span><br><span class="line"><span class="comment">#  email                       :string(254)</span></span><br><span class="line"><span class="comment">#  name                        :string(254)</span></span><br><span class="line"><span class="comment">#  password_digest             :string(254)</span></span><br><span class="line"><span class="comment">#  created_at                  :datetime         not null</span></span><br><span class="line"><span class="comment">#  updated_at                  :datetime         not null</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> &lt; ActiveRecord</span></span><br><span class="line">  <span class="keyword">include</span> UserAddon</span><br><span class="line">  undef_method <span class="symbol">:name</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## app/models/users_addon.rb</span></span><br><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">UserAddon</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">name</span></span></span><br><span class="line">    <span class="string">&quot;hello&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p>这时，rails c 进入console：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">user = User.first</span><br><span class="line"></span><br><span class="line"><span class="comment"># =&gt; #&lt;User id: 1, name: &quot;admin&quot;, email: &quot;test<span class="doctag">@gmail</span>.com&quot;, created_at:……&gt;</span></span><br><span class="line"></span><br><span class="line">user.methods.<span class="keyword">include</span>?(<span class="symbol">:name</span>)</span><br><span class="line"><span class="comment"># =&gt; false</span></span><br><span class="line"></span><br><span class="line">user.name</span><br><span class="line"></span><br><span class="line"><span class="comment"># =&gt; &quot;admin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$ </span>user.name</span><br><span class="line"></span><br><span class="line"><span class="comment"># =&gt; Couldn&#x27;t locate a definition for user.name</span></span><br><span class="line"></span><br><span class="line">user.respond_to?(<span class="symbol">:name</span>)</span><br><span class="line"><span class="comment"># =&gt; true</span></span><br></pre></td></tr></table></figure>

<p>使用pry的$ ，找不到user.name的定义，但是执行user.name却返回了正确的结果，此时一定调用了method_missing。但是，如何查看rails是如何实现的呢？</p>
<p>ruby元编程中在有关 rails的属性方法中曾经提到，当第一次访问一个属性时，这个属性是一个幽灵方法，ActiveRecord::Base # method_missing() 会把它转换成一个真实的方法，同时创建出读，写，查询方法，比如上面的name，会创建name, name=, name?，这样下次就可以直接调用。</p>
<p>但是，这里很显然，user.methods.include?(:name)返回了false，这里并没有创建name这个方法，那么rails是如何让user.name 返回了”admin”的呢？</p>
<p>这里附上来自<a href="https://ruby-china.org/IChou">IChou</a> 大神的解答：</p>
<p>使用undef_method :name后，调用user.name, 它会落入下面的 method_missing 方法中:</p>
  <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># lib/active_model/attribute_methods.rb:425</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">method_missing</span><span class="params">(method, *args, &amp;block)</span></span></span><br><span class="line">  <span class="keyword">if</span> respond_to_without_attributes?(method, <span class="literal">true</span>) <span class="comment"># =&gt;  这里是 false</span></span><br><span class="line">    <span class="keyword">super</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    match = matched_attribute_method(method.to_s)</span><br><span class="line">    #&lt;struct ActiveModel::AttributeMethods::ClassMethods::AttributeMethodMatcher::AttributeMethodMatch target=&quot;attribute&quot;, attr_name=&quot;name&quot;, method_name=&quot;name&quot;&gt;</span><br><span class="line">    match ? attribute_missing(match, *args, &amp;block) : <span class="keyword">super</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">attribute_missing</span><span class="params">(match, *args, &amp;block)</span></span></span><br><span class="line">  __send__(match.target, match.attr_name, *args, &amp;block)</span><br><span class="line">  <span class="comment"># match.target =&gt; &quot;attribute&quot;， 这里调用了自身的 attribute 方法</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># lib/active_record/attribute_methods/read.rb:76</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_read_attribute</span><span class="params">(attr_name)</span></span> <span class="comment"># :nodoc:</span></span><br><span class="line">  <span class="variable">@attributes</span>.fetch_value(attr_name.to_s) &#123; <span class="params">|n|</span> <span class="keyword">yield</span> n <span class="keyword">if</span> block_given? &#125;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">alias</span> <span class="symbol">:attribute</span> <span class="symbol">:_read_attribute</span></span><br><span class="line">private <span class="symbol">:attribute</span></span><br></pre></td></tr></table></figure>

<p>「也就是最后调用@attributes.fetch_value(attr_name.to_s) ，user.name的返回了正确的结果，而不是如预期所想的那样抛出NoMethodError。」</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://github.com/rails/rails/blob/master/activemodel/lib/active_model/attribute_methods.rb">rails attribute methods</a></p>
<p><a href="https://apidock.com/ruby/Module/undef_method">undef method</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Rails</tag>
      </tags>
  </entry>
  <entry>
    <title>Yarn Global Packages with asdf error</title>
    <url>/posts/yarn-global-packages-with-asdf-error/</url>
    <content><![CDATA[<p>Google到了相似的问题解决方法，但是尝试后，依然无效，这里记录下自己找到的解决方法。</p>
<span id="more"></span>

<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>使用 <code>yarn global install @vue/cli</code> 后，输入</p>
<p><code>vue create hello-world</code>，报错:</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">zsh:</span> command not found: vue</span><br></pre></td></tr></table></figure>

<p>Yarn 版本1.21.1。</p>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>参考 <a href="https://github.com/yarnpkg/yarn/issues/5353">yarn doesn’t add global packages bin/ to $PATH</a> ，在.zshrc中添加了一行：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="string">&quot;<span class="variable">$(yarn global bin)</span>:<span class="variable">$PATH</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p>打开新的Tab，加载后，出现：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/Users/</span>lucia/.zshrc: xxx: command not found: yarn</span><br></pre></td></tr></table></figure>

<p>终端输入：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yarn global bin</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> /Users/lucia/.asdf/installs/nodejs/12.14.0/.npm/bin</span></span><br></pre></td></tr></table></figure>

<p>想到本地nodejs通过asdf安装的, 于是参考<a href="https://dev.to/jennapederson/using-yarn-global-packages-with-asdf-1d3d">Using Yarn Global Packages with asdf</a>，</p>
<p>终端执行：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">yarn<span class="built_in"> config </span><span class="builtin-name">set</span><span class="built_in"> prefix </span>~/.yarn</span><br></pre></td></tr></table></figure>

<p>打开 <code>.yarnrc</code>文件，发现文件被追加了一行：</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">prefex </span><span class="string">&quot;/Users/lucia/.yarn&quot;</span></span><br></pre></td></tr></table></figure>

<p>重新终端找vue：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">which</span> vue</span><br><span class="line"></span><br><span class="line">vue not found</span><br></pre></td></tr></table></figure>

<p>看来PATH还是没有配对。</p>
<p>最后在<a href="https://github.com/asdf-vm/asdf-nodejs/issues/42">yarn global installs don’t get shimmed</a> 找到了答案。</p>
<p>方法并不优雅，不过倒是有效。</p>
<p>终端：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yarn global dir</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> /Users/lucia/.config/yarn/global</span></span><br></pre></td></tr></table></figure>

<p>找到 node_module的地方，然后把这个PATH 追加到<code>.zshrc</code>文件中:</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">path</span>=<span class="string">&quot;<span class="variable">$HOME</span>/.config/yarn/global/node_modules/.bin:<span class="variable">$PATH</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p>OK，Bravo!</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://github.com/yarnpkg/yarn/issues/5353">yarn doesn’t add global packages bin/ to $PATH</a></p>
<p><a href="https://dev.to/jennapederson/using-yarn-global-packages-with-asdf-1d3d">Using Yarn Global Packages with asdf</a></p>
<p><a href="https://github.com/asdf-vm/asdf-nodejs/issues/42">yarn global installs don’t get shimmed</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Yarn</tag>
      </tags>
  </entry>
  <entry>
    <title>网络概论</title>
    <url>/posts/Introduction-to-the-Web/</url>
    <content><![CDATA[<p>网络概论扫盲笔记。</p>
<span id="more"></span> 

<h4 id="数码网络的运作："><a href="#数码网络的运作：" class="headerlink" title="数码网络的运作："></a>数码网络的运作：</h4><blockquote>
<p>将要传输的数据拆碎成适当大小的区块，每个区块叫做数据包(packet)，每个数据包有个首部(header)会写上接收方的地址，要传输的数据本身称为酬载（payload），然后再通过网络来传输</p>
</blockquote>
<h5 id="网络传输协议："><a href="#网络传输协议：" class="headerlink" title="网络传输协议："></a>网络传输协议：</h5><blockquote>
<p>就是指数据包首部的格式，要规范这个格式，才可以顺利地将数据包发送出去，告诉中间传输的网络设备，让它知道要寄到哪里去。</p>
</blockquote>
<h5 id="网络分层设计："><a href="#网络分层设计：" class="headerlink" title="网络分层设计："></a>网络分层设计：</h5><p>实务被分为四层：</p>
<table>
<thead>
<tr>
<th>层</th>
<th>定义</th>
</tr>
</thead>
<tbody><tr>
<td>数据链路层link layer</td>
<td>用来处理局部网中硬件连接的传输，例如Etherent协议，无线网络802.11n协议，3G/4G手机网络</td>
</tr>
<tr>
<td>网络层internet layer</td>
<td>用来处理因特网中的网络设备和网络设备之间的传输，例如IP协议</td>
</tr>
<tr>
<td>传输层Transport layer</td>
<td>用来处理电脑到电脑之间的可靠传输，例如TCP，UDP协议</td>
</tr>
<tr>
<td>应用层Application layer</td>
<td>网络应用程序之间如何处理数据，例如HTTP协议</td>
</tr>
</tbody></table>
<p>可以将分层想象成数据包了四个信封，一层包一层，HTML数据是最里面的酬载（payload）,被包在HTTP里面，外面再包上TCP，IP，最后再包一层Etherent。</p>
<hr>
<p>| <strong>Etherent首部</strong> | <strong>IP首部</strong> | <strong>TCP首部</strong> | <strong>HTTP首部</strong> | <strong>实际的数据HTML</strong> |</p>
<hr>
<p>分层设计的好处：</p>
<blockquote>
<p>灵活性高，可扩充性好。当某一层需要改变的时候，只需要替换那一层就好了。而且层次化后，设计新协议也会简单很多，而不需要每次都重新设计全部的协议。</p>
</blockquote>
<hr>
<h4 id="数据链路层link-layer"><a href="#数据链路层link-layer" class="headerlink" title="数据链路层link layer"></a>数据链路层link layer</h4><p>电脑上网需要连接网线或者用无线网络，来连接到路由器，这之间就需要一层信封写上地址，以告诉路由器把数据传回来的时候，送到哪一台电脑上。</p>
<p>这一层的传输协议根据硬件连接方式的不同而有不同的协议，常见的有：</p>
<ul>
<li>有线网络使用以太网协议（Ethernet）</li>
<li>无线网络的 IEEE802.1协议</li>
<li>移动通信网络使用3G，4G协议</li>
</ul>
<p>每个网络设备在出厂时，都配有一个Mac地址（Media Access Control Address）。这个地址将用于直接相连在一起的硬件。例如多台电脑连接了一个路由器，那么路由器就会用Mac地址决定数据包要寄到哪里去。</p>
<p>终端输入<code>ifconfig</code>可以看到Mac地址：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fi3zvbb5mej30hy074gng.jpg"></p>
<p>传输路径是这样的：</p>
<p>当你需要将数据传输到公开的网站时，首先会从你的电脑传到路由器，信封会填上路由器的Mac地址，然后发送出去，路由器收到后，会把这一层信封拆掉，换上与路由器直接连接的ISP路由器的Mac地址，然后寄到下一个网络设备，以此类推直到目的地网站服务器。</p>
<blockquote>
<p>ISP：internet Service Provider，互联网服务供应商，指的是例如中国移动，中国联通的因特网电信运营商</p>
</blockquote>
<h4 id="网络层Internet-Link"><a href="#网络层Internet-Link" class="headerlink" title="网络层Internet Link"></a>网络层Internet Link</h4><p>数据链路层使用的Mac地址，还有直接相连网络设备才会知道。你的电脑知道路由器的Mac地址，路由器知道与它相连接的ISP设备的Mac地址，但我们并不知道路由器出去之后的网络设备的Mac地址。</p>
<p>数据包packet由一个路由器传递给下一个路由器，每个传递都更接近目的地，而这个目的地需要一个地址，这就是IP协议所处理的。第四版IPv4由4bytes的数字组成，形式是XXX.XXX.XXX.XXX.</p>
<p>IP地址是全球唯一的，最多可有42亿多个，但随着互联网的大量普及，已经与2011年2月全部分配完毕。新的标准IPv6使用了16bytes来表示网络位置，不过实务上对一般用户似乎很少用到。这是因为要使用IPv6，必须客户端到服务器中间的网络设备都要支援IPv6，而大部分的ISP营运商都还没有默认支援IPv6.</p>
<p>IP地址在设计时，保留了一些私有IP地址用于局域网，最常见的是<code>192.168.0.0</code>~`192.168.255.255<code>这个范围。你连上无线路由器时，都会被分配到这个地址。另外还保留了</code>127.0.0.1` 代表的是本机电脑，私有IP地址。</p>
<p>CIDR块：</p>
<blockquote>
<p>CIDR是一种IP地址的表示法，全称Classless Inter-Domain Routing无类别域间路由，用来表示一整个区块的IP位置。</p>
<p>例如：<code>a.b.c.0/16</code> 的意思是 <code>a.b.0.0</code> 到 <code>a.b.255.255</code>，共 65,536 个地址</p>
</blockquote>
<p>NAT技术：</p>
<blockquote>
<p>IPv4已经分配完毕，但是大家并不很着急要升级到IPv6，为什么呢？因为NAT技术，因此不需要每一台上网的电脑，都需要一个公开的IP地址。</p>
<p>透过NAT技术，只有路由器那一台网络设备需要公开的IP地址，局域网内使用私有IP地址即可。路由器会记得当初数据包是从哪一台电脑送出去的，当数据包从因特网返回时，会做一个IP地址转换。</p>
<p>但是如果一台电脑是因特网上可以被连线的服务器，必须要有一个公开的IP地址。</p>
</blockquote>
<p>DHCP协议：</p>
<blockquote>
<p>当电脑连上路由器时，会自动请路由器分配一个局域网的私有IP地址给你。通常的范围在 <code>192.168.1.1</code> 到 <code>192.168.1.255</code>之间</p>
</blockquote>
<p>Ping指令：</p>
<blockquote>
<p>ping用来测试数据包送到目的地所需要的时间，其中time是往返时间，这个时间主要取决于地理位置。如果你去ping台湾或日本的服务器大概需要50ms，去ping美国的要200ms，要去欧洲或者南美洲那就更远了。这也是为什么网站的连线速度要好，就得把服务器摆的离用户比较近的原因。</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fi422qon2gj30h706ogne.jpg" alt="r"></p>
</blockquote>
<p>traceroute指令：</p>
<blockquote>
<p>用来追踪到达目的地过程中，每台路由器节点的回应：</p>
<p>ping和traceroute一样，不是每台路由器都会回应这个信息，有些路由器会关闭这个功能。</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fi427otnx9j30jd057wf7.jpg"></p>
</blockquote>
<h4 id="传输层Transport-layer"><a href="#传输层Transport-layer" class="headerlink" title="传输层Transport layer"></a>传输层Transport layer</h4><p>IP数据包抵达对方电脑后，要给哪个程序去处理呢？这时候就要用到传输层协议。</p>
<p>在传输层TCP，UDP中定义了<strong>Port Number</strong>，在数据包首部写上来源埠（source port number）和目的埠（destination port number），不同的应用程序会用不同的Port，每一个需要用到网络的程序，都必须跟操作系统登记申请一个Port来使用，操作系统会去确认说一个Port只能分给一个程序使用。</p>
<p>IP协议让我们可以将数据包从因特网的一端传送到另一端，但是没有保证数据包的可靠传输。传输过程中，可能被中间的路由器丢失，不同数据包也可能因为经过不同路由器而造成抵达的顺序不同。</p>
<p>因此在TCP协议中实做了更多步骤来保证资料传输的正确性，包括<strong>会重发遗失的封包，舍弃重复的封包，无错误资料传输，阻塞／流量控制，确认建立三方交握，连线已建立才做传输</strong>等等算法。</p>
<p>TCP是非常复杂的协议，也是使用最为广泛的协议，和IP协议合称TCP/IP，大部分的应用层协议，包括HTTP，都是基于TCP／IP的。</p>
<h4 id="应用层Application-Layer"><a href="#应用层Application-Layer" class="headerlink" title="应用层Application Layer"></a>应用层Application Layer</h4><p>TCP／IP协议是操作系统就会提供的网络功能，而在我们电脑上会有不同的应用软件，这些软件基于TCP／IP实作应用层协议，例如：</p>
<ul>
<li>DNS</li>
<li>HTTP</li>
<li>SSH</li>
<li>FTP档案传输</li>
<li>SMTP寄email</li>
<li>POP收email</li>
<li>SMB微软的网络文件共享系统</li>
<li>……</li>
</ul>
<p>其中，最常见的是<strong>DNS协议</strong>和<strong>浏览器使用的HTTP协议</strong>。</p>
<h4 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h4><p>由于IP地址不好记忆，所以我们偏好让用户使用域名来访问服务器，但是数据包要传递必须使用IP地址，因此，<strong>域名系统便用来做Domain Name和IP地址的转换</strong>。</p>
<p>DNS机制基本上就是一个对照表，对照某某域名的iP地址是什么。</p>
<p>本地便有一个对照表档案，见<code>/etc/hosts</code>.</p>
<p>域名：</p>
<blockquote>
<p>一个网域名称组成是<code>sub-domain.second-level-domain(your-domain).top-level-domain</code>.</p>
<ul>
<li>全世界的top-level-domain由互联网号码分配局IANA机构所管理，每个top-level-domain会分配给不同国家的非营利组织进行管理。所有的top-level-domain列表请参考Root Zone Database。</li>
<li>一般个人或者公司组织会向这些非营利机构组织进行网域购买和登记。在一些域名注册商<a href="https://www.namecheap.com/">Name cheap</a>， <a href="https://tw.godaddy.com/">Godaddy</a>,  <a href="https://wanwang.aliyun.com/domain/">阿里云-万网</a>的网站上，可以一次选购各种不同的网域。</li>
</ul>
</blockquote>
<p>DNS是如何查询的？</p>
<blockquote>
<p>一般用户如何进行DNS查询呢？通常是使用ISP默认提供的DNS服务器，也可以自己指定，例如：</p>
<ul>
<li>阿里DNS <a href="http://www.alidns.com/">http://www.alidns.com</a></li>
<li>国内114dns的114.114.114.114</li>
<li>google的8.8.8.8</li>
</ul>
</blockquote>
<p>可以在你的Mac中设定DNS Servers为Google的8.8.8.8。</p>
<p>查询流程是先从客户端偏好的DNS开始，如果找不到，则该DNS会从根网域名城服务器开始查询，直到找到负责该网域的DNS服务器为止。在第一次查询后，客户端偏好的DNS就会被缓存起来。</p>
<p>nslookup指令：</p>
<blockquote>
<p>可以简单查询DNS</p>
<p>终端输入：<code>nslookup &#123;domain-name&#125;</code></p>
<p>输出的address就是IP</p>
</blockquote>
<p>dig指令：</p>
<blockquote>
<p>也可以查询DNS，提供更为详细的数据：</p>
<p>例如：</p>
<p><code>dig sivers.org</code></p>
<p>得到如下结果：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fi46vrrv3cj30k008l0u0.jpg"></p>
<p>也可以从根网域服务器开始查询：</p>
<p>不敲代码了，上图：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fi47abl399j30nc0ildjy.jpg"></p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fi47aezmivj30oh0j4425.jpg"></p>
</blockquote>
<p>DNS纪录有分不同类型，例如：</p>
<blockquote>
<ul>
<li><code>A</code> 一笔IPv4纪录，某个subdomain指向某一个IPv4地址</li>
<li><code>AAAA</code> 一笔IPv6纪录</li>
<li><code>MX</code> 邮件服务器</li>
<li><code>CNAME</code>别名，可以设定某个subdomain指向另一个地址</li>
</ul>
<p>查看MX纪录：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fi47eqcwghj30li09875t.jpg"></p>
</blockquote>
<p>DNS使用情境：</p>
<ul>
<li><strong>标售哄抬现象</strong>： 因为购买单个网域一年并不贵，所以一些热门的网址组合，很多网络蟑螂会预先注册保留起来，如果要买则需要花更贵的价钱才能买到。当然，也可走法律程序，但不容易处理。</li>
<li><strong>故障排除</strong>：有时候网络好像故障了，浏览器无法连接，但是可以用<code>ping &#123;ip-address&#125;</code>, 这时候可以优先检查是否是DNS坏了，换一台试试。【经历过一次，还以为是翻墙的原因，后来求助得到解答，换了DNS，比如换成114.114.114.114或者8.8.8.8】</li>
<li><strong>钓鱼网站</strong>：所谓的钓鱼网站，是利用网址很像，然后画面弄成一样骗你输入账号秘密。</li>
<li><strong>网域忘记续约</strong>：购买网域是需要定期续约的，一年，三年，五年等，在大公司可能因为交接失败，造成网域实效的现象层出不穷。</li>
<li><strong>Geo-based或Round-Robin</strong>：查询DNS时，不一定总是回答同一个IP答案，有些网站在不同国家都有服务器，但是希望网址一样的，这时可以根据用户不同的地理位置，回答不同的IP答案。</li>
<li><strong>DNS污染</strong>：在一个理想信任的网络环境中，如果用户的DNS不知道答案，它会一层层去询问，但是在一个受管制的网络环境，DNS可以被控制回答不正确的IP位址，进而限制一般用户无法顺利浏览，甚至回答钓鱼网站的IP，这种行为叫做DNS污染。</li>
</ul>
<h4 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h4><p>HTTP：Hypertext Transfer Protocol（超文本传输协议），是由客户端发送HTTP request 请求到服务器端，然后服务器端返回HTTP response回复。</p>
<p>HTTP一定先从客户端开始，服务器端不能直接发送信息给客户端。</p>
<blockquote>
<p> 加餐：Internet与Web的技术差别是？</p>
<p>用TCP／IP技术的是internet，用HTTP的是Web。万维网也是因特网的一种，但不是每一个internet的应用都使用HTTP，例如email用的是SMTP协议。</p>
</blockquote>
<p>Curl工具：</p>
<p><code>curl</code> 指令可以在命令行中发送HTTP Request。如下：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fi48kbitr0j30mv0fhjv6.jpg"></p>
<p>浏览器的HTTP工具：</p>
<p><strong>浏览器Inspector</strong></p>
<blockquote>
<p>使用Google chrome的inspector可以观察HTTP Networking的情形：</p>
<p>你会发现浏览器要完整加载一个网页，必须要发送非常多的request。第一个request拿HTML，接着浏览器会解析HTML内容，找出还需要哪些CSS／JavaScript和图档等资料，然后再发送HTTP Request去抓取这些资料。</p>
</blockquote>
<p><strong>浏览器Extension</strong></p>
<p>进入chrome选单的extension，可以安装postman等扩展程序</p>
<p><strong>HTTP数据包：Request Response</strong></p>
<p><strong>HTTP Request</strong></p>
<p>一个HTTP Request包括几个部分：</p>
<ul>
<li>HTTP方法</li>
<li>网址，包括URL+ parameters</li>
<li>HTTP首部headers</li>
<li>信息内容Message Body，GET方法没有这个部分</li>
</ul>
<p>HTTP方法常见的有以下几种：</p>
<ul>
<li>GET：安全且幂等，用来读取数据</li>
<li>POST：不安全且不幂等，用来新增数据或执行某个操作</li>
<li>PUT：不安全且幂等，用来置换数据</li>
<li>PATCH：不安全且不是幂等，用来修改数据</li>
<li>DELETE：不安全但幂等，用来删除数据</li>
</ul>
<p>这里，安全和幂等的意思如下：</p>
<blockquote>
<p>安全：这个操作不会修改到服务器的数据，但这是语意上的意思，不代表服务器的实作。例如GET某一个网站，服务器还是可以实作浏览量功能。</p>
<p>另外互联网都会假设GET是可以重复读取并缓存的，而POST不行，因此搜索引擎只会用GET抓取资料。</p>
<p>幂等：如果相同的操作再执行第二遍第三遍，结果还是跟第一遍的结果一样，也就是不管执行多少次，结果都跟只执行一次一样。</p>
</blockquote>
<p>HTTP首部</p>
<p>常见的Request Header，例如：</p>
<pre><code>&gt; Host: sivers.org
&gt; User-Agent: curl/7.51.0
&gt; Accept: */*
</code></pre>
<ul>
<li>Host  指的是请求的网域名称；</li>
<li>User-Agent 是用户使用的软件</li>
<li>Accept是指希望服务器回传的格式。<code>*/*</code>是都可以的意思。</li>
</ul>
<p>信息内容：</p>
<p>GET没有信息内容，要用POST／PATCH／PUT/DELETE才会有信息内容。</p>
<p><strong>HTTP Response</strong></p>
<p>一个Response包括几个部分：</p>
<ul>
<li>状态码（response status）</li>
<li>首部（response headers）</li>
<li>信息内容（response body）</li>
</ul>
<p>例如：</p>
<pre><code>HTTP/1.1 200 OK
Content-Type: text/html

&lt;html&gt;
&lt;h1&gt;这是HTML源码&lt;/h1&gt;
&lt;p&gt;....&lt;/p&gt;
&lt;/html&gt;
</code></pre>
<p>这里<code>HTTP/1.1</code>是HTTP规格的版本，<code>200</code>是状态码数字，<code>OK</code>是状态码。</p>
<p><code>Content-Type: text/html</code> 是首部部分；</p>
<p>后面则是信息内容。</p>
<p>了解完整的HTTP状态码：<a href="https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81">HTTP 状态码列表</a></p>
<p>HTTP的无状态特性：</p>
<p>每个Request之间都是完全独立的，也就是说每个request必须带有完整的参数来完成操作。</p>
<p>那如何识别登入的用户？</p>
<blockquote>
<p>每个Request都自带可以识别的资讯，例如浏览器会使用cookies这个功能。服务器透过Response Header的Set-Cookie来告诉浏览器要记住一些数据，然后浏览器就会在之后的Request都带有Cookie这个header。</p>
<p>另外Cookie只会向同一个网域送出，基于浏览器的安全同源政策（same-origin policy）</p>
</blockquote>
<p><strong>URL</strong></p>
<p>以<code>http://www.example.com/home</code>为例：</p>
<ul>
<li>协议用http</li>
<li>服务器主机Host是<code>www.example.com</code></li>
<li>URL路径是<code>/home</code></li>
<li>Port号码：http默认是80，https默认是443</li>
</ul>
<p>什么是Query strings/Parameters？</p>
<blockquote>
<p>可以用来额外传递一些参数给服务器，例如<code>https://www.google.com.hk/search?search=ruby&amp;results=10</code></p>
<p>GET, POST都可以用Query strings的写法来传递参数，但GET比较常见，因为GET没有body，只能用这种方式来传参数给服务器。</p>
<p>此外：</p>
<ul>
<li>Query Strings有长度限制</li>
<li>不适合传敏感信息</li>
<li>空白和特殊字符必须做出逸出编码，编码规则详见：<a href="https://en.wikipedia.org/wiki/Percent-encoding">URL Encoding</a></li>
</ul>
</blockquote>
<p>什么是HTTPS和HTTP/2？</p>
<blockquote>
<p>HTTPS: 没有加密的HTTP连线，可以透过监听网络封包，知道浏览器传输的内容，而HTTPS可以简单理解为加密了【我是这么理解的：P】</p>
<p>HTTP/2: 2015年制定的最新HTTP标准，语意和功能都与HTTP1.1相容。</p>
</blockquote>
<hr>
<p><strong>浏览器的 Request/Response Lifecycle</strong></p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcgy1fi4b9atjvqj31kw23v1k3.jpg"></p>
<hr>
<p>看完了这些多，我的理解是：</p>
<p>当我们在网页浏览器的地址栏中输入一个网址后，浏览器会对这个网址进行解析，分解出protocol，host，port，path，然后DNS会根据host将网址转化成IP地址，生成IP数据包，TCP将这个数据包拆分成多个大小在1.4KB的小数据包，浏览器发送请求，然后电脑将Mac地址传给路由器，路由器根据接收到的这个Mac地址，换上ISP的Mac地址，然后将数据包传送给下一个路由器，数据包在多个路由器之间进行传送，每次传送都会离目的地更近一些，这些数据包到达目的地后，根据TCP协议，进行重新组装，然后服务器根据数据包中的HTTP request 内容给到相应的response，并将response回传给到浏览器，浏览器根据回传到的response信息，进行解析，生成网页。</p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>学习git rebase</title>
    <url>/posts/learn-git-rebase/</url>
    <content><![CDATA[<p>神奇的git rebase。</p>
<span id="more"></span> 

<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>前段时间老大新教了一个技能，使用<code>git rebase master -i</code> 来修改或者合并commit，用了之后，顿时有种发现新世界的感觉，好工具有必要花时间了解下。</p>
<p>过了下<a href="https://github.com/progit/progit2">pro git</a>，梳理下git rebase的基本使用以及“偷天换日”的神技。</p>
<h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><ul>
<li><p>基本用法</p>
<p>pro git中，对于basic rebase是这么说的：</p>
<blockquote>
<p>With the rebase command, you can take all the changes that were committed on one branch and replay them on another one.</p>
</blockquote>
<p>简单来说，就是相当于把一个分支A嫁接到另一个分支上B。</p>
<p>书中举了这么一个例子：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcly1fsd7h2d0w9j30hc07tdfx.jpg"></p>
<p>现在需要将master 和experiment这两个分支合并。</p>
<p>有两种方式：</p>
<ul>
<li>merge</li>
<li>rebase</li>
</ul>
<p>先看merge，很简单，终端执行：</p>
<pre><code class="Shell">git checkout master ## 切到分支master
git merge experiment  ## 将experiment merge 到master
</code></pre>
<p>用three-merge  【我理解为三路合并】的方式来将两个最新的分支快照（C3和C4）和它们最近的共同祖先（C2）之间进行合并，创建了一个新的快照 C5。</p>
<p>效果：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcly1fsd7rrxa4vj30g10683ym.jpg"></p>
<p>​</p>
<p>​</p>
<p>rebase的方式，终端执行：</p>
<pre><code class="Shell">git checkout experiment ## 切到分支experiment
git rebase master ## 将experiment嫁接到master上，即ancestor由原来的C2，变成了C3，生成了新的snapshot C4‘
git checkout master ## 切回到master
git merge experiment ## 将experiment merge进 master
</code></pre>
<p>效果：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcly1fsd7ywqkh0j30g604sglo.jpg"></p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcly1fsd81284n1j30he04sq2y.jpg"></p>
<p>这里你估计要嘀咕了，git rebase好像多走了两步啊。对，相比merge，它是多走了两步，但是这两步，让整个整合的过程变得很清晰，不同于three-merge的方式，而是直线式，先嫁接再简单的合并。而且你还可以选择，只rebase，不merge，什么意思呢？看下面一个很常见的场景：</p>
<blockquote>
<p>你在master上开了新的分支B1，同时其他人也开了分支B2，随后B2被merge进了 master，此时，你将分支push到远端代码仓库，对分支进行<code>git push -u origin B1</code>时，会显示有冲突，因为此时B1是基于本地的master来开发的，而远端origin因为已经merge了B2， 跟本地的master已经不同，怎么处理？</p>
</blockquote>
<p>思路也很清晰，先把远端最新的代码pull下来，让本地的master与origin/master同步，然后将B1 rebase 到同步后的master上即可。</p>
<p>终端执行：</p>
<pre><code class="Shell">git checkout master ## 切换到master
git pull origin master ## 拉下origin/master，让本地master与origin/master同步
git checkout B1 ## 切换到分支B1
git rebase master ## 将B1嫁接到master上，这样B1就是在最新的master上进行开发了，随后你push B1时，项目的maintainer就可以直接merge你的分支了
</code></pre>
<p>当然， rebase master的时候，可能会出现冲突问题，比如B2分支和你的B1同时修改了同一个地方，此时需要手动修正冲突，修改后，<code>git add</code>， 不用commit，然后<code>git rebase —continue</code>，直到没有冲突，完成rebase。</p>
<p>如果rebase仅仅只是这样，好像也没什么神奇的，下面才是重头戏。</p>
</li>
<li><p>偷天换日，篡改历史</p>
<p>执行如下命令，可以进入git rebase的interactive 交互模式 ：</p>
<pre><code>git rebase -i xxx
</code></pre>
<p>其中XXX指的是你要在哪个commit的基础上进行修改，也就是最后一个修改的commit的父commit，比如你现在在分支B上，想要rebase 分支B的最后3个，那就写：</p>
<pre><code>git rebase -i HEAD~3
</code></pre>
<p>这样rebase的时候，重新生成的commit history，就会是从HEAD, HEAD<del>1到HEAD</del>2的快照，而不会影响其它的snapshot。</p>
<p>同样，想要rebase 分支B的所有commit，假定B是从master主分支上开发的，则可以直接：</p>
<pre><code>git rebase -i master
</code></pre>
<p>进入到interactive 模式后， 可以看到目前有7个命令可以使用：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tNc79gy1frl89ao69gj30yk0f0whk.jpg"></p>
<p>简单过一下上面的命令列表：</p>
<ul>
<li>p, <code>pick</code> = 要这条 commit ，什麼都不改</li>
<li>r, <code>reword</code> = 要这条 commit ，但要改 commit message</li>
<li>e, <code>edit</code> = 要这条 commit，stop for  amending，不仅仅是edit message</li>
<li>s, <code>squash</code> = 要這條 commit，但要跟前面那条合并，合并后的message可以自己定义</li>
<li>f, <code>fixup</code> = 类似squash，但是不要这条 message，直接用前面的那条</li>
<li>e, <code>exec</code> = 使用shell执行指令</li>
<li>d, <code>drop</code> = 移除这条commit</li>
</ul>
<p>编辑好后，退出即可。</p>
<p>光说不练没什么感觉，找个项目练练。</p>
<p>假定现在有一个rails的项目movie，目前的commit history长这样：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcly1fsdb6606a4j30ov07qtae.jpg"></p>
<p>我们把最后6个拎出来练练。</p>
<p>终端执行：</p>
<pre><code>git rebase -i HEAD~6
</code></pre>
<p>使用默认编辑器打开了git-rebase-todo：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcly1fsdbrskqurj30hy0fktar.jpg"></p>
<p>我们修改一下commit “  implement like &amp; dislike movie “ ，把 &amp; 换成 and， 使用reword 命令试试。</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcly1fsdbworp60j30h503cwew.jpg"></p>
<p>保存后退出，会打开COMMIT_EDITMSG， 我们将&amp;改成了and：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcly1fsdc1cpth8j30j8098ta8.jpg"></p>
<p>保存后退出，打开fork，这时会发现最后6个commit的short SHA-1已经变了，生成了新的short SHA-1：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcly1fsdc4xhyvtj30pc09o769.jpg"></p>
<p>看看edit:</p>
<p>同样的步骤，我们这次动 <strong>41e6c73</strong> implement my favorite movies, 把my 改成 users‘：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcly1fsdcefvmkdj30g4034wev.jpg"></p>
<p>保存后退出，终端会输出如下的内容：</p>
<pre><code class="shell">Stopped at 41e6c73... implement my favorite movies
You can amend the commit now, with

    git commit --amend

Once you are satisfied with your changes, run

    git rebase --continue
</code></pre>
<p>按照指示来，执行<code>git commit --amend</code>, 在打开的编辑器中修改：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcly1fsdclnuardj30i5024aa7.jpg"></p>
<p>保存后退出，执行<code>git rebase --continue </code>, 完成， 此时查看short SHA-1, 会发现，从刚刚修改的那条commit开始，又重新生成了新的short SHA-1。</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcly1fsdcolt6gpj30p303h3z9.jpg"></p>
<p>这样看，edit 和reword好像没啥区别，额，你这可就小看edit了，修改message只是amending的一种哦，我们还可以使用edit来拆分commit。</p>
<p>比如我们来拆分 <strong>9d1e108</strong> implement like and dislike movie</p>
<p>还是一样的，在它前面添加e:</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcly1fsdcw0a3f4j30hr03dmxl.jpg"></p>
<p>同样，保存后退出，回到命令行，我们reset下这个commit，将所有的文件从history里面捞出来，变成unstaged状态，然后再创建多个commit。终端执行：</p>
<pre><code>git reset HEAD~
git add app/controllers/movies_controller.rb
git commit -m &quot;add like and dislike actions&quot;
git add app/views/movies/show.html.erb
git commit -m &quot;add like and dislike button on movie&#39;s show page&quot;
git add config/routes.rb
git commit -m &quot;update routes for like and dislike actions&quot;
git rebase --continue
</code></pre>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcly1fsdd83pbc6j30r408wdi9.jpg"></p>
<p>此时，一个commit被拆成了三个，short SHA-1也都更新了。</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcly1fsddapyuonj30pc04jmy2.jpg"></p>
<p>好，下一个，squash。</p>
<p>刚刚我们用<code>edit</code>拆了一个commit，现在我们使用<code>squash</code>把它们合并回来。</p>
<p>终端执行：</p>
<pre><code>git rebase -i HEAD~8
</code></pre>
<p>在<strong>bf9a37c</strong> 和<strong>66c0d7e</strong>前面的pick改成s:</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcly1fsddmig2w9j30ja04taas.jpg"></p>
<p>保存后退出，会打开COMMIT_EDITMSG:</p>
<p> <img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcly1fsddoiz6i9j30l206w754.jpg"></p>
<p>它会列出三个commit，如果你什么都不做，直接退出，它会自动将第2，3的commit合并到第一条，最后的commit message 变成：</p>
<blockquote>
<p>add method of like/dislike to movie</p>
<p>add like and dislike actions</p>
<p>add like and add like and dislike button on movie’s show page</p>
</blockquote>
<p>当然你也可以自己修改message，这里我们直接退出。</p>
<p>打开fork，会发现已经合并了，三个add 变成了一个add。【换行的缘故，没有显示全部的message】</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcly1fsddyiom7mj30p803saar.jpg"></p>
<p>​</p>
<p>额，我发现改错了，刚刚拆出来的不是这三条……擦，终端<code>git rebase -i HEAD~9 </code>了，把第9个commit给添加进来了……</p>
<p>正好，我们再来一次，把<strong>0d92196</strong>  add method of like/dislike to movie , **c2795c3 ** update  routes for like and dislike actions 合并， 这次换成自己定义新的commit message。</p>
<p>按照前面的方式再走一遍，在打开的COMMIT_EDITMSG中：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcly1fsde56gortj30ib07haas.jpg"></p>
<p>修改成：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcly1fsde96aeaxj30h202f3yo.jpg"></p>
<p>保存后退出，查看fork， 合并完成！</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcly1fsdeb2pe57j30p503f3z5.jpg"></p>
<p>fixup类似squash，只是它是直接用前面一条commit，舍弃这一条，我们来试试。</p>
<p>对 <strong>b4062de</strong> use self delimit helper 进行fixup:</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcly1fsdejlqhgtj30ka04774t.jpg"></p>
<p>保存后退出，rebase完成，查看fork：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcly1fsdelazwpvj30p9030mxr.jpg"></p>
<p>刚刚的 <strong>b4062de</strong> use self delimit helper  已经被合并进了implement my reviews里面了，导致从implement my reviews 开始后的三个commit 的short SHA-1都更新了。【箭头画偏了……】</p>
<p>exec，运行命令：</p>
<p>在pro git中没有看到exec相关的例子，不过在这篇文章<a href="http://kamalmarhubi.com/blog/2016/03/08/git-rebase-exec-make-sure-your-tests-pass-at-each-commit-and-other-rebase-goodies/">git rebase –exec: make sure your tests pass at each commit! (and other rebase goodies)</a>里面看到相关的操作, 照着试试。</p>
<p>选择<strong>9996f59</strong> render partial with collection， 我们添加上exec。</p>
<p>终端执行：</p>
<pre><code>git rebase -i --exec &quot;pwd&quot; 9996f59
</code></pre>
<p>会在<strong>9996f59</strong>后执行 pwd 命令，可以看到已经执行了pwd命令：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcly1fsdgn2vahrj30k401s0sv.jpg"></p>
<p>额，Google上exec相关的内容还是较少的，少有的几篇说到了测试与重置authors的：</p>
<ul>
<li><a href="https://til.hashrocket.com/posts/2839b35a3b-execute-a-shell-command-on-every-commit-in-rebase">Execute a shell command on every commit in rebase</a></li>
<li><a href="https://stackoverflow.com/questions/21560896/how-to-run-tests-for-all-commits-during-a-rebase">How to run tests for all commits during a rebase</a></li>
</ul>
<p>d，移除commit：</p>
<p>终端执行：</p>
<pre><code>git rebase -i HEAD-6
</code></pre>
<p>删除最后一条 <strong>bac0634</strong>：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcly1fsdgv7qw4lj30hk044q3h.jpg"></p>
<p>保存后退出， 查看fork：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcly1fsdgw5d060j30pb02adg5.jpg"></p>
<p>最后一条commit已经被移除了。</p>
</li>
</ul>
<ul>
<li><p>Rebase的危险性</p>
<p>rebase也不是想rebase就rebase的，这么强大的权利，用的时候，要注意的。</p>
<p>用书中的一句话就是：<strong>Do not rebase commits that exist outside your repository.</strong></p>
<p>换句话说，在你的分支还没有push到远端代码仓库时，你想怎么rebase都可以，但是如果你的代码已经push到远端了，而且你的同事是在你的分支的基础上开发的，那么请不要使用rebase来刷你的存在感。因为你rebase后，他们需要重新pull下你提交的最新代码，此时你之前的commit history和rebase后的commit history会让他们生生抓狂的。</p>
<p>看个场景理解下：【偷懒，直接用书中的例子】</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcly1fsd964ruh1j30fo08waac.jpg"></p>
<p>此时，远端的分支master指向snapshot C1。</p>
<p>本地你在teamone/master上开发后，commit了两次，history中有snapshot C2， C3。</p>
<p>随后，你的同事A merge了C4， C5，生成了新的snapshot C6，然后git push，提交了新的代码，将master指向了C6。</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcly1fsd9gh66bej30fn04d74d.jpg"></p>
<p>那很显然，你需要把teamone/master的代码fetch下来，merge后继续开发。同样，按照three-merge方式，这时git会将C3，C6和C1三路合并，生成新的snapshot C7。</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcly1fsd9grqz5dj30g805kweo.jpg"></p>
<p>不幸的是，你的同事针对之前提交的分支，进行了rebase的操作，将C4嫁接到C5上，生成了新的snapshot C4‘， 然后<code>git push —force</code> 强制push到了远端，等同于刷新了之前的commit history。然后你继续fetch，再merge。</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcly1fsd9qid4wyj30gl085jrt.jpg"></p>
<p>此时，git merge了C4‘， C7和C1，重新生成快照C8，这时C8中来自于C4‘中的commit history，会跟C7中的commit history有重合的部分，相当于存在两个C4，导致出现两个一模一样的commit。</p>
<p>书中在rebase your rebase 部分中，提到一个针对这种情况的解决方法，思路就是分辨出所有的snapshot中，哪些是你做的修改，哪些是你的同事做的，值得庆幸的是，git 帮我们处理了这种情况。</p>
<p>终端执行：</p>
<pre><code>git fetch
git rebase teamone/master
</code></pre>
<p>会得到这样的效果：</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images/006tKfTcly1fsda5p6fh0j30gl086wet.jpg"></p>
<p>相当于将C2，C3直接嫁接到C4‘上，生成了新的commit，厉害！不过这种方法的前提是C4与C4’需要是一样的snapshot。至于原因，书中这样说的：</p>
<blockquote>
<p>Otherwise the rebase won’t be able to tell that it’s a duplicate and will add another C4-like patch (which will probably fail to apply cleanly, since the changes would already be at least somewhat there).</p>
</blockquote>
<p>如果C4与C4’不一样的话，rebase 无法分辨出C4‘是不是一个复制的commit snapshot？额，这里暂时没有理解透。</p>
<p>不过个人看完的感觉就是，push后的分支，应当尽量避免使用rebase。</p>
</li>
<li><p>rebase VS merge</p>
<p>个人的理解，两者还是不一样的，merge类似把两个东西融为一体，而rebase 则好比进行重新嫁接。书中提到commit history的一个意义就在于记录下发生了什么，使用merge会真实的记录下所有发生的事情，而rebase，诚如上面做过的那些commands，有着篡改历史的嫌疑，但也有好处，可以把杂乱的commit history整理的清清爽爽，谁喜欢一个分支上一堆没什么用的commits呢。</p>
<p>借书中一段话作为结尾：</p>
<blockquote>
<p>In general the way to get the best of both worlds is to rebase local changes you’ve made but haven’t shared yet before you push them in order to clean up your story, but never rebase anything you’ve pushed somewhere.</p>
</blockquote>
</li>
</ul>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://github.com/progit/progit2">pro git</a></p>
<p><a href="http://kamalmarhubi.com/blog/2016/03/08/git-rebase-exec-make-sure-your-tests-pass-at-each-commit-and-other-rebase-goodies/">git rebase –exec: make sure your tests pass at each commit! (and other rebase goodies)</a></p>
<p><a href="https://til.hashrocket.com/posts/2839b35a3b-execute-a-shell-command-on-every-commit-in-rebase">Execute a shell command on every commit in rebase</a></p>
<p>推荐阅读：<a href="https://blog.yorkxin.org/2011/07/29/git-rebase">git rebase</a>， 写的很详细，类比也很形象。</p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>读《beyond feelings》- Part3</title>
    <url>/posts/notes-of-beyond-feelings-part3/</url>
    <content><![CDATA[<p>长文慎入。</p>
<span id="more"></span> 
<h3 id="Chapter14-Knowing-yourself"><a href="#Chapter14-Knowing-yourself" class="headerlink" title="Chapter14 Knowing yourself"></a>Chapter14 Knowing yourself</h3><p>开篇提到了knowing yourself 的重要性，对应着中国古语中的自知者明，随后给到了方法论。</p>
<p>The way to achieve self-knowledge is to ask lots of probing questions.</p>
<p>要问自己什么问题呢？文中给出了一长串的问题。这里就不细细列出来了：P</p>
<p>【我基本没有认真去回答每一个问题，这是待填的坑，希望后面我能记得回来填坑】</p>
<h4 id="critical-thinking-inventory"><a href="#critical-thinking-inventory" class="headerlink" title="critical thinking inventory"></a>critical thinking inventory</h4><p>针对前面两个part所陈述的内容，提出了18个相关的问题，这些问题都可以在前面两部分中找到影子。而对这些问题的回答，可以帮助你去发现自己思考的习惯和态度。</p>
<p>比如：</p>
<p>how careful am I about separating hearsay and rumor from fact? About distinguishing the known from assumptions or guesses? how difficult is it for me to say “I don’t know.”</p>
<h4 id="Using-your-inventory"><a href="#Using-your-inventory" class="headerlink" title="Using your inventory"></a>Using your inventory</h4><p>紧接着上一小节，如何利用这些个人“存货”来提升你在批判性思考方面的表现？</p>
<p>how can you most effectively use your personal inventory to improve your critical thinking performance?</p>
<p>Strategy 如下：</p>
<ul>
<li>Answer all the questions in the critical thinking inventory honestly and thoroughly, acknowledging not only the pleasant facts about yourself but also the unpleasant ones.</li>
<li>Reflect on your answers, noting the areas in which you are especially vulnerable.</li>
<li>Whenever you address an issue, anticipate what problems are likely to undermine your thinking at each stage of the thinking process and make a conscious effort to resist their influnence.</li>
</ul>
<h4 id="Challenge-and-reward"><a href="#Challenge-and-reward" class="headerlink" title="Challenge and reward"></a>Challenge and reward</h4><p>Challenge:</p>
<p>It is one thing to understand the steps necessary to improving your thinking and quite another to use them effectively. The latter task is a formidable challenge that will take continuing effort over a long period of time.</p>
<p>Is the challenge worth the effort?</p>
<p>Thinking skills play a crucial role in our personal lives. Noted psychologist Albert Ellis, founder of the Institute of Rational- Emotive Therapy, claims, “**Man can live the most self-fulfilling, creative, and emotionally satisfying life by intelligently organizing and disciplining his thinking.**”</p>
<p>Reward:</p>
<p> No other knid of self-improvement has the potential to effect every area of your life so positively.</p>
<h3 id="Chapter15-Being-observant"><a href="#Chapter15-Being-observant" class="headerlink" title="Chapter15 Being observant"></a>Chapter15 Being observant</h3><p>Clear and sound thinking often depends on subtleties that are revealed only by close observation – in other words, by attentive seeing and hearing.</p>
<p>The keener our observation, the less likely we will be to commit to stereotypes, oversimplifications, and unwarranted assumptions.</p>
<p>「莫名让我想起之前看《狄仁杰》时，觉得他的观察和推理能力真的是一流。成为一个合格的观察者，需要很好的耐性吧？」</p>
<p>那么应该观察什么？如何观察？</p>
<h4 id="observing-people"><a href="#observing-people" class="headerlink" title="observing people"></a>observing people</h4><p>为什么要观察别人？【如果一直对着别人看，容易让人产生误解吧？】</p>
<p>What people say and the way they say it (and sometimes what they omit saying) can be valuable clues to their unspoken views and attitudes. Noticing these things can help us decide which areas are sensitive for peo- ple, which areas their understanding seems weak in, and what approaches would be most fruitful in communicating with them.</p>
<p>we can conduct our critical thinking more effectively if we observe other people’s behavior carefully.</p>
<h4 id="observation-in-science-and-medicine"><a href="#observation-in-science-and-medicine" class="headerlink" title="observation in science and medicine"></a>observation in science and medicine</h4><p>作者在这部分列举了一些科学和医学上的观察，因为这些或有意或无意的观察以及当事人对于这些观察结果的正确处理，在推动了科学及医学的进步方面做出了重大的贡献。</p>
<h4 id="the-range-of-applicaiton"><a href="#the-range-of-applicaiton" class="headerlink" title="the range of applicaiton"></a>the range of applicaiton</h4><p>举了一系列的例子，说明close observation 在各个领域的学习和工作中带来的价值。</p>
<p>For most of us, being observant may not have the dramatic results it did for these individuals. Nevertheless, it can help us relate more meaningfully to people and learn more about the things around us. Most important, it can aid our critical thinking.</p>
<h4 id="becoming-more-observant"><a href="#becoming-more-observant" class="headerlink" title="becoming more observant"></a>becoming more observant</h4><p>the way to be observant is to use all five of your senses to keep your mind from wandering aimlessly.</p>
<p>observant people have learned how to get outside themselves, to be constantly in touch with what is happening around them.</p>
<p>这里作者给出了如何成为更敏锐地观察者的方法：通过更专注地练习感官印象。</p>
<p>A good way to start becoming more observant is to practice receiving sense impressions more attentively.</p>
<p>当你阅读杂志，报纸或者看电视时，考虑各个想法之间的关联，包括那些明显不相关的想法。</p>
<p>consider the connections among  ideas, even apparently unrelated ones.</p>
<h4 id="reflecting-on-your-observations"><a href="#reflecting-on-your-observations" class="headerlink" title="reflecting on your observations"></a>reflecting on your observations</h4><p>吾日三省吾身。</p>
<p>提高自己观察能力最好的方法是每天都抽出10～15分钟的时间，可以是早上或者晚上，确保是你不被打扰的时间，回顾你在过去24个小时里面的所见所闻，问自己这些所见所闻意味着什么，它们是如何与其他重要的事情关联起来的，你该如何使用它们来改善自己。</p>
<p>to increase the number  and quality of your insights by developing the habit of reflecting on your observations:</p>
<p>the best way to do this is to set aside a special time every day – early in the morning, perhaps, or late in the evening. It needn’t be long, ten or fifteen minutes may be enough. But be sure you are free of distractions. Review what you have seen and heard during the past twenty-four hours. <strong>Ask yourself what they mean, how they relate to other important matters, and how you can use them to improve yourself or to spurachievement</strong>.</p>
<p>【那些别人口中的人生就是一场修行，修的内容是不是也包含这些？】</p>
<h3 id="Chapter16-Selecting-an-Issue"><a href="#Chapter16-Selecting-an-Issue" class="headerlink" title="Chapter16 Selecting an Issue"></a>Chapter16 Selecting an Issue</h3><p>这里的issue跟通常的issue有些不同，当然更不是在github上随处可见的issue。</p>
<p>这里的issue指的是任何人们倾向于表达异议的话题，或者可以理解成有争论的话题。</p>
<p>The term issue, in the context of critical thinking, means any matter about which people tend to disagree, in other words, it is almost synonymous with the word controversy.</p>
<p>critical thinkers understand that care in selecting issues for analysis is an important part of the thinking process.</p>
<p>那么如何去挑选一个issue？挑选中需要注意什么？</p>
<h4 id="The-basic-rule-less-is-more"><a href="#The-basic-rule-less-is-more" class="headerlink" title="The basic rule: less is more"></a>The basic rule: less is more</h4><p>less is more 简直是万能。</p>
<p>aiming for depth rather than breadth. [专注于深度而不是广度]</p>
<p>这里作者解释了为什么less is more. 我用我自己的理解来简单陈述下，越广的issue，涉及的层面也越广，受到的质疑也越多，因为同样的广度上，可能站着很多人，持着不同的观点，甚至他们比你了解的更多，随时准备反驳你的观点，而选择某个点深挖，一方面有那种深度研究的人并不多，另一方面你也可以更专注，不容易因为涉及太广而困惑，这其实是更稳妥的策略。</p>
<p>limit the scope of your analysis, for example, if the issue has five or ten important aspects, examine only one or two. you will then have sufficient space to address complexities, make important distinctions, and deal with subtleties.</p>
<h4 id="How-to-limit-an-issue"><a href="#How-to-limit-an-issue" class="headerlink" title="How to limit an issue"></a>How to limit an issue</h4><p>三步走：</p>
<ul>
<li>list as many aspects of the issue as you can</li>
<li>decide exactly which aspects you will address</li>
<li>probe the aspects you are concerned with in one or more clear,  carefully focused, questions</li>
</ul>
<p>紧接着作者举了三个样例：pornography色情，boxing拳击，juvenile crime青少年犯罪，示范了如何运用这个方法来挑选issue。</p>
<p>这里以boxing为例看看。</p>
<p>职业的拳击手很容易受重伤，即使没有受重伤，也较容易早逝。这里抛出的问题是：</p>
<p>should boxing be outlawed? [ 拳击应该被取缔吗？]<br>针对这个问题，可以从多个方面进行探讨：</p>
<table>
<thead>
<tr>
<th>Aspect</th>
<th>Questions</th>
</tr>
</thead>
<tbody><tr>
<td>boxer’s right to earn a living</td>
<td>would be outlawing of boxing be an unfair denial of the boxer’s right to earn a living?</td>
</tr>
<tr>
<td>Boxing and mental health</td>
<td>is the expression of violence that takes place in boxing match an emotionally healthy experience for the fighters themselves? for the spectators?</td>
</tr>
<tr>
<td>the popularity of boxing</td>
<td>How valid is the argument that boxing should be allowed to continue because it has historically been, and continues to be, very popular?</td>
</tr>
<tr>
<td>the classification of boxing as a sport</td>
<td>is boxing properly classified as a sport? That is, does the fact that the contestants aim to strike potentially harmful blows disqualify it from that classification?</td>
</tr>
<tr>
<td>Overcoming the dangers</td>
<td>is it possible, perhaps by modifying the rules or the equipment, to eliminate or at least reduce the physical danger to fighters?</td>
</tr>
<tr>
<td>effects of being punched</td>
<td>Exactly what effect does a punch have on the human body, particularly the brain? What is the cumulative effect of the punches received during ten or fifteen rounds of boxing? during a career?</td>
</tr>
</tbody></table>
<h4 id="Narrowing-the-issue-further"><a href="#Narrowing-the-issue-further" class="headerlink" title="Narrowing the issue further"></a>Narrowing the issue further</h4><p>运用上面的方法挑选出你想要研究的issue后，如果它还是不够细，可以继续细化。</p>
<p>the fewer matters that are competing for your attention, the less the danger of becoming distracted or confused.</p>
<p>limiting your treatment will lessen the chance of your oversimplifying complex matters.</p>
<h3 id="Chapter17-Conducting-inquiry"><a href="#Chapter17-Conducting-inquiry" class="headerlink" title="Chapter17 Conducting inquiry"></a>Chapter17 Conducting inquiry</h3><p>依然是给出inquiry的定义：</p>
<p><strong>inquiry is seeking answers to questions, investigating issues, and gathering information to help us draw conclusions</strong>.</p>
<p>找寻问题的答案，对争议性的课题进行调查，收集信息来帮助我们得出结论。</p>
<p>inquiry有两种基本的类型：</p>
<ul>
<li>inquiry into facts</li>
<li>inquiry into opinions</li>
</ul>
<h4 id="working-with-inconclusive-results"><a href="#working-with-inconclusive-results" class="headerlink" title="working with inconclusive results"></a>working with inconclusive results</h4><p>because the state of human knowledge is imperfect, not every question is answerable when it is asked. some questions are even more resistant to inquiry. such as are there intelligent life-forms in our solar system or other planetary systems?</p>
<p>however resistant to resolution a question may be, though, inquiry is still useful. we shouldn’t be intimidated by difficult issues. <strong>we should merely be realistic about how complete and final our answers are likely to be.</strong></p>
<h4 id="where-to-look-for-information"><a href="#where-to-look-for-information" class="headerlink" title="where to look for information"></a>where to look for information</h4><p>通过哪些渠道去收集信息？这个在part 1 chapter6 evidence那一部分已经提到过一些，这里作者给到了一个参考的渠道列表，篇幅最大的，当然是我们伟大的internet，首推Google大神。</p>
<p>在借助外在信息来源前，有一个重要的不易忽视的来源：</p>
<p>our own experience and observation。【我们自己的经验和观察】</p>
<p>此外的其他渠道有：</p>
<ul>
<li><p>background on the issue</p>
</li>
<li><p>facts and statistics</p>
</li>
<li><p>information about people【人物传记】</p>
</li>
<li><p>information about the English language【工具类书籍，牛津英语词典等】</p>
</li>
<li><p>articles in newspapers, magazines and journals</p>
</li>
<li><p>books</p>
</li>
<li><p>computer databases and abstracting servises</p>
</li>
<li><p>Internet resources</p>
<blockquote>
<p>这里作者花了很多篇幅讲述如何通过internet来获取你需要的信息，连如何使用搜索引擎这样的操作都列出来，真的是手把手教。</p>
<p>文中提到，对于网上搜索到的信息来源，要评估其可靠性。如何评估呢？通过回答以下问题：</p>
<ul>
<li>What is the purpose of the publication or web site?</li>
<li>what is the source’s point of view?</li>
<li>does the source engage in personal attacks?</li>
<li>does the source make extravagant assertions?</li>
<li>does the source present evidence for his or her assertions?</li>
<li>what criticisms have been made, or could be made, of the source’s assertions and evidence? how worthy are those criticisms?</li>
</ul>
</blockquote>
</li>
</ul>
<p>不管信息来源是什么，记住一点：even honest, conscientious people can make mistakes.</p>
<h4 id="keeping-focused"><a href="#keeping-focused" class="headerlink" title="keeping focused"></a>keeping focused</h4><p>【作者挺好玩的，提到了别在网上瞎逛，专注找资料，哈哈。】</p>
<p><strong>Make a special effort to discipline your internet searches, focusing your attention on relevant material only and resisting the temptation to wander.</strong></p>
<p> 这里需要明确一点，搜索的过程并没有想象中的那么费事费力，练习一段时间后，你就能高效地找到相关的信息来源。</p>
<h4 id="how-much-inquiry-is-enough"><a href="#how-much-inquiry-is-enough" class="headerlink" title="how much inquiry is enough?"></a>how much inquiry is enough?</h4><p>怎样评估inquiry 已经足够了？</p>
<p>inquiry的目标是生成论据，所以很显然，回到了chapter 6中，判断evidence是否enough的标准也可以用来判断inquiry是否enough。</p>
<p>具体如下：</p>
<ul>
<li>Evidence is sufficient when it permits a judgment to be made with certainty</li>
<li>if certainty is unattainable, evidence is sufficient if one view of the issue has been shown to have the force of probability</li>
<li>In all other cases, the evidence must be considered insufficient</li>
</ul>
<p>这里需要提一下，critical thinking中有一个很大的挑战是当你发现一个知识渊博的人也支持你的论断时，就会觉得inquiry已经足够了，不需要继续了。但是圣人也会犯错啊。</p>
<p>one of the greatest challenges to critical thinking is <strong>the temptation to stop inquiring when you find a knowledgeable person who supports your bias.</strong></p>
<h4 id="managing-lengthy-material"><a href="#managing-lengthy-material" class="headerlink" title="managing lengthy material"></a>managing lengthy material</h4><p>如何管理那些长篇的材料？</p>
<p>These longer works are more difficult to evaluate because the core arguments are seldom presented neatly and compactly.</p>
<p>但是这种情况并不是作者有意如此，而是自然的写作结果。负责任的作者在下一个定论时，会给到充足的论据，给到相应的推理过程，而在这推理过程中，可能需要下一些论点来推导出最后的结论，推理过程可能不是直线性，而是推出A，B，C然后A，B，C再推出D，又根据论据推断出E，最后根据D，E推断出F。</p>
<p>以下给出了如何管理长篇材料的策略：</p>
<ul>
<li>after reading the article or book, go back and identify the key assertions</li>
<li>Identify the author’s conclusion</li>
<li>notice any qualifying words used in the key assertions or the conclusion</li>
<li>note the amount, kinds, and sources of evidence used to support the assertions.</li>
<li>Notice the conditions the author includes</li>
<li>compose an accurate summary of the article or book from your analysis in steps 1~5</li>
</ul>
<h3 id="Chapter18-Forming-a-judgment"><a href="#Chapter18-Forming-a-judgment" class="headerlink" title="Chapter18 Forming a judgment"></a>Chapter18 Forming a judgment</h3><p>judgments are conclusions arrived at through examination of evidence and careful reasoning. they are the products of thinking.</p>
<p>but the fact that judgments are products of evaluation and reasoning does not guarantee their worth.</p>
<p>judgment也有好有差。整本书提到的那些策略，最终的目的就是为了得到一个最合理，最接近真相，最符合事实的judgment。</p>
<p>这里将chapter14～17章的内容串联了起来：</p>
<p><strong>by knowing ourselves and being observant, we improve our perception and guard against error. by systematically clarifying issues and conducting inquiry, we rescue our thinking from preconceived notions and first impressions. by evaluating the evidence we have obtained, we determine what it means and how significant it is.</strong></p>
<p>得出一个合理的论断需要合理的评估支持这个论断的那些论据。【个人感觉，evaluation的过程可以等同于interpertation】</p>
<p>evaluation plays an important role in every fileds.</p>
<h4 id="evaluating-evidence"><a href="#evaluating-evidence" class="headerlink" title="evaluating evidence"></a>evaluating evidence</h4><p>这里，回到了第六章。</p>
<p>Evaluating evidence consists of asking and answering appropriate questions.</p>
<p>第六章提到的11种evidence的来源以及在评估这些evidence时，需要问的问题，这里作者再次列出来，做了一个结。但是不管如何去评估这些evidence，有一个通用的问题时一定要问的：</p>
<p>is this evidence relevant to the issue under consideration?</p>
<p>如果这个evidence与issue无关，不管它是多么真实可信，都不该考虑。</p>
<h4 id="evaluating-your-sources’-arguments"><a href="#evaluating-your-sources’-arguments" class="headerlink" title="evaluating  your sources’ arguments"></a>evaluating  your sources’ arguments</h4><p>这里，回到了第七章。</p>
<p>你看到的evidence可能是基于其他evidence得出的结论，特别是那种长篇的论文，此时，你需要自己做总结去评估这些论点。</p>
<p>这里作者举了两个例子，一是有关取消小学，中学，大学中的分数制度，另一个是有关一位女士写给心理学家的信，陈述了她与一位同性恋男士一起工作，两人关系很好，但是她的丈夫不喜欢这位同事，称其有病，对他妻子与该同事通话而生气。</p>
<p>针对每个例子，问了一些值得思考的问题，这些问题对于理解和分析情况有很大的帮助。【提出合适的问题真的是项能力】</p>
<p>taking time to ask appropriate questions has several benefits.</p>
<p>first , it prevents you from judging hastily, on the basis of first impressions. Second, it allows you to evaluate each part of the argument individually and thus to identify both strengths and weaknesses. Finally, <strong>taking the time to ask appropriate questions often provides a structure around which to arrange your thoughts</strong>.</p>
<h4 id="making-important-distinctions"><a href="#making-important-distinctions" class="headerlink" title="making important distinctions"></a>making important distinctions</h4><p>作者列出了因为没有正确区分而容易犯错的陷阱，6个，每一个都可以在前面的part2中找到对应的影子。</p>
<p>six kinds of distinctions that are necessary to avoid faulty evaluations:</p>
<ul>
<li><p>between the person and the idea</p>
</li>
<li><p>between what is said and how it is said</p>
</li>
<li><p>between why people think as they do and whether what they think is correct</p>
<blockquote>
<p>The soundness of an idea doesn’t depend on the motivations of those who support it. It depends on how well the idea fits the realities of the situation.</p>
</blockquote>
</li>
<li><p>between the individual and the group or class</p>
</li>
<li><p>between matters of preference and matters of judgment</p>
</li>
<li><p>between familiarity and correctness</p>
</li>
</ul>
<h4 id="expressing-judgments"><a href="#expressing-judgments" class="headerlink" title="expressing judgments"></a>expressing judgments</h4><p> 6 approaches to help you express all your judgments effectively:</p>
<ul>
<li><p>strive for a balanced view</p>
<blockquote>
<p>a balanced view of an issue is one that reflects all the subtlety and complexity of the issue.</p>
<p>when someone finally exercises the mental discipline to break the pattern and take a balanced look at the issue, the result is a refreshingly original, and often insightful, view.</p>
<p>To achieve a balanced view of the issues you address, you must be willing to look for the neglected side of the issue and, when there is good reason to do so, to challenge the prevailing view.</p>
</blockquote>
</li>
<li><p>deal with probability</p>
<blockquote>
<p>whenever you cannot achieve certanty, focus on probability.</p>
</blockquote>
</li>
<li><p>make your subject appropriately specific</p>
<blockquote>
<p>具体化主题，而不是泛泛而论。</p>
<p>choose the subjects of your judgments with care.</p>
</blockquote>
</li>
<li><p>make your predicate exact</p>
<blockquote>
<p>清晰，正确表达你的论断，不要让人产生歧义。【不要让读者或者听者猜你的意思】</p>
<p>举了一个非常典型的例子：</p>
<p>God is dead.</p>
<p>这个论断可以理解成如下：</p>
<p>people no longer want to believe God exists.</p>
<p>people no longer able to believe God exists.</p>
<p>people no longer certain God exists.</p>
<p>people no longer act as if God exists.</p>
<p>people no longer care whether God exists.</p>
<p>people no longer accept some particular conception of God.</p>
</blockquote>
</li>
<li><p>include all appropriate qualifications</p>
<blockquote>
<p>包含所有合适的先决条件。</p>
<p>有没有这些条件，结论可能千差万别。</p>
<p>includes not only qualifications of time but those of place and conditions as well.</p>
<p>the more care you take to include the qualifications necessary to express your thoughts precisely, the more defensible your judgment is likely to be.</p>
</blockquote>
</li>
<li><p>avoid exaggeration</p>
<blockquote>
<p>avoid all exaggeration.</p>
<p>argue the more modest interpretation, the less extreme conclusion.</p>
</blockquote>
</li>
</ul>
<h4 id="summary"><a href="#summary" class="headerlink" title="summary"></a>summary</h4><p>chapter 14～18中提到的strategy可用下面的列表来总结：</p>
<ul>
<li>know yourself and remain mindful of the ways in which your habits of mind undermine your treatment of issues.</li>
<li>be observant and reflect on what you see and hear.</li>
<li>When you identify an issue, clarify it by listing its aspects and raising probing questions about each.</li>
<li>conduct a thorough inquiry, obtaining all relevant facts and informed opinions.</li>
<li>evaluate your findings, and then form the express your judgment.</li>
</ul>
<p>a convenient checklist. : P</p>
<h3 id="Chapter19-Persuading-others"><a href="#Chapter19-Persuading-others" class="headerlink" title="Chapter19 Persuading others"></a>Chapter19 Persuading others</h3><p>persuasion的定义：</p>
<blockquote>
<p>Presenting your view so effectively that people who have no position no the issue will be inclined to agree with you and those who disagree with you will be motivated to reconsider their own view.</p>
</blockquote>
<p>为什么要说服他人接受你的观点？</p>
<blockquote>
<p>thoughtful judgments deserve to be shared, and the way they are presented can strongly influence the way others react to them.</p>
</blockquote>
<p>为什么要学习说服他人的技能？</p>
<blockquote>
<p>By learning the principles of persuasion and applying them in your writing and speaking ,you will extend the benefits of your critical thinking beyond the confines of your own mind.</p>
</blockquote>
<p>说服他人接受你的观点并不容易，甚至很难，作者给出了11条guidelines：</p>
<ul>
<li>respect your audience</li>
<li>understand your audience’s viewpoint</li>
<li>being from a position you have in common with your readers</li>
<li>taek a positive approach</li>
<li>understate your argument whenever possible</li>
<li>concede where the opposing side has a point</li>
<li>don’t ignore any relevant facts</li>
<li>don’t overwhelm your readers with arguments</li>
<li>focus on the arugment best calculated to persuade your audience</li>
<li>Never use an argument you don’t believe is sound or relevant</li>
<li>allow time for your view to gain acceptance</li>
</ul>
<p>来逐一过一遍.</p>
<h4 id="respect-your-audience"><a href="#respect-your-audience" class="headerlink" title="respect your audience"></a>respect your audience</h4><p>guideline第一条，尊重，我也觉得这是最基本的。</p>
<p>最普遍的一种情况是，觉得那些与你持有不同观点的人很愚蠢，笨笨的，呆呆的，而你会在说服的过程中，可能会有意无意表现出你的这种态度，而别人一旦感知到你的这种态度，更加不愿意去开放自己，接受你的说服。</p>
<p>你有表达的权利，他人自然也有质疑的权利。如何更好地处理质疑？</p>
<p>ask yourself what might account for their disagreement with your view. consider all the factors that can influence a person’s perspective, including age, gender, race, ethnicity, family background, religion, income level, political affilication, degree of education, and personal experience. if one or more of these could account for the difference in viewpoint, you will have good reason for regarding their disagreement as thoughtful and honest.</p>
<p>当然，最重要的一点，真的去尊重你的audience，而不是表现出尊重的样子：</p>
<p>don’t feel you need to state your respect for your audience, such statements have a way of sounding insincere. Work on acting respectfully, if you can accomplish that, there will be no need to state it. <strong>it will show.</strong></p>
<p>people will know.</p>
<h4 id="understand-your-audience’s-viewpoint"><a href="#understand-your-audience’s-viewpoint" class="headerlink" title="understand your audience’s viewpoint"></a>understand your audience’s viewpoint</h4><p>理解他们的观点。理解他们与你的分歧，才能更好地说服他们，或者修正你的观点。</p>
<p>那么，如何知道别人是怎么看待你的issue的呢？</p>
<p>作者列出了三个最常见的场景：</p>
<ul>
<li><p>Situation1: you are writing for a single reader who has presented his or her ideas in an article, book, speech, or conversation</p>
<blockquote>
<p>review what your reader said, noting not only the person’s position but also the reasoning that supports it. Determine both the strengths and the weaknesses of the person’s position.</p>
</blockquote>
</li>
<li><p>Situation2:  you are writing for a single reader who has not, to your knowledge, expressed a view on the issue in question.</p>
<blockquote>
<p>use your imagination to produce relevant questions.[厉害的]</p>
</blockquote>
</li>
<li><p>Situation3: you are writing not for a specific individual, but for all the people who hold an opposing view on the issue.</p>
<blockquote>
<p>study what has been expressed by people who hold the opposing view. look for frequently repeated arguments and themes.</p>
<p>The most influential errors in thinking represent the greatest challenge to persuasion.</p>
</blockquote>
</li>
</ul>
<h4 id="begin-from-a-positions-you-have-in-common-with-your-readers"><a href="#begin-from-a-positions-you-have-in-common-with-your-readers" class="headerlink" title="begin from a positions you have in common with your readers"></a>begin from a positions you have in common with your readers</h4><p>从你们的共同点开始，这个不仅仅适用于说服他人，也可以适用在很多方面，求同存异。</p>
<p>beginning from a position of agreement with your reader is not an arbitrary requirement or a matter of courtesy or good form. it is a simple matter of psychology.</p>
<h4 id="take-a-positive-approach"><a href="#take-a-positive-approach" class="headerlink" title="take a positive approach"></a>take a positive approach</h4><p>将你的观点作为看待事物的另一种视角呈现给别人，而不是直接的批判他人的观点。</p>
<p>whenever possible, build your case rather than tearing down the opposing case.</p>
<p>Keep in mind, however, that direct criticism of the opposing view will always seem harsher that it is to people who share that view, a brief criticism will seem protracted, <strong>and the mere perception that you are being negative will make your readers defensive</strong>.</p>
<p>看个例子来感受下：</p>
<table>
<thead>
<tr>
<th>article</th>
<th>response1</th>
<th>response2</th>
</tr>
</thead>
<tbody><tr>
<td>gun control legislation (a) penalizes the law-abiding more than the lawless, (b)denies citizens the most effective means of protecting self and property at a time when assaults on both are commonplace,(c) violates the U.S. Constitution.</td>
<td>gun control legislation does not penalize the law-abiding more than the lawless, does not deny citizens the most effective means of protecting self and property at a time when assaults on both are commonplace,does not really violate the U.S. Constitution.</td>
<td>gun control legislation discourages crime by making the mere possession of a gun an offense of some gravity. it stresses the role of the police, rather than the individual, in law enforcement. It follows the spirit, if not the letter, of the U.S. Constitution.</td>
</tr>
</tbody></table>
<p>第一种反应就好像有一个人跟你说“you are wrong, you are wrong ,you are wrong”，但是却没有给出任何说明ta正确的论据。第二种没有直接的反对，而是提出了看待这个问题的另一种视角。</p>
<p>Whenever you can avoid direct refutation – that is, whenever  you can effectively present and support your own views without direct reference to your reader’s opposing views — do so.</p>
<h4 id="understate-your-argument-whenever-possible"><a href="#understate-your-argument-whenever-possible" class="headerlink" title="understate your argument whenever possible"></a>understate your argument whenever possible</h4><p>如果你夸大自己的立场，你必须强化读者对自己立场的信念，而不是让他们对自己的信念提出质疑。</p>
<p>if you overstate your position, you are bound  to reinforce your readers’ conviction about their position rather than dispose them to question their conviction.</p>
<p>看个例子对比下，overstate与understate:</p>
<p>Overstate:</p>
<blockquote>
<p>If college students are not given opportunities to exercise responsibility and make their own choices while they are in college, they will have to adjust all at once when they leave college. and such adjustment will be extremely difficult.</p>
</blockquote>
<p>Understate: [more reasonable, more responsible]</p>
<blockquote>
<p>If college students are not given some opportunities to exercise responsibility and make their own choices while they are in college, they will have to adjust rather quickly when they leave college. and such adjustment will usually be more difficult.</p>
</blockquote>
<h4 id="concede-where-the-opposing-side-has-a-point"><a href="#concede-where-the-opposing-side-has-a-point" class="headerlink" title="concede where the opposing side has a point"></a>concede where the opposing side has a point</h4><p>[承认在对立面的观点中也有可取之处，在大多数颇有争议的论题中，没有哪一面是绝对的正确]</p>
<p>The natural tendency of all of us to value our own position too highly makes it difficult for us to admit that opposing views may also have merit.</p>
<p>overcoming this tnedency can be accomplished only by remembering that <strong>in most controversial issues no one side possesses the total truth</strong>.</p>
<p>remember that the readers are likely to be no more generous to you than you are to them. Only if you are open and honest in your concessions  can you expect them to be son in theirs.</p>
<h4 id="don’t-ignore-any-relevant-facts"><a href="#don’t-ignore-any-relevant-facts" class="headerlink" title="don’t ignore any relevant facts"></a>don’t ignore any relevant facts</h4><p>The temptation is strong to ignore the facts that support the opposing position rather than our own, <strong>especially if the other person has apparently not discovered them</strong>. Using them, it would seem, could only weaken our position.</p>
<p>这里作者给出了很精彩的陈述，argument的目的，不是打败别人或者证明自己对，别人错，而是一起去发现事实的真相及其复杂性，如此，才是double win。</p>
<p>the purpose of argument is not to defeat others but, throught the exchange of views, to discover the truth in all its complexity. When that happens, everyone wins.</p>
<p><strong>By presenting all the facts, even those that force you to modify your position, you impress your readers with your objectivity and honesty and invite them to show theirs.</strong></p>
<h4 id="don’t-overwhelm-your-readers-with-arguments"><a href="#don’t-overwhelm-your-readers-with-arguments" class="headerlink" title="don’t overwhelm your readers with arguments"></a>don’t overwhelm your readers with arguments</h4><p>不要塞给你的readers一堆arguments。</p>
<p>如何避免这种情况？有选择性地给出与话题最相关，最有说服力的论据和推理过程。</p>
<p>to present only those arguments and that evidence that you feel are most relevant and most persuasive.</p>
<p>当然，也不能什么证据也没有。</p>
<p>remember it is wiser to permit readers to make their own judgment, and no reader enjoy feeling the agreement with the writer is required in order to be considered a “reasonable person”.</p>
<p>比如：</p>
<ul>
<li>我呈现的这些论据看起来<strong>无可辩驳</strong>，<strong>毫无疑问</strong>这个提议是有害的。</li>
<li><strong>任何一个明白事理的人</strong>，都会<strong>毫不犹豫</strong>支持这个论点。</li>
</ul>
<h4 id="focus-on-the-argument-best-calculated-to-persuade-your-audience"><a href="#focus-on-the-argument-best-calculated-to-persuade-your-audience" class="headerlink" title="focus on the argument best calculated to persuade your audience"></a>focus on the argument best calculated to persuade your audience</h4><p>it is important to use arguments that appeal to your readers.</p>
<p>这里举了一个例子，说明为什么很重要。</p>
<p>关于美国是否应该卷入世界其他地区的冲突中这个话题，你个人可能认为最有争议的论点应该是宗教和道德，但是你的readers可能对政治或者哲学性的论点印象更深刻。这时，你如果按照自己的喜好去写有关宗教和道德方面的论点，然后去说服他人，可能效果并不好。【这里应该是一个issue的选择问题】</p>
<h4 id="never-use-an-argument-you-do-not-believe-is-sound-or-relevant"><a href="#never-use-an-argument-you-do-not-believe-is-sound-or-relevant" class="headerlink" title="never use an argument you do not believe is sound or relevant"></a>never use an argument you do not believe is sound or relevant</h4><p>真诚，尊重事实，是每一个写者最重要的特性。</p>
<p>永远不要使用那些你认为不合理或者不相关的论据。</p>
<h4 id="allow-tiem-for-your-view-to-gain-acceptance"><a href="#allow-tiem-for-your-view-to-gain-acceptance" class="headerlink" title="allow tiem for your view to gain acceptance"></a>allow tiem for your view to gain acceptance</h4><p>给他人时间，不要期望他们马上抛弃自己的观点，接受你的观点。</p>
<p>The best you should hope for is that they will be moved to reconsider the issue in light of what you said and  that your insights eventually will cause them to modify their view.</p>
<h4 id="An-unpersuasive-presentation-amp-amp-a-persuasive-presentation"><a href="#An-unpersuasive-presentation-amp-amp-a-persuasive-presentation" class="headerlink" title="An unpersuasive presentation &amp;&amp; a persuasive presentation"></a>An unpersuasive presentation &amp;&amp; a persuasive presentation</h4><p>这两部分可以放在一起，举了一个例子，有关学生如何写信告诉学校的食堂经理，让他们改进食堂存在的碗碟脏，排队久，食物不好吃的情况。对比了两封建议信：一封不具有说服力，言辞过于夸张，通篇抱怨连连，一封正确使用上述guidelines，颇有说服力，指出问题的同时给到了建议的解决方法供参考。自然是后者更有可能会被采纳。【后一封建议信，看得我都想改进餐厅状况了。】</p>
<h3 id="The-end"><a href="#The-end" class="headerlink" title="The end"></a>The end</h3><p>终于整完了这份笔记，一段小小的结束，也是新的开始。</p>
]]></content>
      <categories>
        <category>Reading</category>
      </categories>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>读《重来3》</title>
    <url>/posts/notes-of-it-does-not-have-to-be-crazy-at-work/</url>
    <content><![CDATA[<p>《重来3》中文版部分内容摘选.</p>
<span id="more"></span>

<p>长期的疲惫不是荣誉勋章，而是愚蠢的标志。</p>
<h4 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h4><p>我快忙疯了(it’s crazy at work)</p>
<blockquote>
<p>对许多人来说，“快忙疯了”已经成了他们的日常。可是，为何要这么疯狂？</p>
<p>主要原因有二：</p>
<ul>
<li>一是工作时间被各种或真实或虚拟的东西干扰，被切割得七零八碎；</li>
<li>二是不惜任何代价追求成长，这种不健康的执念促使人们设下不切实际的期望，把他们压迫得疲惫不堪。</li>
</ul>
<p>超长的工作时间里面, 大部分时间都被浪费了.</p>
<p>解决方案不是多花时间，而是少扯淡；是减少浪费，而不是增加投入。</p>
<p>在Basecamp,  我们不要不惜代价的成长，不要徒劳无功的忙碌。我们不设被好胜心驱使的目标，不跟同类型的公司攀比。我们不把自己逼到火烧眉毛的境地。</p>
<p>总体上来说，<strong>我们是冷静的——这是刻意的选择</strong>，也是亲身践行的结果。</p>
</blockquote>
<p>你的公司是个产品</p>
<blockquote>
<p>一切始于这个概念：你的公司是个产品。</p>
<p>你做出来的东西叫作产品（或服务），但它是经由你的公司做出来的。正是因为这个原因，你的公司应该是你最棒的产品。</p>
<p>本书的一切观点都围绕着这个主题延展开来。就像产品需要不断改良一样，公司也需要迭代才能不断进步。如果你想把一个产品做得更好，就必须不断地测试、修改、迭代。做公司也是一样。</p>
<p>做项目的时候，我们会<strong>集中工作6周</strong>，接下来的两周就脱离固定的时间表，“自由散漫”地工作，给自己减减压。</p>
</blockquote>
<h4 id="抑制你的野心"><a href="#抑制你的野心" class="headerlink" title="抑制你的野心"></a>抑制你的野心</h4><p>拒演“拼命工作”的苦情戏</p>
<blockquote>
<p>你并不会因为牺牲了一切而变得更有价值。</p>
<p>生命远不只是连轴转和忙到极限，人类的体验远比这辽阔、丰富得多。</p>
<p>充实地好好干上一天活儿，日复一日，这就足够了。</p>
<p>你可以拥有个人爱好，你可以好好照顾自己的身体，你可以坐下来好好读本书，你可以跟另一半一起看一部傻乎乎的电影，你可以抽出时间来做一顿像样的饭菜，你可以出门去散个长长的步。你可以时不时地，敢于做一个彻底的普通人。</p>
</blockquote>
<p>做个快乐的和平主义者</p>
<blockquote>
<p>我们为和平而来，我们没有建造帝国的野心，我们没想着要统治某个行业、某个市场。我们希望人人都能活得好好的，我们也有自己想追求的东西，但犯不着去抢夺别人的。</p>
<p>我们为顾客提供满意的服务，他们也给我们带来满意的回报，这才是真正重要的事。</p>
<p>在Basecamp，没有你追我赶，没有兔子要逮，只有因干出了最漂亮的活儿而得到的深深的满足感。衡量的标准就是我们自己的幸福感，以及顾客的购买量。</p>
<p>成为市场中的诸多选择之一，是一种美德——因为你的存在，顾客多了一个实实在在的选择。</p>
</blockquote>
<p>我们的目标是：没有目标</p>
<blockquote>
<p>我们当然懂，<strong>我们明白商业世界的运作规律——我们只是不在乎它</strong>。我们不介意在桌上留下点钱，也没必要把柠檬里的每一滴汁水都挤干榨净，反正最后的那几滴果汁总是酸涩的。</p>
<p>让我们直面真相吧：目标是个虚假的东西。几乎所有的目标都是为了设定而设定的。</p>
<p><strong>让公司生存下去，好好服务顾客，或者成为一个能让员工开开心心来上班的地方。这些目标不太容易量化，但并不等于它们不重要。</strong></p>
</blockquote>
<p>别总想着改变世界</p>
<blockquote>
<p>踏踏实实地干出漂亮活儿，跟顾客、员工和现实世界打交道时做到公平正直，给跟你打交道的人留下一个深刻的印象，少操心改变世界的事儿.</p>
</blockquote>
<p>边走边摸索</p>
<blockquote>
<p>长期计划会让人产生一种虚假的安全感。</p>
<p>要想把舵掌稳，那就在前行中及时做出微调，一千次也不怕，这肯定比一上来就猛打几次舵轮强得多。</p>
<p>每隔6周，我们会决定下一步要做什么，这就是我们唯一的计划。</p>
<p><strong>关于决策，你能掌握的最佳信息是在执行的时候获得的</strong>。我们等待这样的时刻来做出明智的决定。</p>
</blockquote>
<p>舒适环境有什么错？</p>
<blockquote>
<p>待在自己的舒适区里，是保持冷静的必要条件。[这段很非主流].</p>
<p><strong>对我们来说，见效的往往不是向外突破，而是潜心向内，去深挖，留在那个能带来最大收益的兔子洞里。</strong></p>
<p>在绝大多数情况下，如果某样东西令你感到不舒服，那正是因为它不对劲。如果你渐渐习惯于压抑一切不舒服的感受，你必将失去自己，也将失去你的道德准则。[有些类似心理学上的, 重视你的负面感觉, 它们在告诉你一些重要的信息]</p>
</blockquote>
<h4 id="捍卫你的时间"><a href="#捍卫你的时间" class="headerlink" title="捍卫你的时间"></a>捍卫你的时间</h4><p>40小时足矣</p>
<blockquote>
<p>每周工作40小时就足够了。足够你干出优质的活儿，足够你保持竞争力，足够你把重要的事情做完。</p>
<p>如果按照每周40小时的步调，<strong>你想做的事情做不完，那么你需要锻炼自己的选择能力</strong>，把真正该做的事情挑选出来，而不是延长工作时间。</p>
</blockquote>
<p>保护主义</p>
<blockquote>
<p>在Basecamp，<strong>我们把保护员工的时间和注意力视作最重要的责任。</strong></p>
<p>时间和注意力最好是大笔大笔地花出去，而不是换成零钱或硬币，散碎地用——把大块时间用在高价值的、缜密的工作上。</p>
</blockquote>
<p>高质量的1小时</p>
<blockquote>
<p><strong>仔细审视一下自己的时间。</strong>如果你的时间都是零碎的小段，是谁，或什么原因把它切分成了这样？是其他人在干扰你，还是你在干扰自己？你能做出哪些改变？</p>
<p>问问自己：上次你能把完全不受干扰的3个甚至4个小时留给自己和工作，是什么时候？</p>
</blockquote>
<p>高效比高产更重要</p>
<blockquote>
<p>高产指的是把时间全部占上——把时间表填到不能更满，然后尽你所能，做得越多越好。</p>
<p>而高效指的是<strong>找出更多未被侵占的时间，留给工作之外的其他事</strong>——留给休闲放松，留给家人和朋友，或者留出时间，什么也不干。</p>
<p><strong>利用时间的一个妙招就是，不做不值得做的事。</strong></p>
</blockquote>
<p>比别人更努力，就能出类拔萃？</p>
<blockquote>
<p>职业道德指的是做一个<strong>本质上的好人</strong>：<strong>值得他人信赖，是令人愉快的工作伙伴</strong>。</p>
<p>良好的职业道德指的<strong>不是随叫随到</strong>，而是<strong>说到做到、踏踏实实地做好每一天的事</strong>。</p>
<p><strong>把“比别人更努力”的念头从脑子里清除出去吧。</strong></p>
<p><strong>别再把职业道德跟超长的工作时间画等号</strong>。它既不能帮你领先一步，也不能帮你冷静下来。</p>
</blockquote>
<p>俄罗斯方块</p>
<blockquote>
<p><strong>不共享日程表.</strong></p>
<p>在Basecamp，要想看到别人的日程表，你得跟人家直接协商，这可是个漫长的谈判过程，不是唾手可得的便利。</p>
<p>如果你对自己的大多数时间都掌控不了，那你就不可能冷静下来。你会经常感到压力，觉得自己安心做事的能力被人夺走了。</p>
<p>当某人把时间从你手中夺走的时候，就相当于毁掉了你“踏踏实实地工作了一天”的成就感啊。真正取得进展才会让人感到由衷的满足。</p>
</blockquote>
<p>即时回复</p>
<blockquote>
<p>对即时回复的期待犹如一根导火索，引发了太多的险情。</p>
<p>在绝大多数情况下，对即时回复的期待都是毫无道理的。</p>
<p><strong>几乎所有的事情都可以等。几乎所有的事情都应该等。</strong></p>
</blockquote>
<p>错失良机恐惧症</p>
<blockquote>
<p>一边儿去吧。错过了有什么大不了的！在绝大多数时间里，绝大多数人就是会错过绝大多数事情啊。在Basecamp，我们倡导人们坦然面对它。别再担忧错失机缘了，淡定些！</p>
<p>有了淡定的心态，你就会关掉源源不断的信息流，关掉聊天工具，把各种干扰拒之门外，安安心心地把你该做的事做好。</p>
<p>我们希望员工能体验到那种静谧的、笃定的、因专注而生的快乐。</p>
</blockquote>
<h4 id="培养企业文化"><a href="#培养企业文化" class="headerlink" title="培养企业文化"></a>培养企业文化</h4><p>我们不是一家人</p>
<blockquote>
<p><strong>有的公司喜欢宣扬“我们都是一家人”。不，你们不是。</strong></p>
<p><strong>最优秀的企业不是家庭。它们是家庭的后盾，是家庭的同盟军。</strong>它们提供健康的，能让人找到成就感的工作环境，让员工能在合理的时间合上笔记本电脑，去做最好的丈夫、妻子、父母、手足和孩子。</p>
</blockquote>
<p>榜样的力量</p>
<blockquote>
<p>一个树立了自我牺牲的榜样的领导者，必定也会要求他人自我牺牲。[严于律己的, 往往很难宽以待人]</p>
<p>工作狂是一种传染病。</p>
</blockquote>
<p>信任犹如电池</p>
<blockquote>
<p>还有一个我们经常谈论的概念叫作信任电池。当员工刚进公司时，这个电池的电量是50%。此后，你每跟他打一次交道，你们之间的这节信任电池就要么充电，要么耗电，具体取决于你是否能兑现承诺的事。</p>
<p>信任电池的电量是过往一切互动结果的总和。</p>
<p><strong>信任电池的电量太低，正是工作中人际冲突的症结所在。</strong></p>
<p>要想在工作中拥有良好的人际关系，那就得<strong>用心经营</strong>。唯有当你坦诚地面对关系的真实现状，你的努力才会见效。<strong>最糟糕的做法就是假装你们之间的别扭感不重要</strong>，假装工作上的事都是“对事不对人”。这简直是愚蠢无知！事都是人做的啊，情绪必定会影响工作。</p>
</blockquote>
<p>低处的果子未必摘得到</p>
<blockquote>
<p><strong>当你距离果子越远的时候，它看起来才越低。等你走近一些，你会发现它长得比你想象中高。</strong></p>
<p>我们想当然地认为它很容易摘，只是因为此前我们从没尝试过。</p>
<p><strong>请尊重你从没做过的事。提醒自己，他人的工作没有那么简单。</strong></p>
</blockquote>
<p>简历不重要</p>
<blockquote>
<p>把关注重点放在<strong>候选人的人品和工作能力</strong>上，免得聘用一个想象出来的虚像。</p>
<p>渴望干出漂亮活儿的优秀人才常常来自你最预料不到的地方，而且他们看上去跟你想象中的完全不一样。<strong>你只需把重点放在他们的人品和工作能力上，这是唯一能找到他们的方法。</strong></p>
</blockquote>
<p>不必理会人才争夺战</p>
<blockquote>
<p>人才是不值得争夺的，它不是一种数量有限的稀缺资源——你要么拥有，要么就失去。</p>
<p>我们发现，<strong>培养人才、发掘他们未被开发的潜力，远比找到一个已经处于巅峰的人刺激得多</strong>。</p>
<p>当年我们雇用这些最出色的员工，并不是因为他们那时的模样，而是因为他们日后会长成的样子。</p>
</blockquote>
<p>不做薪酬谈判</p>
<blockquote>
<p>在Basecamp，我们不再做工资或加薪谈判。只要级别相同、角色相同，就拿一样的薪水，同工同酬。</p>
<p>我们的目标是，<strong>无论什么岗位，要让公司里的每一个人拿到的薪水都能位列市场的前10%。</strong></p>
<p>一定的离职率是好事，但工资不该成为绝大多数人离开的主要原因。</p>
<p><strong>与军心稳定的团队一起工作，幸福感会源源不断地涌现，公司也会持续高产。</strong></p>
</blockquote>
<p>图书馆守则</p>
<blockquote>
<p>用图书馆守则作为办公室的行为准则，你只需要做几个简单的设置，改变思维方式，<strong>尊重他人的时间、注意力和专心致志的工作时段</strong>，这就足够了。</p>
</blockquote>
<p>拒绝假“度假”</p>
<blockquote>
<p>度假的全部目的就是离开。</p>
<p><strong>雇主没有权力侵占任何人的夜晚、周末或假期，那是人家的生活时间。</strong>真正的危机事件可以例外，但那种事一年最多只能有一两次。</p>
</blockquote>
<h4 id="剖析工作流程"><a href="#剖析工作流程" class="headerlink" title="剖析工作流程"></a>剖析工作流程</h4><p>逼死人的截止日期</p>
<blockquote>
<p>大多数截止日期简直能逼死人。项目需求不断膨胀，工作越堆越多，可那个不现实的日期却岿然不动。这不叫工作，这是遭罪啊。</p>
<p>项目可以灵活缩减，这一点极为重要。<strong>这是因为几乎所有需要花6个月完成的事情，其实都能换个形式，在6周之内完成。</strong> 关键就在于<strong>你要知道哪些可以砍掉，何时该叫停，何时该向前走</strong>。</p>
<p>界限即自由。</p>
</blockquote>
<p>新常态</p>
<blockquote>
<p>起先，它看上去有点不顺眼。比如某个行为你并不喜欢，但容忍了。然后，某个人也这样做了，但你没注意或没去管。接下来，人们开始接二连三地这样做，因为没人出来阻止。</p>
<p>此时已经太晚了，它已经变成一种文化，一种新常态。</p>
<p><strong>如果你不希望组织文化里野草蔓生，那就要小心它的种子。</strong></p>
</blockquote>
<p>坏习惯会打败好意愿</p>
<blockquote>
<p>积习难改.</p>
<p>你必须不断自问：你今天的工作状态，是你今后10年、20年、30年想持续下去的吗？如果不是，现在就做出改变，不要等“以后”。</p>
<p>良好的意愿活不到“以后”。</p>
</blockquote>
<p>承诺比共识更重要</p>
<blockquote>
<p><strong>在企业中，唯一可持续的办法就是必须有人最后拍板。</strong></p>
<p>管事的人必须做出最终决断，即便其他人更喜欢另一个方案。</p>
<p><strong>好决策需要的不是共识，而是承诺。</strong></p>
<p>在践行“我不同意，但我会配合你”的原则时，尤为重要的是，公司需要把最后的决策向参与的每一个人解释清楚。只有“决策—执行”是不够的，应该是“决策—解释—执行”。</p>
</blockquote>
<p>完成比完美更重要</p>
<blockquote>
<p>你没法在每件事情上都力争完美。<strong>知道何时该接纳“足够好”，你才有机会在关键时刻来临之时绽放出真正的光彩。</strong></p>
<p>与其把无限精力投入每个细节，我们会<strong>花大量精力甄选</strong>：哪些是真正重要的事，哪些还算重要，哪些一点儿都不重要。<strong>甄选环节最需要高质量地完成。</strong></p>
</blockquote>
<p>逐渐聚焦</p>
<blockquote>
<p>工作中时不时会有激动人心的新想法冒出来, 要抗拒它们的诱惑简直是不可能的。可是，<strong>如果你真想往前走，就必须学会聚焦。</strong>[我真的是容易分心啊]</p>
<p>6周一个项目原则.  头一两周用来澄清未知，验证假设。在这个阶段，概念碰触到了现实，如果它合理，就会站得住脚，如果不合理，就会碎裂掉。</p>
<p>一旦最初的探索期过去，<strong>每一周都应该离“完成”的目标更近一步，而不是更远一点。</strong>下定决心把任务完成，一点点把想法实现，之后你肯定有机会折返的——但前提是你得真的把这事做完。</p>
</blockquote>
<p>“无为”又何妨？</p>
<blockquote>
<p>有时候，你必须挑战一些显而易见的道理。有时候，你必须明白，投入了时间未必一定会带来收益。“无为”可能是最艰难的选择，但同时也是最强有力的选择。</p>
</blockquote>
<p>最糟实践</p>
<blockquote>
<p>每个成熟的行业里都充斥着铺天盖地的“最佳实践”。</p>
<p>然而，这里头有太多不仅仅是扯淡，而且还很可能是你能做的最糟的事。</p>
<p>找到最适合自己的方法，做下去就行了。创造属于自己的经验和行为模式，至于这些做法对别人来说算不算最佳实践？管它呢。</p>
</blockquote>
<p>多一事不如少一事</p>
<blockquote>
<p>想要完成更多事？唯一的办法就是<strong>少干点</strong>。</p>
<p><strong>说“不”是收回时间的唯一方式。</strong></p>
<p>别给自己排上12件任务，然后把它们的次序摆弄来摆弄去，企图找到一个效率最高的排列组合；你也用不着设定计时器，闹铃一响就赶紧换下一件事做。把12件事删掉7件，你就有时间做余下的5件了。这不叫时间管理，这叫任务精简。其他的一切秘诀都是忽悠人的。</p>
<p>最徒劳的莫过于高效地做完全没必要做的事。</p>
</blockquote>
<p>魔力数字3</p>
<blockquote>
<p>Basecamp的几乎所有产品都是由3个人组成的团队完成的。</p>
<p>我们不会投入更多人手来解决问题，而是<strong>把问题精简到能被3人小组承担并完成的程度</strong>。</p>
<p>3令你诚实。它用正确的方式笼住你的野心。它会要求你权衡、折中。最为重要的是，3能减少沟通中的误会，增进协作效率。</p>
</blockquote>
<p>“不”的价值</p>
<blockquote>
<p>知道自己该对什么说“不”，胜过知道该对什么说“是”。你要明白“不”的价值。</p>
</blockquote>
<h4 id="深入思考业务"><a href="#深入思考业务" class="headerlink" title="深入思考业务"></a>深入思考业务</h4><p>冒险不等于鲁莽</p>
<blockquote>
<p>冒险不等于鲁莽，<strong>你并不会因为把自己或公司置于毫无必要的险境而变得更加勇敢。</strong>聪明的赌局是，万一局面跟你设想的不一样，你还可以翻盘重玩一遍。</p>
</blockquote>
<p>季节轮转</p>
<blockquote>
<p>你用相同的方式、相同的步调，做着相同的事情，时间一长，<strong>单调的感觉就会反噬</strong>。[要学会体察自己的感受, 学会保护自己不被单调反噬]</p>
<p><strong>用工作时长、任务难度，甚至专门的福利来强调季节更替的感觉吧</strong>，想些办法来打破一成不变的单调感受。</p>
</blockquote>
<p>利润才是硬道理</p>
<blockquote>
<p>我们一直有意识地控制着发展的步伐，不要一下迈得太大。</p>
<p>我们一直严密关注着成本，并且绝对不做可能会导致公司出现赤字的事情。</p>
<p>利润意味着你有思考的时间，有探索的空间。它意味着你可以掌控自己的命运和时间表。</p>
</blockquote>
<p>故意放弃 [这个真的很独特]</p>
<blockquote>
<p><strong>不敢失去的客户是最糟的客户。</strong></p>
<p>今天，Basecamp软件的价格是每月99美元，一视同仁。[牛逼啊, 极少有公司敢这么做]</p>
<p>按人数收费的问题在于，它会把你最大的客户变成最好的客户。<strong>如果你没有全然的控制力，金钱就会产生影响</strong>。而这也决定了你要把时间花在谁身上。一旦金钱流动起来，你不可能避开这些压力，<strong>唯一的办法就是把水龙头关上。</strong></p>
<p>成为一家冷静的公司，关键就在于想清楚你是谁、你想服务谁、你想对谁说“不”，并由此做出决策。</p>
</blockquote>
<p>发布，然后学习</p>
<blockquote>
<p>如果你想知道自己的产品究竟怎样，那你就得把它发布出去。</p>
<p>尽你的最大努力去做，相信你的作品，然后发布出去，你就能得到实实在在的答案了。</p>
<p>真实的市场，那里是你唯一能寻获真相的地方。</p>
<p>你会从真正需要你的产品的真实用户那里，得到真实的看法与答案，并以此为基础做迭代、改进，发布，然后学习。</p>
</blockquote>
<p>别做承诺</p>
<blockquote>
<p>从Basecamp初创时起，我们就很不愿意做出产品改进的承诺。<strong>我们向来希望客户能根据现在买到的正在使用的版本来判断产品的好坏</strong>，而不是某个“有可能会”在日后推出的、想象出来的版本。</p>
<p>承诺就像债务一样，会堆积起来，还会产生利息。</p>
</blockquote>
<p>掌控变化</p>
<blockquote>
<p>人们不喜欢的是被迫改变——在一个并非由他们主动选择的时间点上，发生了他们并未主动要求的改变。</p>
<p>当一个新产品突然被甩到他们面前时，你眼中的“全新升级版”，在他们看来很可能变成“什么破玩意儿”。[哈哈]</p>
<p>我们花了很长时间，绕了很多弯路，才领悟到这个关于销售的核心真理：<strong>把新产品卖给新客户，让老客户留着他们原有的东西</strong>。这就是保持安宁和冷静的方法。</p>
<p>履行原有的约定，维持老产品运转，这些不是没有成本的。但这就是拥有光辉历史的代价，这就是成功的代价——你取得了相当大的成功，以至于客户在你做出最新的产品之前就已经喜欢你了。</p>
</blockquote>
<p>创业容易守业难</p>
<blockquote>
<p>越往前走，越艰难，最容易的就是第一天。这就是关于创业的暗黑小秘密。</p>
<p>如果你明白未来可能是什么样子的，你就能在头脑中演练，在风雨袭来之前做足准备。关键就是你设下了什么样的期望。[自证预言吗?]</p>
</blockquote>
<p>美好的旧时光</p>
<blockquote>
<p>如果“美好的旧时光”那么美好，我们就尽最大努力留在那个阶段，维持一个可持续的、可管理的规模。我们依然会增长，但要缓慢，并且可以掌控。我们要留在美好的时光里——而且不需要那个“旧”字。</p>
<p><strong>在顺境中收窄</strong>，这是一家冷静的、赢利的独立公司的奢侈。</p>
</blockquote>
]]></content>
      <categories>
        <category>Reading</category>
      </categories>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>shell入坑笔记</title>
    <url>/posts/notes-of-shell-programming-in-unix-linux-and-osx/</url>
    <content><![CDATA[<p>算是<a href="https://www.amazon.com/Shell-Programming-Unix-Linux-Developers-ebook/dp/B01L480ILM">《Shell Programming in Unix, Linux and OS X》forth edition</a>的读书笔记了。</p>
<p>如果想要更快入坑，强烈推荐Derek Banas 的1小时视频 <a href="https://www.youtube.com/watch?v=hwrnmQumtPw&list=PLwidFWzbt81iYkUtN1MXxb7htI48h_MMp&index=3&t=0s">Shell Scripting Tutorial</a>。</p>
<span id="more"></span> 

<h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><p>shell是什么？</p>
<blockquote>
<p>shell is simply a program that reads in the commands you type in and converts them into a form more readily understood by the system.</p>
</blockquote>
<p>就是一个程序program，详细来说，就是读取用户输入的命令，将其转换成系统更容易理解的形式。nothing more, nothing less.</p>
<p>shell‘s responsibilities：</p>
<ul>
<li>Program execution</li>
<li>variable and filename substitution</li>
<li>I/O redirection</li>
<li>Pipeline hookup</li>
<li>Environment control</li>
<li>Interpreted programming language</li>
</ul>
<h4 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h4><p>一些基础的命令，比如：</p>
<ul>
<li><p>date</p>
</li>
<li><p>who</p>
</li>
<li><p>echo</p>
</li>
<li><p>ls</p>
</li>
<li><p>cat</p>
</li>
<li><p>wc：统计文件字数等</p>
<p>wc 有三个常用的option，也很好记。-l :统计行数(line), -c 统计字符数（char)， -w 统计字数(word)</p>
<p>当wc不带option时，会输出line，char, word的统计数</p>
</li>
<li><p>cp</p>
</li>
<li><p>mv</p>
<p>cp,mv有一个需要注意的地方，当目标文件已经存在时，会被替换。比如已有文件old_file，执行：</p>
<pre><code class="shell">cp file1 old_file
# 或者
mv file1 old_file
</code></pre>
<p>都会导致原来存在的old_file文件被覆盖掉。</p>
</li>
<li><p>rm</p>
</li>
<li><p>pwd</p>
</li>
<li><p>cd</p>
</li>
<li><p>mkdir，rmdir</p>
<p>rmdir 删除的文件夹，需要是空的文件夹，不然会报错。一般使用<code>rm -r dir</code></p>
</li>
<li><p>ln</p>
<pre><code class="shell">ln from to
</code></pre>
<p>建 symbolic links：</p>
<pre><code>ln -s from to
</code></pre>
<p>Symbolic link 与普通link的区别是，symbolic link 指向原始文件，如果原文件被删除，link后的文件也就无效了，因为创建的link文件就是一个指向原文件的link而已。但是普通的link在原始文件被删除后，依然存在，也依然有效。</p>
</li>
<li><p>Standard input &amp; output redirection</p>
<p>标准输入重定向使用 <code>&lt;</code>, 输出重定向使用 <code>&gt;</code>:</p>
<pre><code class="shell">who &gt; users
wc -l &lt; users
# 输出
5
</code></pre>
<p>如果是向文件中追加内容，使用<code>&gt;&gt;</code>:</p>
<pre><code class="shell">echo hello &gt; test
echo world &gt;&gt; test
cat test
# 输出
hello
world
</code></pre>
</li>
<li><p>standard error redirection</p>
<p>标准错误重定向，使用<code>command 2&gt;file</code>, 在一些脚本里面会可能会看到这样的命令：</p>
<pre><code class="shell">source ~/.bash_profile 2&gt; /dev/null 
</code></pre>
<p>这里<code>/dev/null</code>是系统的”garbage can”，你可以把它想象成是一个黑洞，任何不需要输出的内容都可以扔进去。</p>
<p>其他比如：</p>
<pre><code class="shell">&amp;&gt;/dev/null # 标准输出和错误都重定向到/dev/null
echo &quot;errors&quot; &gt;&amp;2 #将标准错误重定向到STDERR指定的文件
curl -A curl -s github.com &gt; /dev/null 2&gt;&amp;1 #将标准错误重定向到标准输出，然后扔给/dev/null
</code></pre>
</li>
<li><p>命令后台执行</p>
<p>使用&amp;， 例子:</p>
<pre><code>sort bigdata &gt; out &amp;
</code></pre>
</li>
<li><p>ps</p>
<p>查看系统进程情况。</p>
</li>
</ul>
<h4 id="常用tools"><a href="#常用tools" class="headerlink" title="常用tools"></a>常用tools</h4><p>之前写过一篇，详细介绍cut， sed, tr, paste 的使用，这里略过这四位爷。</p>
<ul>
<li><p>cut 「略」</p>
</li>
<li><p>paste「略」</p>
</li>
<li><p>sed「略」</p>
</li>
<li><p>tr「略」</p>
</li>
<li><p>grep</p>
<p>查找任何匹配指定模式的内容。</p>
<p>基本样式：</p>
<pre><code class="shell">grep pattern files
</code></pre>
<p>例子：</p>
<pre><code class="shell"># 找 puma
ps | grep puma 

# 从 checklist 中 找 food
grep food checklist

# pattern最好套上单引号，比如
# 从 checklist 中 找 * 字符，如果不使用单引号，则*会先被执行成当前目录下的文件列表，然后同checklist 一起作为参数传给grep

grep &#39;*&#39; checklist
</code></pre>
<p>grep常用的options：-v,-l, -n</p>
<p>-v:输出不匹配pattern的内容(reverse)</p>
<p>-l:查找包含匹配pattern的文件时，只输出文件名，而不输出相应的文件内容。【看例子吧，表达的不是很清楚】</p>
<p>-n:输出结果中，将匹配到的行数也一并输出</p>
<p>例子：</p>
<pre><code class="shell">cat students
# 输出
张三
李四
王五
赵六

# 输出不匹配张三的其他内容
grep -v &#39;张三&#39; students
# 输出
李四
王五
赵六

#  输出以s开头的文件中，包含张三的文件名
grep -l &#39;张三&#39; s*
# 输出
students

# 输出中带有张三所在的行数
grep -n &#39;张三&#39; students
# 输出
1:张三
</code></pre>
</li>
<li><p>sort</p>
<p>排序，顾名思义。</p>
<p>例子：</p>
<pre><code class="shell">sort students
</code></pre>
<p>一些常用的option: -u, -r,-o,</p>
<p>-u: 表示uniq, 所以 <code>sort -u</code> = <code>sort | uniq</code></p>
<p>-r: 表示reverse，降序排列。</p>
<p>-o:将排序后的结果输出到指定的文件中</p>
<p>-k2n:当存在多列时，指定跳过第一列，以第二列来排序，-k10n，则表示以第10列来排序</p>
<p>例子：</p>
<pre><code class="shell">cat numbers
# 输出
22Charlie
12Emanuel
43Fred
90Lucy
33Ralph
44Tony
44Tony

sort numbers
# 输出
12Emanuel
22Charlie
33Ralph
43Fred
44Tony
44Tony
90Lucy

sort -u numbers
# 输出
12Emanuel
22Charlie
33Ralph
43Fred
44Tony
90Lucy

sort -ur numbers
# 输出
90Lucy
44Tony
43Fred
33Ralph
22Charlie
12Emanuel

cat food
# 输出
pizza    4    good
chesses    5    not so bad
coco    10    great!
chips    99    yeah!
sweets    9    I like them!

sort -k2n food
# 输出
pizza    4    good
chesses    5    not so bad
sweets    9    I like them!
coco    10    great!
chips    99    yeah!
</code></pre>
</li>
<li><p>uniq</p>
<p>去重。</p>
<p>基本样式：</p>
<pre><code class="shell">uniq in_file out_file
</code></pre>
<p>例子：</p>
<pre><code class="shell">cat numbers
# 输出
22Charlie
12Emanuel
43Fred
90Lucy
33Ralph
44Tony
44Tony

uniq numbers
# 输出
22Charlie
12Emanuel
43Fred
90Lucy
33Ralph
44Tony
</code></pre>
<p>常用的option：-d, -c</p>
<p>-d: 列出重复的行</p>
<p>-c: 列出每一行出现的次数</p>
<p>例子：</p>
<pre><code class="shell">uniq -d numbers
# 输出
44Tony

uniq -c numbers
# 输出
1 22Charlie
1 12Emanuel
1 43Fred
1 90Lucy
1 33Ralph
2 44Tony
</code></pre>
</li>
</ul>
<h4 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h4><pre><code>* :匹配0或者多个字符
.*:匹配0或者多个任意字符
? :匹配单个字符
[0-9] :匹配0-9的单个字符
[!a] :匹配除a以外的单个字符
^:行首第一个字符
$:行尾最后一个字符
\&#123;min, max\&#125;: 匹配数量，比如/[a-z]\&#123;4,6\&#125;/，匹配4到6个小写字母组成的字符串,或者/[a-z]\&#123;4\&#125;/，匹配4个小写字母组成的字符串
\(...\): 保存匹配项，并将结果依次保存在register1, register 2...比如/^\(.\).*\1$/，表示匹配所有第一个和最后一个字符相同的行
</code></pre>
<h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><ul>
<li>变量名由字母，数字，下划线构成</li>
<li>变量赋值时，<code>=</code>前后不可有空格，未赋值时，默认是null</li>
<li>shell没有data type的概念，故变量没有类型，一律作为字符串处理</li>
</ul>
<p>引用变量时，使用$variable，注意，<strong>shell performs variable substitution before it executes commands.</strong></p>
<pre><code class="shell">number=99
echo There are $number cups of tea on the table.
</code></pre>
<p>内置的整型计算（integer Arithmetic）：</p>
<pre><code>$((express))
</code></pre>
<p>这里express只能包含数字，算术操作符和变量。</p>
<p>与之相似的有 <code>expr</code> command。</p>
<p>例子：</p>
<pre><code class="shell">a=1
echo $a
# 输出
1

: $(( a = a + 1)) # : 表示空命令，执行$((a = a + 1))，但不输出结果
echo $a
# 输出
2

echo $(( 100 * 2 ))
# 输出
200

echo $(( a &lt; 1 )) # false 为 0，true 为 1
# 输出
0

echo $(expr $a + 1)
# 输出
2

echo $(expr 9 + 9)
# 输出
18

echo $(expr 9 \* 9)  ## 注意*用了反斜杠\, 不然shell会将*解析成当前目录下的文件列表，造成语法错误。
# 输出
81
</code></pre>
<p>不过expr 更常用的操作是<code>expr expr1 : expr2</code>,  其中，expr2 是一个正则表达式，该操作用于查找expr1中匹配expr2模式的字符数量。</p>
<p>例子：</p>
<pre><code class="shell">expr &quot;hello&quot; : &quot;.*&quot;
# 输出
5

expr &quot;hello&quot; : &quot;[A-Z]*&quot;
# 输出
0
</code></pre>
<h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p>每当执行一个shell程序时，shell会自动将传入的参数依次存储在特殊的变量$1, $2,  $3…..中，这些特殊的变量又称为positional Params。如果需要引用的参数是第10，11….,需要使用<code>$&#123;n&#125;</code>，比如<code>$&#123;11&#125;</code></p>
<p>其他一些与参数有关的变量：</p>
<p>$*: 所有参数列表。如果是”$*“ , shell 会将”$*“ 替换成$1, $2 ……..</p>
<p>$@： 同 $*, 唯一的区别是，shell 会将”$@” 替换成”$1”, “$2” …….</p>
<p>$#: 参数的个数 </p>
<p>看例子：</p>
<p>现有shell文件<code>args.sh</code>包含以下内容：</p>
<pre><code class="shell">#!/usr/bin/env sh

echo $# arguments passed
echo the first argument is $1

# $@ vs $*
for arg in &quot;$@&quot;
do
    echo $arg
done

for arg in &quot;$*&quot;
do
    echo $arg
done
</code></pre>
<p>执行该文件：</p>
<pre><code class="shell">sh args.sh a b c d e f
# 输出
6 arguments passed
the first argument is a
a
b
c
d
e
f
a b c d e f
</code></pre>
<p>这里，”$*” 循环时，将所有的参数一起输出了。</p>
<p>如果for循环中的”$*”， 替换成$*， 则输出结果同$@。</p>
<p>参数操作中，可能会涉及到shift命令，用于从左边移除positional parameters， 队列出栈。$2 的值被赋给了$1，以此类推。</p>
<p>修改上面的<code>args.sh</code>文件：</p>
<pre><code class="shell">#!/bin/bash

echo $# arguments passed
echo the first argument is $1
shift
echo $# arguments passed
echo the first argument is $1
shift
echo $# arguments passed
echo the first argument is $1
shift
echo $# arguments passed
echo the first argument is $1
shift
</code></pre>
<p>执行：</p>
<pre><code class="shell">sh args.sh a b c d
# 输出
4 arguments passed
the first argument is a
3 arguments passed
the first argument is b
2 arguments passed
the first argument is c
1 arguments passed
the first argument is d
</code></pre>
<p>参数其实也是变量，参数的引用，赋值和替换还有一些特殊用法，来看看：</p>
<p>${params}:  直接返回params的值</p>
<p>${params:?value}： 如果params不是null，返回params，否则将value写入标准错误，然后退出程序，如果value为空，则直接输出标准错误信息。</p>
<p>${params:-value}：如果params不是null，返回params，否则返回value</p>
<p>${params:=value}：同{params:-value}，唯一的区别是value会被赋值给params</p>
<p>${params:+value}：${params:-value}的反面，如果params不是null，返回value，否则返回params(null)，也就是substitute nothing.</p>
<p>此外，还有一些特殊点的：</p>
<pre><code>$0: 当前执行脚本的文件名

$!: 最后运行的命令的后台PID

$&#123;#variable&#125;: 返回variable的值的长度，如果variable是数组，返回数组的长度，若是字符串则返回所含字符个数。
</code></pre>
<h4 id="双引号单引号etc"><a href="#双引号单引号etc" class="headerlink" title="双引号单引号etc"></a>双引号单引号etc</h4><p>单引号: 出现在单引号内的所有的特殊字符都会被忽略</p>
<p>双引号: 除$ , \, `` 之外的所有特殊字符都会被忽略。</p>
<p>反斜杠：紧随其后的字符不会被解析</p>
<p>命令替换 command substitution: ``，等同于<code>$()</code></p>
<p>看例子，一目了然：</p>
<pre><code class="shell">x=5

echo &#39;$x&#39;
# 输出
$x

echo &quot;$x&quot;
# 输出
5

echo \$x
# 输出
$x

eval echo \$x   # eval: scans twice
# 输出
5

echo date
# 输出
date

echo `date`
# 输出
Thu Sep 5 18:37:43 CST 2019

echo $(date)
# 输出
Thu Sep 5 18:37:43 CST 2019

filecount=$(ls | wc -l | sed &#39;s/ //g&#39;)
echo $filecount
# 输出
28
</code></pre>
<h4 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h4><p>主要涉及if 和 case的用法。</p>
<p>if的一般模式：</p>
<pre><code class="shell">if command1
then
    command2
    ......
else
    command3
    ......
fi
</code></pre>
<p>在使用if 前，先看如何获取exit status 以及判断条件时所用的test 命令。</p>
<p>通过 $? 可以获取最后一次命令的exit status，运行脚本时，$?默认返回最后一次命令的状态。但你也可以直接使用 <code>exit n</code> 来退出当前程序 ，这里 n 是 0～255之间的整数，0表示程序成功。</p>
<p>而test命令是shell 的一个内置命令，基本模式 :</p>
<pre><code class="shell">test expression
</code></pre>
<p>其中 expression 表示需要测试的条件。</p>
<p>比如：</p>
<pre><code class="shell">x=1
test $x = 1
echo $?
# 输出
0
</code></pre>
<p>这里最好是给$x 包上””，如果x没有被赋值，<code>test $x = 1</code>会出现语法错误。「因为shell会替换$x 为 null，然后传给test 的只有两个参数：= 和1，导致语法错误。」</p>
<p>看个例子感受下：</p>
<pre><code class="shell">name=
test $name = &#39;Ruby&#39;
# 输出
parse error: condition expected: =

blanks=&quot;  &quot;
test -z &quot;$blanks&quot; # 判断是否是null，不是则返回true(0)，否则返回false(1),  -z: is null,length zero
echo $?
# 输出
1

test -n &quot;$blanks&quot; # 判断是否不是null，不是则返回true(0)，否则返回false(1), -n: not null
echo $?
# 输出
0
</code></pre>
<p>test 的另一种样式长这样：</p>
<pre><code>[ expression ]
</code></pre>
<p> 所以 if  后面出现的那些，其实都是test 命令，是不是有种顿悟的错觉？</p>
<p>这里注意[[]] 和[] 的区别，在流程控制中， [[]] 中允许直接使用 || ，&amp;&amp; 等逻辑符号。但在 [] 可以使用 -a(and)，-o(or)</p>
<p>举个例子：</p>
<pre><code class="shell">#!/bin/bash

x=2
if [ &quot;$x&quot; -ge 2 -a &quot;$x&quot; -le 3 ] 
then
    echo &quot;x is between 2 and 3.&quot;
fi

if [[ &quot;$x&quot; -ge 2 &amp;&amp; &quot;$x&quot; -le 3 ]]
then
    echo &quot;x is between 2 and 3.&quot;
fi
</code></pre>
<p>但一般不推荐在[]中使用-a, -o，多使用 [ p ] &amp;&amp; [ q ] 或者 [ p ] || [ q ] 。</p>
<p>看一个判断文件的例子：</p>
<pre><code class="shell">#!/bin/bash

file1=&quot;./test_file1&quot;

if [ -e &quot;$file1&quot; ]; then
    echo &quot;$file1 exists&quot;
elif [ -f &quot;$file1&quot; ]; then
    echo &quot;$file1 is a normal file&quot;
elif [ -r &quot;$file1&quot; ]; then
    echo &quot;$file1 is readable&quot;
elif [ -w &quot;$file1&quot; ]; then
    echo &quot;$file1 is writable&quot;
elif [ -x &quot;$file1&quot; ]; then
    echo &quot;$file1 is executable&quot;
elif [ -d &quot;$file1&quot; ]; then
    echo &quot;$file1 is a directory&quot;
elif [ -L &quot;$file1&quot; ]; then
    echo &quot;$file1 is a symbolic link&quot;
elif [ -p &quot;$file1&quot; ]; then
    echo &quot;$file1 is a named pipe&quot;
elif [ -S &quot;$file1&quot; ]; then
    echo &quot;$file1 is a network socket&quot;
elif [ -G &quot;$file1&quot; ]; then
    echo &quot;$file1 is owned by the group&quot;
elif [ -O &quot;$file1&quot; ]; then
    echo &quot;$file1 is owned by the userid&quot;
fi
</code></pre>
<p>再来看case。</p>
<p>一般模式：</p>
<pre><code class="shell">case value in
pattern1)    command1
                    ......
                    command;;
pattern2)    command2
                    ......
                    command;;
.......
patternn)    commandn
                    ......
                    command;;
esac
</code></pre>
<p>这里pattern用的是正则的东西。</p>
<p>pattern也可以用 | 来表示逻辑或，比如pat1 | pat2 | …..|pat-n，表示匹配 pat1,pat2, ….pat-n 中任一个即可。</p>
<p>看个例子：</p>
<pre><code class="shell">cat greetings
# 输出
#!/bin/bash

hour=$(date +%H)

case &quot;$hour&quot;
in
    0? | 1[01]) echo &quot;Good morning&quot;;;
    1[2-7]) echo &quot;Good afternoon&quot;;;
    *) echo &quot;Good evening&quot;;;
esac

sh greetings
# 输出
Good afternoon
</code></pre>
<p>另外需要注意两个特别的constructs:</p>
<p>Command1 &amp;&amp; command2: 只有当command1返回的exit status是0(success)，才会执行command2。</p>
<p>Command1 || command2: 只有当command1返回的exit status是非0(fail)，才会执行command2。</p>
<h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4><p>主要是for, while, until. </p>
<ul>
<li><p>for</p>
<p>基本模式：</p>
<pre><code class="shell">for var in word1, word2...wordn
do
    command1
    command2
    .......
done
</code></pre>
<p>这里举一个有些特殊的用法。for可以省略后面的<code>in word1, word2...wordn</code>:</p>
<pre><code class="shell">for var
do
    command1
    command2
    .......
done
</code></pre>
<p>shell会自动遍历所有的参数。上面的代码等价于:</p>
<pre><code class="shell">for var in &quot;$@&quot;
do
    command1
    command2
    .......
done
</code></pre>
<p>例子：</p>
<pre><code class="shell">cat for_example
# 输出
#!/bin/bash

for arg
do
    echo $arg
done

sh for_example 1 2 3
# 输出
1
2
3
</code></pre>
</li>
<li><p>while</p>
<p>一般模式：</p>
<pre><code class="shell">while commandt
do
    command1
    command2
    .......
done
</code></pre>
<p>例子：</p>
<pre><code class="shell">cat while_example
# 输出
#!/bin/bash

while [ &quot;$#&quot; -ne 0 ]
do
    echo &quot;$1&quot;
    shift
done

sh while_example 1 2 3
# 输出
1
2
3
</code></pre>
</li>
<li><p>until</p>
<p>一般模式：</p>
<pre><code class="shell">until commandt
do
    command1
    command2
    .......
done
</code></pre>
<p>例子：</p>
<pre><code class="shell">cat until_example
# 输出
#!/bin/bash

until [ &quot;$#&quot; -eq 0 ]
do
    echo &quot;$1&quot;
    shift
done

sh until_example 1 2 3
# 输出
1
2
3
</code></pre>
</li>
<li><p>break跳出loop</p>
<p><code>break</code>: 退出当前loop</p>
<p><code>break n</code>：跳出的循环层级，比如:</p>
<pre><code class="shell">for file
do
    while [ &quot;$x&quot; -gt 1 ]
    do
        .....
        if [ -n &quot;$error&quot;]
        then
            break 2
        fi
        ....
    done
  ......
done
</code></pre>
<p>如果error 不为null, for 和while 循环都会退出。</p>
</li>
<li><p>continue跳过</p>
<p>等同于ruby里面的next. 「从起名字的角度看，next比continue要好， next 更能表达出当前iteration后面的命令不再执行的含义，咱直接去下一个iteration。」</p>
</li>
<li><p>loop后台执行</p>
<p>同命令后台执行一样，在loop 的结尾添加 &amp; 即可。</p>
<pre><code class="shell">for file in memo[1-4]
do
    run $file
done &amp;
</code></pre>
</li>
<li><p>getopts</p>
<p>shell内置的command，用来处理命令行参数，后面另起一篇单独说它，这里略过。</p>
</li>
</ul>
<h4 id="read-和-printf"><a href="#read-和-printf" class="headerlink" title="read 和 printf"></a>read 和 printf</h4><ul>
<li><p>read</p>
<p>从终端或者文件中读取数据。</p>
<p>read 命令的exit status 只有当遇到 end-of-file 时才会为非0(fail)。具体而言，如果是从终端读取数据，则当用户按下ctrl+d 时，如果是从文件读取，则是当文件中已经没有数据的时候。</p>
<p>例子：</p>
<pre><code class="shell">cat addi
# 输出
#!bin/bash

while read n1 n2
do
    echo $(( $n1 + $n2 ))
done

sh addi
111 222
# 输出
333
# 使用ctrl + d 退出
</code></pre>
</li>
<li><p>printf</p>
<p>格式化输出。</p>
<p>一般模式：</p>
<pre><code class="shell">printf &quot;format&quot; arg1 arg2 ....
</code></pre>
<p>这块其实蛮复杂的，简单举几个例子：</p>
<pre><code class="shell">printf &quot;This is a number: %d\n&quot; 10
# 输出
This is a number: 10

printf &quot;The octal value for %d is %o\n&quot; 10 10
# 输出
The octal value for 10 is 12

printf &quot;The hexadecimal value for %d is %x\n&quot; 10 10
# 输出
The hexadecimal value for 10 is a

printf &quot;A string: %s and a character: %c\n&quot; hello A
# 输出
A string: hello and a character: A

printf &quot;Just the first character: %c\n&quot; hello
# 输出
Just the first character: h

printf &quot;%.5d %.4X\n&quot; 10 27
# 输出
00010 001B
</code></pre>
</li>
</ul>
<h4 id="exec-与eval"><a href="#exec-与eval" class="headerlink" title="exec 与eval"></a>exec 与eval</h4><p>想起ruby里面的instance_exec, instance_eval……</p>
<p>单独拎出来，是觉得这俩有些傻傻分不清。</p>
<p>eval:  前面的例子中其实有提到它，shell 会在执行前对命令行会多看一眼「可能因为这个命令行长得好看😄」。比如：</p>
<pre><code class="shell">x=1
echo \$x
# 输出
$x

eval echo \$x
# 输出
1
</code></pre>
<p>exec: 用于替换当前的程序，一般模式<code>exec program</code>，当前的进程会被改变，用该program来替换当前的进程。exec还可以用来重定向标准输入输出。</p>
<h4 id="有关debug"><a href="#有关debug" class="headerlink" title="有关debug"></a>有关debug</h4><p>建议在脚本中直接使用<code>set -euxo pipefail</code> 。</p>
<p>set的常用的几个option:</p>
<blockquote>
<p>-x : 开启追踪，类似脚本debug时，添加了+x</p>
<p>-u: 用于处理那些未定义变量。Treat unset variables and parameters other than the special parameters ‘@’ or ‘*’ as an error when performing parameter expansion. </p>
<p>-e: 只要有错就退出程序，终止执行，返回非0值。Exit immediately if a pipeline, which may consist of a single simple command , a list, or a compound command  returns a non-zero status. </p>
</blockquote>
<p>但是set -e 不适用管道命令，解决方法是：set -eo pipefail</p>
<p>综上，完整的处理出错的脚本：</p>
<pre><code class="shell">set -euxo pipefail
</code></pre>
<p>set除了在debug中使用外，还可用于给positional params重新赋值，而它的兄弟unset，用于移除变量在当前环境下的定义(不过unset 对<strong>readonly</strong>的变量无效)：</p>
<pre><code class="shell">set a b c                         # 分别将a,b,c 赋给 $1, $2, $3
echo $1:$2:$3

x=hi
echo $x
# 输出
hi

unset x
echo $x
# 输出
</code></pre>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.amazon.com/Shell-Programming-Unix-Linux-Developers-ebook/dp/B01L480ILM">《Shell Programming in Unix, Linux and OS X》forth edition</a></p>
<p><a href="http://tldp.org/LDP/abs/html/index.html">Advanced Bash-Scripting Guide</a></p>
<p><a href="https://www.youtube.com/watch?v=hwrnmQumtPw&list=PLwidFWzbt81iYkUtN1MXxb7htI48h_MMp&index=3&t=0s">Shell Scripting Tutorial</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>读《重来1》</title>
    <url>/posts/notes-of-rework/</url>
    <content><![CDATA[<p>《重来1》中文版部分内容摘选.</p>
<span id="more"></span>

<p>今天，任何人都可以创业，过去无法企及的工具如今触手可得。</p>
<p>你完全可以在依靠正职工作带来的现金流养活自己的同时，去创立自己的事业。</p>
<p>是时候重头来过了。</p>
<h4 id="卸负"><a href="#卸负" class="headerlink" title="卸负"></a>卸负</h4><p>从错误中学习</p>
<blockquote>
<p>一种普遍的错误认知是：人要从错误中吸取经验教训。</p>
<p>你到底能从错误中学到什么？你能学到的只是不再重蹈覆辙，但这有什么意义呢？你还是不知道下一步该做什么。</p>
<p>相比之下，你更应该从成功中汲取养分。成功才是真正靠得住的教材。做成一件事后，你会知道这条路行得通——然后你就会再次这么做，而下一次，你也许还会做得更棒。</p>
</blockquote>
<p>有关计划</p>
<blockquote>
<p>现在就决定你这周要做什么，不必去管全年的计划。</p>
<p>无计划地工作看上去挺悬，但是盲目遵循不切实际的计划，后果则更可怕。</p>
</blockquote>
<p>小公司与大公司</p>
<blockquote>
<p>小公司并不只是一块跳板。小公司本身就是一个伟大的目标。</p>
<p>只要所运营的公司能够持续发展、保持盈利，不管规模大小，都是值得骄傲的。</p>
</blockquote>
<p>工作狂</p>
<blockquote>
<p>工作狂的行为不但没有必要，而且愚蠢至极。</p>
<p>这种工作状态经不起时间的考验。</p>
<p>如果你只是为工作而工作，那么你就会丧失判断力。你的价值观和决策方式都是扭曲的。你没有能力去判断哪些工作值得做、哪些工作该放弃，最后搞得自己筋疲力尽，而一个筋疲力尽的人是无法作出明智的决定的。</p>
<p>工作狂不是英雄。他们没有力挽狂澜，不过是浪费时间而已。真正的英雄早已想出办法、搞定一切，然后回家了。</p>
</blockquote>
<p>创始人</p>
<blockquote>
<p>每个创立了自己事业的人都是创始人。</p>
<p>你所需要的只是一个创意，加一点点自信，以及一点勇气，就可以启程了。</p>
</blockquote>
<h4 id="行动篇"><a href="#行动篇" class="headerlink" title="行动篇"></a>行动篇</h4><p>什么样的产品值得做?</p>
<blockquote>
<p>只要冲着有价值的方向去努力，要让你的客户说：“这个东西让我的生活变得更美好了。”</p>
<p>最简单直接的办法就是做你自己想用的东西。</p>
<p>这种“解决自己实际问题”的方法最大的优势就在于能让你爱上自己的产品。你十分了解其中存在的问题以及其价值所在。除此之外别无他途。毕竟你（很有可能）会为这件事奋斗很多年，甚至付出余生，所以，最好还是做自己真正关心的东西。</p>
</blockquote>
<p>做点什么</p>
<blockquote>
<p>在你的人生中真正有意义的是你做了什么，而不是你想过什么、说过什么或者计划过什么。</p>
<p>最重要的事情就是起而行之。</p>
<p>真正的问题, 不是创意, 而是执行的好坏.</p>
</blockquote>
<p>“没时间”</p>
<blockquote>
<p>只要你善加利用，时间总是有的，你也根本无须辞职去做什么事情，白天好好上你的班，晚上再来干你自己的私人项目就好了。</p>
<p>当你拥有某种极强烈的渴望时，你就能挤出时间来——不管你身上是否还背负着其他责任。</p>
</blockquote>
<p>立场明确</p>
<blockquote>
<p>起步之后，你必须一直牢记自己到底为什么要做这件事。</p>
<p>你必须心怀信念，要有主心骨，要了解自己到底是为什么而奋斗，并且要让世人明白你的信念。</p>
<p>如果我们的产品不适合于每一个人，没有关系，我们愿意为了那些更加深爱我们产品的客户而放弃另一部分客户。这就是我们的立场。</p>
<p><strong>坚守某种信念并不仅仅是把它写下来。不但要相信它，还要让它成为你的生活方式。</strong></p>
</blockquote>
<p>不筹资</p>
<blockquote>
<p>事实上，不管你创办的是什么类型的企业，都要尽可能少花别人的钱。[个人生活中也是, 少花别人的钱, 更有掌控感], 理由如下:</p>
<ul>
<li>失去控制权: 花别人的钱就得听人家的</li>
<li>“套现离场”的想法会压倒“创建优秀公司”的梦想。</li>
<li>用别人的钱容易上瘾</li>
<li>融资都不是好买卖</li>
<li>筹钱极其费神</li>
</ul>
</blockquote>
<p>再谈需求</p>
<blockquote>
<p>节俭不是罪过。当我们推出第一个产品时，是非常节省的。我们没有自己的办公室，得和其他公司共用办公空间。我们没有一堆服务器，只有一台。我们没有做广告，只是通过网上经验分享来传播。我们没有雇专人来回复客户邮件，公司的创始人亲自答复客户邮件。一切都运作良好。</p>
<p>伟大的公司基本上都起于微末。你的也一样。</p>
</blockquote>
<p>不能只是创业</p>
<blockquote>
<p>无法通往盈利之路的事业不能称为事业，只是嗜好。</p>
<p>创业之初不要有任何依赖思想。</p>
<p>真正的事业永远与现实的问题息息相关，比如说账单和员工薪水。</p>
<p>真正的事业从创始的第一天开始就要求你去操心如何盈利的问题。</p>
<p>真正的事业拒绝创业者用“没关系，创业嘛！”这样的借口去掩盖深层次的问题。</p>
</blockquote>
<p>破釜沉舟</p>
<blockquote>
<p>你需要的是承诺策略，而不是退出策略。</p>
<p>如果你的整个策略都是建立在逃跑的基础上，那么你一开始就不会走得太远。</p>
<p>当你怀着被收购的想法去创业时，你强调的重点就是错误的。你关注的是谁会来收购你，而不是如何让客户喜欢上你。为这种事情去操心简直就是大错特错。</p>
</blockquote>
<p>轻装上阵</p>
<blockquote>
<p>一定要轻装上阵。</p>
<p>你始终保持轻装上阵，就能快速作出改变。</p>
</blockquote>
<h4 id="进阶篇"><a href="#进阶篇" class="headerlink" title="进阶篇"></a>进阶篇</h4><p>条件受限是好事</p>
<blockquote>
<p>有限的资源能激发你在现有条件下完成任务的能力。没有一点浪费的空间，一切都需要你发挥最大的创造力。</p>
<p>因此, 在你高唱“始终不够”的悲观论调之前，请试试看自己利用现有的资源能走多远。</p>
</blockquote>
<p>从核心出发</p>
<blockquote>
<p>当你开始着手做一件事情时，总有一些力量将你拉向不同的方向。这当中包括你能做的、你想做的以及你必须做的事情。<strong>你应该从必须做的事情开始下手</strong>，即从核心出发。</p>
<p>寻找中心的方法就是问自己：“如果把这样东西去掉了，我还做得成买卖吗？”</p>
<p>当你发现事业的中心时，你就会恍然大悟，然后<strong>你应该把所有的精力都集中在这个中心上</strong>，把它做得越强越好。这是你未来成功的基础。</p>
</blockquote>
<p>不要过早关注细节</p>
<blockquote>
<p>你只有在真正开始后，才能认清到底哪些细节才是最重要的。</p>
<p>不要操之过急。</p>
<p>先把基础打牢，再去操心其他的事情。</p>
</blockquote>
<p>决定就是进步</p>
<blockquote>
<p>只要有足够的动力和士气，就要趁热打铁，积极决策，果断推进，现在就把事情做出来。</p>
<p>如果当时的决定不合适，以后还可以改。[但是有些决定要慎重, 错误的成本太TM高了]</p>
</blockquote>
<p>当好博物馆长</p>
<blockquote>
<p>真正成就一个伟大博物馆的，是那些不在墙上展出的物品。</p>
<p>要做一个称职的博物馆长，坚守真正重要的东西。把其他东西拿下来，直到留下最重要的作品。</p>
</blockquote>
<p>关注不变因素</p>
<blockquote>
<p>你的事业的核心应该建立在不变的基础之上。你应该投资那些人们现在需要并且10年后仍然需要的事物。</p>
<p>[play long term game with long term people]</p>
</blockquote>
<p>副产品</p>
<blockquote>
<p>当你去做某件事时，总会同时做出其他的东西来。你不会只做一样东西。副产品无处不在。一个善于观察、富于创意的商业头脑能够注意到这些副产品，并从中挖掘出商机。</p>
<p>对于创办公司和开发软件这项实际工作来说，从中获取的经验就是副产品。</p>
<p>你现在正在阅读的这本书，也是一个副产品。[哈哈]</p>
</blockquote>
<p>立马上线</p>
<blockquote>
<p>一旦你的产品实现了基本的功能，就要迅速把它亮出来。</p>
<p>不要误解，这种做法不是偷工减料。你要做的仍然是件很棒的东西。这个做法只是告诉你，最有效的成功方法就是不断尝试。不要再臆测到底会发生什么事了，到现实中去寻找答案吧。</p>
</blockquote>
<h4 id="效率篇"><a href="#效率篇" class="headerlink" title="效率篇"></a>效率篇</h4><p>拿出凿子开始实干</p>
<blockquote>
<p>要尽一切可能去掉那些抽象的东西。</p>
<p>如果你一定要说明某事，那就务实一点。不要描述它长什么样子，直接画出来；不要解释它的声音如何，直接哼出来。</p>
</blockquote>
<p>退出的理由</p>
<blockquote>
<p>当你埋头干你自己认为应该干的事情时,  你得问问自己为什么要做这件事。是为谁做的？谁会从中受益？任务背后的动机是什么？了解了答案就有助于你理解这个工作本身的意义。</p>
<p><strong>无论何时，你都要问自己：“有没有更简单的办法？”</strong></p>
<p>开始一项工作之前, 问问自己:</p>
<ul>
<li>有其他更值得做的事情吗？有什么事情会因为你手头上的工作而被耽搁了？</li>
<li>这样做值吗？你现在正在做的事情是否真的值得去做？</li>
</ul>
</blockquote>
<p>打岔是效率的敌人</p>
<blockquote>
<p>长时间的单独工作能使你达到最高效率。</p>
<p>很多小事情看上去无害, 但是这些事情在腐蚀你的生产力.</p>
<p>你的生活被各种干扰包围着，只有你自己才能去发起反击。</p>
</blockquote>
<p>刚刚好就是真的好</p>
<blockquote>
<p><strong>我们总能用简单平常的方法去解决问题。</strong></p>
<p>柔道讲究的就是以小搏大，不论何时，只要遇到障碍，争取找出一个类似柔道的解决方法。</p>
<p>当找到合适的解决办法后，就用它了。</p>
<p>以后你随时都可以把“刚刚好”变成“特别棒”。</p>
</blockquote>
<p>速战速决</p>
<blockquote>
<p>如果你目前所做的工作无法给你的事业带来动力，那可不是太好。</p>
<p>积累动力的方法就是完成一项任务，然后紧接着去完成下一项任务。</p>
<p>没人愿意被困在一个看不到尽头的任务中。把人困在长达9个月并且毫无成就的项目中，等于是拿钝刀子杀人，迟早会耗尽你全部精力。</p>
<p>有些东西拖得越久，越难完成。</p>
<p>激情来自于做出东西来让人使用。</p>
<p>如果实在躲不掉周期很长的项目，那就试着每周抽出一天时间来（每两周抽出一天也可以）<strong>为阶段性的小胜利来庆祝一下</strong>，制造一点儿激情。</p>
</blockquote>
<p>预估的都是垃圾</p>
<blockquote>
<p>把大项目分解成小任务。越小的任务越容易预计。你可能还是会犯错，但错得肯定不会像预测大项目那么离谱。</p>
<p>不断地把你的计时范围拆分成小块，<strong>把一个长达12周的项目重整成12个耗时1周的小项目</strong>。不要妄自揣测某个任务大概需要30个小时以上的时间来完成，直接把它砍成几个大约6～10小时的小任务。然后一步一个脚印地努力前进。</p>
</blockquote>
<p>更小的待办清单</p>
<blockquote>
<p>长篇任务清单会将你带上愧疚之旅。</p>
<p>我们有一个更好的办法。把长串的清单分解成一堆小任务列表。</p>
<p>在此我们对事务的优先级别也有个小小的建议：不要按照序号或标签来排序。</p>
<p>把看起来最重要的事情放在清单的上端。然后把第二重要的事情放在清单中挨着上端的位置。这样一来，你就能够按照事情的轻重缓急来进行排序，这样就足够了。</p>
</blockquote>
<p>决策宜小不宜大</p>
<blockquote>
<p>我们应该尽量选择作一些能够被有效替换的小决策。</p>
<p>易于实现的目标就是最好的目标。</p>
<p>做小决策意味着一个人深信想要实现远大的目标，最好的办法就是从一件一件做好眼前的小事开始。</p>
</blockquote>
<h4 id="对手篇"><a href="#对手篇" class="headerlink" title="对手篇"></a>对手篇</h4><p>拒绝照搬</p>
<blockquote>
<p>简单复制扼杀了深层的理解——而理解才能激发成长。</p>
<p>原创者为其作品付出的很多努力是外人看不到的。这些都隐藏在表面之下。盲从者是不知其所以然的。复制只是表面上完成了任务，但是这样做无法触及事物的本质，产生不了深层理解，也成就不了未来决策的基础。</p>
<p>你可以受别人影响，但不要去剽窃。</p>
</blockquote>
<p>产品去商品化</p>
<blockquote>
<p><strong>让你自己成为你的产品或服务的一部分。</strong></p>
<p>将你独一无二的想法注入你的产品中，让它与众不同。把它变成一件别人做不到的东西。</p>
<p>竞争者们是无法复制你的产品中的独特性的。</p>
</blockquote>
<p>给竞争力做减法</p>
<blockquote>
<p>解决最简单的问题.</p>
<p>把目光放到你自己身上来吧。你自己本身的变化比外界的变化更为重要。当你把时间浪费在关注他人身上时，就没有时间去自我提高了。</p>
<p>你得制定自己的游戏规则，而不是仅仅去做一件稍微好一点的产品。</p>
</blockquote>
<h4 id="进化篇"><a href="#进化篇" class="headerlink" title="进化篇"></a>进化篇</h4><p>对客户说”不”</p>
<blockquote>
<p>坦然些，如果你不愿意迎合某个客户的需求，只要彬彬有礼地解释清楚就可以了。当你花时间解释自己的想法后，人们的谅解能力通常会超出你的想象。你甚至可能会让他们赞同并追随你的思路。</p>
<p>这样做的目标是确保你的产品就是你自己的产品，你是自己产品最忠实的粉丝。</p>
</blockquote>
<p>不攀客户高枝</p>
<blockquote>
<p>小巧、简单、满足基本需要，这就是永恒之道。</p>
<p>为高端客户研发出的新功能也许能满足一批用户，但也可能让我们失去那些还没有入门的用户。吓跑新客户比失去老客户更糟。</p>
<p>要确保你的产品让新客户容易上手。[所以Basecamp后面统一收费, 与使用规模无关]</p>
</blockquote>
<p>便利就好</p>
<blockquote>
<p>长于某些功能的产品，远远看上去肯定不是那么面面俱到。这没什么，毕竟你的目标是与它建立长期关系，而不是“一夜情”。</p>
</blockquote>
<p>不用逐字记录需求</p>
<blockquote>
<p>你的客户就是你的记事本，他们会反复提醒你，会展示给你哪些事情是真正需要去考虑的。</p>
</blockquote>
<h4 id="推广篇"><a href="#推广篇" class="headerlink" title="推广篇"></a>推广篇</h4><p>甘于低微</p>
<blockquote>
<p>现在的你籍籍无名，这是件好事。籍籍无名就是一个绝佳的状态，你要庆幸自己目前还身在暗处。</p>
<p>要充分利用这段时间，这时犯再大的错也没人知晓。</p>
<p>要保持低调，你可以利用这段时间继续调整你的策略，解决纠结的问题、测试各种创意、尝试新事物。</p>
<p>要牢牢记住，一旦你把事业做大、深入人心之后，就不可避免地要走稳健路线。当你成为传奇人物，你就必须保持预见性、建立相容性，你将变得更为保守、更难去冒险。这就是僵化的起点、变革的终点。</p>
</blockquote>
<p>培养自己的拥趸(dun)</p>
<blockquote>
<p>说些什么、写点儿什么、开个博客、整个微博、制作视频——总之，想尽一切办法。大方地分享有价值的信息，你就会慢慢建立起忠实的观众群体。</p>
</blockquote>
<p>普及知识, 赢得竞争</p>
<blockquote>
<p>绝大多数公司都在关注销售或服务，但是从未想过传授知识。</p>
<p>传授客户知识是专属于你的绝佳制胜机会。</p>
</blockquote>
<p>效仿大厨</p>
<blockquote>
<p>向大厨学习吧。他们烹饪美食，所以他们就写了美食书籍。你该做什么呢？你的“秘诀”是什么？你能向世人传授什么实用的、有教育意义的、有进步意义的知识呢？</p>
</blockquote>
<p>转到幕后看看</p>
<blockquote>
<p>只要表达得当，哪怕是最无聊的工作也能变得生动有趣。</p>
<p>让人们走入幕后，能改善你和他们之间的关系。他们会感到与你亲近起来，将你视为一个常人，而不是一个面目模糊的公司。他们将在你的产品中看到你在后台淌下的汗水和付出的努力。他们会对你的工作产生更深刻的理解和更诚挚的感激。</p>
</blockquote>
<p>没人喜欢塑料花</p>
<blockquote>
<p>不要害怕让人看到你的缺点。不完美才真实，真实才能激起人们的共鸣。</p>
<p>你大可直言不讳，畅谈那些别人不愿意讨论的东西。直面你的弱点，向人们展示你最近的工作状况，即使你还没完全搞定它。</p>
</blockquote>
<p>媒体</p>
<blockquote>
<p>做些有意义的事情，要与众不同，确保引人注目，不被遗忘，这样才能达到最大的影响力。</p>
<p>别惦记大牌媒体</p>
</blockquote>
<p>效法药贩子</p>
<blockquote>
<p>要效法药贩子，把你的产品包装成完美的、令人上瘾的、“不能错过”的灵丹，让人浅尝之后都忍不住要拿着真金白银回来向你购买。</p>
<p>你必须得花点工夫，把产品做成小份儿试用装，还得为它准备一份易于阅读理解的产品说明书。这样一来，人们不用花一分钱或浪费太多时间，就能试用你的产品。</p>
<p>只要你有东西可卖，就不要怕给人一点点让其试用。要对自己的产品抱有信心。你应该知道人们会回来购买更多，如果你连这样的信心都没有，只能说明你的产品做得不够好。</p>
</blockquote>
<p>一夜成名只是传说</p>
<blockquote>
<p>把一夜成名的迷梦换成一步一个脚印的成长行动吧。</p>
<p>道路很艰难，但你必须充满耐心。你得用功去做，在遇到伯乐之前，你得努力很长时间。</p>
<p>今天就开始培养你的观众，开始聚集那些对你有兴趣的人，然后一直保持下去。</p>
</blockquote>
<h4 id="招聘篇"><a href="#招聘篇" class="headerlink" title="招聘篇"></a>招聘篇</h4><p>不要提前招人, 放慢招聘脚步.</p>
<p>亲历亲为</p>
<blockquote>
<p>在你亲自尝试做这份工作之前，永远不要雇人去做。</p>
<p>只有这样，你才能了解这项工作的本质。</p>
<p>有时候你可能觉得力有不逮，甚至可能觉得筋疲力尽。这很正常。你可以通过招人来摆脱这种感受，也可以通过学习正确的处理方法来解决问题。先试着学习吧。在最初的运营中付出的所有努力，都会变成无数倍的管理智慧，最终回报给你。</p>
</blockquote>
<p>放弃牛人</p>
<blockquote>
<p>放弃那些你并不需要的牛人，即使你觉得这是个人才。</p>
<p>牛与不牛没有任何意义，不需要就是不需要。</p>
</blockquote>
<p>无关的多年经验</p>
<blockquote>
<p>真正重要的是他们到底做得有多好。</p>
</blockquote>
<p>常规教育不值一提</p>
<blockquote>
<p>马克·吐温: 我从来不把我自己受过的正规学校教育等同于我的受教育程度。</p>
</blockquote>
<p>人人都得干活</p>
<blockquote>
<p>在一个小团队里，你需要的是干活的人，而不是监工。</p>
<p>这就意味着你在招聘中要避免招到监工型的人物，这些人喜欢对别人谆谆教导。</p>
</blockquote>
<p>聘用独当一面的经理人</p>
<blockquote>
<p>独当一面的经理人有自己的目标，并能够坚定地执行这些目标。</p>
<p>你需要那种能够变图纸为实物、并能实干到底的人。</p>
<p>怎样才能找到这样的人才？</p>
<p>方法就是看他们的背景。他们在做其他工作时都有自己独特的基调，他们自己运营过业务，也亲自做过某些项目。</p>
</blockquote>
<p>招聘笔杆子</p>
<blockquote>
<p>如果你准备在一堆人中挑出一个人来做某份工作，那就挑文章写得最好的那个。</p>
<p>一个优秀的写手，其优点并不仅仅在于写作。文法清晰代表思路明晰。优秀的写手都懂得如何与人沟通。</p>
</blockquote>
<p>高手遍布世界各地</p>
<blockquote>
<p>地理上的距离不重要，不管距离多远，你都可以把最好的人才引入你的团队。</p>
</blockquote>
<p>试用期必不可少</p>
<blockquote>
<p>面试的作用毕竟有限，有些人看起来很专业，但做起事来却很雷人。</p>
<p>最好的评估办法就是看他们的实际工作情况。</p>
<p>把他们安排到一个小项目中，哪怕是只有20～40个小时的项目也好。你从中能观察到他们如何决策，你能发现他们如何提问，你能通过他们的实际行动而非口头承诺来对他们进行判断。</p>
<p>翻看作品、阅读简历、约见面试，那是一回事；实际和人搭档干活，那又是另一回事。</p>
</blockquote>
<h4 id="救灾篇"><a href="#救灾篇" class="headerlink" title="救灾篇"></a>救灾篇</h4><p>主动掌控负面新闻</p>
<blockquote>
<p>一旦出了事故，就会有人出来爆料。但如果是由你亲自来说，结果会好得多。</p>
<p>如果你够坦荡，够诚实，够公开，危机应变速度够快，人们就会更加尊重你。不要把头缩回去，也不要苦苦压制坏消息，应该让你的顾客尽可能地拥有知情权。</p>
</blockquote>
<p>速度改变一切</p>
<blockquote>
<p>在客户服务这一领域，最重要的事情就是快速响应。</p>
</blockquote>
<p>如何道歉</p>
<blockquote>
<p>一句真诚的道歉，是要承担责任的。</p>
<p>道歉时要详细解释发生的一切，要说明你将采取什么措施来防止这样的事情再次发生。道歉就是要找到一个办法去纠正错误。</p>
<p>那么最好的道歉方式是什么呢？</p>
<p>没有神奇妙方，任何设计好的答案都会显得俗气、虚伪。</p>
<p>你得在就事论事的基础上进行道歉。</p>
<p>在道歉时，脑子里必须记住的第一条原则就是：<strong>如果换做是你，你会是什么感觉？如果有人对你说这些话，你会相信他们吗？</strong></p>
</blockquote>
<p>让每个人都上前线</p>
<blockquote>
<p>团队中的每一个人都应该直接与客户联系——也许不需要每天如此，但是至少每年得联系几次。</p>
</blockquote>
<h4 id="文化篇"><a href="#文化篇" class="headerlink" title="文化篇"></a>文化篇</h4><p>文化不是由谁创造的</p>
<blockquote>
<p>你创造不了企业文化，企业文化是自然生成的。</p>
<p>企业文化是一贯行为的副产品。</p>
<p>不要过多担心企业文化的事情，不要去强求，你无法给企业安装一种文化。企业文化就像上好的苏格兰威士忌一样，你得给它时间去酝酿。</p>
</blockquote>
<p>员工不是13岁</p>
<blockquote>
<p>他们不会真正一直工作8小时。人们需要开开小差，这有助于打破整日的枯燥单调。花一点点时间上上YouTube或Facebook不会失去什么。</p>
<p>对员工的不信任才是最大的开销。</p>
</blockquote>
<p>发出你的心声</p>
<blockquote>
<p>做真实的你没有什么不好。诚实方为明智之举。你给人家留下的第一印象就是你的言论——为什么要以谎言开局呢？不要害怕做自己。</p>
<p>写东西的时候，不要觉得这是写给天下所有人看的，<strong>只要想着一个人，就为这个人而写</strong>。</p>
</blockquote>
<p>慎用越快越好</p>
<blockquote>
<p>当你事事要求别人“越快越好”时，你就是在表示每件事都是优先级别最高的，如果每件事都是急事，那就没有急事了。</p>
<p>慎用你的紧急命令，留到真正有急事时再说，也就是在那种如果无动于衷就会引起直接的巨大反应情况发生时再说。</p>
</blockquote>
]]></content>
      <categories>
        <category>Reading</category>
      </categories>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>读《为何家会伤人》</title>
    <url>/posts/notes-of-why-family-hurt/</url>
    <content><![CDATA[<p>带着好奇翻了这本书, 被书中某些地方触动到.</p>
<span id="more"></span>

<p>人与人是不同的, 但人与人又都是相似的.</p>
<p>我们都渴望构建亲密关系, 我们也都害怕受伤. 难受的是, 大多数情况下, 我们既受了伤, 又没能构建好亲密关系.</p>
<p>还好, 我们可以自省, 可以改变, 可以进步.</p>
<p>有药, 能治, 不怕 : P</p>
<p>读完后, 按照整本书的结构简单整理了下笔记. 基本为章节摘选. 鉴于自己健忘, 这份笔记也算是给自己时不时提个醒.</p>
<h4 id="夫妻关系是家庭的核心"><a href="#夫妻关系是家庭的核心" class="headerlink" title="夫妻关系是家庭的核心"></a>夫妻关系是家庭的核心</h4><p>伴侣的选择</p>
<blockquote>
<p>人生因为有了选择才有意义。</p>
<p>恋爱是一种特殊的选择。</p>
<p>其主要意义不是让我们找到一个能黏一辈子的伴侣，而是让我们真正明白自己是一个独立的人，伴侣是另外一个和自己一样独立、一样重要的人.</p>
<p>其实，我们无意识中都将恋爱当作了治疗，目的是为了修正我们童年的错误，其表现就是，恋人多数时候都是我们选中的理想父母。理想父母都有一个特点：能给予我们无条件的爱. 在恋爱前期，我们会积极地给予对方无条件的爱，或者用直白的方法，或者用狡猾的方法，总之都会让对方感觉到：不论你做什么，我都会一如既往地爱你，我的爱是没有条件的。获得了足够的无条件的爱之后，我们会变成孩子，恋人也会变成孩子，我们一起退行到童年。</p>
<p>蜜月期过后, 两个人的距离近到不能再近时, 我们就会将恋人当作现实父母，以前对现实父母的那些不满，现在会转嫁到恋人的头上。这是考验一场恋爱的关键时期。要想超越这个艰难时期，最好的情形是，一方面，<strong>我们明白自己的很多不良情绪不是因为现在的恋人才产生的，而是过去所造成的</strong>。另一方面，恋人继续给予我们无条件的爱。</p>
<p>在恋爱中，如果你找到一个“好的客体”，而自己也做了“好的客体”，那么双方就会进一步成长，真正从孩子变成成人，从对父母原型的执着化为对情侣的爱。</p>
<p>婚姻之所以容易成为爱情的坟墓，一个很重要的原因是，婚姻只是我们过去家庭模式的复制。</p>
<p>我们总是在循环，但只要你去努力，就有机会打破这个循环。想要得救, 我们就必须自己去努力. 除了要学习无条件的爱，也要学习分离。</p>
</blockquote>
<p>伴侣之间的理解</p>
<blockquote>
<p>每个人的生命体验最后构成了一个现象场，它就像是一个人认识世界的坐标体系。</p>
<p>如果，<strong>你渴望理解对方，就必须学会放下你的坐标体系，尝试着进入对方的坐标体系</strong>，这是抵达理解的唯一途径。</p>
<p>理解伴侣的三个常见误区:</p>
<ul>
<li><p>揣测</p>
<p>我们常常只知道配偶会“说什么”，但却根本不理解配偶说这些话时的感受。对方怎么感受的，这才是事实，我们要按照对方的感受去理解他。</p>
<p>感受远比所谓的事实更重要，而<strong>在家庭中，理解并接受彼此的感受是最重要的。</strong></p>
<p>相信对方的感觉.</p>
</li>
<li><p>评价</p>
<p><strong>夸奖和批评都是我们的工具，目的是为了控制对方</strong>。对于亲密关系来讲，这是最糟糕的事情了。</p>
<p>评价是阻断交流的最常见原因。</p>
<p>“交流感受”才是配偶、密友等亲密关系进行绝大多数沟通的目的。</p>
</li>
<li><p>出主意</p>
<p>我们容易认为，配偶遇到了问题，需要我们帮助。但实际上，配偶是想交流感受。这种思维上的错位也会惹出很多不愉快。</p>
</li>
</ul>
<p>综上: 亲密关系的一个重要价值就在于<strong>交流并相互理解和接受彼此的感受</strong>。</p>
</blockquote>
<p>家庭规则与工作规则要分开</p>
<blockquote>
<p>工作中的规则是<strong>权力</strong>，其运作机制是竞争与合作、控制与征服。</p>
<p>家中的规则是<strong>珍惜</strong>，能抵达珍惜的途径是理解和接受。</p>
<p>家就是“婆婆妈妈”的地方。家之所以温暖，主要就是因为<strong>家里的成员“婆婆妈妈”，能理解并体贴彼此那些琐细的感受。</strong></p>
<p>不止成功人士会把权力规则带回家，在单位里总是被控制、受人气的人，自己又特别在乎权力，那么，回家以后，就容易把气撒在配偶和孩子身上，并有可能显示出更极端的控制欲望来，这是一种典型的<strong>心理补偿</strong>。</p>
<p>多数的婚姻关系中都存在着“婚姻战争”，双方无论在恋爱阶段多么爱对方，一结婚后就会有意无意地去抢占“制高点”，控制对方并怕被对方控制。这种情况普遍发生在男人身上，因为男人更渴望成功，成功也成为衡量他们价值的标准，而这种衡量势必要与他人作比较。[在外跟同事朋友比, 在家跟老婆比, 累不累?]</p>
</blockquote>
<p>孩子不该是你的最爱</p>
<blockquote>
<p>夫妻关系是家庭的定海神针.</p>
<p>健康家庭的父母，深爱孩子，将他养大，不是为了自己分享这一结果，不是为了永远与孩子黏在一起，而是要<strong>将他推出家门，推到一个更宽广的世界，让他去过独立而自主的生活</strong>。</p>
<p>家庭中居第一位的，不应是亲子关系，而是夫妻关系。</p>
<p>如果亲子关系（包括公婆与丈夫、丈夫与孩子、妻子与孩子）凌驾于夫妻关系之上, 会产生最常见的两种问题:</p>
<ul>
<li>糟糕的婆媳关系</li>
<li>严重的恋子情结</li>
</ul>
<p>这些问题会导致一些不健康的关系模式:</p>
<ul>
<li>烦丈夫, 爱儿子</li>
<li>“没”丈夫, 爱儿子</li>
<li>太愚孝, 轻妻子</li>
</ul>
<p>夫妻关系是家中的 No.1，这是健康家庭的第一定律。</p>
<p>当老人和孩子需要照顾时，我们必须要把更多的资源给他们。但是，我们一定要懂得，配偶才是真正陪伴我们一生的伴侣，才是我们最重要的心理寄托。</p>
</blockquote>
<h4 id="分离是生命永恒的主题"><a href="#分离是生命永恒的主题" class="headerlink" title="分离是生命永恒的主题"></a>分离是生命永恒的主题</h4><p>镜子</p>
<blockquote>
<p>世间的万事万物，都是我们的镜子。你看着它们时，你也在它们的镜面上留下了镜像，由此你也可以看到自己。</p>
<p>妈妈，是我们生命中的第一面镜子。生命的最早期，妈妈注目着婴儿，婴儿就从这面镜子里看到了自己的存在。</p>
<p>妈妈的注目一直在，婴儿就会感觉自己一直存在。若注目时，妈妈与婴儿有共鸣，且带着接纳与喜悦，婴儿就感觉自己的存在是有价值的。</p>
<p>妈妈这面镜子若打开得很少，而且打开时都是儿童在极力讨好魔镜，就易导致一个结果：<strong>一个人对别人的反应极度在意。</strong></p>
<p><strong>一个人太脆弱，很少是宠出来的，而多是幼时没被看见。</strong></p>
<p>在中国，常见情形是，妈妈这面魔镜是否打开，关键是儿童能否让魔镜高兴，因中国的妈妈第一<strong>缺乏尊重孩子感受的意识</strong>，第二即便有这一意识，但<strong>因与自己的感受缺乏链接，而难以给孩子的感受以确认。</strong>这一确认，必须是<strong>身体对身体，心对心</strong>，而不是头脑对头脑，语言对语言。</p>
<p>缺乏存在感的孩子，会更顺父母意，因为他的价值感都有赖于父母乃至社会的认可。</p>
<p>相反，有健康自我的人，他会很爱父母，但他做事情，<strong>首先是从自己的感受出发</strong>，而不是服从父母的语言。</p>
<p><strong>在任何关系中，我的感受能被感受到，这一刻，我存在，你也存在。这一刻，就是爱。</strong></p>
</blockquote>
<p>成为你自己</p>
<blockquote>
<p>父母不要试图扮演孩子的决定者，而应该给予孩子独立探索的自由.</p>
<p>幼小的孩子也一样是一个“成为自己的人”。</p>
<p>喜欢<strong>使用奖罚手段</strong>的父母和老师，都<strong>渴望控制自己的孩子</strong>，让孩子按照自己的意志成长变化，那样孩子就是他们意志的结果，就是他们的作品。但依照摩门教的传说，这就是<strong>行使撒旦之事</strong>。</p>
</blockquote>
<p>分离</p>
<blockquote>
<p>分离和爱同等重要，它们是生命中最重要的两个主题，它们一起作用，让一个人成长，让一个人成为他自己。</p>
<p>不懂得分离的两个人黏在一起，你干涉我的空间，我侵占你的空间，两个人都不能很好地成长。</p>
<p>成熟的分离是一边给予爱，一边坚定地告诉孩子或亲人，你是你，我是我。这样一来，关系仍然亲密，但关系中的两个人都拥有独立而健康的人格。</p>
<p>人的一生中, 会经历三次重大”分离”:</p>
<ul>
<li><p>分娩: 出生</p>
</li>
<li><p>与妈妈”分手”: 婴儿三岁前</p>
</li>
<li><p>与家的分离: 从幼儿园到成人</p>
<p>在与家分离的这个漫长过程中，我们可能会有幸能碰上这样一种人——你认为他们很重要，他们也喜欢你，无条件地尊重你，但同时又不与你黏在一起。这是一种无缘无故的爱，这种爱就仿佛是我们生命中的烛光。给你留下温暖，会让你更相信自己，同时也更相信别人。</p>
</li>
</ul>
</blockquote>
<p>俄狄浦斯期[俄期]</p>
<blockquote>
<p>3~6岁.</p>
<p>要顺利地度过俄狄浦斯期，关键是<strong>夫妻关系要和谐而平衡</strong>。<strong>父母都爱孩子，但他们同时又深深相爱，他们不会因为爱孩子而忽略对配偶的爱。</strong>这样一来，孩子就会懂得，尽管异性父母如此爱他，但强大的同性父母才是异性父母最好的伴侣，而他不过是个孩子。于是，他们会<strong>安心地做孩子</strong>，<strong>享受强大的父母给他们的爱</strong>。同时，他们<strong>努力向同性父母靠拢</strong>，知道只有变得像同性父母一样，才能赢得异性父母更多的爱。</p>
<p>这种心理转变，是男孩成为男人和女孩成为女人的基本动力。</p>
</blockquote>
<p>溺爱的心理真相</p>
<blockquote>
<p>溺爱源自父母的自恋，<strong>溺爱的父母无视孩子真实的成长需要</strong>，而是<strong>将孩子当作自己的另一个“我”</strong>，给予过度满足。可以说，<strong>无限制地给予孩子，其实是在无限制地给予自己。</strong></p>
<p>溺爱是一种懒惰的、不负责任的爱。</p>
<p>孩子是一个独立的人，不是‘父母’的附属品”。</p>
<p>真爱的父母懂得放手，尊重他的独立性，尊重他的自我感觉。</p>
<p>溺爱中长大的孩子, 承受挫折的能力, 会比较弱. 会习惯性地以为，他可以靠别人实现他的愿望。</p>
<p><strong>要尊重一个幼小的孩子受挫折的权利。</strong></p>
<p>溺爱，会严重伤害孩子的自我效能感。</p>
<p>自我效能感, 指一个人对自己是否有能力完成某一行为所进行的推测与判断。</p>
<p>影响自我效能感形成的因素很多，<strong>最重要的，是一个人自己的成败体验</strong>。</p>
<p>对一个幼小的孩子来说，每完成一个他认为的重大尝试，都会让孩子感觉到“我自己行”，久而久之就帮助孩子形成了强大的自我效能感。</p>
</blockquote>
<p>对物质的追求是对爱的渴望</p>
<blockquote>
<p>体悟到无形无质的爱，便会知道，爱是有灵魂的。但若体悟不到这一点，灵魂层面的爱就沦落为需求被满足的层面。</p>
<p>看不到灵魂的存在，就不知道自己的尊贵。</p>
</blockquote>
<p>密不通风的爱源于自私</p>
<blockquote>
<p>孩子长大了，会渴望独立空间，渴望伸展自己的手脚，尝试自己的力量。这是一个生命成长的必然规律。</p>
<p>但是，很多家长意识不到这一点，在他们心中，孩子就是永远不懂事的小孩，永远不知道怎么做事的小孩，他们得时时刻刻为孩子的一切事情操心。用密不透风的爱为孩子的“所有问题”操心。</p>
<p>这种爱的背后，其实有一种恐慌：一些家长无法忍受孩子的独立倾向，无法忍受与孩子分离的规律。</p>
<p>那些永远能发现儿女的“成长问题”并为之深深焦虑的妈妈，其实置换了焦虑的内容。</p>
<p>她们自己缺乏独立，所以需要那种无时无刻地关爱另一个人的感觉，这种黏在一起的感觉消除了孤独，也消除了我们生命中经常要遇到的无意义感，即空虚。</p>
<p><strong>通过自我牺牲，给对方制造愧疚感，然后以此逼迫对方服从</strong>，是中国家庭中非常常见的一种策略。</p>
</blockquote>
<p>精神分裂</p>
<blockquote>
<p>对一个人而言，最可怕的是，他<strong>最为重要的感受</strong>，却被周围人纷纷说，<strong>你不应该这样，你应该是相反的样子。</strong></p>
<p>假若一个家庭是极端家长制的，那么故事常这样发生：权力狂（常是父母，偶尔是家中的长子或长女）极力向下施加压力，让别人服从于他。</p>
<p>在严重重男轻女的社会，一个女性，也容易有这样的结果。她的痛苦，不能到任何地方诉说，每个人都会用一套奇特的、绕了很多弯的逻辑来告诉她，别人没有错，错在你。</p>
<p>最可怕的就是，无论走到哪里，别人都说，虐待你的人是爱你的。</p>
<p>请“看见”痛苦者的痛苦感受，确认他们的痛苦感受是多么真实，不要粗暴地进行评判，更不要朝相反的方向说。</p>
<p><strong>感受被看到，就是最好的治疗。</strong></p>
</blockquote>
<p>太听话的青少年</p>
<blockquote>
<p>我们的文化中，不鼓励孩子的独立性.</p>
<p>青春期的叛逆, 其实是青少年在争取自己的独立空间，试图成为他自己。完成必须完成的任务：脱离对父母及重要亲人的依赖，走向独立的自己。</p>
<p>有了这个“自我”，他们就会有较强烈的欲望，明白自己想要什么不想要什么，从而不需要监督也能有很强的动机去追求一些人生目标。</p>
<p>“听话的好孩子”易有两个恶果:</p>
<ul>
<li><strong>叛逆期推迟</strong></li>
<li><strong>缺乏生命力</strong></li>
</ul>
<p>乖孩子易抑郁:</p>
<p>抑郁情绪均来自“丧失”，我们心理世界的任何一部分重要内容的丧失，都会引发或轻或重的抑郁情绪。</p>
<p>善于处理的人，通过向别人倾诉、宣泄、自我调整等方式，将这些抑郁情绪化解出去了；不善于处理的人，将抑郁闷在心里，闷得多了，就发展成了抑郁症.</p>
<p>抑郁症的一个重要源头，是本来向外的愤怒不能表达，转而指向自己。叛逆的孩子容易向外表达愤怒，而好孩子则容易将愤怒憋在心里，最终攻击自己。</p>
<p>父母与孩子构建感情链接:</p>
<p>每个人都孤独，而打破孤独的唯一答案是，<strong>能与其他人或其他事物构建真切的链接</strong>。</p>
<p>感情链接，是最真切的链接之一。但中国人羞于谈感情——其实是内心对爱绝望.</p>
<p>不强调感情的中国人，既缺乏心灵层面的链接能力，也不习惯身体的碰触，而只是追求干巴巴的语言链接。语言层面的链接，很容易就成为父母发出语言的指令，而孩子要遵从父母的语言。这就是听话。</p>
<p><strong>听话不听话不重要，重要的是，我都能感觉到和你在一起.</strong></p>
</blockquote>
<h4 id="别把焦虑转嫁给孩子"><a href="#别把焦虑转嫁给孩子" class="headerlink" title="别把焦虑转嫁给孩子"></a>别把焦虑转嫁给孩子</h4><blockquote>
<p>马丁·布伯将关系分为两种：“我与你”“我与它”。</p>
<p>前者的特征是，“我”将对方视为和“我”完全平等的一个人，而后者的特征是，“我”将另一个人当作了自己实现目标的对象或工具。无论目标多么伟大，当一个人将另一个人视为对象或工具时，这种关系都是“我与它”的关系。</p>
<p>很多妈妈，自己完全停止成长了，但她们不努力让自己成长，而是将压力全放在孩子身上。她们说，这是爱，但不客气地说，她们是在转嫁自己的焦虑。</p>
<p>孩子成了父母证明自己的工具, 而不是独立成长的另一个人。</p>
<p>孩子很在乎父母的情绪, 而父母也会有意无意地利用自己的情绪去控制孩子。</p>
<p>不能将你的自我，寄生在孩子身上。</p>
<p>改变方法:</p>
<ul>
<li>给孩子空间</li>
<li>自我成长</li>
<li>进化爱的方式</li>
</ul>
</blockquote>
<p>安全岛</p>
<blockquote>
<p>对于一个幼儿来讲，父母的无条件和积极关注是至关重要的成长因素。</p>
<p><strong>他们无条件地爱他，不向他提任何要求，也不谴责他，他们只是因为他是自己的孩子而爱他、呵护他，无论他有什么缺点。得到无条件积极关注，幼儿就会在心中形成一个“安全岛”，爸爸妈妈的爱就是安全岛的基石。</strong></p>
<p>随着年龄的增长，这种安全感会逐渐沉淀为一种潜意识。有了这种潜意识的成人会信任值得信任的人。他们很少猜疑别人的心思，但如果有明确的理由告诉他，一个人不值得信任，不值得爱，他们会坚决地离开这个人，而少做蠢事。</p>
<p>安全感强的人不会太关注别人的消极信息。</p>
</blockquote>
<p>被动攻击</p>
<blockquote>
<p>好的沟通是健康家庭的一个标志。在这样的家庭中，<strong>孩子可以直接对父母表达自己的情绪和不满</strong>。</p>
<p>假若孩子心中有了不满，但却又被禁止表达，那么他们就会发展出一些特殊的表达方式来。最常见的表达方式是“<strong>被动攻击</strong>”，即孩子有意无意地做错一些事情，然后惹得父母特别生气。</p>
<p>生命的价值在于选择。一个经常为自己的人生作决定的孩子，他的生命力是汪洋恣肆的，尽管因为年轻，他会遇到一些挫折，但那些挫折最终和成就一起，让他感觉到自己的生命是丰富多彩的，“更重要的是，这是自己的”。</p>
</blockquote>
<p>客体关系和自我评价</p>
<blockquote>
<p>自我评价是什么？</p>
<p>就是心中的客体关系中，“内在的父母”对“内在的我”的评价。其基础就是，我们童年时父母对我们的评价。</p>
<p>内在小孩与内在父母的关系模式，形成于一个人的童年，主要是六岁前。这个模式形成后，以后的人生里，我们就会不断将这个模式呈现在现实世界中。</p>
<p>但这并不是说, 你的客体关系模式就不可改变了，它当然可以改变，改变的办法就是认识你自己。</p>
</blockquote>
<p>快乐的三个层次</p>
<blockquote>
<p>荷兰心理学家罗伊·马丁纳在他的书中提到:</p>
<p>快乐有三个层次：竞争式的快乐、条件式的快乐和无条件的快乐</p>
<ul>
<li><p>竞争式的快乐, 即一定得我比你强，这样才快乐，否则就痛苦</p>
</li>
<li><p>条件式的快乐, 只要这个条件得以满足，你就会很快乐。</p>
</li>
<li><p>无条件的快乐, 不需要外界的任何条件，就能感觉到快乐与祥和。</p>
<blockquote>
<p>毫无条件地生活，就是接受自己是个可能犯错的血肉凡躯，并<strong>欢迎改变、死亡和受苦</strong>。处在至乐中，无论舒服还是痛苦，我们都欣然接受；我们不执着于结果，而能享受和体验充实的人生；我们对于沿途的幸福安适与种种经验充满了感恩之心，而能心平气和地对待他人和自己.</p>
</blockquote>
</li>
</ul>
<p>想获得无条件的快乐，我们都需要自己去学习。</p>
</blockquote>
<p>认识并接受真相</p>
<blockquote>
<p>心理健康的基石是<strong>直面自己人生的真相，而不是盲目乐观</strong>。</p>
<p>这些人生的真相，一旦发生，就已注定不可改变。你若想否认这些事实，其实就是在否定自己，我们要学会承认过去，不和过去的任何事情较劲。</p>
<p>孩子不必为父母的冲突负责。</p>
<p>孩子们的爱是无限的……通过受苦而和自己的父母联结在一起，对他们来说，是一个巨大的诱惑, 成熟的爱要求孩子们从家庭的牵连中释放自己，不再重复那些有害的事情。</p>
</blockquote>
<h4 id="中国式家庭"><a href="#中国式家庭" class="headerlink" title="中国式家庭"></a>中国式家庭</h4><p>被扭曲的感受</p>
<blockquote>
<p>存在等于被感知。<strong>我的感受被你感知到，我才发现自己原来是这般存在着。</strong></p>
<p><strong>被看到, 必须是心对心，感受对感受，是心灵的呼应</strong>，而不是头脑对心，更不是药物对心。</p>
<p>感受没被感知, 有三种常见方式导致:</p>
<ul>
<li><p>忽视</p>
<p>极端忽视，会导致极端的不存在感，它集中体现为一种致命的羞耻感——生而为人，对不起。</p>
<p>极度可怕的忽视，会导致一个极度矛盾的状态：我无比渴望被你看到，不被看到等于死，可被看到的那一刹那，我也觉得要死。</p>
<p>一个人害怕与他人、他物甚至他自己的联系，因关系意义上的链接会让其担心失去自己的身份和自主性。</p>
<p>本质上，融合意味着小我的死亡，但一般的过程是，<strong>有一个清晰的小我，托着自己与别人建立关系，不断在关系中感受彼此，信任越来越深，突然间感受到彼此，并在那一刻放下防御，小我死亡，而最亲密的关系建立，一个包含着“我与你”的关系性自我建立了。</strong></p>
</li>
<li><p>双重矛盾</p>
<p>你既不能做 A，也不能做 -A。</p>
<p>双重矛盾的源头，是一个人内心的分裂，也即意识与潜意识的分裂。</p>
</li>
<li><p>僵尸化</p>
<p>意思是, 父母希望你一动都不要动，你的活力仅体现在执行父母的意志上。</p>
</li>
</ul>
<p>如何破解不被感知的困境?</p>
<p>信任你的感觉。</p>
<p>你可以自己去认识并确认自己的感受，特别重要的是，无论如何，都要<strong>勇敢地投身于外部世界</strong>，让丰富的事情激活你的感受能力，以此不断碰触自己的感受。</p>
<p><strong>勇敢地去爱是必不可少的。</strong>爱，特别是爱情，能全方位激发你的种种感受。</p>
<p>爱情象征着美好，情欲点燃的是生命活力。哪怕爱情中不断受挫，但生命会是丰盛而绽放的。</p>
<p>在爱中的，大胆地去爱吧，哪怕被玫瑰刺得鲜血淋漓。</p>
</blockquote>
<p>你的身体, 他人的奴隶</p>
<blockquote>
<p>英国心理学家温尼克特提出了真自我与假自我的概念:</p>
<p>有真自我的人，他的自我<strong>围绕着自己的感受而构建</strong>；有假自我的人，他的自我围绕着妈妈/他人的感受而构建。</p>
<p>假自我者总有一种感觉，外部世界不友好甚至很残酷，所以必须辛苦地应对，不管人还是事。</p>
</blockquote>
<p>唤醒你沉睡的活力</p>
<blockquote>
<p>是创造性，而不是其他，让个体觉得生活是有意义的。</p>
<p><strong>活力是每一个生命与生俱来的</strong>，<strong>它要向外界伸展自己，索要存在空间。</strong></p>
<p>若有一个高质量的母子/女关系，儿童的活力会被接纳，于是得以伸展。</p>
</blockquote>
<p>愚孝</p>
<blockquote>
<p>为什么有些人会对只知索取的父母进行无限付出的“愚孝”呢？</p>
<p>最简单的答案是，这是他们能亲近父母的唯一有效方式。</p>
</blockquote>
<p>无须迎合</p>
<blockquote>
<p>迎合者的武器是内疚:</p>
<p>歉疚感可能是我们最不愿意面对的一种感觉，尤其是，<strong>有人替我们做了我们本可以轻松做到的事情后，还巧妙地想给我们留下歉疚感，这会令我们感到非常愤怒</strong>。</p>
<p>迎合者越努力, 被迎合的人, 越想远离, 这样就可以少一些歉疚感。</p>
</blockquote>
<p>爱的六个谎言</p>
<blockquote>
<ul>
<li><p>没有父母不爱自己的孩子</p>
</li>
<li><p>我爱你，所以你要听我的</p>
<p>生命的意义在于选择。</p>
</li>
<li><p>我爱你，所以我们不分离</p>
<p> 独立成长是源自生命的冲动。</p>
</li>
<li><p>婆媳关系</p>
<p>不是婆媳二元关系,  而是婆媳与儿子的三角关系, 关系的核心是儿子。</p>
</li>
<li><p>嫉妒</p>
<p>嫉妒常是一个借口，目的是为了控制情侣、伤害情侣。或者从根本上说，是<strong>为了转嫁自己的自卑感</strong>。</p>
</li>
<li><p>爱，是为了幸福和快乐</p>
<p>爱情，尤其是激情式的爱情、让你非常有感觉的爱情，其真正动人之处，并非是幸福和快乐，而是<strong>强迫性重复</strong>。</p>
<p>强迫性重复的诱惑是无穷的。</p>
<p>一次激情式的爱情，是治疗自己童年创伤的最佳机会，因为它会完美地再现童年关系模式的绝大多数感觉，可以让自己借此意识到自己的诸多问题，但前提是，<strong>你必须反省，必须主动借这次强迫性重复理解你的人生</strong>。</p>
<p>假若你因某个亲密关系而伤痕累累，那一定不是爱让你伤痕累累，而是“假爱”令你伤痕累累。</p>
<p>爱只会导致好的结果，而不会导致伤害，导致伤害的一定不是爱。</p>
</li>
</ul>
</blockquote>
<p>中国人的情感模式</p>
<blockquote>
<p>中国人的情感模式普遍都是在找妈妈。</p>
<p>通常我们第一个爱上的都是自己的妈妈，如果与妈妈的亲子关系构筑得不好，成年之后，就很难处理好与另一半的亲密关系。</p>
<p>中国人有七成至八成的婚姻都是建立在安全感基础上，婚姻安全的最高境界是彼此成了亲人，因为亲人是不会离开你的，<strong>想起他就很亲切，但实际上也很少想起他</strong>。</p>
<p>真正能够制造安全感的只有爱。</p>
</blockquote>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>爱是深深的理解和包容。</p>
]]></content>
      <categories>
        <category>Reading</category>
      </categories>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>读《为何爱会伤人》</title>
    <url>/posts/notes-of-why-love-hurts/</url>
    <content><![CDATA[<p>有种续上一篇的感觉.</p>
<span id="more"></span>

<p>刷完《为何家会伤人》后, 继续刷了《为何爱会伤人》,虽然书中有些篇幅与《为何家会伤人》重合了. 但并不影响阅读体验, 还是值得一看的.</p>
<p>同《为何家会伤人》一样, 我也基本按照书本身的结构整理了下笔记, 内容多为章节摘选.</p>
<p>来过过.</p>
<h4 id="爱情-是一种轮回"><a href="#爱情-是一种轮回" class="headerlink" title="爱情, 是一种轮回"></a>爱情, 是一种轮回</h4><p>恋爱关系是我们童年时与父母及其他重要亲人的关系模式的再现。</p>
<p>对于所有人而言，恋爱都是童年关系的一次轮回。</p>
<p>轮回，是为了什么？</p>
<ul>
<li>重温童年的美好，修正童年的错误</li>
<li>修炼你的心</li>
</ul>
<p>一段完整的感情, 会有三个阶段:</p>
<ul>
<li><p>1 + 1 = 1</p>
<p>幻想阶段: 你就是我，我就是你，我们两人宛如一体。</p>
</li>
<li><p>1 + 1 = 0</p>
<p>幻想破灭: 你是我人生痛苦的根本，我是你人生痛苦的所在，我们两个人怎么会走到一起？天大的错误！</p>
</li>
<li><p>1 + 1 = 2</p>
<p>我是我，你是你，但我们在一起，并且真的感觉到我应该和你在一起。</p>
<p>接受了那个真实的人，终于感觉到，以自己的真实存在，与对方的真实存在相处而生出的爱，才是最踏实、最真切的爱。</p>
</li>
</ul>
<p>迷恋: 源自幻想的爱</p>
<blockquote>
<p>当我们将一个人当作实现自己目标的工具时，那么，无论这目标看起来多么崇高、伟大和迷人，这种关系都是“我与它”的关系。</p>
<p>优秀的异性很容易碰到, 但是找到一个能安慰自己痛苦的结伴而行的伴侣难得。</p>
<p>为什么我们容易迷恋?</p>
<p>我们之所以会对一个人产生强到不可思议的情感，一般总是因为那个人强烈地牵动了我们内心深处的情感关系，即我们小时候与父母的关系模式。</p>
</blockquote>
<p>一见钟情或是致命诱惑</p>
<blockquote>
<p>意识上，我们都在追求快乐和幸福，并且一定有相应的人生哲学；但潜意识上，我们都在追求自己所习惯的情绪或情感，这是致命的诱惑。</p>
<p>熟悉感是一见钟情的秘密。</p>
<p>我们都会忍不住去重复童年，哪怕它伤痕累累，哪怕再一次受伤。</p>
<p>这是因为，理性没有力量，情感才最迷人。</p>
<p>我们每一种重要的生命感觉，几乎都在童年时第一次建立。这些感觉才是我们心灵的内容，而理性的认识只是附属品。</p>
</blockquote>
<p>命运=心理的强迫性重复</p>
<blockquote>
<p>大多数人的人生，就是不断地重复同样的事情。</p>
<p>学会幸福就重复幸福，学会不幸就重复不幸；</p>
<p>学会信任就重复信任，学会敌视就重复敌视；</p>
<p>孩子在经历了一件痛苦或者快乐的事情之后，会在以后不自觉地反复制造同样的机会，以便体验同样的情感。</p>
<p>心理学家把这种现象称为强迫性重复。</p>
<p>在人际关系中，强迫性重复可以理解为<strong>一个人小时候形成的关系模式的不断复制。</strong></p>
<p><strong>重复是因为我们惧怕丧失预见力</strong>。</p>
<p>无论好的强迫性重复还是糟糕的强迫性重复，改变起来都不是很容易的事情。</p>
<p>建立好的强迫性重复，最好的办法就是<strong>父母在孩子童年时给他爱与支持，同时尊重孩子的独立性，给予他足够的信任。</strong></p>
</blockquote>
<p>七年之痒</p>
<blockquote>
<p>我们至少有两次童年，一次是零至六岁，一次是爱情。</p>
<p>心理学理论认为，六岁孩子的人格结构和智力结构基本定型。</p>
<p>爱情，是对再一次重复童年的憧憬。</p>
<p>七年之痒，意味着婚恋的第七年会出现严重问题,  从感觉上而言，或许第六年更重要, 一些婚恋故事都是在第六年出现了幻觉的破灭感。</p>
<p>你发现这个最亲密的人根本不是自己想象的那样，他（她）似乎完全是另外一个人。</p>
<p>看到了真实存在，就要做一个抉择：是继续幻想，还是和恋人的真实存在打交道。</p>
<p>假若继续维持幻想，那么这个亲密关系就只有瓦解，然后换一个人，继续幻想下去。</p>
<p>尝试着与恋人的真实存在打交道,  并<strong>愿意接受彼此的真实存在</strong>，那么，一个新的、真实的关系就会得以建立，这个关系看起来不如前六年的关系那么动人，但它更稳固、更牢靠、更有弹性，也更轻松自如。</p>
<p>假若这个关系发展下去，它会越来越深入，越来越迷人。</p>
<p>不过，看到了恋人的真实存在，<strong>并不意味着关系一定有救</strong>，<strong>有时结束反而是最好的选择</strong>。</p>
</blockquote>
<p>警惕爱情的七个教条</p>
<blockquote>
<p><strong>发自内心的感觉，是我们判断事物的唯一可靠的凭证。</strong></p>
<p>爱情是最难把握的。感觉有时似乎过于纷繁复杂，于是我们容易不信任自己的感觉，而去信赖一些教条。这是非常危险的。</p>
<ul>
<li><p>一个人越爱我，会对我越好</p>
<p>关于爱情的最普遍的教条之一，也是危害性最大的教条。</p>
<p>对于一个内心充满爱的人而言，这个信条是正确的。但对于一个心中充满恨的人而言，这个信条是错误的。</p>
<p><strong>我们所有重要的外部关系，都是我们的内在关系模式投射的结果</strong>。并且，外部关系越重要，我们内在关系模式投射的程度就越厉害。</p>
<p>一个内心充满恨的人，他越爱一个人，他就越有可能成为那个人的地狱。</p>
</li>
<li><p>越忘我的爱越珍贵</p>
<p>一个人在追求你的期间越忘我，在关系确立后就越容易“忘你”。</p>
<p>一个人越迷恋爱人，就越看不见爱人的真实存在，他看见的，其实是他投射到爱人身上的“理想自我”。也即，他爱的并非是你，而是他自己。</p>
</li>
<li><p>年龄越大，越懂得关爱</p>
<p>爱的能力，和年龄关系不大。</p>
<p>一个内心较和谐的人，会愿意自省。于是，对这样的人而言，他的确是随着年龄的增长，越来越懂得爱。</p>
</li>
<li><p>对朋友越好，对我会更好</p>
<p>很多手册提到, 看一个人，可以借鉴他与朋友或同事的关系。</p>
<p>无论对男人，还是对女人，这一点的借鉴意义其实很有限。</p>
<p><strong>不管一个人看起来多么在乎他与朋友或同事的关系，这种关系所产生的情感深度，其实远不如情侣关系。</strong></p>
<p>一个人在处理与朋友和同事的这类关系时，可以较好地运用理性，会控制自己的情绪。但是，在深度的情侣关系中，没有谁愿意控制自己。</p>
<p>于是，一些内在关系模式很糟糕，但又特别有心计的人，会出现极其可怕的分裂：在外面简直像个圣人，在家里却是一个不折不扣的暴君。</p>
<p>那么，该怎么去判断一个人？</p>
<p>其实很简单，就是根据你自己的感觉。如果这个人以前谈过恋爱，有过深度的亲密关系，试着去了解一下他在这个亲密关系中的真相。</p>
</li>
<li><p>他说我不行，那一定是他行</p>
<p>男人让女人相信自己行的方式有两种：一是展示自己的优点；二是否定女人的优点。</p>
<p>男人普遍习惯于否定女人，也习惯伪装得很行。并且，自己内心越自卑，就越伪装得“我很行”。</p>
</li>
<li><p>受过伤，会更懂得珍惜</p>
<p>很多男人发展新的感情时，常做的一件事是诉苦。</p>
<p>然而，作为倾诉对象的人忘记了一点，<strong>倾诉者是自由恋爱，以前的恋人是他们自由选择的，他们应该为自己的选择负有至少一半的责任。</strong></p>
<p><strong>多数人的人生总是在同一个地方摔跤，而且摔跤的姿势都一模一样。</strong></p>
<p>假若追求你的人，以前的感情生活是一团糟。那么，<strong>他和你的前景更大的可能性也是一团糟</strong>，而不是突然变得更好。</p>
<p>除非这个人有这样一个素质：他在向你倾诉时，很少描黑对方，而主要是在反省自己的责任。不过，<strong>假若一个人具备这种素质，你会较少听见他诉苦</strong>。</p>
</li>
<li><p>有付出，一定会有回报</p>
<p>理解很难，而付出则相对容易多了，尤其是对于习惯了在自己原生家庭中付出的人。</p>
<p>在感情中一味付出且对恋人没有丝毫要求，有时还隐含着这样的信息：<strong>我既然已经做得这么完美，我是问心无愧了，那么我们的关系中再有什么问题，都不是我的责任，而是你的责任了。</strong></p>
</li>
</ul>
<p>小结:</p>
<p>一定要尊重自己的感觉，它比这些教条更真实、更可靠。</p>
<p>自省能力是最重要的人格特质, 一定要找一个有自省能力的人。</p>
</blockquote>
<p>绝望的爱</p>
<blockquote>
<p>我们内心深处都有“我不值得爱”的自卑感，而当童年获得的爱的确很少时，这种自卑感会发展成巨大的不安全感或恐惧。为了防御这种不安全感或恐惧的涌出，我们会形成种种自我防御机制。但是，<strong>爱，不管是去爱还是被爱，其前提都是要突破这种自我防御机制</strong>，那时就会一下子被不安全感或恐惧感袭击，反而会觉得更恐惧。这时, 我们会认为是爱令自己恐惧，而很少想到，是自己心中本来就有如此深的恐惧。</p>
<p>所以，最好一开始彼此就知道这是一场不可能的爱，那时反而会爱得很投入。</p>
<p>谁都不敢真正走向爱，谁都对被伤害非常敏感。</p>
</blockquote>
<p>每一次缘分都是一个功课</p>
<blockquote>
<p>为何我们会去找与自己不一样的伴侣?</p>
<p>我们选择和谁在一起，一定有这样一个意思——我想成为他那样的人，或者更准确的说法是，<strong>我想拥有他身上的某些品质。</strong></p>
<p>每个生命都是受局限的。意识上，我们认为自己的这一套玩意特别好，必须坚持，但潜意识上，<strong>我们渴望自由和圆满，我们渴望能吸纳那些不一样的品质。</strong></p>
<p>我们所坚持的品质——“好我”——都是为了让自己更好地被别人接受。</p>
<p>我们对“坏我”有渴望。</p>
<p>我们不敢发展出“坏我”的品质是惧怕别人不接受自己。</p>
<p>每一次缘分都是一个功课,  <strong>只有学习接纳这些与自己不同的人，并在一定程度上学到其品质，这个功课才算通过</strong>。否则，这个功课会一直继续下去。</p>
<p>命运之所以给我们这些轮回，正是为了让我们有机会通过这个功课。</p>
</blockquote>
<h4 id="难以避免的爱情战争"><a href="#难以避免的爱情战争" class="headerlink" title="难以避免的爱情战争"></a>难以避免的爱情战争</h4><p>要激情, 还是安全感</p>
<blockquote>
<p>只要两个人用心相处，那么慢慢会明白，没有哪个人真的就是乏味的，每个人都很精彩。</p>
<p>我们无数人极其缺乏安全感，为了拥有“至少有一个人绝不会离我而去”的安全感，我们甘愿将那个最重要的人——配偶——变成一个乏味的人，那就意味着他（她）没有别人要了。</p>
<p>经营感情，即, 知道感情并不仅仅是命运的恩赐，<strong>你会预料到感情出一些问题，而当问题出现时，你会有耐心地去沟通，去化解问题</strong>，于是感情可以越过一个又一个的障碍，最终两个人拥有一份稳定而又高质量的亲密关系。</p>
<p>经营感情是一种能力，它需要安全感做基础。</p>
<p>控制对方的钱，这是缺乏安全感的人常做的事情之一。</p>
</blockquote>
<p>支配与服从</p>
<blockquote>
<p>我们都想做好人，并想用好的方式对待某人。如果一个人越重要，我们就越会用自己所懂得的最好的方式去对待他。</p>
<p>我们使用“好的方式”时，藏着一个逻辑：我对你这么好，你当给予我回报。</p>
<p>对回报的渴望也不算是问题，但关键是，<strong>我们还渴望对方也用某种特定的方式给予自己回报。</strong></p>
<p>在人际关系,  特别是亲密关系中,  一方没有理解另一方的方式的合理性，而是在<strong>诱导另一方以一种特定的方式对待他, 将自己的方式强加给他人</strong>. 这种诱导无处不在。</p>
<p>投射性认同:</p>
<p>有些人会特别执着，他投射时，抱着强烈的愿望，渴望对方必须以他所期冀的方式回应他，如果对方不这么做，他会严重焦虑，认为对方不爱他。</p>
<p>投射性认同是一种孤独的游戏。</p>
<p>玩这种游戏的人，只渴望他投射你认同，但却拒绝你投射他认同。</p>
<p>投射性认同的四种常见类型:</p>
<ul>
<li>权力的投射性认同:  我对你好，但你必须听我的，否则你就是不爱我。</li>
<li>依赖的投射性认同:  我如此无助，你必须帮我，否则你就是不爱我。</li>
<li>迎合的投射性认同：我对你百依百顺，你必须接受我，否则你就是不爱我。</li>
<li>情欲的投射性认同：我这么性感（这么有性能力），你必须满足并对我好，否则你就是不爱我。</li>
</ul>
<p>一个人之所以会形成顽固的投射性认同，和他的原生家庭的关系模式密不可分。</p>
<p>但这些并不是无法改变的。</p>
<p>美国心理学家斯考特.派克称，<strong>你应当及时地修正你的心灵地图</strong>。</p>
<p>每个人都有支配欲望，都渴望将自己的意志强加在爱人身上：支配者是主动地强加，而被支配者则是委婉地强加。我们都不容易看到并尊重恋人的爱的逻辑，相反我<strong>们都执着在自己的爱的方式上，并认为这是唯一正确的</strong>，这就导致了孤独，并且越相爱越孤独。</p>
</blockquote>
<p>吵架－隐秘的权利斗争</p>
<blockquote>
<p>能将自己的意志强加在别人头上，这就是权力。</p>
<p>权力欲望也即控制欲望。</p>
<p>很多对夫妻吵来吵去，其实就是在争取这样一个结果——“你什么都不懂，你什么都做不好，所以你什么都要听我的”。</p>
<p>当你的某种方式对别人造成了伤害，你的那个方式一定透露着你的潜意识层面的一些隐秘的东西。</p>
<p>所有在严重缺乏安全感的环境下长大的人，脑中都会有一个自己可以操控的爱人原型。</p>
<p>在一个健康的亲密关系中，较量的双方都失败了，谁也没有改变谁，同时又通过这个过程了解了彼此，而后就可以看到对方真实的存在，并与其打交道了。</p>
</blockquote>
<p>放下亲密关系中的挡箭牌</p>
<blockquote>
<p>我们要<strong>不断地表达自己的感受</strong>，并<strong>去感受到对方的感受</strong>，某种程度的链接感才会发生，而链接感一旦会发生，一个亲密关系就会变得牢不可破。</p>
<p>但是，假若一旦发生冲突就竖起“你是个大罪人”的挡箭牌，那么在保护自己的同时，<strong>你也切断了感受传递的通道。</strong></p>
<p>在交流中使用挡箭牌, <strong>几乎在任何一个亲密关系中都会有类似的事情发生，而且很多时候相当隐秘</strong>。</p>
<p>亲密关系是我们最在乎的，而我们越是在乎，就越是怕承担责任，就越是希望分出个谁对谁错来。<strong>不去纠缠谁对谁错</strong>也是很多婚恋专家强调的一个原则。</p>
<p>重要的不是去分出个对与错来，<strong>重要的是自己和对方的感受</strong>。具体到你自己身上就是，<strong>你能否坦承地表达你的所有感受，你又能否聆听到对方表达出来的感受。</strong></p>
<p>感受，主要是身体的感觉和情绪这两种。</p>
<p>“你是个罪人”，这是亲密关系中最容易找到的挡箭牌，也是最好的挡箭牌之一。<strong>很多时候，我们甚至会主动去追求这样一个挡箭牌，好让自己永远在亲密关系中处于优势地位。</strong></p>
<p>“圣人不死，大盗不止”这种格局不只会在政治中出现，在亲密关系中一样会出现。</p>
</blockquote>
<p>警惕被动攻击</p>
<blockquote>
<p>很多人际关系是失衡的，一方明显处于强势，一方明显处于弱势。并且，强势的一方攻击性很强，同时又不允许弱势的一方表达他的感受。</p>
<p>然而，任何人一旦被攻击，一定会感到愤怒，并想还击。</p>
<p>在严重失衡的关系中，弱势一方不敢表达愤怒，更不敢还击。</p>
<p>但是，愤怒一旦产生，就一定会寻找宣泄的出口的。弱势一方根本不能直接表达愤怒，那么，他们会发展出独特的还击方式。他们通过犯一些莫名其妙的错误的方式最终达到效果，却和直接用愤怒攻击强势方没有什么两样。</p>
<p>这种心理机制，叫作被动攻击，常被比喻为<strong>“隐形攻击”</strong>。</p>
<p>相比直接攻击, 被动攻击造成的伤害可能更大。</p>
<p>被动攻击极其常见，在我们这个不习惯表达情绪的社会中，这种隐形攻击几乎无处不在。</p>
<p>如何解决?</p>
<p><strong>学会直接表达愤怒.</strong></p>
<p>有了愤怒，一定会想办法表达。意识不想，潜意识也会做这个工作。不攻击别人，就会攻击自己。</p>
<p>我们每个人都应该问一问自己：<strong>自己是否通过语言、态度、姿势等伤害过别人，并在这样做时装作若无其事甚至和颜悦色？</strong>如果你经常这样做而<strong>自己并未意识到</strong>，那么，你就应该<strong>反省一下自己</strong>，看看你的自我定位是否出现了偏差，看看你同别人的关系有哪些不正常。</p>
</blockquote>
<p>关系与性</p>
<blockquote>
<p>如果不是有明确的生理原因，但在性上却出现了问题，那基本可以断定，一定是在建立亲密关系上出现了问题。</p>
<p>性，是对关系的渴望。</p>
<p>学不会建立健康的亲密关系的人，就无法学会享受健康的性爱。</p>
</blockquote>
<h4 id="任何选择都有道理"><a href="#任何选择都有道理" class="headerlink" title="任何选择都有道理"></a>任何选择都有道理</h4><p>人格对立面</p>
<blockquote>
<p>形成矛盾的意识: 看到A, 也就看到了-A</p>
<p>找到A比较容易，但看到自己身上有-A，这就是一个相当困难的挑战了。</p>
<p>文中举了一个负责, 勤奋的企业家找了一个懒散的合伙人:</p>
<p>这不是你做生意的需要，而是你内心的需要，<strong>你需要找一个人，把你内心深处被严重压抑的东西投射到他的身上，那样看到了他，也就像是看到了你自己。</strong>你要感谢你的搭档，他满足了你的内心需要，甚至这个需要比成功更重要。这个搭档成了你的替罪羊，让你可以理直气壮地将你内心的冲突转嫁到这个外部关系上来，从而在极大程度上减轻了你的痛苦。</p>
</blockquote>
<p>第三者</p>
<blockquote>
<p>马丁.布伯的哲学观核心——<strong>一个人只有在关系中，才能感受到自己的存在。</strong></p>
<p>马丁.布伯中的”你”首先指的是上帝, 其次才是人. 必须心中有上帝这个“你”，“我”才会有存在感。</p>
<p>从物理学和几何学上讲，两个人组成的关系只是一条线，脆弱、不平衡。相反，一个三角关系才容易是平衡的、稳定的。</p>
<p>三角关系中的一角不必非得是人，也可以是事业或其他事物。</p>
<p>多数家庭的共同特点是，男人的“第三者”是事业，女人的“第三者”是孩子，这样每个人都处于三角关系中，家庭因而变得比较稳定。</p>
<p>不要期望把你的全部注意力放到一个人身上，也不要期望那个人的全部注意力放到你身上，这种状况一定只是暂时的，它非常不稳固。</p>
<p>当一段感情已经走到尽头时, 为什么双方不愿提分手?</p>
<p>两种心态让人们不愿提分手:</p>
<ul>
<li><p>赌徒心理</p>
<p>即，我投入了10分，希望对方能回报10分，但对方却只回报了1分，我太不甘心了。</p>
</li>
<li><p>自恋心态</p>
<p>这样的人有另一种“完美情结”：我很聪明，我永远不会错。于是，当他们发现自己选错了一个异性时，他们非常难过，但主要不是为了这个异性带给自己的伤害而难过，而是为“我怎么会看错他（她）”而难过</p>
</li>
</ul>
<p><strong>真爱，需要决心、勇气和真正的责任感。懂得真爱的人，要为对方负责，但同样需要对自己负责。</strong></p>
<p><strong>真正的善良是尊重自己的感受。</strong></p>
<p>很多恋爱一开始都是失衡的，一方在扮演另一方的父母。但是，这种关系模式最好不要一直持续下去，否则，这种外在的失衡最终会导致双方内在的失衡，那时至少有一方会产生到外面去寻找平衡的想法或冲动，这是很多婚外情的重要原因。</p>
<p>一个和谐的亲密关系需要付出和接受的平衡。</p>
</blockquote>
<p>依赖与反依赖</p>
<blockquote>
<p>瓦苏说，我们的心有三层结构，最外面一层是保护层，中间一层是伤痛层，而最深处一层是真我层。</p>
<p>保护层太厚，是我们绝大多数人的共同问题。</p>
<p>因为这个厚厚的保护层，我们触碰不到自己的真我，也触碰不到别人的真我。</p>
<p>而真正的亲密，是两个人真我与真我的相遇。</p>
<p>享受亲密，就必须揭开自己的保护层。对此，我们会本能地感到惧怕，因为那时就得面对心中隐藏的伤痛。</p>
<p>人类的创伤基本都可以归为两类：亲近需要没有满足的创伤，疏远需要没有满足的创伤。</p>
<p>前一种创伤，即被抛弃的创伤；后一种创伤，即被吞没的创伤。</p>
<p>被抛弃的创伤:</p>
<p>也被称为分离焦虑。</p>
<p>极其常见。它主要表现在，孩子与父母，尤其是妈妈的关系上。</p>
<p>因为中国的情况, 妈妈们产假太短,  习惯由老人带孩子等, 导致孩子们想与妈妈亲近的需要普遍没有得到满足。</p>
<p>被吞没的创伤:</p>
<p>常常是与被抛弃的创伤连接在一起的。</p>
<p>分离焦虑可能会带来分离攻击.</p>
<p>分离攻击，即当你觉得关系太过于亲近时，你得发出攻击性的信号，以此与对方暂时有一定程度的分离。</p>
<p>内疚，是有严重被吞没创伤的人的共同情感。</p>
<p><strong>被抛弃的创伤和被吞没的创伤，几乎总是在一起出现。</strong>它们先是一同出现在亲子关系中，而等这个关系中的孩子长大后，它们就会一并出现在情侣关系中。</p>
<p><strong>化解吞没的关键 — 学会拒绝</strong></p>
<p>如果一个妈妈太渴望与儿子亲密，那么这个儿子先是享受，接着是感觉到被吞没，于是想逃离，但这个想逃离的愿望，又会产生内疚，觉得对不住妈妈的爱。</p>
<p>比内疚更深一层的，是恐惧，是害怕被妈妈惩罚，害怕被妈妈抛弃。</p>
<p>认识这些内疚和恐惧是极为关键的，因为只有化解掉内疚和恐惧的障碍，一个男人才可以真正做到允许自己追求独立。</p>
<p>对有被抛弃创伤的人表达拒绝，因为<strong>每个人都是要通过自己而证明自己的存在。</strong></p>
</blockquote>
<h4 id="走向真爱"><a href="#走向真爱" class="headerlink" title="走向真爱"></a>走向真爱</h4><p>男人和女人</p>
<blockquote>
<p>马丁.布伯说：“<strong>你必须以你自己的方式去揭示你生存的意义。</strong>“</p>
<p>我们必须尊重真相，否则就会背离自己的心，而这种背离会让心分裂，让心的一部分和另一部分剧烈交战。结果就是，我们的人生也一直处在剧烈的冲突之中。</p>
<p>看起来，我们要的是婚姻、地久天长、绝对忠贞、我是你的唯一等完美的爱的仪式，其实我们真正想要的就是，<strong>我的存在是有意义的</strong>。尤其是，我的存在对于你是有意义的。</p>
<p>每一个文化都有自己的集体无意识，而这集体无意识中藏着很多原型，每一个典型的人，都可以视为这个文化的集体无意识中的原型的映现。</p>
<p>常常有人会说，女人是爱情的动物，所以一旦发现爱情似乎不存在时，她们就会陷入巨大的痛苦中。</p>
<p>但是男人也是爱情的动物，一旦发现爱情不存在时，男人的整个存在感也会受到动摇。</p>
<p>真正的合一，是你彻底了解了自己，也彻底了解了对方。你先明白，你和他是两个不同的人，但你们在长时间的相处中驯养了彼此，突然有那样的刹那出现——你们碰到了彼此的心。这样的时刻一再发生，最后你们两人的精神交融在一起，两个人宛如一个人。然而，你们两人的精神独立性依然存在。</p>
</blockquote>
<p>对幸福盖个戳</p>
<blockquote>
<p>我们对爱都是缺乏信心的，或者说，我们在爱面前都会感到自卑。于是，当我们有爱与被爱的感受时，会半信半疑，这时就渴望别人给一个确认。</p>
<p>假若我们真的可以尊重自己的感受，那么，<strong>每一次美好的感受，它本身就是一个爱的证明</strong>。</p>
<p>从根本上而言，是我们自己要去审视自己的内心，要去学着尊重那正在发生的爱与美好。</p>
</blockquote>
<p>将心打开, 让爱流进来</p>
<blockquote>
<p>心理问题乃至心理疾病产生的原因就是，一个痛苦让我们难受，我们就用一些方法将这个痛苦包裹起来，好让自己意识上看不到这个痛苦的存在。然而，这个痛苦并未消失，它只是转入到潜意识中而已，并会以我们理解不了的方式控制我们的行为。并且，如果将痛苦包裹得太严实，一个人的情感和感受就会处于被截流状态，会引来各种各样的身心问题。</p>
<p>将心打开后，别人的爱才能流进来，自己对别人的爱才能流出去，深厚一些的感情才能建立。这样的感情一建立，自己的内心就有了支撑，会安定很多。</p>
</blockquote>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>愿我们都能成为更好的”客体”.</p>
]]></content>
      <categories>
        <category>Reading</category>
      </categories>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>读《beyond feelings》- Part2</title>
    <url>/posts/notes-of-beyond-feelings-part2/</url>
    <content><![CDATA[<p>长文慎入。</p>
<span id="more"></span> 
<h3 id="charpter-8-The-basic-problem-“Mine-is-better”"><a href="#charpter-8-The-basic-problem-“Mine-is-better”" class="headerlink" title="charpter 8 The basic problem: “Mine is better”"></a>charpter 8 The basic problem: “Mine is better”</h3><p>提到了一个自相矛盾的点：</p>
<p>People profess enthusiasm for personal growth and development and spend billions of dollars on self-help books, taps and seminars, yet they act as if their minds have no need of improvement.</p>
<p>为什么会这样？</p>
<p>每个人或多或少都会有“mine is better”的想法。</p>
<p>It is natural enough to like our own possessions better than other people’s.</p>
<p>many people realize that <strong>we all see ourselves in a special way, different from everything that is not ourselves, and that whatever we associate with ourselves becomes part of us in our minds</strong>.</p>
<p>some people think that “mine is better” is not an attitude that everyone has about his or her things, but a special higher truth about their particular situation. 心理学家将这一类人分为两种：个人中心主义者egocentric，种族中心主义者ethnocentric people。</p>
<h4 id="Egocentric-People【以自我为中心，个人主义者】"><a href="#Egocentric-People【以自我为中心，个人主义者】" class="headerlink" title="Egocentric People【以自我为中心，个人主义者】"></a>Egocentric People【以自我为中心，个人主义者】</h4><p>Egocentric means：centered or focuses on oneself and interested only in one’s own interests, needs and views.</p>
<p>太专注于自我，以致于对于这类人来说，成为一个合格的critical thinker是一件很困难的事情。</p>
<p>The perspective of egothink is very limited, <strong>egocentric people have difficulty seeing issues from a variety of viewpoints</strong>.</p>
<h4 id="Ethnocentric-People【种族中心主义者】"><a href="#Ethnocentric-People【种族中心主义者】" class="headerlink" title="Ethnocentric People【种族中心主义者】"></a>Ethnocentric People【种族中心主义者】</h4><p>Ethnocentric means excessively centered or focused on one’s group.</p>
<p>What distinguishes ethnocentric individuals from those who feel a normal sense of identification with their group is that ethnocentric people believe that their group is not merely different from other groups but foundamentally and completely superior to them and that the motivations and intentions of other groups are suspect.</p>
<p>种族主义者大抵都带有种族歧视的毛病。</p>
<p>[种族中心主义者的这种偏见，会有一个额外的作用。对于社会中存在的各种真实或者想象的问题，他们找到了一个背锅的对象。]</p>
<p>It fills their need for an out-group to blame for real and imagined problems in society.</p>
<p>And they get a large target at which they can point their anger and fear and inadequacy and frustration.</p>
<h4 id="Controlling-“Mine-is-better”-Thinking"><a href="#Controlling-“Mine-is-better”-Thinking" class="headerlink" title="Controlling “Mine is better” Thinking"></a>Controlling “Mine is better” Thinking</h4><p>上面提到的两种类型是“mine is better”的极端形式，但是每个人都会或多或少带着两者的影子，特别是前者egocentric。</p>
<p>“Mine is better” thinking is the most basic problem for critical thinkers because, left unchecked, it can distort perception and corrupt judgement. The more mired we are in subjectivity, the less effective will be our critical thinking.</p>
<p>这里有一点需要弄清楚，并不是一味的否认“mine is better”，而是说“mine is better”的这种思维模式会让人对所有其他的想法弃之不理，想当然的以为自己的就是最好的。但也有可能，TA的这个想法确实是最好的。</p>
<p>回到主题中，作者给到了两种controller的方法：</p>
<ul>
<li>keep in mind that, like other people, we too are prone to it and that its influence will be strongest when the subject is one we really care about.</li>
<li>be alert for signals of its presence, those signals can be found both in feelings and thoughts:<ul>
<li>in feelings:  very pleasant， favorable sensations; the desire to embrace a statement or argument immediately, without appraising it further. or very unpleasant, negative sensations, the desire to attack and denounce a statement or argument without delay.</li>
<li>in thoughts: ideas such as “I’m glad that experts are taking such a position - I’v thought it all along and no use of wasting time analyzing this evidence – it must be conclusive”, or ideas such as “this view is outrageous because it challenges what i have always thought – I refuse to consider it”.</li>
</ul>
</li>
</ul>
<h3 id="charpter-9-errors-of-perspective"><a href="#charpter-9-errors-of-perspective" class="headerlink" title="charpter 9 errors of perspective"></a>charpter 9 errors of perspective</h3><p>开篇给了一个很好的类比：</p>
<p>当你戴着一副严重变形的眼镜去观察这个世界时，你将自己的发现与身边的人分享，你会惊讶你们看到的世界竟如此不同，困惑于他们没有能力像你那样可以看到如此清晰的世界，这时，你可能会采取如下的行为：停止与周围人的交流，坚信自己的所见，相信你们之间的分歧是他们的问题。然后，在某些偶然的机缘下，你突然发现问题不在他们，而是你佩戴的眼镜，你去找最近的配镜师，换上新的眼镜，发现此时你看到的世界才更清晰。</p>
<p>错误的观点就好像严重扭曲的镜头，只是他们不是架在我们的鼻梁上，而是居住在我们的思想中。</p>
<p>Errors of perspective are like seriously distorted lenses, except instead of being perched on our noses, they inhabit our minds.</p>
<p>They shape the attitudes and habits you bring to the evaluation of issues and create expectations that bias your thinking. Moreover, you may not even be aware of their existence unless you evaluate your patterns of thought.</p>
<p>those errors that create obstacles to critical thinking before we address any issue，具体都有哪些呢？这一章主要提到了7个：</p>
<ul>
<li>poverty of aspect</li>
<li>unwarranted assumptions</li>
<li>the either/or outlook</li>
<li>mindless conformity</li>
<li>absolutisim</li>
<li>relativism</li>
<li>bias for or against change</li>
</ul>
<p>下面一一详细说明了每一项错误的定义，弊端及改进方法。</p>
<h4 id="Poverty-of-aspect"><a href="#Poverty-of-aspect" class="headerlink" title="Poverty of aspect"></a>Poverty of aspect</h4><p>Karl Duncker, coined the term poverty of aspect to refer to <strong>the limitation that comes from taking a narrow rather than a broad view on problems and issues</strong>.</p>
<p>这里作者提到上个世纪中，学术在历史进程中的倍增和每个学术领域的知识爆炸，是引起poverty of aspect的不可忽视的原因。</p>
<blockquote>
<p>the multiplication of the academic disciplines over the course of history and the explosion of knowledge that has taken place in every discipline, especially during the previous century.</p>
</blockquote>
<p>因为领域划分越来越细，专才越来越多，全才越来越少。</p>
<p>这种专注有利有弊：</p>
<p>利：This specialization deepened understanding and multiplied scholarly insights.</p>
<p>弊：It cut off many scholars from the insights of disciplines other than their own and aggravated the condition called poverty of aspect . This poverty creates <strong>significant problems in the analysis of complex issues</strong>.</p>
<p>策略：</p>
<p><strong>recoginze the limitations of your experience and discipline your mind to broaden your outlook beyond the familiar, to examine all relevant points of view, and to understand before judging.</strong></p>
<p>「可以这样理解，学术或者某个领域的广度和深度，深度视角虽然让人对某个专属领域理解更深，但是会带来poverty of aspect, 或者说tunnel vision，看不到问题的全貌。」</p>
<h4 id="Unwarranted-assumptions"><a href="#Unwarranted-assumptions" class="headerlink" title="Unwarranted assumptions"></a>Unwarranted assumptions</h4><p>这部分篇幅很长，但是内容很赞，提到的很多例子也很有实用。「感觉自己可以对号入座了」</p>
<p>assumption是什么？</p>
<p>Assumptions are ideas that are merely taken for granted rather than produced by conscious thought.</p>
<p>making assumptions是很自然的事情，很多假定不仅无害还有益，比如你早上起来去学校，你假定手表是正常的，校车是正常发出的，教授会按时出现在教室，过马路的时候，你假定汽车是遵守交通规则的，绿灯的时候，你便可以过马路。这些日常生活中的假定对于我们的正常生活是很有帮助的，类似规则或者大家都遵守的潜在契约。</p>
<p>那么什么时候假定是毫无依据的呢？</p>
<p>whenever <strong>you take too much for granted</strong> – that is, more than is justified by your experience or the particular circumstance.</p>
<p>那么最常见的unwanted assumptions有哪些？</p>
<ul>
<li>people’s senses are always trustworthy.[beliefs and desires can distort perception, causing people to see and hear selectively or inaccurately]</li>
<li>If an idea is widely reported, it must be true.</li>
<li>having reasons proves that we have reasoned logically.</li>
<li>familiar ideas are more valid than unfamiliar ones.</li>
<li>If one event follows another in time, it must have been caused by the other.</li>
<li>Every event or phenomenon has a single cause.</li>
<li>the majority view is the correct view.</li>
<li>the way things are is the only way they should be.</li>
<li>change is always for the better.</li>
<li>Appearances are trustworthy.[外在是会误导人的]</li>
<li>If an idea is in our mind it is our own idea and deserves to be defended.[ideas in our minds, in a large number, are uncritically absorbed from other people. 大部分的我们不过是他人思想的载体，传声器]</li>
<li>The stronger our conviction about an idea, the more valid the idea.</li>
<li>if we find an error in someone’s argument, we have disproved the argument.[an argument can contain minor flaws yet be sound]</li>
</ul>
<p>策略：</p>
<p>Remember that <strong>assumptions are usually implied rather than expressed directly, much like the hidden premises in arguments</strong>. to identify them, develop the habit of reading(and listening) between the lines for ideas that are unexpressed but nevertheless  clearly implied. once you have identified an assumption, evaluate it and decide whether it is warranted.</p>
<p>这里与第八章的argument呼应了，be alert to hidden premises.</p>
<h4 id="The-either-or-outlook"><a href="#The-either-or-outlook" class="headerlink" title="The either/or outlook"></a>The either/or outlook</h4><p>either/or outlook 是什么？</p>
<p>the either/or outlook is the expectation that the only reasonable view of any issue is either total affirmation or total rejection.</p>
<p>[认为看待一个问题唯一合理的观点要么是完全肯定，要么是完全否定。]</p>
<p>what’s the problem with it?</p>
<p>it rejects the very real possibility that the most reasonable view may be both/and – in other words, a less extreme view.</p>
<p>策略：</p>
<p>whenever you are examining an issue and find yourself considering only two alternatives, ask yourself whether additional alternatives exist and, if they do, give them a fair hearing.</p>
<h4 id="Mindless-conformity"><a href="#Mindless-conformity" class="headerlink" title="Mindless conformity"></a>Mindless conformity</h4><p>盲目遵守或从众。</p>
<p>conformity is behaving as others do.[别人做什么，你便做什么。]</p>
<p>One kind of conformity like looking both ways before crossing the street,  make life easier and safer. The imitation of good role models is also a positive conformity. this kind of conformity helps us develop our capacities and become better individuals.</p>
<p>[有些从众是有益的，比如遵守交通规则，过马路前要看看两边，向好的榜样学习等]</p>
<p>但是，mindless conformity, 盲目的遵守，是毫无依据，甚至有时候是不合理的。</p>
<p>it consists of following others’ example because we are too lazy or fearful to think for ourselves.</p>
<p>广告主们最鼓励这种盲从了。</p>
<p>策略：</p>
<p>The secret to avoiding mindless conformity is to resist whatever pleading, teasing, and prodding others exert to make you think and speak and act as they do. Instead of succumbing, ask yourself what is reasonable and right and follow that path, regardless of whether that places you in the majority or the minority.</p>
<h4 id="absolutisim"><a href="#absolutisim" class="headerlink" title="absolutisim"></a>absolutisim</h4><p>定义：</p>
<p>Absolutism is the belief that there must be rules but no exceptions.</p>
<p>弊端：</p>
<p>Absolutists tend to be impatient in their thinking and therefore susceptible to oversimplification and hasty conclusions. and once a rule is established, absolutists refuse to allow exceptions.</p>
<p>策略：</p>
<p>when you begin to examine any issue, even one that you have thought about before, commit yourself to accepting the truth as you find it rather than demanding that it be neat and simple.</p>
<h4 id="relativism"><a href="#relativism" class="headerlink" title="relativism"></a>relativism</h4><p>定义：</p>
<p>relativism is the polar opposite of absolutism. the relativist believes that the existence of exceptions proves there can be no rules.</p>
<p>弊端：</p>
<p>The belief that truth is created rather than discovered.</p>
<p>Relativism also holds that morality is subjective rather than objective – in other words, that moral rules are binding only on those who accept them.</p>
<p>策略：</p>
<p>remind yourself from time to time that some ideas, and some standards of conduct, are better than others and that the challenge of critical thinking is to discover the best ones.</p>
<h4 id="bias-for-or-against-change"><a href="#bias-for-or-against-change" class="headerlink" title="bias for or against change"></a>bias for or against change</h4><p>the only reasonable attitude toward for or against change is “it depends on what the change is”.</p>
<p>Now bias for change is more common than it used to be ,no doubt because we live in an age of unprecedented change, especially in technology, because many changes are beneficial, we may make the mistake of believing that all are.</p>
<p>but bias against change is still more prevalent than bias for change.【相比拥抱变化，拒绝变化更为普遍】</p>
<p>Why?</p>
<ul>
<li><p>the force of familiarity</p>
<blockquote>
<p>Most of us prefer ideas that we know and feel comfort with.</p>
</blockquote>
</li>
<li><p>our “mine is better” perspective</p>
<blockquote>
<p>New ideas challenges our sense of security, so we tend to resist them.</p>
</blockquote>
</li>
</ul>
<p>这里举了好几个例子说明为什么很多人都遵守着传统的习惯，甚至都不曾质疑过，比较常见的一个例子是这样的，女孩的妈妈告诉她，不要把帽子放在桌上或者把外套放在床上，她便遵守了很多年，后来她长大了，成为了母亲，便教育她的孩子也要如此，小女儿便问为什么要怎样，这时她才意识到她从来没有好奇过，更没有问过原因，随后她问已经八十有余的老母亲，才知道原来在她母亲小的时候，一些邻居的小孩感染了虱子，所以她的妈妈才要求她不要把帽子放在桌上或者把外套放在床上。【这个例子有很多延伸的版本，我记得有一个切火腿的例子，基本是同一个套路】</p>
<p>策略：</p>
<p>monitor your reaction to new ideas.</p>
<p>don’t be surprised if you strongly favor or oppose an idea the first time you encounter it. However, refuse to endorse your first impression uncritically. Instead, suspend judgment until you have examined the idea carefully. If the idea proved insightful and well substantiated, accept it regardless of its oldness or newness, if it is flawed, reject it.</p>
<h3 id="chapter-10-errors-of-procedure"><a href="#chapter-10-errors-of-procedure" class="headerlink" title="chapter 10 errors of procedure"></a>chapter 10 errors of procedure</h3><p>chapter 9, examined errors of perspective,  flawed outlooks that create significant obstacles to critical thinking even before we address any issue.</p>
<p>this chapter, <strong>examine the kinds of errors that occur in the process of addressing specific issues</strong>.</p>
<p>【个人感觉chapter 9中列出那些常犯的错误，基本发现在investigation之前。而这一章则举出那些在investigation之后，人们容易犯的错误】</p>
<p>以下，详细列出6种在下定论过程中易犯的错误。</p>
<h4 id="Biased-consideration-of-evidence"><a href="#Biased-consideration-of-evidence" class="headerlink" title="Biased consideration of evidence"></a>Biased consideration of evidence</h4><p>【对于evidence，做偏向性的处理。】</p>
<p>两种形式：</p>
<ul>
<li>seeking only evidence that confirms your bias[第一阶段investigation]</li>
<li>when evidence is presented to you that challenges your bias and you choose an interpretation that favors your bias, even when other interpretations are more reasonable.[第二阶段interpretation]</li>
</ul>
<p>弊端：</p>
<p>这里举了一个例子说明为什么偏向性的处理论据，会影响我们的judgement。例子是调查一个社会现象：为什么非裔美国人受到犯罪，高失业率，受教育程度低的困扰？调查者在调查中带有坚定的信念，认为贫穷和种族歧视是引发问题的原因。随后作者列出了诸多不一样的观点，包括贫穷与犯罪并没有直接的关系，黑人社区中对于教育以及心智发展的忽视等， 认为一个完全忽视这些异见的调查分析是不公正，且不负责任的。</p>
<p>The worst aspect of bias is that if often occurs innocently, without one’s awareness. And not just among students, even professional scholars can commit this error.</p>
<p>策略：</p>
<p>begin your investigation by seeking out individuals whose views oppose your bias and then go on to those that support it. Also, choose the most reasonable interpreatation, regardless of whether it flatters your bias.</p>
<p>[这个适用于所有的errors吧？]</p>
<h4 id="double-standard"><a href="#double-standard" class="headerlink" title="double standard"></a>double standard</h4><p>【双向标准，对两种ideas采取不同的判定标准。】</p>
<p>double standard consists of using one standard of judgement for our ideas and ideas compatible with our own and an entirely different – much more demanding – standard for ideas that disagree with ours.</p>
<p>【宽以待人，严于利己，真的是太对了】</p>
<p>这个弊端太明显了。</p>
<p>策略：</p>
<p>decide in advance what judgement criteria you will use and apply those criteria consistently, even if the data in question do not support your view.</p>
<h4 id="hasty-conclusion"><a href="#hasty-conclusion" class="headerlink" title="hasty conclusion"></a>hasty conclusion</h4><p>Hasty conclusion is a premature judgment — that is, a judgment made without sufficient evidence.</p>
<p>Many people are in the habit of accepting the first judgment that comes to mind, never bothering to inquire  </p>
<p>Whether a different judgment might be as reasonable or perhaps even more so.【思考第一反应的合理性】</p>
<p>【草率定论】</p>
<p>这里回到了第一章提到的那个例子，认为智力是天生的，不可改变的，随后基于这个观点，做出了一系列不合理的举措。</p>
<p>策略：</p>
<p>identify all possible conclusions before you select any one. Then decide whether you have sufficient evidence to support any of those conclusions and, if so, which conclusion that is.</p>
<p>Remember that there is no shame in postponing judgment until you obtain additional evidence.</p>
<h4 id="overgeneralization-and-stereotyping"><a href="#overgeneralization-and-stereotyping" class="headerlink" title="overgeneralization and stereotyping"></a>overgeneralization and stereotyping</h4><p>【翻译下：以偏概全及坚持以偏概全不动摇，哈哈】</p>
<p>generalizing is the mental activity by which we draw broad conclusions from particular experiences.</p>
<p>【从特定的经验中提取出一般性的结论】</p>
<p>generalizing is not only natural but indispensable to learning. 【我们不可能看到一个事物的所有实例，比如并不需要看到这世上所有的狗才能了解狗，在有限的时空中，认识可见的实例即可，当样本量开始增大时，随时准备好修正原始的认知。】</p>
<p>generalizing挺好，但是over了就不好了。</p>
<p>It is easy to overgeneralize – that is, to ascribe to all the members of a group what fits only some members.</p>
<p>好比你认识一个邋遢的韩国人，然后就断定所有的韩国人都邋遢，这显然是不对的。</p>
<p>a stereotype is an overgeneralization that is especially resistant to change.【坚持以偏概全不动摇】</p>
<p>the most common types of stereotypes are ethnic and religious. 【最常见的模式化观念是种族和宗教】</p>
<p>弊端：</p>
<p>both overgeneralizations and stereotypes hinder critical thinking because <strong>they prevent us from seeing the differences among people within groups</strong>.</p>
<p>策略：</p>
<p>resist the urge to force individual people, places, or things into rigid categories. In forming generalizations, keep in mind that <strong>the more limited your experience, the more modest you should make your assertion</strong>.</p>
<h4 id="oversimplification"><a href="#oversimplification" class="headerlink" title="oversimplification"></a>oversimplification</h4><p>simplification is not only useful but essential, particularly at a time like the present, when knowledge is expanding so rapidly.【大道至简】</p>
<p>oversimplification, on the other hand, goes beyond making complex ideas easier to grasp; it twists and distorts the ideas. Instead of informing people, oversimplification misleads them.【过于简单以至于都会误导他人】</p>
<p>Oversimplification often occurs in matters about which people have strong feelings.</p>
<p>策略：</p>
<p>Be alert for oversimplification in what you read and hear, and avoid it in your own thinking and expression.</p>
<h4 id="post-hoc-fallacy"><a href="#post-hoc-fallacy" class="headerlink" title="post hoc fallacy"></a>post hoc fallacy</h4><p>这个出自拉丁术语的缩写，意思是” after this, therefore beacuse of this.”,直白点就是说，B发生在A之后，那么A就是B发生的原因。这个在chapter 3的understand cause and effect中提到过。事情发生的先后跟因果可能没有任何关系。</p>
<p>The error in this thinking is the failure to realize that mere order and closeness in time does not prove a cause-and-effect relationship.</p>
<p>这种想法是大多数迷信的基础，认为事情的发生都有关联，比如镜子破了，今天有霉运了。</p>
<p>you should be careful to avoid the post hoc error ——<strong>withhold judgment until you have evaluated all possible explanations, including coincidence.</strong></p>
<h3 id="chapter-11-errors-of-expression"><a href="#chapter-11-errors-of-expression" class="headerlink" title="chapter 11 errors of expression"></a>chapter 11 errors of expression</h3><p>这里需要明白的一点是，在表达中出现的errors也是thinking errors的一种，因为他们源于你的思想。</p>
<p>they originate in the mind, more or less consciously.</p>
<p>具体有哪些？</p>
<ul>
<li>contradiction【自相矛盾】</li>
<li>arguing in a circle</li>
<li>meaningless statement</li>
<li>mistaken authority</li>
<li>false analogy</li>
<li>irrational appeal【不合理的诉求】</li>
</ul>
<p>来看看每种error的定义，弊端以及对应策略。</p>
<h4 id="contradiction"><a href="#contradiction" class="headerlink" title="contradiction"></a>contradiction</h4><p>The principle of contradiction is one of the fundamental principles of logic.</p>
<p><strong>no statement can be both true and false at the same time in the same way.</strong></p>
<p>the best way to see its correctness is to try to construct a statement that disproves it.</p>
<p>举了三个例子，这里提一下第一个：</p>
<p>argument：O. J.  Simpson 谋杀了Nicole Brown Simpson</p>
<p>这里，O. J.  Simpson要么谋杀了Nicole Brown Simpson ，要么就没有谋杀，二选一，但是如果O. J.  Simpson雇佣别人去谋杀了Nicole Brown Simpson呢？这样的话，O. J.  Simpson到底是不是谋杀了Nicole Brown Simpson？ 这时候，你就不可以说，他既谋杀了Nicole Brown Simpson又没有谋杀Nicole Brown Simpson。他不是真正的实施者，算是没有谋杀？但是他是推动者，要为Nicole Brown Simpson的死负责，算是谋杀？更合理的表达可以是：he would have murdered her in the sense of being responsible for the act but not in the sense of having carried it out.</p>
<p>在你的表达中，警惕出现自相矛盾。</p>
<p>如何避免？</p>
<p>monitor what you say and write.</p>
<p>The moment you detect any inconsistency, examine it carefully. Decide whether it is explainable or whether it constitutes a contradiction. If it proves to be a contradiction, reexamine the issue and take a view that is both consistent and reasonable.</p>
<h4 id="arguing-in-a-circle"><a href="#arguing-in-a-circle" class="headerlink" title="arguing in a circle"></a>arguing in a circle</h4><p>用不同的方式去重复同一个论点，而不是给出对应的论据。</p>
<p>A person arguing in a circle attempts to prove a statement by repeating it in a different form.</p>
<p>如何避免？</p>
<p>To detect circularity in your writing or speaking, it is not enough to read and nod in agreement with yourself. You must <strong>check to be sure the evidence you offer in support of your view is not merely a restatement of the view in different words</strong>.</p>
<h4 id="meaningless-statement"><a href="#meaningless-statement" class="headerlink" title="meaningless statement"></a>meaningless statement</h4><p>meaningless statement更像是毫无意义的废话，严肃的学术论文中，自然应该避免，但是一般的文学作品中，meaningless statement还是很多的。</p>
<p>in the course of presenting ideas, people often find it useful or necessary to present the reasons that underlie their thoughts and actions. A meaningless explanation is one in which the reasons make no sense.</p>
<p>如何避免？</p>
<p>to detect meaningless statements in your writing, look at what you have said as critically as you look at what other people say. Ask, Am I really making sense?</p>
<h4 id="mistaken-authority"><a href="#mistaken-authority" class="headerlink" title="mistaken authority"></a>mistaken authority</h4><p>own authority to someone who does not possess it.</p>
<p>比如问一个扮演医生的演员，这个角色让他学到了什么是可以的，但是问他那一类需要专业性知识才能解答的问题，比如医患关系，就不合理的。</p>
<p>如何避免？</p>
<p>to avoid the error of mistaken authority, check to be sure that all the sources you cite as authorities possess expertise in the particular subject you are writing about.</p>
<h4 id="false-analogy"><a href="#false-analogy" class="headerlink" title="false analogy"></a>false analogy</h4><p>错误的类比。</p>
<p>an analogy is an attempt to explain something relatively unfamiliar by referring to something different but more familiar, saying in effect, “this is like that.”</p>
<p>好的类比，可以让人瞬间解惑，而不恰当的类比会误导他人。</p>
<p>An analogy is acceptable as long as the similarities claimed are real. 【不过，好的类比需要对两种事物都有很好的理解，正确地get到两者的相似处，还挺难的，可遇不可求】</p>
<p>比如典型的一个错误类比：Animals, which move, have limbs and muscles, the earth has no limbs and muscles, hence it doesn’t move.</p>
<p>如何避免？</p>
<p>Always test your analogies to be sure that the similarities they claim are real and reasonable and that no important dissimilariteies exist.</p>
<h4 id="irrational-appeal"><a href="#irrational-appeal" class="headerlink" title="irrational appeal"></a>irrational appeal</h4><p>不合理的诉求。</p>
<p>An irrational appeal encourages people to accept ideas for some reason rather than reasonableness.</p>
<p>Such an appeal says, in effect, “there’s no need to think critically about this idea or compare it with alternative ideas – just accept it.”</p>
<p>不合理的诉求中最常见的类型，有如下这六种：</p>
<ul>
<li><p>irrational appeal to emotion</p>
<blockquote>
<p>irrational appeal to emotion uses feelings as a substitute for thought。</p>
<p>用feelings来代替思考。比如一个律师为他的客户辩护，描述他的种种优良品质，对父母的爱，对动物的爱，以引起陪审团的同情，忘记那些指控他的证据，那他犯了什么罪？他谋害了他的父母，竟然还以他现在是个孤儿为由来请求法庭怜悯。【我擦嘞。】</p>
<p>更合理的方式：</p>
<p>A rational appeal to emotion not only stimulates feelings but also demonstrates their appropriateness to the ideas being presented.</p>
</blockquote>
</li>
<li><p>irrational appeal to tradition</p>
<blockquote>
<p>an irrational appeal to tradition urges maintaining the tradition merely because we’ve always done so. [因为传统一直如此，所以我们也应该这样。如果真的是这样，人类大概是不会进步了，因为要保持传统啊，哪一次革命性的进步不是对传统的革新呢？]</p>
<p>更合理的方式：</p>
<p>An appeal to trandition must not only tell people how old and revered the tradition is but also how that it still deserves our endorsement.</p>
<p>合理的诉求会告诉你为什么这样的传统依然值得我们认可。</p>
</blockquote>
</li>
<li><p>irrational appeal to moderation</p>
<blockquote>
<p>An irrational appeal to moderation is offered on the erroneous presumption that moderation is always preferable.</p>
<p>基于错误的假设，认为适度总是可取的。【过于看重适度了。】</p>
<p>书中举了奴隶制度为例，有些人提出可以适度的废止奴隶制，也就是允许一部分人有权决定是否拥有奴隶。他们忘了，奴隶也是同样的人，他们有权利决定是不是愿意被奴隶主所拥有。</p>
<p>适度不是通用的。</p>
<p>更合理的方式：</p>
<p>includes an explanation of why the more moderate idea or action is preferable to less moderate alternatives.</p>
</blockquote>
</li>
<li><p>irrational appeal to authority</p>
<blockquote>
<p>此处authority 可以是人，书，或者文档，机构。</p>
<p>An irrational appeal to authority says, “Here is what one or more authorities say — accept it unquestonly”。对于权威所说的，没有任何质疑，全盘接受，基于part1的洗脑，这种诉求明显不能接受。</p>
<p>更合理的方式：</p>
<p>Says “Here is what one or more authorities say,” and proceeds to show why that view should be accepted.</p>
</blockquote>
</li>
<li><p>irrational appeal to common belief</p>
<blockquote>
<p>这种诉求犯了unwarranted assumption，因为大多数人都相信，所以相信吧。</p>
<p>An irrational appeal to common belief says, “Believe this because most people believe it”.</p>
<p>更合理的方式：</p>
<p>says “Moset people believe this”, and goes on to show the reasonableness of the belief.</p>
</blockquote>
</li>
<li><p>irrational appeal to tolerance</p>
<blockquote>
<p>An irrational appeal to tolerance says, “Because tolerance is good in general, it is the right response to every situation, including this one.”</p>
<p>我觉得这里连前提都是有问题的，tolerance并不是回应所有情况的合理反应。</p>
<p>更合理的方式：</p>
<p>explans why tolerance is appropriate in the particular situation in question.</p>
</blockquote>
</li>
</ul>
<p>总而言之，判断一个诉求合理与否，看它是否给到了相应的解释。</p>
<p>the best way to distinguish between rational and irrational appeals is to ask whether the appeal is accompanied by an explanation of why you should accept it.</p>
<h3 id="chapter-12-errors-of-reaction"><a href="#chapter-12-errors-of-reaction" class="headerlink" title="chapter 12 errors of reaction"></a>chapter 12 errors of reaction</h3><p>so far, 7 errors of perspective, 6 errors of procedure, 6 errors of expression .</p>
<p>何时发生？</p>
<p>errors of reaction occur after we have expressed our ideas and others have criticizes or changenged them.</p>
<p>为什么会发生？</p>
<p>whatever does not flatter us or our point of view reflects our urge to save face and preserve our self-image.</p>
<p>each of us has a self-image, generally a favorable one.</p>
<p>some people manage to resist the tempation to save face, but most of us fall victim to it from time to time.</p>
<p>For still others, it is neither the particular aspect of the image nor the role involved that triggers the face-saving reaction. it is the people who are observing.</p>
<p>总的来说，主要是face-saving.</p>
<p>有哪些类型？</p>
<ul>
<li>automatic rejection</li>
<li>changing the subject</li>
<li>shifting the burden of proof</li>
<li>Straw man [稻草人]</li>
<li>attacking the critic</li>
</ul>
<p>来逐个了解下。</p>
<h4 id="automatic-rejection"><a href="#automatic-rejection" class="headerlink" title="automatic rejection"></a>automatic rejection</h4><p>可以粗暴地类比成：非我族类，我不听，我不听，我不听。</p>
<p>开启自动反对模式。</p>
<p>automatic rejection is to reject criticism without giving it a fair hearing.</p>
<p>合理的做法应该是：evaluate the challenges and make an honest determination of its worth.</p>
<p>这里作者举了一个他朋友和他同事的例子，说明automatic rejection的诱惑不易抗拒。</p>
<p>如何避免？</p>
<p>A good way to lessen that temptation is to put some emotional distance between your ideas and your ego. Think of them as possessions that you can keep or discard rather than as extensions of yourself. This will make your less defensive about them.</p>
<h4 id="changing-the-subject"><a href="#changing-the-subject" class="headerlink" title="changing the subject"></a>changing the subject</h4><p>转移话题。</p>
<p>Changing the subject consists of abruptly turning a discussion in a different direction.</p>
<p>转移话题并不总是会犯错。</p>
<p>changing the subject is an error only when the original issue is appropriate and the shift is used deceptively.</p>
<p>【我觉得如果是为了避免自己陷入窘困或者被质疑，感觉到自己的观点被挑战，故意避而不谈，转移话题，这种才算是errors】</p>
<p>如何避免？</p>
<p>Intentionally changing the subject frustrates the purpose of discussion. To avoid this error, face difficult questions head-on.</p>
<p>if you know the answer, state it. if the issue is too complex to permit a certain answer, state what you believe to be probable and explain your reasoning. if you lack sufficient knowledge to speak of probabilities, say so. No reasonable person will think less of you for candidly admitting ignorance.</p>
<h4 id="shifting-the-burden-of-proof"><a href="#shifting-the-burden-of-proof" class="headerlink" title="shifting the burden of proof"></a>shifting the burden of proof</h4><p>The errors of shifting the burden of proof consists of demanding that others disprove our assertions.</p>
<p>当别人要求你提供论据时，你的反应是，你能给出反对我论点的论据？如果不能，就接受。这就是转移论据的责任。</p>
<p>如何避免？</p>
<p>you wll be less likely to shift the burden of proof if you learn to expect your ideas to be questioned and criticized and prepare to support them before you express them.</p>
<h4 id="straw-man"><a href="#straw-man" class="headerlink" title="straw man"></a>straw man</h4><p>稻草人原意是指用稻草作出模型，穿着人类的衣服，放在田间吓走小鸟的那种。这里的straw man具体指：</p>
<p>put false words in someone else’s mouth and then expose their falsity, conveniently forgetting that the other person never said them.</p>
<p>【有些强加给他人错误的观点，然后指出他人的错误的味道，这戏有点多啊。】</p>
<p>如何避免？</p>
<p>be scrupulously accurate in quoting or paraphrasing other people’s words.</p>
<h4 id="attacking-the-critic"><a href="#attacking-the-critic" class="headerlink" title="attacking the critic"></a>attacking the critic</h4><p>这个其实老祖宗就说过，对事不对人。</p>
<p>别人一反对你的观点，你就开始攻击别人，太幼稚了。</p>
<p>Attracking the critic is the attempt to discredit an idea or argument by disparaging the person who expressed it.</p>
<p>如何避免？</p>
<p>understand that ideas and people are not synonymous. it is unreasonable to substitute speculations or judgments about people themselves for judgments of their ideas.</p>
<h3 id="Chapter-13-The-errors-in-combination"><a href="#Chapter-13-The-errors-in-combination" class="headerlink" title="Chapter 13 The errors in combination"></a>Chapter 13 The errors in combination</h3><p>这一章是对前面几章所列出的errors的梳理，前面都是单独去介绍每一个error，但是现实中，往往是多个error同时出现。这一章先整理了前面列出来的那些坑，随后举了3个实例来学以致用，最后对比了几个容易混淆的概念。</p>
<p>Part 2 中提到的所有error及对应的处理方法：</p>
<p><strong>The most fundamental critical thinking error is “Mine is better” thinking. in which we assume that our ideas must be superior to other people’s simple because they are our ideas. In reality, of course, our ideas are as likely to be mistaken as anyone else’s. To overcome “mine is better” thinking, we must be as critical of our own ideas as we are of other people’s.</strong></p>
<table>
<thead>
<tr>
<th>The error</th>
<th>how to recognize it and deal with it</th>
</tr>
</thead>
<tbody><tr>
<td>Poverty of aspect</td>
<td>limiting one’s perspective on issues; having tunnel vision. poverty of aspect sometimes is attributable to intellectual sloth; other times it is a by-product of specialized education and training.  to avoid poverty of aspect when evaluation issue, look beyond the familiar, examine all relevant points of view, and understand before judging.</td>
</tr>
<tr>
<td>Unwarranted assumptions</td>
<td>assumptions are ideas that are taken for granted rather than consciously reasoned out. When what is taken for granted is unjustified by  one’s experience or by the situation, the assumption is unwarranted. Because assumptions seldom are expressed directly, the only way to identify them is to “read between the lines” for what is unstated but clearly implied.</td>
</tr>
<tr>
<td>Either/or outlook</td>
<td>The expectation that the only reasonable view of any issue will be total affirmation or total rejection. This error rules out the possibility that the most reasonable view might lie between the extremes. To avoid this error, consider all possible alternatives</td>
</tr>
<tr>
<td>Mindless conformity</td>
<td>Adopting others’ views unthinkingly because we are too lazy or fearful to form our own. To overcome this error,  develop the habit of resisting the internal and external pressures and make up your own mind.</td>
</tr>
<tr>
<td>Absolutism</td>
<td>the belief that rules do not admit of exceptions. This belief causes us to demand that the truth be neat and simple, When in reality it is often messy and complex. To avoid this error, accept the truth as you find it rather than requiring that it fit your preconceptions.</td>
</tr>
<tr>
<td>Relativism</td>
<td>The belief that no view is better than any other, that any idea you choose to embrace is automatically correct. To avoid relativism, remind yourself that some ideas and some standards of conduct, are better than others and that the challenge of critical thinking is to discover the best ones.</td>
</tr>
<tr>
<td>Bias for or against change</td>
<td>Bias for change assumes that change is always for the best; bias against change assumes that change is always for the worst. To avoid both errors, give any proposal for change a fair hearing and decide, apart from your predisposition, whether the change is actually positive or negative.</td>
</tr>
<tr>
<td>biased consideration of evidence</td>
<td>One form of this error is seeking evidence that confirms your bias and ignoring evidence that challenges it. Another is interpreting evidence in a way that favors your bias. To avoid this error, begin your investigation by seeking out individuals whose views oppose your bias, then go on to those whose views support it. Also, choose the most reasonable interpretation of the evidence.</td>
</tr>
<tr>
<td>Double standard</td>
<td>Using one set of criteria for judging arguments we agree with and another standard for judging arguments we disagree with. To avoid this error, decide in advance what judgment criteria you will use and apply those criteria consistently, regardless of whether the data in question support your view.</td>
</tr>
<tr>
<td>Hasty conclusion</td>
<td>A premature judgment – that is, a judgment made without sufficient evidence. To avoid drawing a hasty conclusion, identify all possible conclusions before you select any one. Then decide whether you have sufficient evidence to support any of those conclusions and, if so, which conclusion that is.</td>
</tr>
<tr>
<td>Overgeneralization and stereotyping</td>
<td>Overgeneralization is ascribing to all the members of a group a quality that fits only some members. A stereotype is an overgeneralization that is rigidly maintained. To avoid thest errors, resist the urge to force individual people, places and things into hard categories. And keep in mind that the more limited your experience, the more modest your assertions should be.</td>
</tr>
<tr>
<td>Oversimplification</td>
<td>Oversimplification goes beyond making complex ideas easier to grasp - it twists and distorts the ideas. Instead of informing people, oversimplification misleads them. To avoid this error, refuse to adopt superficial views and make a special effort to understand issues in their complexity.</td>
</tr>
<tr>
<td>Post hoc fallacy</td>
<td>This error is rooted in the idea that when one thing occurs after another, it must be the result of the other, when in reality the sequence may be coincidental. To avoid the post hoc fallacy, withhold judgment of a cause-and-effect relationship until you have ruled out other possible causes, including coincidence.</td>
</tr>
<tr>
<td>Contradiction</td>
<td>To claim that a statement is both true and false at the same time in the same way. to avoid this error, monitor what you say and write. The moment you detect any inconsistency, examine it carefully. Decide whether it is explainable or whether it constitutes a contradiction. If it is a contradiction, revise your statement to make it consistent and reasonable.</td>
</tr>
<tr>
<td>Arguing in a circle</td>
<td>Attempting to prove a statement by repeating it in a different form. To avoid this error, check your arguments to be sure  you are offering genuine evidence and not merely repeating your claim.</td>
</tr>
<tr>
<td>Meaningless statement</td>
<td>A statement in which the reasoning presented makes no sense. To avoid this error, check to be sure that the reasons you offer to explain your thoughts and actions really do explain them.</td>
</tr>
<tr>
<td>Mistaken authority</td>
<td>Ascribing authority to someone who does not possess it. To avoid this error, check to be sure that all the sources you cite as authorities possess expertise in the particular subject you are writing or speaking about.</td>
</tr>
<tr>
<td>False analogy</td>
<td>An analogy is an attempt to explain something relatively unfamiliar by referring to something different but more familiar, saying, in effect” This is like that”. A false analogy claims similarities that do not withstand scrutiny. To avoid this error, test your analogies to be sure that the similarities they claim are real and reasonable and that no important dissimilarities exist.</td>
</tr>
<tr>
<td>Irrational appeal</td>
<td>Appeals to emotion, tradition, moderation, authority, common belief and tolerance may be either rational or irrational. they are irrational, and therefore unacceptable, when they are unreasonable in the particular situation under discussion and / or when they discourage thought. To avoid this error, make sure your appeals complement thought rather than substitue for it.</td>
</tr>
<tr>
<td>Automatic rejection</td>
<td>The refusal to give criticism of your ideas or behaviors a fair hearing. To avoid this error, thinking of your ideas as possessions that you can keep or discard rather than as extension of your ego. This will make you less defensive about them.</td>
</tr>
<tr>
<td>Changing the subject</td>
<td>Abruptly and deceptively turning a discussion away from the issue under discussion. To avoid this error, face difficult questions head on rather than trying to avoid them.</td>
</tr>
<tr>
<td>Shifting the burden of proof</td>
<td>Demanding that others disprove our assertions. To avoid this error, understand that the burden of supporting any assertion rests with the person who makes it rather than the one who questions it. Accept the responsibility of supporitng your assertions.</td>
</tr>
<tr>
<td>Straw man</td>
<td>To commit the error of straw man is to put false words in someone else’s mouth and then expose their falsity, vonverniently forgetting that the other person never said them. To avoid this error, be scrupulously accurate in quoting or paraphrasing other people’s words.</td>
</tr>
<tr>
<td>Attacking the critic</td>
<td>Attempting to discredit an idea or argument by disparaging the person who expressed it. To avoid attacking the critic, focus your critical thinking on ideas rather than the people who express them.</td>
</tr>
</tbody></table>
<h4 id="sample-combinations-of-errors"><a href="#sample-combinations-of-errors" class="headerlink" title="sample combinations of errors"></a>sample combinations of errors</h4><p>这里举了3个样例，我们看看第二个：</p>
<p>Sam 13岁的时候，并不真的想抽烟，但是他的朋友怂恿他去做，然后他做的还不错，渐渐地，由偶尔抽烟到每天一包，抽烟的成本上升，他开始从父母那里偷钱买烟，对此他的解释是要么拿父母的钱然后抽烟，要么就不抽烟，但是他并不打算不抽烟，所以没有办法，只能从父母那里拿钱。现在Sam40岁，结婚有孩子，依然抽烟，他患上了哮喘，但是他自己将这归于过敏，每一个新的外科医生都会告诉他吸烟的危害，他反驳，“他们无法证明吸烟会导致任何疾病，所以应该由个人自己决定是否会受到伤害”。当烟草公司被指控加入尼古丁并禁止报道不利的检测结果时，Sam为他们辩护，这些人这么富有，他们没有理由伤害数以万计的同类。</p>
<p>这里，Sam踩了哪些坑？第一个就是mindless conformity，在朋友的怂恿下，不质疑地接受了抽烟，然后是either / or outlook， 认为只有两种方法去解决抽烟带来的成本问题，要么拿父母的钱继续抽，要么不抽烟，其实可以有第三种，Sam自己去做兼职赚钱抽烟，后面他自己换上哮喘，依然固执地将这个归于过敏，这是face-saving，他对外科医生有关吸烟有害的回应，犯了unwarranted assumption的错误，认为每个人都了解吸烟的方方面面，有权利去决定是否被伤害，而实际上很多人可能并不真的了解吸烟的危害。对于烟草公司的问题，他也是毫无根据地假定富有的人是不会做为了赚钱做坏事的。</p>
<h4 id="A-sensible-view-of-terminology"><a href="#A-sensible-view-of-terminology" class="headerlink" title="A sensible view of terminology"></a>A sensible view of terminology</h4><p>三个容易混淆的errors。</p>
<table>
<thead>
<tr>
<th>Oversimplification</th>
<th>Hasty conclusion</th>
<th>Assumption</th>
</tr>
</thead>
<tbody><tr>
<td>is stated directly</td>
<td>is stated directly</td>
<td>is unstated but implied</td>
</tr>
<tr>
<td>occurs as a simple assertion or as the premise of an argument</td>
<td>occurs as the conclusion of an argument</td>
<td>Often is a hidden premise in an argument</td>
</tr>
<tr>
<td>distorts reality by misstatement or omission</td>
<td>fails to account for one or more significant items of evidence</td>
<td>may be either warranted or unwarranted.</td>
</tr>
</tbody></table>
<p>Knowing the right terminology is advantageous, but more important is recognizing where reasoning has gone wary and being able to explain the error in terms of the issue involved.</p>
]]></content>
      <categories>
        <category>Reading</category>
      </categories>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>读《这才是心理学：看穿伪心理学的本质》</title>
    <url>/posts/notes-of-how-to-think-straight-about-psychology/</url>
    <content><![CDATA[<p>长文慎入。</p>
<span id="more"></span> 
<p>刷的是第10版的中译本，诚如序中所言，这是一本与众不同的心理学教科书。</p>
<p>全书共12章，主旨内容在结语部分已阐明，摘录如下：</p>
<ul>
<li><p>心理学的进步是通过研究<strong>可解的实证问题</strong>而取得的</p>
</li>
<li><p>心理学家提出<strong>可证伪</strong>的理论来解释他们的研究发现</p>
</li>
<li><p>理论中的概念都具有<strong>操作性定义</strong>，这些定义将随着证据的积累而逐渐演变</p>
</li>
<li><p>这些理论是通过<strong>系统实证</strong>的方法来检验的，用这种方法收集来的数据是公开的，也就是说，它允许其他科学家重复这些实验并提出批评</p>
</li>
<li><p>心理学家的数据和理论，只有在那些经过<strong>同行评审</strong>程序的科学刊物上发表之后，才算是进入了科学领域</p>
</li>
<li><p>实证主义之所以具有系统性，是因为它遵循<strong>控制和操纵</strong>的逻辑，这二者也是真实验的特性</p>
</li>
<li><p>心理学家采用许多不同的方法来获得他们的结论，这些方法的优缺点各有不同</p>
</li>
<li><p>最终被揭示的行为规律，通常情况下都是一种<strong>概率</strong>关系</p>
</li>
<li><p>大多数时候，知识只能通过对众多实验数据的慢慢积累得到。虽然这些实验都有各自的缺陷，但是他们总能<strong>聚合</strong>成为一个共识性的结论。「聚合性证据原则」</p>
</li>
</ul>
<p>每章节都是对上诉某个或某几个论点的详细说明，因为觉得翻译的很好，所以以下对每一章节的笔记，除偶有用连接词来将部分段落连接起来外，基本是原文摘抄，个人的一些看法或者胡扯用「」做了标记。</p>
<p>如果你也是一名心理学小白，强烈建议将整本书从头刷到尾，特别是作者所列出的诸多精彩的实例和类比，非常具有启发性，这里鉴于篇幅，未一一列出。</p>
<h4 id="Chapter01-心理学充满生机"><a href="#Chapter01-心理学充满生机" class="headerlink" title="Chapter01-心理学充满生机"></a>Chapter01-心理学充满生机</h4><ul>
<li><p>弗洛伊德问题</p>
<p>大多数弗洛伊德的观点都曾经并且现在依旧被大多数<strong>实证取向</strong>的心理学家排斥。</p>
<p>弗洛伊德观点存在的问题：</p>
<ul>
<li>不采用控制实验</li>
<li>认为个体研究足以证明理论的真实或谬误</li>
<li>根据他得到的数据（<strong>个案研究和内省</strong>）建立了一套精细的理论，而这些数据并不足以支撑此理论；他专注于构建复杂的理论构架，但并没有像许多现代心理学家那样，保证这些理论建在<strong>可靠、可重复</strong>的因果关系之上</li>
</ul>
<p>科学分两步走，第一步提出假设，第二步验证假设。</p>
<p>而弗洛伊德工作的一个缺陷就是，他从不进入第二步，没有从个案研究中建立的有趣假设转向对这些假设的真正检验。</p>
</li>
<li><p>现代心理学的多样性</p>
<p>构成心理学的不是一整套宏大的理论，而是许许多多不同的理论，每个理论仅仅能够解释行为的有限方面。</p>
</li>
<li><p>科学的统一性</p>
<p>心理学是<strong>有关行为的，以数据为基础</strong>的科学研究。</p>
<p>心理学的独立学科体现在：</p>
<ul>
<li>心理学研究采用科学方法来探究人类及动物的所有行为</li>
<li>从这一知识衍生出的实际应用是具备科学基础的</li>
</ul>
<p>科学的三个相互关联的重要特征：</p>
<ul>
<li>应用系统的实证主义</li>
<li>产生公共知识</li>
<li>验证可解决的问题，产生可验证的理论</li>
</ul>
</li>
<li><p>常识的误区</p>
<p>作为一门新兴的科学，心理学经常会和世俗智慧相冲突。</p>
<p>世俗智慧是一种属于后见之明的智慧，它在真正预测性的意义上是无用的。</p>
<p>昨日的常识往往变成今天的谬论。</p>
</li>
</ul>
<h4 id="Chapter02-可证伪性"><a href="#Chapter02-可证伪性" class="headerlink" title="Chapter02-可证伪性"></a>Chapter02-可证伪性</h4><p>对某理论的新证据进行评价，必须使新的数据具有证伪该理论的可能性。这项原则通常被称为“<strong>可证伪性标准</strong>“。</p>
<p>这里，需要对理论这个词有一个正确的认识。</p>
<blockquote>
<p>当科学家说到“理论”的时候，他们指的不是未经验证的猜想。</p>
<p>科学上的理论是一组具有内在联系的概念，它们能对一组数据作出<strong>解释</strong>，并对未来实验的结果作出<strong>预测</strong>。</p>
</blockquote>
<p>好的理论能够作出具体的预测，<strong>具有高度的可证伪性</strong>。</p>
<p>可证伪性原则意指理论被证实的次数并不是最重要的因素。原因在于，正如“敲门节奏理论”所展示的那样，并不是所有的证实都是等价的。证实能否令人信服，取决于预测在何种程度上将自己暴露在可能被证伪的情境下。</p>
<p>再提弗洛伊德问题</p>
<p>弗洛伊德的理论使用一个复杂的概念结构，在事后解释人类行为，但并不作事前的预测。简而言之，弗洛伊德的理论可以解释一切，但它不作具体的预测。</p>
<p>警惕那些不可证伪的理论「弗洛伊德的坑」：</p>
<blockquote>
<p>这些（不可证伪的）理论拥有巨大的心理吸引力，其秘密在于它们能够解释一切事情。预先知道无论什么事情发生，你都能理解它，不仅给你智力上的掌控感，而且，更重要的是，让你拥有应对这个世界所需的安全感.</p>
</blockquote>
<p>「可惜，这种不可证伪的理论是错的」</p>
<p>我们不能仅关注理论被证实的数量，更要关注验证本身的质量。</p>
<p>科学家侧重于已知事实的前沿，而忽视那些已经被充分证实的问题（所谓的公理）。为了推进知识的进步，科学家们必须一直身处已知的前沿。当然，这里是很多事情都不确定的地方。但科学进步正是通过这个过程来实现的，即试图在已知的前沿减少不确定性。</p>
<h4 id="Chapter03-操作主义和本质主义"><a href="#Chapter03-操作主义和本质主义" class="headerlink" title="Chapter03-操作主义和本质主义"></a>Chapter03-操作主义和本质主义</h4><p>本质主义者：</p>
<ul>
<li>从内在本质或者本质属性的角度对现象作出最终解释，才算得上是好的科学理论</li>
<li>无法对现象作出最终解释的任何理论都是无用的，这样的理论不能反映真实的内在情况，不能反映世界存在方式的本质。</li>
</ul>
<p>操作主义者：</p>
<ul>
<li>科学理论里的概念必须立足于可观测事件，或与可观测事件相关联，而这些可观测事件是可以被测量的。</li>
<li>在科学领域里，定义一个概念靠的是一系列操作，而非单独的行为事件或任务</li>
</ul>
<p>以美国食品和药物管理局对各类食物不可接受的污染程度的定义为例：</p>
<p>番茄汁中“不可接受”的污染水平是每100克中超过10个苍蝇卵，蘑菇中“不可接受”的污染水平是每100克有五个以上的2毫米以上的蛆。</p>
<p>简单粗暴，却极具操作性。</p>
<p>科学不去回答本质主义者的问题，而是通过<strong>对概念进行操作性定义</strong>得以进步。</p>
<p>科学的操作态度和本质主义者在追求绝对定义之间最显著的区别在于，<strong>理论术语的用法在科学实践中不断演进，而不是在针对文字意义的争论中获得发展</strong>。</p>
<p>概念的操作性定义要想有用，必须同时具备<strong>信度</strong>和<strong>效度</strong>。</p>
<ul>
<li><p>信度与效度</p>
<p>信度：测量工具的一致性。如果我们多次测量同一概念得到的结果是近似的，那么我们就说测量工具表现出较高的信度。</p>
<p>任何总能够产生相同结果的系统所具备的一种属性。</p>
<p>效度：一个测量工具（操作性定义）是否测量了它本应测量的内容。</p>
<p>书中举了用测鞋码器测智商的例子，高信度，低效度，或者说是无效度。</p>
</li>
</ul>
<p><strong>很少有科学概念几乎完全是通过可观测的操作来定义的</strong>。大部分概念的定义采用更为间接的方式。比如A型行为模式，通过一系列二级概念来定义：强烈的竞争欲望、潜在的敌意、赶时间行为、达成目标的强烈驱力等等。</p>
<p>此外，还需要知道，一个科学概念的定义并不是固定不变的，而是随着相关观测结果的不断丰富而发生变化。</p>
<p>在评估一个心理学理论的可证伪性时，操作性定义的理念是一个非常有用的工具。概念有没有直接或间接地建立在可观测操作的基础上，是识别不可证伪的理论的重要线索。</p>
<p><strong>科学中人性化的力量就是让知识公开化，让任何有冲突的观点都能以一种双方都接受的方式得以检验</strong>。</p>
<p>这里，作者提到了节省原则，这一原则在后续章节中也曾反复出现。</p>
<p>何为节省原则？</p>
<p>当两种理论拥有同样的解释效力时，我们倾向于选择那个比较简单的理论（涉及较少的概念和概念之间的关系）。</p>
<p>「在第六章比较，操纵和控制中，节省原则多次出现」</p>
<h4 id="Chapter04-见证和个案研究证据"><a href="#Chapter04-见证和个案研究证据" class="headerlink" title="Chapter04-见证和个案研究证据"></a>Chapter04-见证和个案研究证据</h4><p>「先来接受一个劲爆的事实」</p>
<p><strong>个案研究和见证作为评估心理学理论和治疗的证据是毫无价值的</strong>。</p>
<ul>
<li><p>个案研究</p>
<p>个案研究是指对一个个体或很小的群体集中而详细的调查。</p>
<p>从个案研究或临床经验中获得的灵感，在<strong>特定问题的早期研究阶段或许比较有用</strong>，因为它们可以提示哪些变量需要进一步研究。</p>
<p>当我们从科学研究的早期阶段（在此阶段个案研究可能是极为有用的）步入更为成熟的理论检验阶段之后，情况就大大不同了。由于个案研究在特定理论的检验中不能作为证实或证伪的证据，所以它在科学研究的后期不再有效。其原因就是：个案研究和见证叙述都是所谓的“孤立事件”，缺乏比较性信息，而这种信息对于排除其他可能的解释来说是必要的。</p>
</li>
<li><p>安慰剂效应</p>
<p>安慰剂效应是指无论治疗是否有效，人们都会报告某种疗法曾对他们有所帮助。</p>
<p>安慰剂在医学治疗和心理治疗中都很常见。大多数具有疗效的疗法都是有效治疗成分和安慰剂效应的未知组合。</p>
<p>安慰剂效应的存在，宣告了见证叙述作为证据是无效的, 因为可能医生什么也没有做，但是患者仍认为疗法有效。</p>
</li>
<li><p>鲜活性效应</p>
<p>鲜活性效应是指当面临问题解决或决策情境的时候，人们会从记忆中提取与当前情境有关的信息。</p>
<p>再没有比发自内心的个人见证更鲜活、更引人注目的了，这都是一些已经发生的事或者是真实的事。个人见证的鲜活性常常令其他一些更可靠的信息黯然失色。生活中购物场景就是很好的例子，购物时，我们在不同的品牌前权衡了半天，最后却由于某个朋友或某则广告对另一产品的推荐，而在最后一刻放弃了自己的选择。</p>
<p>不仅公众受到鲜活性问题的困扰，在心理学和医学领域，有经验的临床从业者一直都在努力摆脱个别案例的压倒性影响给他们的决策带来的阴影。</p>
<p>由于鲜活性效应，见证证据经常被人们过分地倚重。</p>
<p>书中提到了了不起的兰迪<a href="https://en.wikipedia.org/wiki/James_Randi">Jame Randi</a>.多年来，他一直尝试着教公众学会一些基本的批判性思维的技巧，身体力行的告诉人们，见证证据是没有价值的。</p>
<p>后面作者花了大量篇幅，举了诸多鲜活性的例子，来阐述伪科学传播所造成的代价是巨大的。</p>
</li>
</ul>
<h4 id="Chapter05-相关和因果"><a href="#Chapter05-相关和因果" class="headerlink" title="Chapter05-相关和因果"></a>Chapter05-相关和因果</h4><p>「本章的主旨可以用一句话概括：相关关系 不等于 因果关系，相关关系是因果关系的必要不充分条件。」</p>
<p>两个变量之间仅仅存在相关，并不能保证一个变量的变化就会导致另一个的变化，关键就在于<strong>相关并不意味着因果关系</strong>；在第三变量问题里，两个变量之间的相关并不意味着它们之间存在直接因果路径，因为相关的产生可能是由于这两个变量或许都与未被测量的第三变量有关。事实上，如果潜在的第三变量也经过了测量，就可以用相关统计，如偏相关来评估第三变量是否决定了这种关系；让相关统计的解释变得困难的另外一个原因就是方向性问题。实际上，如果两个变量有直接的因果关系，因果关系的方向是不能根据相关来判断的。</p>
<ul>
<li><p>戈德伯格与糙皮病</p>
<p>这个例子很特别，也很生动，后面多处提到这个案例。「不得不说，戈德伯格非常勇敢，非常具有科学研究的严谨和奉献精神。」</p>
</li>
<li><p>虚假相关</p>
<p>相关的产生不是因为两个变量之间存在一个可以测量的直接的因果联系，而是因为这两个变量都与第三变量相关。</p>
</li>
</ul>
<p>变量相关涉及的两个误区：</p>
<ul>
<li><p>方向性问题</p>
<p>当变量A和变量B之间存在相关时，在断定A的变化引起B的改变之前，我们必须清楚因果关系的方向可能是相反的，即从B到A。</p>
<p>比如眼球运动与阅读能力，学业成就和自尊的例子。</p>
</li>
<li><p>第三变量的问题</p>
<p>两个变量之间的相关并不能预示任何方向上的因果，因为当这两个变量都和第三变量相关时，该相关还是会出现。</p>
<p>比如糙皮病的例子，烤箱—节育，私立学校—学业成就。</p>
</li>
<li><p>选择性偏差</p>
<p>选择性偏差指的是<strong>特定主体和环境变量之间的关系，当不同生理、行为、心理特点的人们选择不同类型的环境时，就有可能出现选择性偏差</strong>。选择性偏差造成环境特征和行为 — 生物特征之间的虚假相关。</p>
<p>选择性偏差是造成诸多虚假相关的罪魁祸首。事实上，人们在一定程度上选择他们的环境，并人为创造了行为特性和环境变量之间的相关。正如戈德伯格的例子所阐述的那样，确保选择性偏差不会捣乱的唯一方法，就是在操纵所有变量的情况下进行真正的实验。</p>
</li>
</ul>
<h4 id="Chapter06-比较，控制和操纵"><a href="#Chapter06-比较，控制和操纵" class="headerlink" title="Chapter06-比较，控制和操纵"></a>Chapter06-比较，控制和操纵</h4><p><strong>科学思维最重要的特点：比较，控制和操纵。</strong></p>
<p>科学家通过比较在不同条件（但是有控制的）下得到的结果，可以排除一些错误的解释，并证实正确的解释。<strong>实验设计的基本目的是分离变量</strong>。当成功分离出一个变量，实验的结果就能排除大量之前提出作为解释的其他理论。科学家们通过两种方法尽可能地排除不正确的理论：要么是在实验条件下直接进行控制；要么在自然情境下进行观察，以便比较各种可能的解释。</p>
<ul>
<li><p>随机分配</p>
<p>随机分配是一种将被试分配到实验组和控制组的方法，以保证每个被试有同样的几率被分到其中一个组。</p>
<p>使用随机分配能有效避免由于分组方式所导致的系统误差。这两组被试在所有变量上均得到匹配，但即使存在一定程度的不匹配，随机分配也消除了实验组或控制组之间的偏差。</p>
<p>「第七章比较了随机分配和随机取样的区别」</p>
</li>
<li><p>控制组的重要性</p>
<p>书中举了蛮多例子来说明，实验中添加控制组多么的重要，其中纽约市尝试对其公共项目之一——“家园”（Homebase）进行实验测试的例子蛮特别的。</p>
<p>他们随即分配了一些人加入这个项目（直到2300万美金花完），另一些相同数目的人则不进入这一项目。这个设计让纽约市弄清了2300万美金花出去之后有多少人从流离失所中被拯救了回来。</p>
<p>这样的真实验，容易让一些民众作出情绪化反应，认为无家可归者被当成了小白鼠。而实际上，没有人因为实验而得不到服务。无论人群是否被随机分配，都会有相同数量的人接受这个项目的帮助。唯一的不同是通过从控制组收集信息，而不是简单地忽略掉不在项目中的人，纽约市将可以判定这个项目是否起作用。</p>
<p>「如果王安石变法的时候，也能考虑到控制组，也许事情的发展不会那么的糟糕。」</p>
</li>
</ul>
<p>后面一整节的篇幅，作者举了聪明汉斯的例子，来说明，使用实验控制来排除某种现象的各种其他解释的必要。</p>
<ul>
<li><p>聪明的汉斯</p>
<p>聪明的汉斯不是一匹会算术的马，而只是一匹对视觉线索极其敏感的马。</p>
<p>汉斯的例子揭示了区分“<strong>对现象的描述</strong>”和“<strong>对现象的解释</strong>”的重要性。</p>
<p>推断马具有数学能力只是这一现象的一种“假设的解释”。从“马能敲出正确答案”就得出“马具有数学能力”的结论是不符合逻辑的。马具有数学能力只是针对马的表现的诸多解释中的一种，而这种解释是可以通过实证方法来检验的。</p>
</li>
<li><p>操纵与控制</p>
<p>人类关于行为的直觉理论是有缺陷的，这就说明了为什么心理学研究需要实验控制。只有这样，我们才能把关于人类行为的粗浅概念上升为准确的科学概念和体系。</p>
<p>实验方法的核心就是操纵与控制，这就是为什么实验比相关研究能够作出更强的因果推断。在相关研究中，研究者仅仅观察两个变量的自然变动是否显示某种联系，而在真实验中，研究者要对被假设为原因的变量进行操纵，通过实验控制和随机分配来保持其他所有变量不变，然后再来看这个假设变量是否会产生影响。这种方法排除了相关研究中出现的第三变量的问题。</p>
</li>
</ul>
<h4 id="Chapter07-自然性并非总是必要的"><a href="#Chapter07-自然性并非总是必要的" class="headerlink" title="Chapter07-自然性并非总是必要的"></a>Chapter07-自然性并非总是必要的</h4><p>心理学实验通常遭受的批评：</p>
<blockquote>
<p>科学实验没有价值，因为它是人为发生的，和“真实的生活”不一样。</p>
</blockquote>
<p>本章试图解释这种批评的不合理之处。</p>
<blockquote>
<p>物理学家通常将所要研究的现象转移到实验室，创造一些特殊条件，以便观察物体运动。比如探索物质本质特征的物理学家们建造巨大的加速器来诱发基本粒子之间的碰撞。碰撞中产生的一些副产物是存在时间不到十亿分之一秒的新粒子。然而，这些新粒子的属性却有助于解释原子结构理论。许多新粒子在世界上一般是不存在的，即使存在，我们在自然状况下也没有机会观察到它们。</p>
<p>而心理学家不过是把在其他学科研究领域的科学方法应用到人类行为的研究上罢了，比如糙皮病就是一个很好的创造非自然条件下的实验的例子。</p>
</blockquote>
<ul>
<li><p>随机分配 VS 随机取样</p>
<p>随机取样涉及的是如何选择被试进行研究。随机分配是真实验所必需的条件。实验人员将被试分为实验组和控制组，当每一名被试被分到实验组的机会和被分到控制组的机会相等时，就实现了随机分配。</p>
<p>随机取样发生在样本选取之前，而随机分配则是在定好样本后，确定哪些样本进入控制组，哪些进入实验组。</p>
</li>
<li><p>理论研究 VS 应用研究</p>
<p>应用研究的目的是把数据直接应用于现实生活，但是基础研究则专注于理论验证。</p>
<p>基础研究和应用研究在实践性应用方面的差异常常会随着时间的增长而逐渐消失。应用研究的结果会很快得到应用。但是<strong>没有什么能比普遍的、准确的理论更具有实用性</strong>了。尽管很多科学家进行理论或实证研究的初衷并非解决具体的实践性问题，但他们发展出的科学理论或研究结果最终都解决了现实世界的许多问题。</p>
<p>书中举了很多例子来说明这个论点，包括猴子为什么咬紧牙关，果蝇实验，暗适应之类的基础研究。</p>
<p>「如果换成从前，我也会认为这些研究是在浪费钱吧？现在看来，果然是要多读书，太无知了。」</p>
</li>
<li><p>大二学生问题</p>
<p>大二学生问题是指大二学生在大量的心理学研究中充当被试，因此这些研究所得出的结果是否具有可推广性受到了质疑。</p>
<p>作者给出了心理学家对此的合理辩解，主要为以下三点：</p>
<ul>
<li>这种批评不能说明研究结果无效，只是需要更多的研究来证明理论的可推广性。</li>
<li>在心理学众多领域里，大二学生问题不构成一个问题，因为所研究的心理过程是非常基本的过程（例如视觉系统），几乎没有人相信视觉系统的基本构造跟被试样本的人口分布特征有关。</li>
<li>许多研究结果得到了重复，这些结果在很大程度上可以推广到不同的地理分布中，并且在较小程度上也能推广到具有不同社会经济因素、家庭变量以及早期教育经历的人群中去。</li>
</ul>
<p>许多非科学人士会认为医学比心理学要科学得多，但是在实践中药物的不确定性不亚于心理学。心理学的知识总是具有一定的概率和不确定性——但在大多数的生物社会科学领域，情况也差不多。</p>
</li>
<li><p>正确看待真实生活和大二学生问题</p>
<p><strong>人工条件并不会让实验研究减色，它们只是被创造出来用以分离变量。</strong></p>
<p>实际上，在用于验证理论的基础研究中，人为的环境条件是有意创设的，因为这有助于把研究的关键变量从所要控制的无关变量中分离出来。因此，心理学实验“不像是真实的生活”这个事实其实是一种优势，而非缺点。</p>
</li>
</ul>
<h4 id="Chapter08-聚合性证据的重要性"><a href="#Chapter08-聚合性证据的重要性" class="headerlink" title="Chapter08-聚合性证据的重要性"></a>Chapter08-聚合性证据的重要性</h4><p>本章主要阐述了两个原则：<strong>关联性原则，聚合性证据原则</strong>。</p>
<ul>
<li><p>关联性原则</p>
<p>关联性原则是指<strong>一个新的科学理论，必须与先前已确立的实证事实建立关联</strong>。</p>
<p>新的科学理论不仅仅要解释新的事实，还要兼容旧的事实，这样才会被认为是一个真正的理论进步。新的理论可以以一种迥然不同的方式来解释旧的证据，但是它必须能解释得通。</p>
<p>以爱因斯坦的相对论为例，无论爱因斯坦理论中的那些新概念是多么令人震惊（钟表变慢、质量会随速度增加，等等），但它们都遵从<strong>关联性原则</strong>。在宣告牛顿力学的滞后性的同时，爱因斯坦的理论没有否定那些以牛顿观点为基础的运动事实，或者是认定其毫无意义。相反，在速度较低的情况下，这两种理论都做出了本质上相同的预测。<strong>爱因斯坦理论的高明之处在于，它能够解释更为广泛的新现象（有时是令人吃惊的）</strong>，而这些是牛顿力学所做不到的。因此，即使是爱因斯坦理论这个在科学历史上最惊人的、基础性的概念重构，也依旧遵循着关联性原则。</p>
<p>伪科学和伪理论的一个特点便是忽略关联性原则，旧的、“不相关”的数据灰飞烟灭，新的相关数据尚不存在。</p>
</li>
<li><p>跃进模式 VS 渐进整合模式</p>
<p>爱因斯坦提出“相对论”是迄今为止有关科学进步的飞跃模式最著名的一个例子，至此，一系列非凡的理论灵感重新定义了时间、空间和物质等基本概念。</p>
<p>但是科学不同于艺术，科学中的概念变化遵从关联性原则，而这一原则在艺术中并不存在，或至少说是极为罕见的。</p>
<p>把爱因斯坦式的革新视为科学典型的倾向，诱使我们误以为所有科学进步靠的都是重大飞跃。问题就在于，人们倾向于将这些例子泛化成一种观念，认为科学进步理所应当是这样产生的。<strong>事实上，很多科学领域的进步靠的都不是某一个突然的突破，而是由一系列构不成重大影响的停顿及前进之间的反复组成的</strong>。</p>
<p>作者列举了遗传学和分子生物学的进步，说明科学进步的渐进模式。<strong>这些进步的发生，凭借的不是革命性地重构一些重大概念，而是几种能站得住脚的不同解释进行长期与反复的交锋和对峙</strong>。</p>
</li>
</ul>
<p>来看看聚合性原则到底是什么。</p>
<ul>
<li><p>聚合证据原则</p>
<ul>
<li><p>从有局限性的实验角度表述聚合性</p>
<p>假设来自大量不同实验的结果都一致支持了某一特定结论。假如实验本身并不完善，我们应该继续去评估这些局限性研究的性质和程度。如果所有的实验都是以同样一种方式出现瑕疵，这些情况将会降低我们对实验结论的信心，因为结论的一致性也许仅仅源于一个特定的瑕疵，而这个瑕疵是所有实验共有的；另一方面，如果所有实验都呈现出不同的局限性，我们对结论的信心就会大增，因为结果的一致性看似并非源自某一个让所有实验结果都混淆不清的干扰性因素。</p>
<p><strong>每一个实验都有助于纠正其他实验在设计方面的错误，只要大量的实验能够得到近似的结果，那么我们就可以说我们的实验证据实现聚合了</strong>。</p>
</li>
<li><p>以理论验证的形式表述聚合性</p>
<p>当一系列实验始终支持某个假定的理论，同时又能共同排除那些最主要的竞争性理论时，研究就具有高度的聚合性。</p>
<p>书中用两个表来说明，个人觉得很好，附上：</p>
<p>现有5种理论，且都经过了一系列的实验验证，结果如下：</p>
</li>
</ul>
</li>
</ul>
<p>情况1:</p>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">理论A</th>
<th align="center">理论B</th>
<th align="center">理论C</th>
<th align="center">理论D</th>
<th align="center">理论E</th>
</tr>
</thead>
<tbody><tr>
<td align="center">实验1</td>
<td align="center">否定</td>
<td align="center">否定</td>
<td align="center">支持</td>
<td align="center">未验证</td>
<td align="center">未验证</td>
</tr>
<tr>
<td align="center">实验2</td>
<td align="center">未验证</td>
<td align="center">未验证</td>
<td align="center">支持</td>
<td align="center">否定</td>
<td align="center">否定</td>
</tr>
</tbody></table>
<p>结论：</p>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">理论A</th>
<th align="center">理论B</th>
<th align="center">理论C</th>
<th align="center">理论D</th>
<th align="center">理论E</th>
</tr>
</thead>
<tbody><tr>
<td align="center">总体结论</td>
<td align="center">否定</td>
<td align="center">否定</td>
<td align="center">支持</td>
<td align="center">否定</td>
<td align="center">否定</td>
</tr>
</tbody></table>
<p>情况2:</p>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">理论A</th>
<th align="center">理论B</th>
<th align="center">理论C</th>
<th align="center">理论D</th>
<th align="center">理论E</th>
</tr>
</thead>
<tbody><tr>
<td align="center">实验1</td>
<td align="center">未验证</td>
<td align="center">否定</td>
<td align="center">支持</td>
<td align="center">未验证</td>
<td align="center">否定</td>
</tr>
<tr>
<td align="center">实验2</td>
<td align="center">未验证</td>
<td align="center">否定</td>
<td align="center">支持</td>
<td align="center">未验证</td>
<td align="center">否定</td>
</tr>
</tbody></table>
<p>结论：</p>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">理论A</th>
<th align="center">理论B</th>
<th align="center">理论C</th>
<th align="center">理论D</th>
<th align="center">理论E</th>
</tr>
</thead>
<tbody><tr>
<td align="center">总体结论</td>
<td align="center">未验证</td>
<td align="center">否定</td>
<td align="center">支持</td>
<td align="center">未验证</td>
<td align="center">否定</td>
</tr>
</tbody></table>
<p>相比情况2，情况1中，理论C的说服力更强。</p>
<p><strong>当一系列实验始终支持某个假定的理论，同时又能共同排除那些非常重要的竞争性理论时，研究就具备了高度的聚合性</strong>。</p>
<p>心理学因为其研究的问题涉及复杂的人类行为，其实验具有高度模糊性的因素。心理学实验的诊断性往往较低。也就是说，支持某一个理论的数据经常只能排除一小部分可能的解释，还遗留了许多有可能取代这种理论的“候补”理论。其结果是，只有收集并比较来自大量研究的数据之后，依据聚合性证据原则，才能得到有说服力的结论。</p>
<p><strong>在评估心理学的实证证据时，心中要想的是“科学共识”，而不是“重大突破”；是“渐进整合”，而不是“大步飞跃”。</strong></p>
<p>「何止是心理学……」</p>
<ul>
<li><p>研究方法 和聚合性原则</p>
<p>聚合原则同样也意味着，我们应当乐于看到多种不同方法应用于心理学研究的各个领域中。因为不同的研究技术各有其优势和不足，用于获得特定结论的各种方法之间呈现一种相对的平衡是比较理想的。</p>
<p>这里，作者举了一个有关旁观者效应的例子。</p>
<p>旁观者效应是指，<strong>一些人在看到他人处于危难之中时并不施以援手。当有更多潜在的帮助者在场时，帮助行为出现的可能性会降低</strong>。对这一现象的研究，从早期的实验室研究，过渡为现场设计。这种实验和现场式的研究，在其他如教育领域也得到了广泛的应用。</p>
</li>
<li><p>向更有效的研究方法迈进</p>
<p>对于某个特定问题的研究，通常是从相对较弱的方法过渡到可以做出较强结论的方法。通常的递进顺序是：</p>
<p>从个案研究到相关研究，再到操纵变量。</p>
</li>
<li><p>不要对矛盾数据感到绝望</p>
<p>聚合性原则的一个启示是，当一个问题的最初研究结果看上去有些矛盾时，我们不应当对此感到绝望。</p>
<p>「个人觉得下面这段是全书中出现的一个非常精彩的类比，我擦，第一次看到的时候，真的被惊艳到」</p>
<p><strong>在科学中，证据融合的过程就像投影仪慢慢将一张未知的幻灯片的焦点调清晰。起初，屏幕上的模糊影像可能代表任何东西。接着，随着一点点地调整焦距，虽然这个图像仍不能被清楚地识别出来，但许多其他的可能假设也许会被排除。最后，当焦距调准，就可以非常有信心地作出最终的判断。证据融合过程就好比一个调焦过程。幻灯片的模糊影像就如同互相矛盾的数据，或者是那些支持多重假设的证据。</strong></p>
<p>这里提到了一种叫做<a href="%5Bhttps://zh.wikipedia.org/wiki/%E5%85%83%E5%88%86%E6%9E%90%5D(https://zh.wikipedia.org/wiki/%E5%85%83%E5%88%86%E6%9E%90)">元分析</a>的统计技术，又可称为后设分析，wiki上对此有较详细的解说。书中作者举了一些例子来说明元分析的应用以及元分析的缺点。</p>
<p>「作为统计专业的学生，对这个概念表示完全没有印象……」</p>
</li>
</ul>
<h4 id="Chapter09-多重原因问题"><a href="#Chapter09-多重原因问题" class="headerlink" title="Chapter09-多重原因问题"></a>Chapter09-多重原因问题</h4><p>任何一个特定行为都不是由某个单独的变量引起，而是由许多不同的变量共同决定的。</p>
<p>注意，虽然某个变量只是影响特定行为的众多因素之一，并且只能解释这一行为的一小部分，但并不是说这个变量就是无足轻重的。</p>
<ul>
<li><p>交互作用</p>
<p>交互作用是指一个自变量的影响效果依赖于另外一个自变量的不同水平。</p>
<p>这里作者举了影响青少年学业平均水平的因素调查和儿童精神疾病相关因素方面的研究等例子，说明<strong>单一因素不能产生巨大的影响，但当多个因素结合在一起时，就会产生相当大的影响</strong>。</p>
<p>「想起主成分分析和因子分析……」</p>
</li>
<li><p>单一原因解释的诱惑</p>
<p>很多时候，人们习惯用“零和”态度去对待潜在的原因——所有的原因都和其他的原因竞争，强调一个的必要性会降低另一个的重要性。“零和”观点是错误的。</p>
<p>心理学所研究的几乎所有复杂问题都是由多重原因决定的。</p>
<p>考察行为的原因时，要依照多样性的原则来思考。不要陷入误区，认为某一特定行为只是由某一特殊原因造成。</p>
</li>
</ul>
<h4 id="Chapter10-概率推理"><a href="#Chapter10-概率推理" class="headerlink" title="Chapter10-概率推理"></a>Chapter10-概率推理</h4><p>决策心理学的最新研究发现，概率推理可能正是人类认知的阿喀琉斯之踵。</p>
<p>「搜了下wiki，贴上有关阿喀琉斯之踵的简介」</p>
<blockquote>
<p><a href="https://zh.wikipedia.org/wiki/%E9%98%BF%E5%96%80%E7%90%89%E6%96%AF">阿喀琉斯</a>是古希腊神话中的人物，出生之时，其女神母亲便将其捉住脚踝放入冥河里浸泡，但由于抓住的脚踝没有沾水而使其成为日后的弱点。</p>
<p>阿喀琉斯之踵指<strong>某人或某事物的最大或者唯一弱点，即罩门关键所在</strong>。</p>
</blockquote>
<p>和大多数学科一样，心理学研究所得出的是概率式的结论——大多数情况下会发生，但并非任何情况下都发生。</p>
<p><strong>概率预测事实上就是真正的预测</strong>。</p>
<ul>
<li><p>“某某人”统计学</p>
<p>由于某些人知道与某个成熟的统计学趋势相左的“某某人”的例子，就会质疑这个趋势。用个案来否定整体趋势。</p>
</li>
<li><p>概率推理以及对心理学的误解</p>
<p>大多数人能理解医学科学提出的治疗、理论及事实是概率性的。</p>
<p>一旦面对心理学的话题，人们常常忘记一个最基本的原则，那就是<strong>知识不需要完全确定后才是有用的</strong>——即便某些知识不能预测个体的具体情况，但如果能对群体的总体趋势有预测能力，也是非常有益的。</p>
<p>问题在于，社会越复杂，人们就越需要概率思维。如果一个普通人想要对其生活的社会有一个基本的理解，那么，他至少应具备统计思维这一最基本的能力。</p>
<p>某些概率推理中的普遍误区：</p>
<ul>
<li><p>对概率信息的不充分利用</p>
<p><strong>一个具体事件的信息往往可以完全击败较为抽象的概率信息</strong>，明显的比如前面章节中提到的鲜活性问题。</p>
<p>事实上人们知道什么是对的，但却本能地做出了错误结论。心理学家把这类问题称为认知错觉。</p>
<p><strong>在认知错觉中，即使人们知道正确答案，他们也会由于问题的问法不同而做出错误的结论</strong>。</p>
</li>
<li><p>样本大小信息的误用</p>
<p>样本越小，产生极端值的可能性就越大。</p>
<p>在不同领域中进行证据评估时需要遵守的一条基本原则，就是认识到样本规模对信息可信度的影响，这对于理解行为科学的研究结果尤为重要。</p>
<p>最少的有效样本量：30。</p>
</li>
<li><p>赌徒缪误</p>
<p>赌徒谬误：即倾向于将过去事件和未来事件之间联系起来，而实际上两者是独立的。</p>
<p>明明是独立事件，却认为先前的结果会影响下一结果出现的概率。</p>
<p>赌徒谬误来源于对概率的诸多错误认识。<strong>其中一个错误认识就是，如果一个过程真正是随机的，就不可能出现重复同一结果或某种模式的序列，哪怕是一个不起眼的随机事件</strong>。</p>
<p>正因为如此，人们在模拟一组真正的随机序列时，常常适得其反地产生出一个很少出现重复和某种模式的排列。这是因为人们往往会错误地让可能的结果尽量轮流出现，以为这样才称得上是随机抽样，这无疑破坏了真正的随机排列中可能出现的结构。</p>
<p>赌徒谬误的另一个错误认识源于一个更为普遍的倾向，未能认识到偶然性在决定结果时所起的作用。「第11章的主题」</p>
</li>
</ul>
</li>
</ul>
<p>有时对一门学科的精通依赖于对某些信息的掌握，而对这些信息的掌握又只有通过正规的学习才能实现。如果说对一门学科的深入理解是一般外行人也能随便达到的，那是一种在学术上不负责任的态度。统计学和心理学就属于这一类学科。</p>
<p>「啧啧……」</p>
<h4 id="Chapter11-偶然性在心理学中扮演的角色"><a href="#Chapter11-偶然性在心理学中扮演的角色" class="headerlink" title="Chapter11-偶然性在心理学中扮演的角色"></a>Chapter11-偶然性在心理学中扮演的角色</h4><p><strong>我们大脑的进化始终以这样一种方式，就是让我们能够不懈地寻求世界中的各种模式。我们寻求身边事物的关系、解释及其背后的意义</strong>。</p>
<p>偶然性和随机性是我们周围环境不可分割的一部分。</p>
<p>当一件事取决于偶然性时，并不一定表示它是不确定的，只是说它目前是无法确定的。</p>
<p>这里作者举了几个精彩的例子，比如金融分析师对股票价格的分析，经纪人的预测，甚至虚构了一个骗局，来说明认识随机性的重要性。「哈哈，这个骗局还蛮像回事。」</p>
<ul>
<li><p>解释偶然性：错觉相关和控制错觉</p>
<p><strong>人们有解释偶然事件的倾向</strong>，这一现象在心理学的研究中称为错觉相关。</p>
<p>而控制错觉，则是指<strong>人们有一种倾向，愿意相信个人能力可以影响偶然事件的结果</strong>。</p>
<p>试图去解释偶然事件的倾向可能源于我们深切地渴望相信自己是可以控制这些事件的。</p>
<p>许多有控制的研究都证明，<strong>当人们头脑中已经预设了两个变量相互关联的想法时，他们甚至能够在两个变量根本毫无关系的数据中发现联系</strong>。</p>
<p>另一个比较明显的错误认知，称之为<strong>公平世界假设</strong>，它指人们倾向于相信自己是生活在一个公平的世界里，在这里，每个人都得到他们应得的东西。这种假设所体现的对于偶然性的错误理解，导致人们容易看到虚假想噶滚，比较典型的一个例子是“盲人有非常敏锐的听觉”，这就是一个错误的信念，这个错误信念可能会一直流传下去，因为这种联系能体现“上天是公平的”，而这正是人们希望看到的。</p>
</li>
<li><p>偶然性与心理学</p>
<p>人的一生是由很多偶然性因素决定的。</p>
<p>理解偶然性对于正确认识心理学非常重要，受过正规训练的心理学家承认他们的理论只能解释人类行为变化的一部分而非全部，他们会坦然面对偶然因素。</p>
</li>
<li><p>巧合与个人巧合</p>
<p>「其实就是小概率事件的发生，从概率角度来看，只要样本量足够大，一定会发生。」</p>
<p>巧合只是相关事件偶然地同时出现。</p>
<p>许多人认为巧合需要特别的解释，他们不理解巧合的发生并不需要偶然性之外的因素，<strong>巧合并不需要特别的解释</strong>。</p>
<p>事实上，概率法则确保了随着事件发生次数的增加，一些罕见偶合出现的可能性会变得很大。这一定律不仅允许罕见偶合出现，而且从长远来看几乎保证了它的出现。</p>
<p><strong>基本上你能想到的所有罕见偶合都会出现，只要你等待的时间足够长。</strong> 【等到天荒地老吗？】</p>
<p>发生在我们个人生活中的罕见偶合往往对我们具有特殊的意义，我们尤其不愿将其归因为偶然。产生这种倾向的原因有很多，某些是动机性和情感性的，还有一些是概率推理的失败。</p>
</li>
<li><p>接受错误以减少错误</p>
<p>「为了减少错误，就必须接受错误，感觉很有点，为了life 不那么的 difficult，就必须接受 life is difficult 的味道」</p>
<p>在试图解释世界上发生的所有事，同时又拒绝承认偶然因素的作用，实际上会降低我们对现实世界的预测能力。</p>
<p>此处作者以认知心理学上的一个红蓝灯实验为例来证明了这个原则的正确性。</p>
</li>
<li><p>统计预测 VS 临床预测</p>
<p>「这个对比的结论还蛮毛骨悚然的，毕竟医学涉及的是有关人命的东西」</p>
<p>统计预测是指依据统计资料中得出的群体趋势所作的预测。</p>
<p>临床预测则是指，职业心理学家声称，他们能对个体进行预测，从而超越了对“一般人”或不同类别的人所进行的预测。</p>
<p>临床预测似乎可以视为对统计预测的有益补充，但问题是临床预测并不准确。</p>
<p><strong>一种普遍的反统计论调或误区在于，认为群体统计不适用单个人或事。这种观点是对概率基本原则的误用</strong>……要保持逻辑上的一致，反统计论的鼓吹者就必须相信并承认，<strong>如果一个人被迫玩一次俄罗斯轮盘赌，允许他选择膛内装有1发或5发子弹。事件的单一性使得选哪把枪都无所谓</strong>。</p>
</li>
</ul>
<h4 id="Chapter12-不招人待见的心理学"><a href="#Chapter12-不招人待见的心理学" class="headerlink" title="Chapter12-不招人待见的心理学"></a>Chapter12-不招人待见的心理学</h4><p>「哈哈，为心理学平反」</p>
<p>心理学和超验心理学</p>
<p><strong>超自然体验和其他超常能力的研究不被认为是心理学的一部分</strong>，在20世纪历经90多年的研究之后，我们仍然无法在控制实验条件下重复验证任何超感知现象。尽管过去几十年来进行了大量有关超感知的研究，却从来没有一个研究能达到这一简单而基本的科学标准。就是因为其研究一直无法积累任何正向的成果，所以它让大部分心理学家失去了兴趣。</p>
<p>市场上的多数自助类读物和菜谱式知识的泛滥，让人们对心理学的研究方法和目的产生错误印象。</p>
<p>我们的个人心理学知识多数是“菜谱式知识”。我们做某件事，是因为我们认为它会导致其他人做出某些相应的行为，或是因为我们相信这些事能帮助我们实现某些目标。而由科学心理学产生的菜谱式知识可能会更精确，因为和个体的菜谱式知识相比，它们经过了更加严格的检验程序。</p>
<h4 id="加餐"><a href="#加餐" class="headerlink" title="加餐"></a>加餐</h4><p>书中金句频出，最后来点小小的加餐。</p>
<p><strong>科学是一套不断挑战原有信念的机制，在这种机制里，原有信念以一种能够被证伪的方式接受实证检验。</strong></p>
<p><strong>科学的独特优势并不在于它是一个不会犯错的过程，而在于它提供了一种消除错误的方式，它能不断消除我们认识中的错误。</strong></p>
<p><strong>有些理论观点经过实证检验存活了下来，而另一些则被淘汰出局，凡保留下来的都更接近真理。</strong></p>
<p>Enjoy!!</p>
]]></content>
      <categories>
        <category>Reading</category>
      </categories>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>读《beyond feelings》- Part1</title>
    <url>/posts/notes-of-beyond-feelings-part1/</url>
    <content><![CDATA[<p>长文慎入。</p>
<span id="more"></span> 
<h3 id="Chapter-1-who-are-you"><a href="#Chapter-1-who-are-you" class="headerlink" title="Chapter 1: who are you?"></a>Chapter 1: who are you?</h3><p>开篇提到了两个问题：</p>
<ul>
<li>who are you? not just your name, but all the informations about you.</li>
<li>how did you get the way you are?</li>
</ul>
<p>重点在于，你是如何变成现在的模样的？是你自己选择的结果吗？[I am this way because I choose to be]</p>
<p>相对于个体，个体所处在的世界对其的影响远比我们想象的要大。</p>
<h4 id="主要的影响因素："><a href="#主要的影响因素：" class="headerlink" title="主要的影响因素："></a>主要的影响因素：</h4><ul>
<li><p>time and place</p>
<blockquote>
<p>Living in a differect age or culture would make you a different person.</p>
<p>你的成长环境，生于何时何地，限制了你的经验以及你的思考模式。</p>
<p>you are the product of your environment。</p>
</blockquote>
</li>
<li><p>idea</p>
<blockquote>
<p>当一个想法被表达出来的时候，与之紧密相关的想法也会不可避免地传达出来。</p>
<p>比如”if you believe in yourself, you can succeed in anything”, closely related idea” nothing else, but belief – neither talent nor hard work – is necessary for success.” 很明显，这个related idea会把人带入误区。如果换成：”Belief in oneself is an important element in success.” 就合理多了。</p>
</blockquote>
<p>书中举了一个例子，说的是一个多世纪前，心理学上很流行的一个观点：“Intelligence is genetically determined and cannot be increased.”智力是天生的，无法提升的. 甚至有立法者基于这个观点，修订了移民法，来减少因为移民而带来的本国平均智力水平的下降……</p>
<p>有些时候，你的行为可能在有意识或者无意识中受到这些idea或者related idea的影响。</p>
<p>The innumerable ideas you have encountered will affect your beliefs and behavior in similar ways––sometimes slightly, at other times profoundly. And this can happen even if you have not consciously embraced the ideas.</p>
</li>
<li><p>Mass Culture</p>
<blockquote>
<p>这里的mass culture，指的是broadcast media, newspapers, magazines, Internet and popular music, etc.</p>
<p>生在这个时代，我们的很多时间都浸泡在mass culture中。</p>
<p>Mass culture大部分都以视频或者音频的形式出现，通常采用高频率的变换来让受众保持兴趣。这样带来的影响是prevented many people from developing a mature attention span. 即不能持续专注在一件事情上。对于students或workers而言，相比mass culture，classes 和work就显得相对无聊了。</p>
<p>「个人感觉，mass culture让我们陷入了对即时反馈的上瘾模式，希望自己的需求立马可以得到满足，很容易缺乏耐心，而学习和工作都不是立马就出现效果的，反而需要你花费大量的时间和精力，最后的结果可能还不如意，但是后者必然是值得你去投入的地方，当然我觉得mass culture没什么不好，很多好的东西都来自于mass culture，它们更多的像是工具，你怎么用才是关键，好比同样是刀，医生拿来救人，匪徒拿来伤人。呃，又跑偏了，这里讨论的是mass culture对个体的影响，不是它好不好。」</p>
<p>这部分还提到了政客们如何利用media及言论来影响群众。</p>
</blockquote>
</li>
<li><p>操纵的“科学”</p>
<p>提到的两个例子：巴甫洛夫的狗（Pavlov‘s dog）, 约翰·华生的幼儿研究实验（John Watson：sychological Care of Infant and Child）。</p>
<p>这一部分，有一个很赞的类比：</p>
<p>把人的大脑比做DVD播放器，每一个想法就好像是打包好的DVD。【这本书如果很多年后小孩们再读，估计都要Google下什么是DVD了吧？】</p>
</li>
<li><p>心理学的影响</p>
<p>我们所处时代的心理学及社会学理论对我们信念的影响。这部分对比了父辈和我们这一代人对于自尊，自律等品性的不同态度，这种对比结果放在现在也适用。我觉得这部分很特别的一个例子在于self-image，个体对于自我的定义很大程度上会影响其行为，促使他/她朝着这个self-image的方向发展，有意识或者无意识地去强化这个image，然后循环这个模式。书中提到了马斯洛的需求理论，最顶层的自我实现self-actualization。与其同时代的Viktor Frankl提出了另一个理论，人类需求中高于self-actualization的self-transcendence， 超越个体，忘记个体，专注外在，舍己为人，有点佛家的味道。「这部分不是很懂」</p>
<p>第9版与第6版相比，有一部分remove了，说的是儿童时代的生活对个体的影响，会让个体形成四个观点，补上。</p>
<blockquote>
<ul>
<li>I‘m not OK — You’re OK【出现在出生及2～3岁的孩童期】</li>
<li>I’m not OK — You’re not OK 【缺乏来自父母的鼓励，不能接受他人的肯定】</li>
<li>I’m OK — You’re not OK【受到父母的责骂与虐待，导致逃离心态，更多的是通过自我鼓励与自我安慰，而拒绝他人】</li>
<li>I’m OK — You’re OK【健康心态】</li>
</ul>
</blockquote>
</li>
</ul>
<h4 id="成为一个独立个体："><a href="#成为一个独立个体：" class="headerlink" title="成为一个独立个体："></a>成为一个独立个体：</h4><p>需要接受的一个观点：Individuality is not something we are born with but rather <strong>something acquired</strong> – or, earned. Individuality begins in the realization that it is impossible to escape being influenced by other people and by circumstance.</p>
<p>书中给到了方法论，4点：</p>
<ul>
<li>Treat your first reaction to any person, issue or situation as tentative</li>
<li>Decide why you reacted as you did</li>
<li>Think of other possible reactions you might have had to the person, issue or situation</li>
<li>Ask yourself whether one of the other reactions is more appropriate than your first reaction</li>
</ul>
<p>用我的理解简单复述下：</p>
<ul>
<li>不要急于表达你的第一反应，除非你已经检验过，否则拒绝接受第一反应；</li>
<li>想想为什么你会有这样的反应，思考下是否是借鉴于他人，父母或者朋友，或者某个电视里的角色，书中的角色，又或者是什么样的特殊经历让你有这样的反应；</li>
<li>想一想，针对其他的人，事，情境，你可能会有的其他反应是什么；</li>
<li>问问自己，这些其他反应中，是否有比第一反应更适合的反应？当你寻找答案时，抵制你所处的环境对你的影响「或者说让自己成为一个白板，这个还是很有难度的。」</li>
</ul>
<p>Practice。</p>
<p>本章最后的Application部分，添加了note，提到了recording的必要性，深以为然。记录下你的想法，你的疑惑，你的观察，定期进行回顾和思考。「吾日三省吾身，真的做起来，是很不容易的。可是所有值得去做的事情，哪一样不需要花费大量的时间和精力？」</p>
<h3 id="Chapter-2-What-is-critical-thinking"><a href="#Chapter-2-What-is-critical-thinking" class="headerlink" title="Chapter 2: What is critical thinking?"></a>Chapter 2: What is critical thinking?</h3><p>开篇给到了一个场景，小男孩被老师教育着要集中精神思考，随后引出了thinking 的定义。</p>
<h4 id="Mind-Brain-or-Both"><a href="#Mind-Brain-or-Both" class="headerlink" title="Mind, Brain, or Both?"></a>Mind, Brain, or Both?</h4><p>在定义thinking之前，给到了一个问题：思考是一种脑力活动，那么思考是属于mind还是brain，抑或两者兼而有之？brain是一个实体，可触可感，但是mind，则是归属于形而上学之类。后面并没有就brain和mind给到结论，只是说明了下，本书是以<strong>mind is active, a vehicle by which we take the initiative and exercise our free will</strong>为基础。「从这里也可以看出来，作者很看重个人的主动能动性，思考能力是可以通过练习提高的。」</p>
<h4 id="Critical-Thinking-Defined"><a href="#Critical-Thinking-Defined" class="headerlink" title="Critical Thinking Defined"></a>Critical Thinking Defined</h4><ul>
<li><p>thinking VS feeling</p>
<blockquote>
<p>Feeling is a subjective response that reflects emotion, sentiment, or desire; it generally occurs spontaneously rather than through a conscious mental act.</p>
<p>Feelings 更多的是对事物的主观反映，折射着人的情感，情绪，欲望，自发产生而不经过有意识的智力活动。好比人饿了就会想要吃饭，渴了就想要喝水，并不会在吃饭喝水之前，做一番思考，因为1，2，3等等原因，所以我决定吃饭喝水。【那种本能的反应，我猜是源自于基因，物种为了在大自然中生存下来而作出的选择，我们的祖先在远古时代每次遇到肚饿的情况，都是去填饱肚子，这个模式不断被调用，就好比经过了无数次的训练，这样经过了几万年的进化，这种对于肚饿的反应就内化成了我们的本能？我猜的】</p>
<p>feeling并不能替代thinking，因为它并不可靠。书中举了足球运动员Zinedine Zidane在自己职业生涯的最后一个季度不合理地作出了犯规行为的例子，以证明论点，即feeling is notoriously unreliable， 甚至we often feel like doing things that will harm us.</p>
<p>相比feeling，thinking is a conscious mental process performed to solve a problem, make a decision, or gain understanding。</p>
<p>feeling与thinking 的关系：</p>
<p><strong>feelings need to be tested before being trusted, and thinking is the most reasonable and reliable way to test them.</strong></p>
</blockquote>
</li>
<li><p>three categories of thinking</p>
<blockquote>
<p>reflective, creative, and critical.</p>
<p>this book is on critical thinking.</p>
<p>The essence of critical thinking is evaluation.</p>
</blockquote>
</li>
</ul>
<h4 id="Characteristics-of-Critical-thinkers"><a href="#Characteristics-of-Critical-thinkers" class="headerlink" title="Characteristics of Critical thinkers"></a>Characteristics of Critical thinkers</h4><p><strong>misconceptions on critical thinking</strong>：</p>
<ul>
<li>being able to support beliefs with reasons makes one a critical thinker.【yep，but the reasons should be good and sufficient】</li>
<li>critical thinkers never imitate others in thought or action。【critical thinking means make sound decisions regardless of how common or uncommon those decision are】「做出与他人同样的决定，并不能认定就是效仿他人吧？同样，critical thinker也不是说一定就是那种特立独行的人」</li>
<li>critical thinking is synonymous with having a lot of right answers in one’s head.【critical thinking involves the process of finding answers when they are not so readily available, and I think this process is the most important part】</li>
<li>critical thinking cannot be learned【critical thinking is a matter of habit】</li>
</ul>
<p><strong>Characteristics of Critical thinkers:</strong></p>
<ul>
<li>Skill in asking appropriate questions</li>
<li>control of one’s mental activities</li>
</ul>
<p>John Dewey 将这种mental discipline 与freedom挂钩。「思想领域的自由？」</p>
<p>他认为没有这种能力的人只是环境或者冲动情绪的奴隶，不是自由人。「好吧，我不是自由人，我容易冲动」</p>
<h4 id="The-Role-of-Intuition【直觉的角色？】"><a href="#The-Role-of-Intuition【直觉的角色？】" class="headerlink" title="The Role of Intuition【直觉的角色？】"></a>The Role of Intuition【直觉的角色？】</h4><p>这部分列举了很多例子，包括日常生活中的场景以及为人熟知的几个科学家的故事，德国化学家Kekule在梦中悟出苯分子的环状结构，作家歌德因一位好友自杀而悟出如何组织大量素材的创作经历，英国诗人塞缪尔泰勒从梦中醒来后脑中浮现200～300行新诗。表达一个论点：</p>
<p><strong>Breakthrough ideas favor trained, active minds</strong>。</p>
<p>或者说，<strong>sometimes, intuition is the result of thinking</strong>.</p>
<p>但是大部分的时候，没有经过刻意训练的直觉，很可能是错的，而且我们会有意识地去遗忘这种错误，从而继续相信直觉。</p>
<p>[有的时候，我们相信专家或者大牛的话，也许有一部分的原因是因为我们相信他们的结论是经过思考后得出的，即使不是经过思考的，单纯凭直觉，也会觉得比一般人靠谱，为什么？认为他们的直觉不是突然从石头里蹦出来的，而是长期在专业里浸泡，思考的产物]</p>
<h4 id="Basic-Activities-in-Critical-Thinking"><a href="#Basic-Activities-in-Critical-Thinking" class="headerlink" title="Basic Activities in Critical Thinking"></a>Basic Activities in Critical Thinking</h4><p>Investigation, interpretation, judgment.</p>
<table>
<thead>
<tr>
<th>Activity</th>
<th>Definition</th>
<th>Requirements</th>
</tr>
</thead>
<tbody><tr>
<td>Investigation</td>
<td>Finding evidence — that is, data that will answer key questions about the issue</td>
<td>The evidence must be both relevant and sufficient</td>
</tr>
<tr>
<td>Interpretation</td>
<td>Deciding what the evidence means</td>
<td>The interpretation must be more reasonable than competing interpretations</td>
</tr>
<tr>
<td>Judgment</td>
<td>Reaching a conclusion about the issue</td>
<td>The conclusion must meet the test of logic</td>
</tr>
</tbody></table>
<p>【我感觉这部分算是最核心的了，后面基本都是围绕着这三个部分来的，Part2中列出的思考前或过程中常常犯的错误，不是少了某个环节，就是某个环节没有做到位，不符合要求，而Part3给到的方法论，也是如何做好这三个环节，把一个结论抽丝剥茧，拆分拆分再组装】</p>
<h4 id="Critical-Thinking-and-Writing"><a href="#Critical-Thinking-and-Writing" class="headerlink" title="Critical Thinking and Writing"></a>Critical Thinking and Writing</h4><p>这一部分写的真好，都想全文摘抄……</p>
<p>通过writing去发现ideas，不仅仅是排列出你已有的ideas，同时还可能会 stimulating the flow of new ideas。just like an idea machines.文中对idea的产生是这样描述的：</p>
<blockquote>
<p>If ideas come slowly, be patient.</p>
<p>If they come suddenly, in a rush, don’t try to slow down the process and develop any one of them, simple jot them all down.</p>
</blockquote>
<h4 id="Critical-Thinking-and-Discussion"><a href="#Critical-Thinking-and-Discussion" class="headerlink" title="Critical Thinking and Discussion"></a>Critical Thinking and Discussion</h4><p>这部分很形象地举了一个电视上常见的讨论show，当然那讨论的目的早已经脱离了问题本身，不是以解决问题或者加深对问题的理解从而推动问题解决为目的的。文中给了方法论，来避免无效甚至有害的讨论。</p>
<ul>
<li>Whenever possible, prepare in advance【提前准备，其实并不会花太多的时间】</li>
<li>Set reasonable expectations【Expect to have your ideas questioned, and be cheerful and gracious in responding】</li>
<li>Leave egotism and personal agendas at the door.【有效讨论的前提，有礼貌，尊重对方】</li>
<li>Contribute but don’t dominate.【善谈者克制泛滥的表达欲，寡言者甩掉顾虑，多多参与】</li>
<li>Avoid distracting speech mannersms. 【是讨论，不是演讲】</li>
<li>Listen actively【专心听别人所说的，尝试着进入他人的思维框架中，一旦思绪乱飘，拽回来】</li>
<li>Judge ideas responsibly【客观判断ideas，不管是自己的还是别人的】</li>
<li>Resist the urge to shout or interrupt【我有打断别人思路，提问题的毛病，这点要注意改正】</li>
</ul>
<h4 id="Avoiding-Plagiarism【避免抄袭】"><a href="#Avoiding-Plagiarism【避免抄袭】" class="headerlink" title="Avoiding Plagiarism【避免抄袭】"></a>Avoiding Plagiarism【避免抄袭】</h4><p>这部分强调了idea是一种智力财产。举了好一些例子来否定抄袭行为，并将某些场合下的抄袭定义为一种犯罪行为。</p>
<p>「想到了一句古语：千古文章一大抄。我觉得要看抄袭是为了什么，如果是为了一己谋私，而损害了他人的利益，那确实是不应该的。可是如果说完全的避免抄袭，否定一切的抄袭行为，我觉得就过度了。因为很多时候，你甚至都不知道自己在抄袭，以为自己是原创，后面才发现原来很多东西古人或者同时代的其他人早已经想到了。都是人类的种，基因里总是会有一些重合度颇高的东西。GitHub上那么多的repos，有多少是真正完全原创的呢？或多或少都会带有前人的影子，但这并不妨碍它本身的价值。我想我会有这样的想法，或者说我与作者之间产生的分歧在于我们对抄袭的定义不同吧。因为我将所有言他人所言的都归为抄袭，其实不是，抄袭意味着窃取他人的成果。」</p>
<p>书中对于因为误解了概念而无意识产生的抄袭行为，提到了如何避免的方法：</p>
<ul>
<li>When you are researching a topic, keep your sources’ ideas separate from your own.</li>
<li>As you read each source, note the ideas you want to refer to your writing.</li>
<li>When you compose your paper, work borrowed ideas and words into your own writing by judicious use of quoting and paraphrasing. In addition, give credit to the various authors.</li>
</ul>
<p>书中还给到了一个范例，操作起来其实很费时，不过严肃性的研究论文确实应该这样。</p>
<p>最后的Application部分，更多的是自问自答型，并给到了一个如何审视自己思考过程的方法。</p>
<h3 id="Chapter-3-What-is-Truth"><a href="#Chapter-3-What-is-Truth" class="headerlink" title="Chapter 3 : What is Truth?"></a>Chapter 3 : What is Truth?</h3><p>开篇提到了what is truth?  the existence of truth,  could it possible for us to know truth?  etc.</p>
<p>最后的焦点集中在 truth is relative and subjective, Everyone creates his or her own truth.</p>
<p>接下来是作者从多个角度解释为何”everyone makes his or her own truth”是一个很可笑的观点，整个论证过程，证据充足，解释合理，堪称精彩，非常值得学习。</p>
<h4 id="Where-does-it-all-begin"><a href="#Where-does-it-all-begin" class="headerlink" title="Where does it all begin"></a>Where does it all begin</h4><p>如果仅仅关注成年时代，Everyone creates his or her own truth 可能听起来比较合理。【书中没说为什么比较合理，也许是成年后，人大多拥有了自己独立的思考能力，而不再盲从，不会太轻易受到外界的影响】</p>
<p>强调童年时代我们所受到的教育对于成年后的我们依然发挥着很重要的影响。</p>
<blockquote>
<p>we are told about the world before we see it. We image most things before we experience them. And those preconceptions, unless education has made us acutely aware, govern deeply the whole process of perception.</p>
</blockquote>
<p>那些我们认为自己独有的观点中，或多或少都带着前人的印记。</p>
<p>To a greater or less extent, what we regard as our unique perspective bears the imprint of other people’s ideas and beliefs.</p>
<h4 id="Imperfect-Perception"><a href="#Imperfect-Perception" class="headerlink" title="Imperfect Perception"></a>Imperfect Perception</h4><p>本节举了几个例子说明为什么感觉是有瑕疵的，不是完美的。</p>
<p>主要原因两个方面：</p>
<ul>
<li>it is influenced by our desires, interests and expectations</li>
<li>a number of factors make us see and hear inaccurately</li>
</ul>
<h4 id="Imperfect-Memory"><a href="#Imperfect-Memory" class="headerlink" title="Imperfect Memory"></a>Imperfect Memory</h4><p>Our memory often distorts the data.</p>
<p>我们会给自己的记忆添砖加瓦，甚至有意或者无意美化某段记忆。</p>
<p>We forget details, and when later attempting to recall what happened we resort to imagination to fill in the blanks.</p>
<p>When we talk with others about our experience, we trend to make it more simple and interesting than what we really said or did.</p>
<h4 id="Deficient-Information"><a href="#Deficient-Information" class="headerlink" title="Deficient Information"></a>Deficient Information</h4><p>The quality of a belief depends on a considerable extent on the quality of the information that backs it up.Because it’s a big world and reality has many faces, it’s easy for us to be misinformed.</p>
<p>Things keep happening too fast.</p>
<h4 id="Even-the-Wisest-can-Err"><a href="#Even-the-Wisest-can-Err" class="headerlink" title="Even the Wisest can Err"></a>Even the Wisest can Err</h4><p>圣贤也会犯错。</p>
<h4 id="Truth-is-Discovered-Not-created"><a href="#Truth-is-Discovered-Not-created" class="headerlink" title="Truth is Discovered, Not created"></a>Truth is Discovered, Not created</h4><p>这部分算是对上面几个部分的小结，同时引领了下一节。</p>
<p>why “everyone creates his or her own truth” is laughable?</p>
<ul>
<li>our ideas and belifs are unavoidably infuenced by other people’s, particularly in childhood</li>
<li>perception and memory are imperfect</li>
<li>our information can be inaccurate or incomplete</li>
<li>some people’s thinking skills are woefully meager(粗劣;少)  and/or  ineffectively used</li>
</ul>
<p>What is the most reasonable view of truth?</p>
<blockquote>
<p>The truth about something is what is so about it - the facts in their exact arrangement and proportions</p>
<p>Our beliefs and assertions are true when they correspond to that reality and false when they do not.</p>
<p>To look for the truth in such matters is to look for the answer that fits the facts, the correct answer.</p>
</blockquote>
<p>Truth is discovered, not created.</p>
<p>Much of the confusion about truth arises from complex situations in which the truth is difficult to ascertain or express.</p>
<p>A good way to begin the right journey is to keep the following thought in mind:</p>
<blockquote>
<p><strong>I know I have limitations and can easily be mistaken. And surely I’ll never find all the answers I’d like to. But I can observe a little more accurately, weigh things a little more thoroughly, and make up my mind a little more carefully. If I do so, I’ll be a little closer to the truth.</strong></p>
</blockquote>
<h4 id="Understanding-Cause-and-Effect"><a href="#Understanding-Cause-and-Effect" class="headerlink" title="Understanding Cause and Effect"></a>Understanding Cause and Effect</h4><p>some of the most difficult challenges in discovering truth occur in determining cause and effect relationships.</p>
<p>Four facts need be understood before discovering the truth:</p>
<ul>
<li><p>one event can precede another without causing it.[比如认为今天打碎了镜子所以霉运连连]</p>
<p>correlation does not prove causation. [相关关系不等同因果关系]</p>
</li>
<li><p>Not all causation involves force or necessity[认为causation都是物质的，有形的外在力量]</p>
<p>Causation also occurs in the nonmaterial realities we call human affairs –more specifically, in the processes of emotion and thought.</p>
<p>The influence(cause) does not force the effect to occur but instead invites, encourages, or inspires it.</p>
</li>
<li><p>There is a wild card in human affairs – free will [选择态度的自由]</p>
<p>free will : the capacity to respond in ways that oppose even the strongest influence.</p>
<p><strong>Possessing free will is no guarantee that we will apply it. In fact, one factor makes such application difficult. That factor is habit</strong>. [习惯的力量]</p>
<p>最难改掉的习惯是那些随着时间而不断增强的习惯。「复利效应」</p>
</li>
<li><p>Causation is often complex[起因常常很复杂]</p>
<p>举了很多个例子，比如车子连环追尾，患流感的女性对同舱人的影响，还就欧洲被中东化做了一番精彩的分析。</p>
</li>
</ul>
<p><strong>Cautions：</strong></p>
<p>Keep the following cautions in mind to avoid oversimplification in your analyses.</p>
<ul>
<li>Remember that events seldom, if ever, “just happen” [ 万事皆有因果]</li>
<li>Remember that free will is a powerful causative factor in human affairs[不要忽视free will]</li>
<li>Be aware that in a chain of events, an effect often becomes a cause.[在一条事物链中，一件事的果，可能会是另一件事的因]</li>
<li>Be aware that ,in dealing with human affairs, outcomes can be unpredictable.[涉及到人类的活动时，结果可能无法预测]</li>
</ul>
<p>[分清事实和看法]</p>
<h3 id="Chapter-4-What-does-it-mean-to-know"><a href="#Chapter-4-What-does-it-mean-to-know" class="headerlink" title="Chapter 4 What does it mean to know?"></a>Chapter 4 What does it mean to know?</h3><p>开篇依然是一个场景，以为自己知道embarrass如何拼写的Sally发现自己是错的，而认为自己不知道embarrass如何拼写的Marie却被证明是正确的。</p>
<h4 id="Requirements-of-knowing"><a href="#Requirements-of-knowing" class="headerlink" title="Requirements of knowing"></a>Requirements of knowing</h4><p> 知道不仅仅是说你知道正确的答案，还包含着你知道你知道正确答案这件事，并且懂得如何去表诉你是如何知道正确答案的。「我这蹩脚的翻译」</p>
<p>Knowing involves more than having the right answer, it also involves <strong>the realization that you have it</strong>.</p>
<p>Knowing usually implies something else, too - the ability to express what is known and how we came to know it.</p>
<h5 id="Testing-your-own-knowledge"><a href="#Testing-your-own-knowledge" class="headerlink" title="Testing your own knowledge"></a>Testing your own knowledge</h5><p>这部分，举了8个例子，说明那些我们以为应该是常识的知识，并不一定就是正确的。这些被质疑或者说推翻的常识里面，我个人印象深刻的是有关情绪的发泄，更具体的是，生气时如何处理。</p>
<p>原来的常识: expressing anger has the effect of reducing it and making us feel better.  </p>
<p>反方观点：<strong>expressing anger makes you angrier, solidifies an angry attitude, and establish a hostile habit</strong>.If you keep quiet about momentary irritations and distract yourself with pleasant activity until your fury simmers down, chances are you will feel better, and feel better faster, than if you let yourself go in a shouting match.</p>
<p>如果我没有记错，《少有人走的路》里面对于情绪的发泄也有一段表述，更多的其实是鼓励情绪的发泄。综合两者，情绪要发泄，但是要以合适的方式，至少不能伤害他人。【呃，这不是废话？】</p>
<p>is it possible that what I and other people think we know isn’t really so?</p>
<p>「电影《the big short》开篇贴出来了那句马克吐温的警言：It ain’t what you don’t know that gets you into trouble. It’s what you know for sure that just ain’t so。可怕的不是你不知道，是你不知道你知道的竟然是错的。」</p>
<h4 id="How-we-come-to-know"><a href="#How-we-come-to-know" class="headerlink" title="How we come to know"></a>How we come to know</h4><p>获取知识的两种方式：主动actively或者被动passively</p>
<p>大部分教室里传授的知识以及通过电视新闻，报刊获取的信息，与身边的人进行的信息交流，都属于后者，passively，被动的获取知识让我们倾向于全盘接受，不带任何批判。</p>
<p>主动的获取包括，类似科学实验那样，自己亲身体验，对于提出的想法进行检测，分析并考虑所有的可能性解读，最终得出符合逻辑的结论。【按这个标准，我感觉自己这些年白活了】</p>
<p>这部分举了一个很常见的场景：一条信息如何在一传十，十传百中，逐渐面目全非的。</p>
<h4 id="Why-knowing-is-difficult"><a href="#Why-knowing-is-difficult" class="headerlink" title="Why knowing is difficult"></a>Why knowing is difficult</h4><p>三个主要原因：</p>
<ul>
<li>some long unanswered questions continue to resist solution【比如，癌症是由什么引起的？】</li>
<li>Everyday situations arise for which there are no precedents【某些问题的出现是由于其他一些问题的出现带来的，比如抽烟被认为是诸多致命性疾病的引发因素之一，有关吸烟者与非吸烟者在公共场合的权利争论便开始了，如果没有前者，后者自然也就不存在了。】</li>
<li>as one generation succeeds another, knowledge is often forgetten or unwisely rejected【这部分，举了很多个例子，不可因为前人犯错，就轻易否认前人的智慧】</li>
</ul>
<h4 id="A-cautionary-Tale"><a href="#A-cautionary-Tale" class="headerlink" title="A  cautionary Tale"></a>A  cautionary Tale</h4><p>这一篇举了一个好玩的例子，十九世纪六十年代，人们在菲律宾的一座小岛上发现了塔萨代Tasaday部落，该部落的人们依然生活在石器时代，大多数的人类学专家和社会学专家在经过实地考察后，认为他们确实是石器时代。而在随后的1986年，一名瑞士的记者发现塔萨代其实是住在房子里，而不是洞穴中，着装也同现代人无疑，他们承认了这一切是由于他们受人压迫，刻意制造出来的假象，但他们也并不完全是伪造，也是处于比较原始的生活状态，只是不算是完全的石器时代了。【这部分去Google了下，当八卦来看，涨知识了……】</p>
<h4 id="Is-Faith-a-form-of-knowledge"><a href="#Is-Faith-a-form-of-knowledge" class="headerlink" title="Is Faith a form of knowledge?"></a>Is Faith a form of knowledge?</h4><p>宗教信仰，意味着相信一些不能被证明的事情。</p>
<p>【一件事并不因为你相信，或者很多人相信，它就是正确的，相不相信跟是不是事实没有必要的联系】</p>
<h4 id="Obstacles-to-knowledge"><a href="#Obstacles-to-knowledge" class="headerlink" title="Obstacles to knowledge"></a>Obstacles to knowledge</h4><p>阻碍knowledge的两种习惯：</p>
<ul>
<li><p>assuming</p>
<blockquote>
<p>Assuming is taking something for granted.</p>
<p>assuming is generally an unconscious activity, we are often unaware of our assumptions and their influence on us. the main negative effect of unrecognized assumptions is that they stifle the curiosity that leads to knowledge.</p>
</blockquote>
</li>
<li><p>guessing</p>
<blockquote>
<p>Guessing is offering a judgement on a hunch or taking a chance on an answer without any confidence that it is correct.</p>
<p>It may denies the importance of evidence.【但是大部分的事实，不都是先猜想，然后验证？】</p>
</blockquote>
</li>
</ul>
<p>方法论：what should we do?</p>
<blockquote>
<p>Be honest with yourself and others about your ignorance. To admit you don’t know something shows  good sense, restraint, and intellectual honesty. These are not weaknesses but strengths.</p>
<p>The admission of ignorance is the essential first step toward knowledge.</p>
<p>you should value firm, bold statements so much that you reserve them for occasions when the evidence permits. Similarly, you should value convictions so highly that you embrace them only when you have sufficient knowledge to do so and that you modify them whenever intellectual honesty requires.</p>
</blockquote>
<p>【这一章，感触最深的还是这句：It ain’t what a man doesn’t know that makes him a fool, but what he does know that ain’t so.】</p>
<h3 id="Chapter-5-How-good-are-your-opinions"><a href="#Chapter-5-How-good-are-your-opinions" class="headerlink" title="Chapter 5 How good are your opinions?"></a>Chapter 5 How good are your opinions?</h3><p>开篇不再是一个场景，来了一段引言，出自Charles Sylvester de Fort 1931年写的一本小册子，表达的观点是：the earth is flat。</p>
<p>现在看会觉得这样的观点很可笑，但是当你读他写的那段文字，脑子多半会浮现一个义正言辞，捍卫真理的勇者形象，在那个大家不知道地球是圆的的时代，谁说他可笑呢？</p>
<p>由此引出本章重点：how good are your opinions?</p>
<p>这里，作者也很明确划出了critical thinking中所指的opinion:</p>
<p><strong>refers to expressions of judgement rather than expressions of taste.</strong></p>
<p> 毕竟有关taste的争论是没有什么意义的。</p>
<p>但是有的时候，很难分辨出他人的观点是有关taste还是judgement的。</p>
<p>「在一个自由的国度，每个人都有拥有自己观点的自由，但是你拥有它并不意味着它就是正确的，如果它是错误的，那么基于这个观点作出的相应行为，很可能会伤人或伤己。」</p>
<p>Being free to hold an opinion and express it does not, of course, guarantee favorable consequence. Acting on our opinions carries even less assurance.</p>
<p><strong>We are free to act on our opinions only as long as, in doing so, we do not harm others.</strong></p>
<h4 id="Opinions-can-be-mistaken"><a href="#Opinions-can-be-mistaken" class="headerlink" title="Opinions can be mistaken"></a>Opinions can be mistaken</h4><p>这里举了一个Taster‘s Choice coffee的例子，同样的咖啡被贴上了不同的标签后，人们会尝出完全不同的味道。【谁说成人缺乏想象力？我们想象力丰富着呢。】</p>
<p>既然opinions 可能是错误的，那么citical thinking能做什么？</p>
<p>Ideas are seldom of equal quality. Solutions to problems vary from the pratical to impractical, beliefs from the well founded to the ill founded, arguments from the logical to the illogical, and opinions from the informed to the uninformed. <strong>Critical thinking serves to separate the more worthy from the less worthy and, ultimately, to identify the best</strong>.</p>
<h4 id="Opinions-on-moral-issues"><a href="#Opinions-on-moral-issues" class="headerlink" title="Opinions on moral issues"></a>Opinions on moral issues</h4><p>这是个比较敏感但又很重要的部分，很多时候，我们的观点都会涉及到道德领域。这个时候，如何去判断呢？有的时候，这些涉及道德规范的观点可能是非常主观和完全个人倾向的，如何去判断？或者说以什么样的标准来判定哪种观点更为正确？</p>
<p>文中给了三个最重要的标准：obligations, ideals , consequences.</p>
<ul>
<li>obligations：when two or more obligations conflict, the most important one should take precedenct.【更重要的那个优先，可是重要的标准是什么？】</li>
<li>ideals：when two or more ideals conflict in a given situation, the most important one should take precedenct.【与obligations相同】</li>
<li>consequences：Actions that achieve beneficial consequences should be preferred over those that do harm. preferred action is the one that achieves the greater good or the less evil.</li>
</ul>
<h4 id="Even-Expert-can-be-wrong"><a href="#Even-Expert-can-be-wrong" class="headerlink" title="Even Expert can be wrong"></a>Even Expert can be wrong</h4><p>这段举了大量的例子，涉及医学，生物学，心理学，天文，考古等等，来证明作者的观点：even expert can be wrong.</p>
<h4 id="Kinds-of-Errors"><a href="#Kinds-of-Errors" class="headerlink" title="Kinds of Errors"></a>Kinds of Errors</h4><p>这段还蛮精彩的。</p>
<p>观点容易掉进的四种坑：</p>
<ul>
<li>Errors or tendencies to error common among all people by virtue of their being human.【是个人都会犯错……】</li>
<li>Errors or tendencies to error associated with one’s individual habits of mind or personal attitudes, beliefs, or theories.【与个人思维习惯，个人态度，信仰或者理论有关】</li>
<li>Errors that come from human communication and the limitations of language.【交流以及语言的局限性，the practice of expressing a thought or feeling inadequately and leading others to form a mistaken impression】</li>
<li>Errors in the general fashion of an age. 【一个时代的fashion?】</li>
</ul>
<p>英国哲学家John Locke观察指出，容易犯错的人基本可分为三类：</p>
<ul>
<li>Those who seldom reason at all, but think and act as those around them do.</li>
<li>Those who are determined to let passion rather than reason govern their lives.</li>
<li>Those who sincerely follow reason, but lack sound, overall good sense, and so do not look at all sides of an issue.</li>
</ul>
<p>作者加了一个分类，这个类别的人其实才是最难“治愈”的：</p>
<ul>
<li>Those who never bother to reexamine an opinion once it has been formed.</li>
</ul>
<h4 id="Informed-versus-uninformed-opinion"><a href="#Informed-versus-uninformed-opinion" class="headerlink" title="Informed versus uninformed opinion"></a>Informed versus uninformed opinion</h4><p>这部分其实跟前面even expert can be wrong相呼应，既然专家也可能是错误的，那么我们为什么还要咨询他们的意见呢？不是浪费时间吗？自然不是，同一件事情，专家与常人的判断相比，更有参考价值，当然，前提的，这个人真的是专家。</p>
<p>【专家相比常人，因为在他们所研究的领域投入的更多的时间和思考，所以他们针对该领域提出的观点，其错误的几率相比其他人要低很多，这也是为什么我们生病了要去看医生，但是不是随便哪个医生都能给你治病，要找对应的专科医生】</p>
<p>咨询专业人士可以有效减少犯错的几率。</p>
<p>By examining the opinions of informed people before making up our minds, we broaden our perspective, see details we might not see by ourselves, consider facts we would otherwise be unaware of, and lessen our chances of error.</p>
<p>这里作者还附送了一条如何写分析报告的建议：</p>
<p>In most responsible expressions of opinion, the statement of opinion takes up only a sentence or two, while the supporting details fill paragraphs, pages, and even entire chapters.</p>
<h4 id="Forming-opinions-responsibly"><a href="#Forming-opinions-responsibly" class="headerlink" title="Forming opinions responsibly"></a>Forming opinions responsibly</h4><p>这部分算是方法论了。</p>
<p>Forming opinions is natural. Here are some tips that can help you improve the quality of your opinions:</p>
<ul>
<li><p>Understand  how opinions are formed</p>
<blockquote>
<p>In practical terms, you cannot help producing opinions about what you see and hear whether or not you take control of the process. when you are not in the control, your mental system operates in the uncritical default mode.</p>
</blockquote>
</li>
</ul>
<table>
<thead>
<tr>
<th>Uncritical Default Mode</th>
<th>Critical Thinking Mode</th>
</tr>
</thead>
<tbody><tr>
<td>Perceive</td>
<td>Perceive</td>
</tr>
<tr>
<td>Let an opinion “come to mind”</td>
<td>Investigate the issue</td>
</tr>
<tr>
<td>Focus on information that supports the opinion</td>
<td>Consider alternative opinions</td>
</tr>
<tr>
<td>Embrace the opinion</td>
<td>Decide which opinion is most reasonable</td>
</tr>
</tbody></table>
<ul>
<li><p>Resist the temptation to treat your opinions as facts</p>
<blockquote>
<p>The prudent approach is to question any opinion, even a cherished one, the moment evidence arises that suggests it is based on habit, impulse, whim, personal preference, or the influence of fashionable ideas rather than reality.</p>
</blockquote>
</li>
<li><p>Monitor your thoughts to prevent the uncritical default mode from taking charge</p>
<blockquote>
<p>Be not swept off your feet by the vividness of the impression, but say, “Impression, wait for me a little, Let me see what you are and what you represent, let me try test you.”</p>
</blockquote>
</li>
</ul>
<p><strong>Gain control of your opinions, rather than having them control you</strong>.</p>
<h3 id="Chapter-6-What-is-Evidence"><a href="#Chapter-6-What-is-Evidence" class="headerlink" title="Chapter 6 What is Evidence?"></a>Chapter 6 What is Evidence?</h3><p>大体的内容：什么是证据？证据有哪些类型？如何评价证据？充足的证据需要满足什么条件？</p>
<p><strong>To present evidence is to show others that what we think makes sense.</strong></p>
<p>证据用于表明你的观点不是随口一说，是有依据的， 是用于支撑你论点的那些材料。</p>
<p>为什么很多文章和演讲中包含了大量观点但是却没有提供相应的证据去支持这些观点？</p>
<ul>
<li><p>The human mind is a veritable opinion factory, so most people have an abundance opinions to share.</p>
</li>
<li><p>people tend to remember their opinions and forget the process by how they got them.</p>
</li>
<li><p>sometimes there is little or no evidence to remember - in other words, the opinion is based on nothing substantial.【毫无依据的观点也是观点】</p>
<blockquote>
<p>这里举了克林顿的桃花案事件中一些人的看法来佐证。</p>
</blockquote>
</li>
</ul>
<p>大部分人都不愿意承认，当我们被询问支撑这个观点的证据是什么时，我们只能举出脆弱的，经不起推敲的证据，我们可能会安慰自己说我们的脑中有足够的证据，但是事实上，更大的可能性是我们脑子只有那些可怜的脆弱的证据。</p>
<p>we may soothe ourselves with the notion that a thick folder of evidence lies misfiled in our minds, but the very real possibility remains that flimsy evidence was all we ever had.</p>
<p>那么critical thinker有什么不同呢？</p>
<p>Critical thinkers are tempted to commit the same self-deception that plagues(纠缠) others. but they have learned the value of resisting that temptation. More important, <strong>they have developed the habit of checking the quality and quantity of the evidence before forming an opinion</strong>. Also <strong>they review their evidence before expressing an opinion</strong>.</p>
<p>【critical thinker想得多，花的时间自然也比常人多，估计单身狗居多吧……】</p>
<h4 id="Kinds-of-Evidence"><a href="#Kinds-of-Evidence" class="headerlink" title="Kinds of Evidence"></a>Kinds of Evidence</h4><p>这部分列出了大部分证据的来源，根据人们对它们的熟悉程度排序，并陈述了每种证据类型的价值，局限性以及要问的适当问题。</p>
<p>具体如下：</p>
<ul>
<li><p>personal experience</p>
<blockquote>
<p>这里的personal experience不仅仅是指你个人的，也包括他人的。</p>
<p><strong>Value</strong>:</p>
<p>we carry personal experience in our minds, it tends to exert a greater influence than other kinds of evidence. it makes things more authentic and meaningful than what we have merely heard or read.</p>
<p><strong>limitation</strong>:</p>
<p>Attach greater significance and universality to particular events than they deserve.【容易犯以偏概全的错误，比如认识一个韩国人，就认为我们已经了解了大部分的韩国人】</p>
<p><strong>appropriate questions to ask</strong>:</p>
<ul>
<li>Are the events typical of unique?</li>
<li>Are they sufficient in number and kind to support the conclusion?</li>
</ul>
</blockquote>
</li>
<li><p>unpublished report</p>
<blockquote>
<p>这里的unpublished report指的是stories we hear from other people, 通常指的是那些八卦，道听途说的东西，比如彭于晏是我失散多年的男票。</p>
<p><strong>Value:</strong></p>
<p>Offer information.</p>
<p><strong>limitation:</strong></p>
<p>difficult to confirm them. 口口相传后，你听到的可能是2.0版本了，即使你听到的是第一版的，也不能保证它是真实的。</p>
<p><strong>appropriate questions to ask:</strong></p>
<ul>
<li>where did the story originate？</li>
<li>how can I confirm that the version I heard is accurate?</li>
</ul>
</blockquote>
</li>
<li><p>Published report</p>
<blockquote>
<p>已经公开发布的报告，包括博客，正式的学术论文，专业性的报刊等等。</p>
<p><strong>Value:</strong></p>
<p>offer information</p>
<p><strong>limitation:</strong></p>
<p>主要是非学术类中，事实和观点通常混合在一起，文档可能也是非正式的，残缺不全的，甚至不存在的。</p>
<p>In nonscholarly works, the documentation may be informal, fragmentary, or, in some cases, nonexistent.</p>
<p>Facts and opinions are often mingled in contemporary publications, particularly nonscholarly ones.</p>
<p><strong>appropriate questions to ask:</strong></p>
<ul>
<li>Does the report cite the sources of all important items of information?</li>
<li>Does the author have a reputation for careful reporting?</li>
<li>Does the publisher or broadcaster have a reputation for reliability?</li>
<li>Which statements in the published report constitute evidence, and which should themselves be supported with evidence?</li>
</ul>
</blockquote>
</li>
<li><p>Eyewitness testimony</p>
<blockquote>
<p><strong>Value:</strong></p>
<p>commonly considered to be the most reliable kind of evidence. 眼见为实。</p>
<p><strong>limitation:</strong></p>
<p>证据的真实性受到外部环境和观察者本人的影响。比如起雾的夜里，看到的也许并不是实物真实的样子,具体而言，有这些可能：</p>
<ul>
<li>The incident may have occurred late on a foggy night and the eyewitness may have been some distance away.</li>
<li>The eyewitness may have been tired or under the influence of alcohol or drugs.</li>
<li>His or her observation may also have been distorted by preconceptions or expectations.</li>
<li>The person’s memory of what occurred may have been confused by subsequent events.</li>
</ul>
<p><strong>appropriate questions to ask:</strong></p>
<ul>
<li>What circumstances surrounding the event, including the eyewitness’s state of mind, could have distorted his or her perceptions?</li>
<li>what circumstances since the event — for example, the publication of other accounts of the event – could have affected the eyewitness’s recollection?</li>
</ul>
</blockquote>
</li>
<li><p>Celebrity testimony[名人证词，背书]</p>
<blockquote>
<p>这里指的是网红，歌手，演员，导演，运动员或者行业里面的大牛们， 在一些商业或者正式场合中，为某些产品或者服务宣传背书，当他们被邀请去讨论有关宗教，教育，经济，国际关系等话题时，不要把他们的观点当成事实。</p>
<p><strong>Value:</strong></p>
<p>offer information</p>
<p><strong>limitation:</strong></p>
<p>they may have been paid to say things or they may just to be impressed.</p>
<p><strong>appropriate questions to ask:</strong></p>
<ul>
<li>in the case of advertisements or informercials, is the celebrity a paid spokesperson?</li>
<li>in the case of talk show comments, does the celebrity offer any support for his or her views? Also, does the host ask for such support?</li>
</ul>
</blockquote>
</li>
<li><p>Expert opinion</p>
<blockquote>
<p><strong>Value:</strong></p>
<p>More reliable than most of the varieties of evidence so far.</p>
<p>it can usually address the crucial question of what is typical and what is not ,which is the advantage over personal experience.</p>
<p><strong>limitation:</strong></p>
<p>Knowledge in virtually every field is rapidly expanding.</p>
<p>some people can’t resist the temptation to think of themselves as experts in everything. so one  expert who expertise in a particular issue may write articles on other fields which he doesn’t know well.</p>
<p><strong>appropriate questions to ask:</strong></p>
<ul>
<li>Does the person have, in addition to credentials in the broad field in question, specific expertise in the particular issue under discussion?</li>
<li>whether the expert is paid.</li>
<li>Whether other authorities agree or disagree with the expert’s view.</li>
</ul>
</blockquote>
</li>
<li><p>Experiment</p>
<blockquote>
<p><strong>Value:</strong></p>
<p>offer information</p>
<p><strong>limitation:</strong></p>
<p>two broad types of experiments.</p>
<ul>
<li>laboratory experiment: its artificiality</li>
<li>field experiment: the presence of the researchers can influence the subjects and distort the findings.</li>
</ul>
<p><strong>appropriate questions to ask:</strong></p>
<ul>
<li>for a laboratory experiment, has it been replicated by other researchers?</li>
<li>for a field experiment, have other researchers independently confirmed the findings?</li>
</ul>
</blockquote>
</li>
<li><p>Statistics</p>
<blockquote>
<p>Joel Best notes： “We think of statistics as facts that we discover, not as numbers we create……statistics do not exist indepently.”</p>
<p><strong>Value:</strong></p>
<p>applies to any information that can be quantified.</p>
<p><strong>limitation:</strong></p>
<p>Sometimes statistical errors are intentional.</p>
<p><strong>appropriate questions to ask:</strong></p>
<ul>
<li>What is the source of the statistics?</li>
<li>is the source reliable?</li>
<li>how old are the data?</li>
<li>Have any important factors changed since the data were collected?</li>
</ul>
</blockquote>
</li>
<li><p>Survey</p>
<blockquote>
<p><strong>Value:</strong></p>
<p>data obtained from surveys are quantifiable.</p>
<p><strong>limitation:</strong></p>
<p>the sampling may be random, systematic or stratified.</p>
<p><strong>appropriate questions to ask:</strong></p>
<ul>
<li>Was the sample truly representative?</li>
<li>were the questions clear and unambiguous?</li>
<li>were they objectively phrased rather than slanted?</li>
<li>do other surveys corroborate the survey’s findings?</li>
</ul>
</blockquote>
</li>
<li><p>Formal observation</p>
<blockquote>
<p>two kinds of formal observational studies.</p>
<ul>
<li>detached observation: the observer does not interact with the individuals being studied</li>
<li>participant observation: the researcher is involved in the activity being studied.</li>
</ul>
<p><strong>Value:</strong></p>
<p>offer information</p>
<p><strong>limitation:</strong></p>
<p>in participant observation, it may distort the individuals’ behavior.</p>
<p><strong>appropriate questions to ask:</strong></p>
<ul>
<li>is it likely that the presence of the observer distorted the behavior being observed?</li>
<li>Was the observation of sufficient duration to permit the conclusions that were drawn?</li>
<li>do the conclusions overgeneralize?</li>
</ul>
</blockquote>
</li>
<li><p>Research review</p>
<blockquote>
<p>This kind of study is undertaken when a considerable body of research has already been done on a subject.</p>
<p><strong>Value:</strong></p>
<p>a thorough review of research reveals areas of agreement and disagreement and provides a valuable overview of the current state of knowledge on the subject.</p>
<p><strong>limitation:</strong></p>
<p>difficult to evaludate all the reviews</p>
<p><strong>appropriate questions to ask:</strong></p>
<ul>
<li>do the reviewer’s conclusions seem reasonable given the research covered in the review?</li>
<li>has the reviewer omitted any relevant research?</li>
</ul>
</blockquote>
</li>
</ul>
<p>One additional question is applicable to all kinds of evidence:</p>
<p><strong>Is this  evidence relevant to the issue under consideration?</strong></p>
<h4 id="Evaluating-Evidence"><a href="#Evaluating-Evidence" class="headerlink" title="Evaluating Evidence"></a>Evaluating Evidence</h4><p>这段列出了哪些情况下，我们可能会带有个人倾向地评估evidence.</p>
<p>bias:  we usually be tilted in one direction or the other by our overall philosophy of life, our political or social views, our opinions on related issues, or our attitude toward the people associated with the various views.</p>
<p>signs that show bias in hindering your evaluation of evidence:</p>
<ul>
<li>you approach your evaluation  wanting one side to be proved right</li>
<li>you begin your investigation assuming that familiar views will prove correct.</li>
<li>you look for evidence that supports the side of the issue you favor and ignore evidence that opposes it.</li>
<li>you rate sources by how favorable they are to your thinking rather than by their reliability and the quality of their research.</li>
<li>you are nitpickingly critical of evidence for views you oppose and uncritical of evidence for views you favor</li>
<li>when you encounter evidence that opposes your bias, you begin arguing against it, often before you have completed examining it.</li>
</ul>
<p>后面提到了evaluating evidence的价值，这段写得真好, 有时候接受事实并不容易，但是总比一直抱有错误的观点要好：</p>
<blockquote>
<p>Although you may not be able to eliminate your biases, you can nevertheless identify and control them. and that is all that is necessary.</p>
<p>The purpose of evaluating evidence is to discover the truth, regardless of whether it is pleasant for unpleasant, and the only way to do so is to evalute fairly. Such an evaluation will sometimes require you to conclude that the view you leaned toward(or actually held) is mistaken. <strong>When the evidence supports such a conclusion, have the courage to embrace it. Changing your mind is not dishonorable, but mantaining a false view in order to save face is not only foolish but also intellectually dishonest.</strong></p>
</blockquote>
<h4 id="What-constitutes-Sufficient-Evidence"><a href="#What-constitutes-Sufficient-Evidence" class="headerlink" title="What constitutes Sufficient Evidence?"></a>What constitutes Sufficient Evidence?</h4><p>给了一个通用的guidelines 来帮助我们去判定evidence是否是充足的：</p>
<ul>
<li><p>Evidence is sufficient when it permits a judgement to be made with certainty.</p>
<blockquote>
<p>Certainty exists when there is no good reason for doubt, no basis for dispute.</p>
<p>Certainty is a very difficlut standard to meet, especially in controversial issues, so generally you will be forced to settle for a more modest standard.</p>
</blockquote>
</li>
<li><p>If certainty is unattainable, evidence is sufficient if one view of the issue has been shown to have the force of probability.</p>
</li>
<li><p>In all other cases, the evidence must be considered insufficient.【to be a critical thinker is really not easy….. 】</p>
</li>
</ul>
<h3 id="Chapter-7-What-is-Argument"><a href="#Chapter-7-What-is-Argument" class="headerlink" title="Chapter 7 What is Argument?"></a>Chapter 7 What is Argument?</h3><p>开篇洗脑，说了下在critical thinking的领域里，argument是什么。</p>
<p>argument的三种含义：</p>
<ul>
<li>a quarrel【little relevance to critical thinking】</li>
<li>the exchange of opinions between two or more people 【relevant to critical thinking】</li>
<li><strong>the line of reasoning that supports a judgment.</strong> 【relevant to the challenge of becoming a critical thinker， 这个是critical thinking中对于argument的定义】</li>
</ul>
<p>应该说对于critical thinker而言，argument指的是得出具体某个结论的推理过程。</p>
<p>类似数学公式的推导，因为1+1 = 2 所以 2 - 1 = 1 ， argument也是以一个或者多个假定为前提，推导出一个或者多个结论的过程。</p>
<p>相比数学公式的推导，arguments 会更复杂，更难测试其正确性。</p>
<h4 id="The-parts-of-an-argument"><a href="#The-parts-of-an-argument" class="headerlink" title="The parts of an argument"></a>The parts of an argument</h4><p>两个部分：假定premises和结论conclusion。</p>
<p>逻辑学家在评估arguments时的基本原则：</p>
<ul>
<li>the premises are either true or false</li>
<li>the reasoning that links the premises to the conclusion is either valid or invalid.</li>
<li>correct premises plus valid reasoning equal a sound agrument.</li>
<li>Either an incorrect premise or invalid reasoning will render an argument unsound.</li>
</ul>
<p>正确的假定前提加上有效的逻辑推理能得出一个合理的论点，但是有时候，正确的信息也可能会推断出错误的结论。</p>
<p>Inappropriate attitudes toward ideas and the reasoning process can also lead to errors in argument. 想法以及推理过程中不恰当的态度也会导致论点错误。这里举了第一印象为例，不要以第一印象给他人盖棺定论。</p>
<h4 id="Evaluating-Arguments"><a href="#Evaluating-Arguments" class="headerlink" title="Evaluating Arguments"></a>Evaluating Arguments</h4><p>评估论点的方法其实前面已经提到了，很简单：</p>
<p><strong>Decide whether the premises are true or false and whether the reasoning that leads from them to the conclusion is valid.</strong></p>
<p>这段举了好几个例子来演示如何去评估一个论点，这里挑一两个列出来。</p>
<table>
<thead>
<tr>
<th>The Argument</th>
<th>The questions</th>
</tr>
</thead>
<tbody><tr>
<td>Guilty people usually fail lie detector tests</td>
<td>is this true?</td>
</tr>
<tr>
<td>Bruno failed his lie detector test</td>
<td>Did he really?</td>
</tr>
<tr>
<td>Therefore, Bruno is guilty</td>
<td>Does this conclusion follow logically from what is stated in the premises? Would any other conclusion be as reasonable?</td>
</tr>
</tbody></table>
<p>这里假定Bruno没有通过测谎仪测试，前提都是正确的，但是最后的结论却是不对的，第一个前提说犯罪的人通常不会通过测谎仪测试，premise中有一个usually ，由此推断出来的结论只能是Bruno可能是有罪的，并不能肯定，也就是可以推出另一个结论，Bruno是无辜的，清白的。即这两条假定不足以推断出这样的结论。</p>
<p>后面提到了对立的两个论点可以帮助我们更有效去推断更正确的结论：</p>
<p>Did you ever have the experience of hearing an argument on some issue, being impressed with it, and then hearing the opposing argument and being even more impressed with that? 【 妥妥地中枪，我同意A，我觉得A的反面也很有道理】<strong>It happens often</strong>.【文中没有给到处理方法，只是举例说明了这种情况经常发生】</p>
<p>Remember that your evaluation of any argument  is likely to be most effective when you are able to hear both sides or at least to consider the criticisms people on each side of the issue make of the other side’s view.</p>
<h4 id="More-difficult-Arguments"><a href="#More-difficult-Arguments" class="headerlink" title="More difficult Arguments"></a>More difficult Arguments</h4><p>列出了推断论点的过程中，比较难的几种情况以及相应的处理方式：</p>
<ul>
<li><p>When an argument is longer than a paragraph</p>
<blockquote>
<p>summarize it before asking and answering your questions.</p>
<p>the danger in summarizing, is that you might misrepresent what the person was saying. if you are careful, you can avoid this misstep.</p>
</blockquote>
</li>
<li><p>When you are uncertain which statements are the premises and which is conclusion</p>
<blockquote>
<p>ask yourself exactly what idea the person is trying to get you to accept(that is the conclusion).</p>
<p>ask what reasons are offered in support of that idea.(those are the premises)</p>
</blockquote>
</li>
<li><p>When an argument contains more than two premises</p>
<blockquote>
<p>ask and answer your questions about each. don’t be daunted if there are many premises.</p>
<p>after eliminating any irrelevant premises, decide whether the conclusion follows logically from the remaining premises and if it is the only conclusion that does.</p>
<p>if more than one conclusion follows, decide whether the stated one is the most reasonable conclusion.</p>
</blockquote>
</li>
<li><p>When you are evaluating opposing arguments</p>
<blockquote>
<p>neither of which is persuasive(有说服力)， look for a third alternative.</p>
<p>【感觉如何分辨两个完全相反的论点，给出最合理的结论还是挺困难的，难点在于如何去判断论点的不足在哪里。】</p>
<p>这部分举了一个例子，有关在公立学校展示十诫的讨论，涉及到宗教以及道德这块，作者给出的解决方法是列出所有版本的十诫以及renew其他宗教或道德的清单，逐个进行推理。</p>
<p>accommodating all perspectives is no more offensive than ignoring all and has the additional benefit of emphasizing the importance of moral values.</p>
</blockquote>
</li>
<li><p>When an argument contains hidden premises</p>
<blockquote>
<p>identify them before proceeding with your evaluation.</p>
<p>辨别出那些隐藏的假定前提对于推理出结论来说，很重要。举文中的两个例子，看看那些被隐藏的premises。</p>
<ol>
<li>Argument: They should never have married - they felt no strong physical attraction to each other during courtship.</li>
</ol>
</blockquote>
</li>
</ul>
<table>
<thead>
<tr>
<th>the component parts</th>
<th>the questions</th>
</tr>
</thead>
<tbody><tr>
<td>Stated premises: they felt no strong physical attraction to each other.</td>
<td>did they feel no strong physical attraction to each other?</td>
</tr>
<tr>
<td>Hidden premises: strong physical attraction is the best, or perhaps the only, meaningful basis for marriage.</td>
<td>is strong physical attraction the best or only meaningful basis for marriage?</td>
</tr>
<tr>
<td>conclusion: they should never have married.</td>
<td>do the premises lead to this conclusion and no other?</td>
</tr>
</tbody></table>
<blockquote>
<p>给出的论点是：夫妻双方没有强烈的身体吸引力，所以他们不应该结婚，这个论点里隐藏的假定是，强烈的身体吸引力是婚姻的最佳或者唯一有意义的基础。</p>
<ol start="2">
<li>Argument: That book should be banned because it exposes children to violence.</li>
</ol>
</blockquote>
<table>
<thead>
<tr>
<th>the component parts</th>
<th>the questions</th>
</tr>
</thead>
<tbody><tr>
<td>Stated premises: the book exposes children to violence.</td>
<td>does the book expose children to violence?</td>
</tr>
<tr>
<td>first hidden premises:  exposure to violence is harmful</td>
<td>is exposure to violence always harmful?</td>
</tr>
<tr>
<td>second hidden premises: banning is the most appropriate reaction to such material.</td>
<td>is banning the most appropriate reaction to such material?</td>
</tr>
<tr>
<td>Conclusion: the book should be banned.</td>
<td>do the premises lead to this conclusion and no other?</td>
</tr>
</tbody></table>
<blockquote>
<p>   给出的论点是：那本书向孩子们展示了暴力，应该被禁止。这里隐藏了两个假定的前提：曝光暴力是有害的，针对这种情况，禁止是最合理的反应。</p>
</blockquote>
<p>最后，作者提到了段落越长的文字，隐藏的premise可能越难去辨别出来。</p>
<p>Whatever the length of the passenger you are evaluating , <strong>be alert for hidden premises</strong>.</p>
]]></content>
      <categories>
        <category>Reading</category>
      </categories>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>echo vs echom</title>
    <url>/posts/vimscript-learning-on-echo/</url>
    <content><![CDATA[<p>echo 和 echom 都用于输出, 但是 echom 输入的内容, 会被保存在 messages 中.</p>
<p>在 Vim 命令行中, 输入:</p>
<figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line"><span class="symbol">:echo</span> <span class="string">&quot;hello, world through echo&quot;</span></span><br><span class="line"><span class="symbol">:echom</span> <span class="string">&quot;hello, world through echom&quot;</span></span><br><span class="line"><span class="symbol">:messages</span></span><br></pre></td></tr></table></figure>

<p>可以在 messages 中看到 echom 输出的内容.</p>
<p>我之前会觉得 echo 没啥用, 直到看到 Max Cantor 的一个分享视频 <a href="https://www.youtube.com/watch?v=XA2WjJbmmoM&list=WL">How to Do 90% of What Plugins Do (With Just Vim)</a> , 他当时尝试用  <code>:echo expand(&#39;%&#39;)</code> 输出当前文件的相对路径, 看到结果的那一刻,  Max 情不自禁 yes了一下, 那个开心啊, 多像跑通代码的我们, 一下子让我记住了expand(“%”), 也对echo 有了印象……..</p>
]]></content>
      <categories>
        <category>VimScript 学习笔记</category>
      </categories>
      <tags>
        <tag>Vim</tag>
      </tags>
  </entry>
  <entry>
    <title>Leaders</title>
    <url>/posts/vimscript-learning-on-leaders/</url>
    <content><![CDATA[<p>来到了常见的 Leader.</p>
<p>初学时, 我简单地把 Leader 理解成一个 namespace, 好比 tmux 的 <code>Ctrl+b</code>. 现在看, 也没有偏差太多.</p>
<p>你可以把 Leader 看成是 Vim 内置的 prefix key.</p>
<p>Leader 的值存在 mapleader 变量中, 如果 mapleader 未初始化或者值为空, 则默认为 反斜杠 <code>\</code> .</p>
<p>这里注意: mapleader 是一个 variable, 不是一个 option, 使用 <code>:set mapleader?</code> 会报错的.</p>
<p>相应的, 如果想要修改 Leader 键, 可以通过给 mapleader 赋值来实现.</p>
<p>编辑<code>.vimrc</code>, 添加如下代码:</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> mapleader=<span class="string">&quot;-&quot;</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;Leader&gt;</span>d dd</span><br></pre></td></tr></table></figure>

<p>保存退出, source 后, 打开文件, 在 Normal 模式下, 按 <code>-d</code>, 等同于执行 <code>dd</code>. 即删除当前行. 此时 <code>&lt;Leader&gt;</code> 已变成了<code>-</code> 了, 如果按<code>\d</code> , 会发现无效.</p>
<p>mapleader 还有一个小兄弟, 叫 maplocalleader,  在 Vim中用特殊的字符串 <code>&lt;LocalLeader&gt;</code> 来表示.</p>
<p>同样, 可以通过赋值 maplocalleader 来设置   <code>&lt;LocalLeader&gt;</code>  :</p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">:<span class="keyword">let</span> <span class="attr">maplocalleader</span> = <span class="string">&quot;\\&quot;</span></span><br></pre></td></tr></table></figure>

<p>那  <code>&lt;LocalLeader&gt;</code>  是用来干嘛的呢?</p>
<p>作者在书中提到  <code>&lt;LocalLeader&gt;</code>  用来作为特定文件类型中的前置键.</p>
<blockquote>
<p>This is meant to be a prefix for mappings that only take effect for certain types of files, like Python files or HTML files.</p>
</blockquote>
<p>这个同官方文档中给出的, 稍稍有些区别.</p>
<p>Vim 官方文档提到的是 <code>&lt;LocalLeader&gt;</code>  用于只针对当前 buffer 有效的mappings.</p>
<blockquote>
<p><code>&lt;LocalLeader&gt;</code>  is to be used for mappings which are local to a buffer.  Example:<br>:map <buffer> <code>&lt;LocalLeader&gt;</code>A  oanother line<Esc></p>
</blockquote>
<p>但是文档中也提到了:</p>
<blockquote>
<p>In a global plugin <code>&lt;Leader&gt;</code> should be used and in a filetype plugin <code>&lt;LocalLeader&gt;</code>.</p>
</blockquote>
<p>全局插件使用 <code>&lt;Leader&gt;</code>  , 特定文件类型的插件, 使用 <code>&lt;LocalLeader&gt;</code>  .[有关Plugin, 后面会单独再介绍]</p>
<p>当然, 平日里我基本用不到<code>&lt;LocalLeader&gt;</code> , 这里就不折腾了.</p>
<p>可以查看官方文档了解更多.</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="symbol">:h</span> mapleader</span><br><span class="line"><span class="symbol">:h</span> maplocalleader</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>VimScript 学习笔记</category>
      </categories>
      <tags>
        <tag>Vim</tag>
      </tags>
  </entry>
  <entry>
    <title>前言</title>
    <url>/posts/vimscript-learning-preface/</url>
    <content><![CDATA[<p>这里是刷 <a href="https://github.com/sjl">Steve Losh</a>的  <a href="https://learnvimscriptthehardway.stevelosh.com/">Learn Vimscript the Hard Way </a> 的笔记系列.</p>
<p>写之前特意查了下, 已经有网友将本书翻译成了中文, 但主页已经打不开, 倒是在看云上保留了原来的译文, 如果想阅读中文版本, 这里附上<a href="https://www.kancloud.cn/kancloud/learn-vimscript-the-hard-way/49321">链接</a>.</p>
<p>当然, 个人非常推荐阅读原文, 50多篇, 每篇篇幅都比较短, 阅读过程中, 作者还会偶尔来点调皮话, 整点哲理鸡汤啥的, 叫人读着读着就笑了, 哈哈…..</p>
<p>总之, 阅读原版是一件很开心的事情, 不要让自己错过.&gt;^.^&lt;</p>
<p>鉴于我自己也是一个Vim 新手, 所以我多是以我个人的理解去对书中的内容做一些整理, 偶尔加点新东西, 同时尽量顺着原作者的写作风格, 力求简明清晰说人话, 篇幅适中易阅读, 达到入门 VimScript 的目标.</p>
<p>本文适合有 Vim 使用经验(至少 Vim 使用一两个月) 的新手围观.</p>
<p>原书基于Vim 7.3,  本系列基于 Vim 8.2. 某些内容会与原文稍有差异.</p>
<p>开始吧.</p>
]]></content>
      <categories>
        <category>VimScript 学习笔记</category>
      </categories>
      <tags>
        <tag>Vim</tag>
      </tags>
  </entry>
  <entry>
    <title>mapping</title>
    <url>/posts/vimscript-learning-on-mapping/</url>
    <content><![CDATA[<p>mapping  顾名思义, <code>map a b</code>, 当我执行 a 操作时, 它会做 b 操作会做的事.</p>
<p>看个例子, 在 Vim 命令行中, 输入:</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">:<span class="keyword">map</span> <span class="string">\</span> dd</span><br></pre></td></tr></table></figure>

<p>表示, 在 normal 模式下, 按下<code>\</code>, 就会删除当前光标所在的行.</p>
<p>mapping的设置, 跟模式有关系.</p>
<p><code>nmap</code> : normal mode 下的 mapping, 只在 normal 模式下有效.</p>
<p><code>vmap</code> : visual mode 下的 mapping, 只在 visual 模式下有效.</p>
<p><code>imap</code> : insert mode 下的 mapping, 只在 insert 模式下有效.</p>
<p><code>omap</code> : operator-pending mode 下的 mapping, 只在 operator-pending 模式下有效.</p>
<p><code>map</code>: normal, visual, operating mode 下的 mapping, 在 normal/visual/operator-pending 模式下有效.</p>
<p>map 有一个大坑, 叫做 Recursion, 书中给了一个例子, 比如:</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">:<span class="keyword">nmap</span> dd O<span class="symbol">&lt;esc&gt;</span>jddk</span><br></pre></td></tr></table></figure>

<p>normal 模式下, 按下dd, 等同于执行了<code>O&lt;esc&gt;jddk</code> , 而 <code>O&lt;esc&gt;jddk</code> 也有 <code>dd</code>, Vim 就会再次 mapping, 如此无穷尽….</p>
<p>解决方法是使用<code>noremap</code>,  nonrecursive mapping. 修改上面那个命令:</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">:<span class="keyword">nnoremap</span> dd O<span class="symbol">&lt;esc&gt;</span>jddk</span><br></pre></td></tr></table></figure>

<p>这样就正常了. 鉴于 noremap 能避雷,  作者给到的意见时, <strong>Always</strong> using  noremap instead of map. </p>
<p>再看个例子:</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="symbol">:nnoremap</span> &lt;C-s&gt;  <span class="symbol">:suspend&lt;CR&gt;</span></span><br></pre></td></tr></table></figure>

<p>上述命令表示, normal 模式下, 按住 Ctrl + s, 就等同于在命令行输入了<code>:suspend</code> 然后回车 ,这里  <code>&lt;CR&gt;</code> 表示Enter回车键.</p>
<p>都说到<code>&lt;CR&gt;</code> , 不妨来看看 VimScript 中 的 一些常用的 keycodes :</p>
<figure class="highlight bnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">&lt;Esc&gt;</span> : 代表 Esc 键</span><br><span class="line"><span class="attribute">&lt;C-&#123;key&#125;&gt;</span> : Ctrl + 任意键, 通常是字母键</span><br><span class="line"><span class="attribute">&lt;S-&#123;key&#125;&gt;</span> : Shift + 任意键, 通常是字母键</span><br><span class="line"><span class="attribute">&lt;CR&gt;</span> : Enter键,也可以用<span class="attribute">&lt;Enter&gt;</span>, <span class="attribute">&lt;Return&gt;</span> 来表示</span><br><span class="line"><span class="attribute">&lt;Space&gt;</span> : 空格键</span><br><span class="line"><span class="attribute">&lt;Leader&gt;</span> : Leader 键</span><br><span class="line"><span class="attribute">&lt;Left&gt;</span> : 左移方向键, 类似有<span class="attribute">&lt;Right&gt;</span>, <span class="attribute">&lt;Up&gt;</span>, <span class="attribute">&lt;Down&gt;</span></span><br></pre></td></tr></table></figure>

<p>那么, 如何知道 VimScript 中所有 key 的特殊标记? 用万能的<code>:help</code>  就好了, 命令行输入:</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="symbol">:h</span> key-notation</span><br></pre></td></tr></table></figure>

<p>可以查看所有的 key-notation.</p>
<p>我还记得刚入门时, 有时候看到别人的 vimrc 文件中, 有些 keycode 是全部小写的, 比如 <code>&lt;cr&gt;</code>, <code>&lt;esc&gt;</code>, 当时觉得, 有的人大写, 有的人小写, 哪种才是规范的呢? 直到看了文档, 才知道官方是首字母大写, 也算解了我的一个小困惑.</p>
<p>Vim 中有个特殊的 mapping, <code>&lt;Nop&gt;</code>, 表示什么也不做. 比如:</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">:<span class="keyword">inoremap</span> <span class="symbol">&lt;Esc&gt;</span> <span class="symbol">&lt;Nop&gt;</span></span><br></pre></td></tr></table></figure>

<p>Insert 模式下, 按下 Esc 键, 什么也没有做. [慎用!!!]</p>
<p>现在, 我们可以用学到的知识来写个简单的禁止使用上下左右键的功能:</p>
<p>在 <code>.vimrc</code> 文件中, 添加如下代码:</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="comment">&quot; disable up, down, leaf, right</span></span><br><span class="line"><span class="comment">&quot; normal mode</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;Up&gt;</span> <span class="symbol">&lt;Nop&gt;</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;Down&gt;</span> <span class="symbol">&lt;Nop&gt;</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;Left&gt;</span> <span class="symbol">&lt;Nop&gt;</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;Right&gt;</span> <span class="symbol">&lt;Nop&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; visual mode</span></span><br><span class="line"><span class="keyword">vnoremap</span> <span class="symbol">&lt;Up&gt;</span> <span class="symbol">&lt;Nop&gt;</span></span><br><span class="line"><span class="keyword">vnoremap</span> <span class="symbol">&lt;Down&gt;</span> <span class="symbol">&lt;Nop&gt;</span></span><br><span class="line"><span class="keyword">vnoremap</span> <span class="symbol">&lt;Left&gt;</span> <span class="symbol">&lt;Nop&gt;</span></span><br><span class="line"><span class="keyword">vnoremap</span> <span class="symbol">&lt;Right&gt;</span> <span class="symbol">&lt;Nop&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; insert mode</span></span><br><span class="line"><span class="keyword">inoremap</span> <span class="symbol">&lt;Up&gt;</span> <span class="symbol">&lt;Nop&gt;</span></span><br><span class="line"><span class="keyword">inoremap</span> <span class="symbol">&lt;Down&gt;</span> <span class="symbol">&lt;Nop&gt;</span></span><br><span class="line"><span class="keyword">inoremap</span> <span class="symbol">&lt;Left&gt;</span> <span class="symbol">&lt;Nop&gt;</span></span><br><span class="line"><span class="keyword">inoremap</span> <span class="symbol">&lt;Right&gt;</span> <span class="symbol">&lt;Nop&gt;</span></span><br></pre></td></tr></table></figure>

<p>这样就只能用 hjkl 了.</p>
<p>好了, 除了 Operator-Pending Mappings 外, 基本算是缕清了, 整点好吃的, 犒劳下自己吧.</p>
]]></content>
      <categories>
        <category>VimScript 学习笔记</category>
      </categories>
      <tags>
        <tag>Vim</tag>
      </tags>
  </entry>
  <entry>
    <title>set option</title>
    <url>/posts/vimscript-learning-on-set-option/</url>
    <content><![CDATA[<p>新手基本都会在大佬们的.vimrc 文件中看到不少 set option. </p>
<p>我们可以把 option 看作是 built-in configuration.</p>
<p>option 可以是布尔值, 类似开关, <code>set &#123;option&#125;</code>, <code>set no&#123;option&#125;</code>, 也可以赋值 <code>set &#123;option&#125;= &#123;value&#125;</code>. 以 number 为例:</p>
<p>在 Vim 命令行中, 输入:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 输出 number 的当前值</span></span><br><span class="line">:set number?</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加行号显示</span> </span><br><span class="line">:set number</span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭行号显示, 通用模式no&#123;option&#125;</span></span><br><span class="line">:set nonumber</span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换</span></span><br><span class="line">:set number!</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重置成默认值</span></span><br><span class="line">:set number&amp;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重置所有的 option 为系统默认值</span></span><br><span class="line">:set all&amp;</span><br></pre></td></tr></table></figure>

<p>这里简单提一下, 比较常用的 path. </p>
<p>在 Vim 命令行中, 输入当前Path:</p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">:<span class="built_in">set</span> <span class="built_in">path</span>?</span><br></pre></td></tr></table></figure>

<p>输出结果:</p>
<p><code> path=.,/usr/include,,</code></p>
<p>其中:</p>
<ul>
<li><p>. 指的是当前打开文件所在的目录.</p>
</li>
<li><p>/usr/include 是 C Libraries 头文件目录</p>
</li>
<li><p>, 指得是当前目录</p>
</li>
</ul>
<p>建议将经常访问的目录添加到 path, 比如:</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">:<span class="keyword">set</span> path+=app/<span class="keyword">models</span>/</span><br></pre></td></tr></table></figure>

<p>这样就用<code>find</code> 就顺手多了.</p>
]]></content>
      <categories>
        <category>VimScript 学习笔记</category>
      </categories>
      <tags>
        <tag>Vim</tag>
      </tags>
  </entry>
  <entry>
    <title>Preface</title>
    <url>/posts/notes-on-yale-courses-listening-to-music-preface/</url>
    <content><![CDATA[<p>在保留原始内容的基础上, 把之前的刷课笔记换成章节的形式, 方便自己查阅.</p>
<p>以下为原文:</p>
<p>Professor Wright 在第一课里说：Four months from now, You’ll know all of this stuff.</p>
<p>呃，鉴于我目前的懵逼程度，乐观点，4年吧：P</p>
<p>整个课程共23个lecture，边刷边更……</p>
]]></content>
      <categories>
        <category>Yale《listening to music》刷课笔记</category>
      </categories>
      <tags>
        <tag>Music</tag>
      </tags>
  </entry>
  <entry>
    <title>Lecture 01 Introduction</title>
    <url>/posts/notes-on-yale-courses-listening-to-music-lecture01/</url>
    <content><![CDATA[<p>按照课程大纲的顺序记录下。</p>
<ul>
<li><p>Introduction to Listening to music</p>
<p>Are you getting the most out of your listening experience?</p>
</li>
<li><p>Why listen to classical music?</p>
<p>National Public Radio 针对该问题的调查结果：</p>
<p>Why would we want to listen to classical music?</p>
<ul>
<li>It helps us relax and relieve stress</li>
<li>It helps us center the mind, allowing the listener to concentrate</li>
<li>classical music provides a vision of a better world</li>
</ul>
<p>对于 Professor Wright 本人来说：</p>
<blockquote>
<p>It suggests that there might be something out there. God or whatever , bigger than ourselves.</p>
<p>and it asks us to think sometimes, think about things. That’s what I think these great fine arts do, great literature, poetry, painting, music. **They show what human beings can be, the capacity of the human spirit. They suggest to us as indicated maybe there is something, a larger spirit out there than ourselves, and they get us to think. They get me to think frequently about what I’m doing on this earth. **</p>
</blockquote>
<p>So, what is professor trying to accomplish in here? :  P</p>
<p>Two things.</p>
<ul>
<li>change your personality</li>
<li>impart to you a love of classical music</li>
</ul>
<p>Pop music VS classical music</p>
<ul>
<li>pop music: reputation, rhythm and beat, strong pulsation,  while classical music has melody</li>
<li>their instruments are different</li>
</ul>
</li>
<li><p>Course Requirements and Pedagogy</p>
<p>介绍了下教授自己的那本书，第五版的《listening to music》，提到了一句：….about to come out in a Chinese edition for heaven’s sakes。笑喷。顺手查了下，这本书在amzon上的最新版本是第七版，已有中文版。</p>
<p>后面介绍了下 six-CD set.【want it……】</p>
<p>这里觉得重要的点：</p>
<ul>
<li>Music is an aurally perceived phenomenon.most of the music and language processing happens in these left and  right auditory cortex【音乐是一种听觉现象，大脑中处理语言和音乐的部分都在听觉皮层，懵逼ing……】</li>
<li>Daily participation in language labs required. <strong>So daily is the key thing here.</strong> You’ve got to do this gradual assimilation. So learning to listen to music is just like listening to language. We’ve got to do a little bit every day.</li>
</ul>
</li>
<li><p>Diagnositc Quiz</p>
<p>一个quiz，播放两首piece:</p>
<p>Beethoven’s Fifth Symphony「贝多芬的第五交响曲」「L group / Minor chords / disjunct music」</p>
<p>Beethoven’s Ninth Symphony「贝多芬的第九交响曲」 「R group / Major chords / conjunct music」</p>
<p>Beethoven’s Ninth Symphony  was the setting of a poem by Friedrich Schiller called Ode to Joy.</p>
<p>【我暂时还不能从这不安的曲子中听出Joy的味道……】</p>
<p>R group: positive, happy, secure.</p>
<p>L group: negative, anxious, unsettled.</p>
<p>为什么可以区分出一个曲子是R group 还是 L group？</p>
<p>它们有如下的不同：</p>
<ul>
<li><p>Major chords versus Minor chords: 大调 和 小调</p>
<blockquote>
<p>Major: bright</p>
<p>Minor: dark</p>
</blockquote>
</li>
<li><p>conjunct music versus disjunct music:  级进音乐 VS 跳进音乐</p>
</li>
<li><p>home pitch / tonic pitch: strongly felt tonal「音调」 key</p>
<blockquote>
<p>Beethoven’s Fifth Symphony 没有 home pitch,「 听教授的那句：bang!!! 感受下」</p>
<p>May be that’s why it sounds so disjunct and so unsettled.</p>
<p>而Beethoven’s Ninth Symphony 则 有home pitch, feel sort of secure in that home pitch.</p>
</blockquote>
</li>
<li><p>direction</p>
<blockquote>
<p>Beethoven’s Fifth Symphony 的方向是 down</p>
<p>Debussy 的 moonlight Clair de Lune 就是很典型的down.</p>
</blockquote>
</li>
</ul>
</li>
<li><p>pitch</p>
<p>音乐的两个维度：pitch, time/duration</p>
<p>这里举 Richard Strauss’s Also Sarach Zarathustra:</p>
<p>一个qiuz， what is the keyboard instrument is playing in it?</p>
<p>the brass instrument is a trumpet 「铜管乐器部分是一个小号」</p>
<p>the percussion instrument is timpani 「打击乐器部分是定音鼓」</p>
<p>【注意Richard Strauss’s Also Sarach Zarathustra的最后，可以听出有管风琴organ！还挺明显的】</p>
<p>「乐理这块完全听不懂，懵逼ing…….」</p>
<p>octave: 八度音阶</p>
</li>
<li><p>rhythm</p>
<p>duple meter:双拍子，one two, one two…. one strong beat, one weak beat,  strong weak, strong weak ….</p>
<p>triple meter: 三拍子, strong weak, weak, strong weak, weak, strong weak, weak ….</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Yale《listening to music》刷课笔记</category>
      </categories>
      <tags>
        <tag>Music</tag>
      </tags>
  </entry>
  <entry>
    <title>Lecture 02 Introduction to Instruments and Musical Genres</title>
    <url>/posts/notes-on-yale-courses-listening-to-music-lecture02/</url>
    <content><![CDATA[<p>Lecture1的练习作业：</p>
<blockquote>
<p>Beethoven’s Fifth Symphony in C minor Op.67</p>
<p>Tchaikovsky’s Piano Concerto Number One in B flat minor Op.23</p>
<p> Richard Strauss‘s  Also Sprach Zarathustra</p>
</blockquote>
<ul>
<li><p>distinguishing songs from pieces</p>
<p>song with lyrics. eighty percent of classical music is purely instrumental music.</p>
<p>symphony【交响乐定义】</p>
<blockquote>
<p> Symphonies generally have four movements. 【四个乐章】</p>
<p>What’s a movement? Well, a movement is simply an independent piece that works oftentimes. They are independent yet they are complementary.</p>
<p> symphonies have these four movements and they usually operate in the following way:</p>
<ul>
<li>A fast opening movement;</li>
<li>a slower, more lyrical second movement;</li>
<li>then a third movement that’s derived from dance;</li>
<li>and then a fourth movement that’s sort of again “up tempo,” fast, emphatic conclusion.</li>
</ul>
</blockquote>
<p>Beethoven’s Fifth Symphony 有 4 个movement【四乐章交响曲】，总时长在30-40分钟。</p>
<blockquote>
<ol>
<li>有生气的快板（Allegro con brio）</li>
<li>稍快的行板（Andante con moto）</li>
<li>谐谑曲：快板（Scherzo: Allegro）</li>
<li>快板（Allegro）</li>
</ol>
</blockquote>
</li>
<li><p>Genres, Motives, and Themes</p>
<p>【Genre ：音乐体裁】</p>
<p>A motive is just a little cell, a germ, out of which the composer will build other musical material.【动机】</p>
<p>【聆听 Beethoven’s Fifth Symphony第一乐章开头部分，short, short, short, long】</p>
<p>Themes tend maybe a little bit more lyrical.</p>
<p>【聆听 Beethoven’s Fifth Symphony 第二乐章】</p>
<p> Beethoven’s Fifth Symphony第三乐章 呼应着 第一乐章的motive, 还挺明显的。</p>
<p> Beethoven’s Fifth Symphony第四乐章，小号trumpets 加入， sort of upbeat, positive.</p>
<blockquote>
<p>in this 40-minute interval we’ve gone sort of through an emotional musical journey here from despair, despondency, uncertainty, to whatever- to personal triumph, and in a way that mirrors some of the things that were going on in Beethoven’s life.</p>
</blockquote>
<p>concerto【协奏曲】</p>
<blockquote>
<p>three movements.</p>
</blockquote>
<p>Tchaikovsky’s Piano Concerto Number One【柴可夫斯基第一钢琴协奏曲】，总时长在30分钟左右。</p>
<blockquote>
<p>第1乐章：不太快的和极其庄严的快板—生气勃勃的快板（Allegro non troppo e molto maestoso - Allegro con spirito）</p>
<p>第2乐章：朴素的小行板—最急板—初速（Andantino simplice - Prestissimo）</p>
<p>第3乐章：火热的快板（Allegro con fuoco）</p>
</blockquote>
</li>
<li><p>Introduction to the French Horn and Partials</p>
<p>展示了乐器：French Horn, Eva Heater 老师吹了下 <em>Zarathustra</em> 开头的小号部分。</p>
</li>
<li><p>The Bassoon and the Viola</p>
<p>展示了巴松管和小提琴。</p>
</li>
<li><p>Mussorgsky and the Basic Principles of Acoustics</p>
<p>播放 Modest Musorgsky work  <em>Pictures at an Exhibition</em> 中的Polish Oxcart【牛车来了又去了……】</p>
<p>Doppler principle： 多普勒效应。</p>
</li>
<li><p>Dissonance and Consonance in Strauss’s <em>Death and Transfiguration</em></p>
<p>Richard Strauss’s Death and Transfiguration中的Dissonance and Consonance 【完全懵逼……】</p>
<p>With dissonant intervals they tend to be frequencies that are sounding right next to each other, very close-by frequencies [间隔很短？]</p>
<p>If you allow a little bit of spacing, a little more space between your frequencies, they’re a little bit farther apart, then you can move from closeness to  spacing and you get the consonance.</p>
<p>【这里Mark下，期待后期听多了可以 get 到点上】</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Yale《listening to music》刷课笔记</category>
      </categories>
      <tags>
        <tag>Music</tag>
      </tags>
  </entry>
  <entry>
    <title>Lecture 10 Sonata-Allegro and Theme and Variations</title>
    <url>/posts/notes-on-yale-courses-listening-to-music-lecture10/</url>
    <content><![CDATA[<p>继续奏鸣曲式，主题和变奏。</p>
<p>这次请来了一位artist 做客，Kensho Watanabe，看出来教授很喜欢这个勤奋的小哥哥。</p>
<ul>
<li> Introduction</li>
</ul>
<p>  回顾上节课提到的，流行音乐中的 verse and chorus。</p>
<blockquote>
<p>basically, you have the same material; you have the same musical material coming back again and again and again. With the chorus we actually have the same text coming back again and again and again. But with the verses although the music is the same, the text keeps changing each time. We get new strophes — or new verses — of text. So keep that in mind: verse, chorus, verse, chorus. Sometimes this can start with the chorus. Sometimes there’s a harmonic change in here that we would call the bridge, but essentially it’s the repetition of the same material over and over again in terms of the music — but in terms of the text, you get new text each time for the verses.</p>
</blockquote>
<ul>
<li><p>Parts of the Sonata-Allegro Form</p>
<p>奏鸣曲式形成于18世纪，it’s something put together in some measure by Joseph Haydn and then passed on to his good friend, Wolfgang Amadeus Mozart.【由海顿传给他的忘年交Mozart】</p>
<p>因为后面教授计划安排学生们去听一场音乐会。第一个作品就是Mozart的，第一乐章便是奏鸣曲式，所以就继续讲奏鸣曲式。</p>
<p>【听音乐会之前，搞懂这些很有必要啊，不然真的是暴殄天物，而且大概率会听睡着了……】</p>
<p>继续上一个lecture，这里介绍了奏鸣曲的4个function types。</p>
<ul>
<li><p>thematic</p>
<p>开头presenting a theme，比如 Beethoven’s Fifth Symphony  开头，four-note motive后，呈现一个主题</p>
</li>
<li><p>transitional</p>
<p>从主题A 到主题 B，需要一个过渡。transition</p>
</li>
<li><p>developmental</p>
<p>对应着发展部</p>
</li>
<li><p>cadential</p>
<p>结束部。</p>
<p>where the composer will just throw on a lot of heavy, simple harmonic motion to slow the music down psychologically.</p>
</li>
</ul>
</li>
<li><p>Distinguishing Functional Types within the Sonata-Allegro</p>
<p>嗯，现学现用。在奏鸣曲中，区分四个functional types。</p>
<p>一段Mozart的pieces。</p>
<p>【这段值得反复听。】</p>
</li>
<li><p>Theme and Variations</p>
<p>主题和变奏。</p>
<p>主题一直在，只是有些变化而已。【归来仍是少年，哈哈】</p>
<blockquote>
<p> we will get that theme, get that theme again with something changed. Then we will get that material again with something changed. And again with something changed……</p>
</blockquote>
<p>教授给了一个隐喻来解释主题和变奏这种曲式。</p>
<p>类似铁路火车上的一系列棚车之类的东西，大小大致相同，但是每辆棚车的外观都会有些许不同。</p>
<p>一个主题越简单，就越有可能应用于主题和变奏曲式，也许是因为它使得作曲家拥有更多自由发挥的空间去进行变奏。</p>
<p>the simpler the theme, the more likely that theme is to become the basis of a set of theme and variations.Maybe it gives the composer more freedom to pursue variation.</p>
<p>来听 Beethoven’s  “God Save the King” 和 耶鲁自家的毕业生Charles Ives的作品Variations on America。</p>
<p>随后，练习 Mozart的小星星变奏曲。</p>
<p>赏析：</p>
<blockquote>
<p>in the first variation, Mozart is changing the theme. he’s sort of changing the theme by making the notes go quicker.</p>
<p>in the second variation, he is  changing the context.</p>
<p>And so on.</p>
<p>in the final variation, He’s just ornamenting a major triad so it’s a good — more cadential stuff — sort of very simple material at the end.</p>
</blockquote>
</li>
<li><p>Examining Theme and Variations in Corelli’s <em>La Folia</em></p>
<p> 邀请Kensho 一起合奏一曲。</p>
<p> Kensho Watanabe，the concert master of the YSO. also one of the conductors of the Berkeley Chamber Orchestra, 三岁开始拉小提琴，同时对绝对音高非常敏感【has a very keen sense of absolute pitch】，人群中万里挑一。【One person in ten thousand has this particular gift, statistically.】</p>
<p> 一段小提琴和钢琴的合奏， lovely。</p>
<p> 教授和Kensho 合奏的是 Corelli 的 La Folia,  Violin Sonata Op. 5 No. 12 in D Minor。</p>
<blockquote>
<p>Corelli：</p>
<p>是巴洛克时期最有影响力的意大利小提琴家和作曲家，他几乎只为弦乐器创作。在器乐领域里，占有很重要的地位，音乐史上人称“现代小提琴技巧创建者”及“大协奏曲之父”。</p>
<p>La Folia:</p>
<p>西班牙语，福利亚舞曲，一般以基础和弦进行上以变奏曲形式演奏。</p>
</blockquote>
<p> 共变奏13次。印象深刻的是教授让 Kensho 拉了一段用四指才能拉出来的和弦，说了一句：</p>
<p>  <strong>When he does it, you think it’s very simple, right, easy to do. It takes years to be able to do that.</strong></p>
<p> 【真正台上一分钟，台下十年功，敬佩】</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Yale《listening to music》刷课笔记</category>
      </categories>
      <tags>
        <tag>Music</tag>
      </tags>
  </entry>
  <entry>
    <title>Lecture 15 Gregorian Chant and Music in the Sistine Chapel</title>
    <url>/posts/notes-on-yale-courses-listening-to-music-lecture15/</url>
    <content><![CDATA[<p> 从 lecture 15开始，进入了这系列课程的第三部分，介绍各个时期的音乐历史。</p>
<p>总览：</p>
<p>Medieval：中世纪音乐（476～1450）</p>
<p>Renaissance：文艺复兴时期音乐（1450～1600）</p>
<p>Baroque：巴洛克时期音乐（1600～1750）</p>
<p>Classical：古典主义时期音乐（1750～1820）</p>
<p>Romantic：浪漫主义时期音乐（1820～1900）</p>
<p>Modernism：现代音乐（1880~至今），包括 Impressionist印象主义，代表人物 Debussy ，Ravel 和 Post-Modernist 后现代音乐/流行音乐。</p>
<p>lecture 15 介绍中世纪音乐。</p>
<blockquote>
<p>中世纪：</p>
<p>(公元5世纪-公元15世纪）始于西罗马帝国（公元476年）的灭亡，终于东罗马帝国（公元1453年）的灭亡。中世纪历史自身也可分为前、中、后期三段。</p>
<p>中世纪的社会主要是农业社会，宗教是以修道院和修女院为中心的。人们的生活限定在劳动和祷告上，为生存而劳动，为拯救灵魂而祷告。</p>
<p>宗教仪式通常从黎明前就开始，清晨做的叫“晨祷”，黄昏时做的叫“晚祷”，每天最重要的仪式是 弥撒（Mass)，大约在9:00 AM开始，是对耶稣最后的晚餐的一种象征性再现。</p>
<p>【那个时代的生活很平静啊】</p>
</blockquote>
<p>不得不说，看教授披着一身黑色袍子出现在课堂时，真的有些中世纪的味道……【后面知道教授原来是为万圣节而特意穿成这样的，哈哈】</p>
<p>好，开始穿越！</p>
<ul>
<li><p>Gregorian Chants in the Medieval Period</p>
<p>中世纪的音乐 Gregorian Chants 格里高利圣咏。</p>
<p>介绍罗马天主教堂音乐。</p>
<p>What is Gregorian chant?</p>
<blockquote>
<p>Gregorian chant is the <strong>monophonic, one-line music</strong> — monophonic, one-line music of the Roman Catholic Church as it existed from the time of the earliest church fathers up until the time of the Council of Trent.【织体为单声调】</p>
</blockquote>
<p>Gregorian chant 以 教皇格里高利命名，但格里高利圣咏与教皇格里高利没有毛线关系。「Gregorian chant had almost nothing to do with Gregory.」</p>
<p>What’s the purpose of Gregorian chant?</p>
<blockquote>
<p>two things.</p>
<ul>
<li>it communicated the message of the church.【传达教会的信息，即传递神的旨意】</li>
<li>Chant also allowed for a period of reflection upon the subject of the preceding reading.【对前一个主题进行反思，引发人们思考】</li>
</ul>
</blockquote>
<p>教授有一本梵蒂冈的歌集，唱了一段。</p>
</li>
<li><p>Religious Influence on Early Music: The Roles of Monks and Nuns</p>
<p>宗教对早期音乐的影响。</p>
<p>Where was chant sung? 【圣咏一般在哪里唱？】</p>
<blockquote>
<p>early on chant was sung not so much in what we would call public churches but more in sequestered — usually rural — monasteries, religious communities segregated by gender — what, specifically, we would call monasteries for men and convents or nunneries for women.</p>
<p>【修道院和修女院】</p>
</blockquote>
<p>教授介绍了一本书，好小好mini，《the Rule of Saint Benedict》《圣本笃院规》，内容是教导神职人员如何度过一天。【清教徒的生活】</p>
<p>Yale大学的社区也提供类似的服务，估计类似冥想的地方吧。</p>
<p>It’s just a lovely time for peace and quiet and reflection.</p>
<p>教授讲述了他曾在巴黎南边的Solesmes待过10天，学习Gregorian Chant的经历。</p>
<p>【整个经历让我想起之前看过一篇说禅修的。】</p>
<blockquote>
<p>You’re assigned a room, In that room you have a light bulb, you have a desk, you have a bed, some fruit. You have no radio. You have no clock, no television, and certainly no cell phone!</p>
<p>in order to be in this monastery you are required to attend all of these canonical hours.</p>
</blockquote>
<p>典型的中世纪教堂里面，教授推荐法国的沙特尔大教堂 Chartres。【码上！！】</p>
<blockquote>
<p><strong>沙特尔圣母主教座堂</strong>:</p>
<p>位于法国巴黎西南约70公里处的沙特尔市。据传圣母马利亚曾在此显灵，并保存了马利亚曾穿着的圣衣，沙特尔因此成为西欧重要的天主教圣母朝圣地之一。1979年10月26日世界遗产委员会第3届会议起列入世界文化遗产。</p>
</blockquote>
<p>教授的五星推荐：</p>
<blockquote>
<p>If you have one cathedral to go to, I strongly — and I think I’ve been to all — I know that I’ve been to all the big ones in France — urge you to go to Chartres for several reasons.</p>
<p>First of all, it has the most pristinely preserved town around the back of the church.</p>
<p>It has the widest nave of any of these gothic cathedrals.</p>
</blockquote>
</li>
<li><p>Chant Analysis of Hildegard von Bingen’s “O Greenest Branch”</p>
<p>介绍Hildegard：</p>
<blockquote>
<p>圣希尔德加德·冯·宾根（天主教译圣贺德佳，圣公会译圣希尔德格，德语：Hildegard von Bingen，拉丁文作Hildegardis Bingensis，1098年－1179年9月17日），又被称为莱茵河的女先知（Sibyl of the Rhine） 。</p>
<p>中世纪德国神学家、作曲家及作家。天主教圣人、教会圣师。她担任女修道院院长、修院领袖，同时也是个哲学家、科学家、医师、语言学家、社会活动家及博物学家。</p>
<p>希尔德加德约有80首音乐作品留存下来，数量远超过绝大多数的中世纪作曲家，其中最为人熟知的是宗教剧（liturgical drama）〈美德典律〉（Ordo Virtutum）。</p>
<p>希尔德加德逝世后被教廷封为圣人，2012年又被追赠教会圣师称号，是天主教会史上第四位女性圣师。</p>
</blockquote>
<p>看得出来，教授很欣赏她。</p>
<blockquote>
<p>Her texts are the most startling, her imagery the most vivid, the most graphic, <strong>indeed the most beautiful.</strong></p>
<p>In her own musical creation, with regard to them, she styles herself simply a breath — a “feather on the breath of God.” What an interesting metaphor but very appropriate for this very modest individual.【呃，上帝气息上的一根羽毛？！】</p>
</blockquote>
<p>练习：Hildegard’s “O Greenest Branch”</p>
<p>聆听 Anonymous Four 演唱的Hildegard 的作品，圣咏歌词如下：</p>
<blockquote>
<p>拉丁文：</p>
<p>O rubor sanguinis,</p>
<p>qui de excelso illo fluxisti,</p>
<p>quod divinitas tetegit,</p>
<p>Tu flos est,</p>
<p>quod hyems de flatu serpentis numquam lesit.</p>
<p>英文翻译：</p>
<p>O redness of blood, 【鲜红的圣血】</p>
<p>that flow down from heaven, 【从天堂落下】</p>
<p> which divinity touched, 【犹如神性的触碰】</p>
<p>You are the flower,【你似花般绚烂】</p>
<p>the wintry breath of the servant — serpent will never wound. 【似诡诈之人的呼吸般冷漠，谁也伤不了你】</p>
</blockquote>
<p>【歌很空灵，很好听，不过穿一身黑袍的教授让人觉得很出戏，好像魔法学院……】</p>
<p>在现代，格里高利圣咏并没有衰落，反而焕发生机。</p>
<p>Chant 圣咏和 Beethoven 的音乐非常不同：</p>
<blockquote>
<p>Chant is the very opposite of the music of Beethoven.</p>
<p><strong>Beethoven tries to convince you to feel a particular way about every moment, every measure, in his music.</strong> It is very much rhetorical music.</p>
<p>Chant, on the other hand, you can take on your own terms. It is non-authoritarian. It is non-assertive, non-aggressive. It floats unfettered.</p>
<p>【不强势，不绝对，不侵略，自由自在，无拘束】</p>
</blockquote>
</li>
<li><p>From Monophony to Polyphony: A Cappella of the Sistine Chapel</p>
<p>从单声调到复调。</p>
<p>早期的复调音乐，教堂音乐，称为organum [平行复音]， 起源于法国的哥特式大教堂，特别是巴黎圣母院Notre-Dame of Paris。</p>
<blockquote>
<p> all cathedral organum was built upward above a pre-existing chant, above a pre-existing Gregorian chant.【建构在已有的圣咏上】</p>
<p>The composer took the chant and placed it in the bottom voice and then added other voices up on top of it to form a counterpoint against it.</p>
</blockquote>
<p>练习：一段中世纪的平行复音 medieval organum。</p>
<p>来看文艺复兴古罗马时期的音乐，特别是The Sistine Chapel 西斯廷教堂的音乐。</p>
<blockquote>
<p>The Sistine Chapel was the most famous of all churches in the late fifteenth and early sixteenth centuries, the core of the Renaissance. 【西斯廷教堂是15世纪晚期到十六世纪早期最出名的教堂，文艺复兴时期的中心】</p>
</blockquote>
<p>米开朗基罗参与了圣彼得教堂的设计，不是西斯廷，西斯廷教堂的旁边就是圣彼得教堂。</p>
<p>为建造西斯廷教堂，教皇请来了当时最好的画家，最好的作曲家。</p>
<p>当时请的作曲家为 Josquin des 和  Giovanni Pierluigi da Palestrina.</p>
<blockquote>
<p>Josquin des:</p>
<p>若斯坎·德普雷（1450年到1455年之间－1521年8月27日），又作Josquin Desprez，简称常作Josquin（若斯坎），法国-弗莱芒作曲家，文艺复兴时期最杰出的音乐家之一。</p>
<p>Giovanni Pierluigi da Palestrina:</p>
<p>乔瓦尼·皮耶路易吉·达·帕莱斯特里纳（1525年－1594年2月2日），为意大利文艺复兴后期的作曲家，也是十六世纪罗马乐派的代表音乐家。由于帕莱斯特里纳在教会音乐中有很深的造诣，因此称为“<strong>教会音乐之父</strong>”，后来也认为是文艺复兴时期最杰出的作曲家之一，其作品是文艺复兴时期复音音乐的经典之一。</p>
</blockquote>
<p>没有任何乐器伴奏的歌唱，称为清唱，又称为西斯廷教堂唱法<em>a cappella Sistina</em>。</p>
<p>呃，教授介绍了中世纪为了解决一类为了保持尖细高音，而年幼被阉割的男性，最热衷此行为的是天主教会，还好还好，1903年，这种行为已经被禁止。</p>
<p>然后放了一段由 最后的阉伶歌手 Alessandro Moreschi 歌唱圣母颂 Ave Maria 的片段。</p>
<p>随后的练习来自 Palestrina 在1590年左右为西斯廷教堂写的弥撒。</p>
<blockquote>
<p>Palestrina has taken a piece of chant, slightly — indeed what it was an old hymn, a monophonic hymn — slightly animated the line through the addition of simple rhythmic values, and placed it in four voices so as to amplify the sense. Four voices could do more to amplify the sense of the chant.</p>
</blockquote>
</li>
<li><p>Conclusion</p>
<p>回到沙特尔大教堂（幻灯片），播放由 Bishop Fulbertus 福伯图斯主教 作曲的曲子，Sit back, relax。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Yale《listening to music》刷课笔记</category>
      </categories>
      <tags>
        <tag>Music</tag>
      </tags>
  </entry>
  <entry>
    <title>Lecture 18 Piano Music of Mozart and Beethoven</title>
    <url>/posts/notes-on-yale-courses-listening-to-music-lecture18/</url>
    <content><![CDATA[<p>钢琴音乐发展的历史。</p>
<ul>
<li><p>The History of the Piano – The Harpsichord</p>
<p>从巴洛克时期的大键琴到现代的三角钢琴。</p>
<p>Mozart 是第一个从大键琴替换到钢琴的作曲家。</p>
<p>为什么Mozart 会抛弃Harpsichord 拥抱 piano？</p>
<blockquote>
<p>harpsichord is not dynamics, you can’t reach for a climax.</p>
</blockquote>
</li>
<li><p>Mozart’s Exploration of the Pianoforte</p>
<p>最初的钢琴长得和大键琴很像。</p>
<p>教授展示了几张Mozart 和 Haydn 的钢琴以及他们工作时的样子。</p>
<p>1781年，Mozart 成为 freelance musician 自由音乐人，以 teacher和 performer身份来谋生。</p>
<p>Mozart 完成了23个钢琴协奏曲，这些 piano concerto 是他作为performer为自己写的。「which he wrote principally for himself as a kind of showpiece for public concerts.」</p>
<p>Mozart 的钢琴协奏曲要比他的奏鸣曲 sonata 难得多。</p>
<p>这里放了一段用 Mozart 的钢琴弹奏的钢琴协奏曲。【嗯，应该是K.545。】</p>
</li>
<li><p>Beethoven’s Music for His Broadwood Piano</p>
<p>1791年 Mozart 离世，钢琴曲的棒子传到了Beethoven这里。【感觉Beethoven相比Mozart，苦逼了很多，一个杜甫，一个李白的感觉……】</p>
<p>中间教授提到了Beethoven 被两个钢琴制造商赠送了钢琴的故事，并显示了相应的钢琴图片。</p>
<p>相比Mozart，Beethoven 完成了5部钢琴协奏曲 和 32 部钢琴奏鸣曲。</p>
<p>Beethoven wrote five piano concertos, thirty-two piano sonatas.</p>
</li>
<li><p>Increasing Range and Power – The Graf Piano, Liszt, and Wagner</p>
<p>After Beethoven, pianos only continued to get larger and more powerful.</p>
<p>介绍了Graf piano.</p>
<p>这段有点懵逼，提到了如何选购钢琴，延音踏板和弱音踏板等。</p>
<p>顺带插播了下Chopin，教授最喜欢的音乐家之一。</p>
<p>介绍了Franz Liszt 弹的那架钢琴 以及Franz Liszt 的女婿Richard Wagner。</p>
<p>Franz Liszt:</p>
<blockquote>
<p>弗兰茨·李斯特（德语：Franz Liszt), 匈牙利作曲家、钢琴演奏家，浪漫主义音乐的主要代表人物之一。其所创作的钢琴曲以难度极高而闻名。</p>
</blockquote>
<p>最后是Steinway 施坦威钢琴的历史。</p>
</li>
<li><p>Guest Piano Performance by Daniel Schlossberg, Jr.</p>
<p>邀请了一位大三的小哥哥 Daniel Schlossberg Jr 弹奏了两个钢琴曲。</p>
<p>分别是Beethoven 的奏鸣曲 和 Scarlatti 的奏鸣曲。【希望以后能听出来具体是哪个作品】</p>
<p>Scarlatti：</p>
<blockquote>
<p>朱塞佩·多梅尼科·斯卡拉蒂（意大利语：Giuseppe Domenico Scarlatti，1685年10月25日－1757年7月23日），意大利那不勒斯王国作曲家、羽管键琴演奏家。他被认为是一位巴洛克作曲家，但其音乐风格已受到了古典主义音乐发展的影响。他的555首奏鸣曲的绝大部分为羽管键琴而作，另外还有少量的弦乐合奏和管风琴作品。</p>
</blockquote>
<p>开场部分，教授问了下Daniel 小哥哥，演奏的时候是不是很紧张？</p>
<blockquote>
<p>Professor： Do you ever get nervous when you play, Dan?</p>
<p>Daniel： Yes. All the time.【哈哈，看来紧张是通的……】</p>
</blockquote>
<p>a wonderful piece and a wonderful performance.</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Yale《listening to music》刷课笔记</category>
      </categories>
      <tags>
        <tag>Music</tag>
      </tags>
  </entry>
  <entry>
    <title>Lecture 19 Romantic Opera - Verdi&#39;s La Traviata, Bocelli, Pavarotti and Domingo</title>
    <url>/posts/notes-on-yale-courses-listening-to-music-lecture19/</url>
    <content><![CDATA[<p>Way back to Opera.</p>
<p>主要是歌剧《茶花女》，基于小仲马的作品《茶花女》后面介绍了声乐方面的知识，真真是一头雾水。</p>
<ul>
<li><p>Introduction to Opera</p>
<p>回顾之前说过的歌剧。</p>
<p>介绍Giuseppe Verdi 及他的作品歌剧《茶花女》。</p>
<p>Giuseppe Verdi：</p>
<blockquote>
<p>朱塞佩·福图尼诺·弗朗切斯科·威尔第, 意大利作曲家，出生于帕尔马附近的勒朗科勒（Le Roncole），逝世于米兰。</p>
<p>威尔第和理查德·瓦格纳一起被认为是19世纪最有影响力的歌剧创作者。</p>
</blockquote>
<p>La traviata:</p>
<blockquote>
<p>《茶花女》（La traviata）是由朱塞佩·威尔第作曲的三幕歌剧。</p>
<p>改编自小仲马于1848年出版的小说《茶花女》（The Lady of the Camellias，La dame aux Camélias）。歌剧于1853年3月6日在威尼斯凤凰歌剧院首演。作品名称“La traviata”解作“迷途妇人”，或“失落的人”。</p>
</blockquote>
</li>
</ul>
<p>-Verdi’s <em>La Traviata</em>: The First Aria</p>
<p>  歌剧《茶花女》第一咏叹调</p>
<p>  介绍了第一幕并播放了咏叹调。</p>
<ul>
<li><p>The <em>Scena</em> in Opera</p>
<p>继续介绍《茶花女》。【很悲伤的故事……】</p>
<p>一段Violetta 的咏叹调：</p>
<blockquote>
<p>Ah, perhaps he is the one that I have been waiting for. Maybe this is finally the great true love of my life.</p>
</blockquote>
<p>【古今中外都一样啊，多少女子怀着“愿得一心人”的期许，最终空余恨。】</p>
</li>
<li><p>Critical Assessment of Vocal Performance</p>
<p>后面的部分，说的都是声乐，完全懵逼。</p>
<p>教授介绍了如何像聆听音乐一样聆听歌剧中的歌手的声音，比如男高音，女低音。</p>
</li>
<li><p>Major Opera Singers of the 20th and 21st Centuries</p>
<p>介绍20世纪，21世纪的重量级两位男高音 Luciano Pavarotti and Placido Domingo。</p>
<p>一位女高音Nellie Melba</p>
<p> Luciano Pavarotti:</p>
<blockquote>
<p>鲁契亚诺·帕瓦罗蒂（義大利語：Luciano Pavarotti，1935年10月12日－2007年9月6日），義大利男高音歌唱家，也是20世紀后半叶的世界三大男高音之一，別號「高音C之王」。</p>
</blockquote>
<p>Luciano Pavarotti 的代表作：Nessun Dorma 今夜无人入眠</p>
<p>Placido Domingo:</p>
<blockquote>
<p>何塞·普拉西多·多明戈·恩比尔（西班牙语：José Plácido Domingo Embil，1941年1月21日－），西班牙歌唱家，20世纪后半叶的世界三大男高音之一，以响亮、清晰和强而有力的嗓音闻名于世。除了演唱以外，多明戈近年开始接触指挥和歌剧院管理工作，现时是美国华盛顿国家歌剧院总监。2019年8月《美联社》报导指出他遭9位女性指控性骚扰，试图透过安排工作逼迫她们跟他发生性关系，若遭拒绝，多明戈会以职务之便报复，虽然多明戈发表声明指这些内容“并不准确”，但洛杉矶歌剧院和其他2家主要剧院均取消他接下来的演出，同时多明戈辞去洛杉矶歌剧院总监职务。</p>
</blockquote>
<p>Nellie Melba：</p>
<blockquote>
<p>内莉·梅尔巴女爵士，GBE（Dame Nellie Melba，1861年5月19日－1931年2月23日），澳大利亚女高音。她是澳大利亚第一位获得国际声誉的女高音，也是当时世界上最著名的歌剧演员之一。</p>
</blockquote>
<p>教授建议不要买Pavarotti 1980后的作品，呃，因为他从那时开始走下坡了「Don’t buy anything of Pavarotti after 1980」，最好的作品时期是78，79，80.</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Yale《listening to music》刷课笔记</category>
      </categories>
      <tags>
        <tag>Music</tag>
      </tags>
  </entry>
  <entry>
    <title>Lecture 14 Ostinato Form</title>
    <url>/posts/notes-on-yale-courses-listening-to-music-lecture14/</url>
    <content><![CDATA[<p>最后一个曲式：ostinato form， 固定音型/固定反复/固定低音</p>
<ul>
<li><p>Review of Musical Forms</p>
<p>教授提了下下周二的考试。【嗯，我考肯定挂科……】</p>
<p>然后提了下，下周六的音乐会 The Jonathan Edwards Orchestra 。</p>
<p>The Jonathan Edwards Orchestra is going to be performing at Battell and they’ll be doing the Beethoven Eighth Symphony and when you go there you’re going to have four movements in the Beethoven Eighth Symphony. 【贝八交响曲】</p>
</li>
<li><p>Multiple Themes within Beethoven’s Third Symphony</p>
<p>Beethoven’s Third Symphony， 又称 Eroica Symphony，英雄交响曲。这里的英雄原型指的是拿破仑Napoleon。后面贝多芬知道拿破仑加冕成皇帝后，很生气，知道他将会和其他人一样，成为一名独裁者，他愤怒地把这个谱子撕破了。【哈哈，贝多芬挺可爱。】</p>
<blockquote>
<p>降E大调第三交响曲“英雄”:</p>
<p>该作品是交响曲历史上的里程碑式作品，规模宏大、充沛有力、情感丰富、结合了诗意和力量，极具独创性，在当时不受观众接受和欢迎；但却是贝多芬最为钟爱的作品之一。</p>
<p>贝多芬早在1789年时就有写作一部英雄气概交响曲的想法，但并没有落到笔头。贝多芬于1801年觉察到自己的耳聋，并在翌年夏搬至海利根斯塔特以躲避维也纳的气候。在那里贝多芬写下了著名的海利根斯塔特遗书。他甚至想自杀，但“我的艺术把我拉回来”。在这一阶段，贝多芬作出了该交响曲，也表达了其内心的奋斗历程。这首交响曲从1803年5月正式开始创作，作品完成是在1804年的年初。</p>
</blockquote>
<p>练习Beethoven’s Third Symphony finale 终曲中的主题和变奏，赋格。</p>
<p>赏析：</p>
<blockquote>
<p>Beethoven’s got a fugato in there, he’s got sections that sound like transition out of sonata-allegro form, and he’s working with two themes.</p>
<p>在fourth variation中，贝多芬加入了fugue，使用了 fugato，其中赋格部分，voice的出场顺序是soprano, alto, tenor and then bass.</p>
</blockquote>
</li>
<li><p>The Ostinato Form in Purcell’s Opera</p>
<p>Ostinato曲式：</p>
<blockquote>
<p>It’s something that happens again and again and again, just sort of obsessive-compulsive disorder applied to music.</p>
</blockquote>
<p>最典型的例子就是 Maurice Ravel‘s Bolero。</p>
<p>It’s <em>ostinato</em> in every way in the sense that the melody keeps repeating over and over again for fourteen minutes. 【melody一直不断重复，可是听的时候一点儿都不觉得枯燥，反而很舒服😌】</p>
<p>插播一段Maurice Ravel 的介绍：</p>
<blockquote>
<p>约瑟夫-莫里斯·拉威尔，法国作曲家和钢琴家。是法国乐坛中与克劳德·德彪西齐名的印象乐派作曲家。</p>
<p>他的音乐以<strong>纤细、丰富的情感和尖锐</strong>著称，同时也被认为是二十世纪的主要作曲家之一。</p>
<p>早年的拉威尔和德彪西有着密切的交往，德彪西的印象派作曲手法很自然就深入到拉威尔初期的创作中。到了后期，特别是第一次世界大战以后，拉威尔更倾向于明确的音乐语言，与那种晦暗的乐句划清界限。</p>
<p>拉威尔自评：“严格的说，我不是一个‘现代作曲家’，因为我的音乐远不是一场‘革命’，我只是一场‘进化’。虽然我对音乐中的新思潮一向是虚怀若谷、乐于接受的，但我从未企图屏弃已为人们公认的和声作曲规则。相反，<strong>我经常广泛地从一些大师身上吸取灵感（我从未中止对莫扎特的研究），我的音乐大部分建立在过去的传统上，并且是它的一个自然的结果。我不是一个擅长写那种过激的和声与乱七八糟的对位的‘现代作曲家’，因为我从来不是任何一种风格的奴隶，我也从未与任何特定的乐派结盟</strong>。”</p>
<p>【才知道 Maurice Ravel 原来同 Debussy一样，同属印象派啊，怪不得曲子听着那么舒服。】</p>
</blockquote>
<p><strong>every aspect of  melody, rhythm and harmony  is controlled by this ostinato procedure.</strong></p>
<p>从巴洛克时期开始 Ostinato曲式 的学习。</p>
<p>ostinato 总是出现在低音部分。when you get an <em>ostinato</em> it’s applied to the bass.</p>
<p>练习：巴赫的 passacaglia C Minor, BWV 582，这里选取了管风琴了片段。</p>
<p>随后的练习取自 Henry Purcell的歌剧 Dido and Aeneas 狄朵与埃涅阿斯。</p>
<p>Henry Purcell：</p>
<blockquote>
<p>亨利·珀塞尔, 巴洛克时期的英格兰作曲家，吸收法国与意大利音乐的特点，创作出独特的英国巴洛克音乐风格。</p>
<p>他被认为是英国最伟大的作曲家之一，独霸乐坛两百年。【江山代有才人出，各领风骚数百年……】</p>
</blockquote>
<p>Dido and Aeneas：</p>
<blockquote>
<p> 狄朵与埃涅阿斯:</p>
<p>三幕歌剧。</p>
<p>该歌剧取材于维吉尔的史诗“埃涅阿斯纪”，演绎了北非女王狄朵和特洛伊英雄埃涅阿斯的爱情悲剧。</p>
</blockquote>
<p>练习部分为Dido’s Lament， 是女主狄朵以为自己被埃涅阿斯抛弃而深感悲痛。</p>
<p>狄朵的唱段《当我躺在尘土之下时》（When I am laid in earth），是音乐历史上最著名的“哀歌” 之一。</p>
<blockquote>
<p>it’s built on an <em>ostinato</em> bass line. it just keeps recycling over and over and over again.  【低音部分反复】</p>
</blockquote>
</li>
<li><p>The Pachelbel Canon and Conclusion</p>
<p>引入 Elton John‘s Sorry Seems To Be The Hardest Word. 【好悲的曲子】</p>
<p>教授说， Elton John has stolen Pachelbel bass line。在《Sorry Seems To Be The Hardest Word》的副歌部分，Elton John  使用了Pachelbel bass line 帕赫贝尔卡农低音线。</p>
<p>What’s the most famous <em>ostinato</em> bass of all time?</p>
<p>最出名的固定低音是 The Pachelbel bass.</p>
<p>There’s an irony with the “Pachelbel Canon” and that is that you never hear the canon in the “Pachelbel Canon.”</p>
<p>Johann Pachelbel:</p>
<blockquote>
<p>约翰·帕赫贝尔，德国著名巴洛克时期作曲家、管风琴家，先后曾在许多地方担任过管风琴师的职位。巴赫的哥哥就曾在他门下学习。</p>
<p>《D大调卡农》是约翰·帕赫贝尔最著名的曲子之一。以三部小提琴间隔两小节演奏一首完全相同的曲调，工整精致，“卡农”并非曲名，而是一种曲式，字面上意思是“轮唱”，简单的讲，就是有数个声部的旋律依次出现，给人绵延不断的感觉。</p>
</blockquote>
<p>练习：Pachelbel Canon in D major</p>
<p>赏析：</p>
<blockquote>
<p>he’s got these three canonic lines — the three staves up above — all in the same register, and when people record this they always do it with the same instrument, usually just with a violin, so we have the violins up above, <strong>three violins all playing in the same register.</strong> You can’t pick out the canon. It just sounds like this unfolding jumble. It’s a very beautiful jumble but it’s indistinctive in that sense. 【一片混沌，无法分辨， You can’t pick out the canon，所以人们说在Pachelbel Canon中，听不到Canon】</p>
</blockquote>
<p>最后散场播放 Vitamin C 的Graduation，这首歌使用了帕赫贝尔卡农低音线。</p>
</li>
</ul>
<p>[好久没更了，2月走的真快]</p>
]]></content>
      <categories>
        <category>Yale《listening to music》刷课笔记</category>
      </categories>
      <tags>
        <tag>Music</tag>
      </tags>
  </entry>
  <entry>
    <title>Lecture 17 Mozart and His Operas</title>
    <url>/posts/notes-on-yale-courses-listening-to-music-lecture17/</url>
    <content><![CDATA[<p>这堂课，教授腰间配了一柄剑上场，起初还觉得挺奇怪，后面才知道是安排了一场非常精彩的歌剧，老师真的很用心，很好玩的一节课，大半夜被逗笑了，哈哈。</p>
<ul>
<li><p>From Baroque to Classical Music – An Introduction</p>
<p>教授讲述了自己在 Nashville度过了一个愉快的周末，提到自己去的地方。果然，一个人的兴趣爱好决定了TA在一个新的环境里，会对哪些感兴趣。</p>
<blockquote>
<p>Friday night, went to this spectacular concert of Mozart.</p>
<p>The next afternoon, Saturday afternoon, I walked across the street. I could have gone two blocks to watch a hockey game — they have a hockey team in Nashville — or three blocks in the other direction to watch the Titans play in the football stadium, but I went just one block to the Country Music Hall of Fame.</p>
</blockquote>
<p>教授讲述的经历基本都是跟Mozart有关，比如机场播放的音乐和广告。</p>
<p>古典时期的音乐 与 巴洛克时期音乐的不同。</p>
<p>Baroque music：</p>
<blockquote>
<p>it will carry through from beginning to end of a particular movement or a particular piece. It doesn’t change, generally speaking. 【基本不变化， the same general tenor, the same general mood, the same general feeling】</p>
</blockquote>
<p>classical music：</p>
<blockquote>
<p>We get change within a particular movement. Change might be from regular to irregular rhythm, for example, or from very loud to very quiet.</p>
</blockquote>
</li>
<li><p>Glimpses of Mozart’s Life in Letters</p>
<p>Mozart留下的大量的手稿，信件，大部分是与他父亲的通信。</p>
<p>欣赏：Mozart Symphony No. 25 in G Minor。</p>
<blockquote>
<p> we begin minor key, lots of syncopation, agitation, and within about forty seconds Mozart has morphed into a completely different mood, a major key, oboe solo. The music is very lyrical. The meter now is — or the rhythms are all lined up to come on the beat rather than off the beat. <strong>Watch how we have this transformation of mood within a rather short period of time.</strong> 【很短的时间里，情绪由不安到舒缓】</p>
</blockquote>
<p>这里，教授推荐了电影《莫扎特传》Amadeus 【码下，ToDoList 真越来越长……】</p>
<p>随后教授讲述了Mozart的一些天才事迹，比如凭记忆写下西斯廷教堂的曲谱。</p>
<p>比较喜欢教授朗读的那段Mozart在1787年写给他父亲的信，当时他的一位朋友过世了，信中讲述了他对于死亡的理解：</p>
<blockquote>
<p>Death is the true goal of our lives and I have made myself so well acquainted with it during the past two years that I see it as the true and best friend of mankind. Indeed, the idea of it no longer holds any terror for me but rather much that is tranquil and comforting, and <strong>I thank God that he has granted me the good fortune to obtain the opportunity of regarding death as the key to our true happiness</strong>. I never retire at night without considering that, as young as I am, perhaps I may be no more on the morrow, yet not one of those who knows me could say that I am morose or melancholy, and for this I thank my creator daily and wish heartily the same happiness may be given to my fellow man. I clearly explained my way of looking at the matter on the occasion of the death of my very dear best friend, Count von Hatzfeld. He was just thirty-one like myself. I do not grieve for him but from the bottom of my heart for myself and for all who knew him as well as I.</p>
</blockquote>
</li>
<li><p>Musical Balance and Genius in Mozart’s Compositional Sketches</p>
<p>What’s special about Mozart’s music? 【Mozart 音乐的独特魅力】</p>
<blockquote>
<p>four things.</p>
<ul>
<li>this infallible sense of balance and proportion. 【balance, shaping, perfect proportion. 不多不少刚刚好】</li>
<li>The capacity to make something very beautiful out of the simplest of materials.【教授以  Elvira Madigan 为例】</li>
<li>wild swings of mood with Mozart</li>
<li>Inexhaustible melodic supply, fecundity of imagination when it comes to melody.【永不枯竭的才思】</li>
</ul>
</blockquote>
<p>Mozart在《唐璜》首演后，跟 Joseph II 皇帝的对话蛮有意思的，自信得一逼：</p>
<blockquote>
<p>Joseph II: Too much meat for the teeth of my Viennese, dear Mozart.</p>
<p>Mozart: Well, let them chew on it a while. They’ll get used to it.</p>
</blockquote>
<p>教授又一次提到的艺术的价值：</p>
<blockquote>
<p>Isn’t this what art is supposed to all be about?  Why do we have art? What does it do for us?</p>
<p>It gives us a sense of something better, <strong>a vision of something better than the stupid, mundane and the vernacular crap that we have to deal with on a quotidian basis out here.</strong></p>
<p>There could be something better; there’s something bigger and better out there than we are.</p>
<p>That, in essence, is what art is all about and sometimes you can see it and — I think you can see it, or you just seem to be getting nearer to it.</p>
<p>……………</p>
<p> this idea of tapping into who you are, the whole who you are as a person, through getting you back in touch with your inner memories, and also perhaps giving you hope that there is something out there better than what we deal with on a daily basis.</p>
</blockquote>
<p>也顺带提到了开普勒 Kepler 的一段话：</p>
<blockquote>
<p>Man, the ape of his creator, has discovered the art of music so that he might play the everlastingness of all created time in some short part of an hour by means of an artistic concord of many voices and instruments, that he might to some extent taste the satisfaction of God the workman through music.</p>
</blockquote>
</li>
<li><p>Mozart’s Don Giovanni and Conclusion</p>
<p>莫扎特写了三部伟大的歌剧：《费加罗的婚礼》，《唐璜》， 《魔笛》，其中《费加罗的婚礼》，《唐璜》 的脚本都是由  Lorenzo da Ponte 完成。</p>
<p>Lorenzo da Ponte：</p>
<blockquote>
<p>洛伦佐·达·彭特（1749年03月10日－1838年08月17日），原名伊曼纽·科内利亚诺（Emanuele Conegliano），意大利裔美国人，18世纪及19世纪著名歌剧填词家、诗人。他因和作曲家莫札特合作完成了三部著名意大利语歌剧而著名，包括《费加洛婚礼》、《唐·乔望尼》、《女人皆如此》。</p>
<p>【教授说这个人的一生比小说还精彩……】</p>
</blockquote>
<p>随后教授邀请了Richard Lalli 教授，和一些学生一起，演了《唐璜》的部分，一头白发的教授和一个牵着狗的同校教授一起舞剑，也是很用心了。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Yale《listening to music》刷课笔记</category>
      </categories>
      <tags>
        <tag>Music</tag>
      </tags>
  </entry>
  <entry>
    <title>Lecture 20 The Colossal Symphony - Beethoven, Berlioz, Mahler and Shostakovich</title>
    <url>/posts/notes-on-yale-courses-listening-to-music-lecture20/</url>
    <content><![CDATA[<p>这节课讲交响乐Symphony。</p>
<ul>
<li><p>Introduction to Symphonies</p>
<p>开篇，教授先来了一顿调侃。</p>
<p> I can tell you at the beginning of this semester which of these lectures will have the lowest attendance rate. And it’s this one.</p>
<p>【原来Yale也会有出勤率低的课程，这么好的课，这么好的教授，怎么会舍得缺席？】</p>
<p>在之前的课堂中已经接触过的交响乐有哪些？</p>
<blockquote>
<ul>
<li>Beethoven’s Fifth Symphony</li>
<li>Beethoven’s Sixth 【田园交响曲】</li>
<li>Beethoven’s Ninth 【ode to Joy】</li>
<li> Joseph Haydn’s Surprise Symphony【海顿的“惊愕” Symphony No.94】</li>
<li>Mozart’s G Minor Symphony【Symphony No. 25 in G Minor】</li>
</ul>
</blockquote>
<p>聆听 Mozart 的Eine kleine Nachtmusik 【小夜曲】</p>
<p>赏析：</p>
<blockquote>
<p>It’s very patterned. It’s very symmetrical. It’s balanced. We have antecedent and consequent phrases and they come in the music wth the classical period.</p>
<p>It’s homophonic. Basically, you got a melody plus accompaniment.【织体主调，伴奏围绕着主旋律】</p>
<p>this music has a kind of rhetorical strategy to it.【不知要多久我才能听出这里面的道道】</p>
<p>It sounds like a melody, it sounds like a theme, or music that sounds like it’s coming between themes, of leading us somewhere, transitional music, music that may be a contrasting theme, music that ends a section. So it’s music that does something, music that’s trying to get us from point A to point B and point C and so on.</p>
</blockquote>
<p>聆听浪漫主义时期的音乐，来自Tchaikovsky‘s overture to《Romeo and Juliet》【柴可夫斯基《罗密欧与朱丽叶幻想序曲》】</p>
<p>Tchaikovsky：</p>
<blockquote>
<p>彼得·伊里奇·柴可夫斯基（1840年5月7日－1893年11月6日），俄罗斯浪漫乐派作曲家，其作品有民族乐派特征，但仍以浪漫风格为基准。其风格直接和间接地影响了很多后来者。</p>
<p>在音乐创作上，柴可夫斯基很崇拜莫扎特，尤其他对旋律性的重视。对于瓦格纳音乐中的一些特性他却很反感，认为瓦格纳过于重视管弦乐队而忽略了声乐，柴可夫斯基主张用现实主义手法来表现歌剧，主导动机只用以描写心理感情等内在方面。</p>
</blockquote>
<p>Romeo and Juliet:</p>
<blockquote>
<p>《罗密欧与朱丽叶幻想序曲》是俄罗斯作曲家柴可夫斯基的一部管弦乐作品，以莎士比亚同名戏剧为题材，创作于1869年末到1880年。这部作品是柴科夫斯基早期的代表作品之一（当时作者只有29岁），也是他流传最广泛的作品之一。</p>
</blockquote>
<p>赏析浪漫主义时期的音乐特征：</p>
<blockquote>
<p>qualities:</p>
<p>it has a long, sweeping melody here in romantic music, a long, sweeping melody that is rather asymmetrical in shape. Instead of having neat units of two plus two plus two, it could go on over bars or maybe it’ll be a seven-bar phrase, something like that. So the melodies tend to be long; they tend to be asymmetrical.</p>
<p>Rhythm:</p>
<p>When we get into the classical period, rhythm is somewhat more relaxed but it is still a pattern,  but here, with this music in the romantic period, the themes are not only long and asymmetrical; the rhythms don’t seem to shake out in patterns that allow us to tap our feet or allow us to conduct it easily.</p>
<p>Tempo:</p>
<p>In romantic music, we get wild swings of tempo in that it can be coming along at a regular pace and then slow way, way down and then speed up to get back on track and slow down and so on. And this is part and parcel of the romantic aesthetic in the sense that it tends to swing wildly from one extreme to another, wildly in terms of rhythm and wildly in terms of dynamics.</p>
</blockquote>
<p>Gustav Mahler：</p>
<blockquote>
<p>古斯塔夫·马勒（1860年7月7日－1911年5月18日），奥地利作曲家、指挥家。作为作曲家，他是19世纪德奥传统和20世纪早期的现代主义音乐之间承前启后的桥梁。马勒之后，十二音和无调性音乐等先锋理念崛起，传统调性音乐的辉煌时代走向终结。</p>
</blockquote>
</li>
<li><p>Historical Changes in Strings and Woodwind Instruments</p>
<p>古典音乐的四个乐器组：</p>
<ul>
<li><p>strings ：violin, viola, cello and double bass 【弦乐器：小提琴，中提琴，大提琴，低音提琴】</p>
<p>Jacob 用一把十九世纪的中提琴拉了一小段音乐。</p>
</li>
<li><p>woodwinds：piccolo， bassoon ， English Horn， flute【木管乐器：短笛，巴松管，英国号，长笛】</p>
<p>英国号 是双簧管的一种，聆听 Dvorak’s New World Symphony 第二乐章，很舒缓， 感受英国号。</p>
<p>New World Symphony：</p>
<blockquote>
<p>E小调第9号交响曲《来自新大陆》，作品95，为捷克作曲家德沃夏克（Antonín Dvořák）于1893年在美国时所谱写，因此一般被称为《自新大陆交响曲》（New World Symphony）。</p>
<p>第二乐章最缓版（Largo）</p>
<p>缓板，降D大调，这个乐章以“念故乡”的黑人灵歌风格旋律为主题的乐章，一开始管乐器持续和弦著，之后由英国管所奏出“念故乡”哀愁的抒情旋律，接着木管乐器在弦乐伴奏下奏出强而有力的旋律，最后英国管再次主奏出哀愁的气氛。</p>
<p>美国名曲〈念故乡〉（GOIN’ HOME）是本交响曲第二乐章的歌唱版。</p>
</blockquote>
</li>
<li><p>brass： trumpet， trombone，French horn，tuba【铜管乐器：小号，长号，法国号/圆号，大号】</p>
<p>聆听 Beethoven‘s Fifth Symphony 最后乐章的开头部分，感受French horn。</p>
<p>聆听 Hector Berlioz‘s Symphonie Fantastique 【柏辽兹《幻想交响曲》】, 感受大号tuba</p>
<p>Hector Berlioz:</p>
<blockquote>
<p>埃克托·路易·柏辽兹（1803年12月11日－1869年3月8日），法国作曲家，以1830年写的《幻想交响曲》闻名。</p>
</blockquote>
<p>Symphonie Fantastique:</p>
<blockquote>
<p>埃克托·柏辽兹于1830年间所作的交响曲作品。</p>
<p>习惯上被认知的名称事实上是作品的副标题，柏辽兹为作品所起的正式名称为：“一位艺术家一生的插曲”。</p>
<p>作曲家创作灵感来源于他倾注以狂热爱情的爱尔兰籍的莎士比亚戏剧女演员哈莉叶特·康斯坦斯·史密逊。作为标题音乐完美而明晰的范例，该作品在早期浪漫主义音乐当中被推崇为最重要及最具代表性的交响曲之一，时至今日仍广受全球各地的音乐演奏会听众欢迎。</p>
<p>本交响曲是一首标题音乐，描绘一个具奔放想像力的艺术家，由于对渺茫的爱情深刻感到绝望，吞食鸦片自杀的故事。虽然在当时交响曲普遍以四个乐章组成，本曲却含有以下五个具有独立标题的乐章。凭借详细的情节，本曲经常被称为标题音乐最优秀，可能也是最早的范例之一。</p>
<ul>
<li>梦与热情（Rêveries - Passions）</li>
<li>一场舞会（Un bal）</li>
<li>园林美景（Scène aux champs）</li>
<li>断头台进行曲（La marche au supplice）</li>
<li>女巫安息日的夜梦（Songe d’une nuit de sabbat）</li>
</ul>
</blockquote>
<p>再次聆听 Dvorak “New World Symphony” second movement 第二乐章，感受铜管乐器tuba</p>
<p>聆听 Brahms’s First Symphony，感受铜管乐器 French horn</p>
<p>Brahms’s First Symphony：</p>
<blockquote>
<p>《C小调第1号交响曲》，作品68，是约翰内斯·勃拉姆斯创作的四乐章交响曲。由于该作品的风格与贝多芬交响曲类似，因而被彪罗称为“贝多芬第十”。</p>
<p>该作品的创作至少花了14年，而勃拉姆斯自称从草稿到最终完结长达21年。</p>
<p>该作品共四个乐章：</p>
<ul>
<li><p>稍微持绩的—快板—稍慢的快版（c小调）</p>
</li>
<li><p>持续的行板（E大调）</p>
</li>
<li><p>略快且优雅的稍快板（降A大调）</p>
</li>
<li><p>慢板—很慢的行板—不太快的快板，有精神的—很快的快版（c小调转C大调）</p>
<p>全长约45至50分钟。</p>
</li>
</ul>
</blockquote>
</li>
<li><p>keyboard：organ，harpsichord，piano 【键盘乐器：管风琴，大键琴，钢琴】</p>
</li>
</ul>
</li>
<li><p>The Development of the Brass Family</p>
<p>承接上面的四个乐器组，介绍铜管乐器。</p>
</li>
<li><p>The Growing Orchestra: Capacities and Limits in the 19th Century</p>
<p>聆听 Wagner’s overture to <em>The Flying Dutchman</em> 【歌剧《漂泊的荷兰人》序曲】</p>
<p>The Flying Dutchman:</p>
<blockquote>
<p>漂泊的荷兰人，又译作徬徨的荷兰人或飞行的荷兰人，是一部歌剧作品，1843年于德国德累斯頓的森柏歌剧院首演，由 Wagner 本人担任指挥。剧情描述一个因触怒天神而受到诅咒，在海上漂流多年的幽灵船长寻得真爱而获得救赎的经历。</p>
</blockquote>
<p> Wagner 拥有的乐团人数远大于Mozart，所以即便他没有great musical idea，他有terrific orchestra 可以来弥补。</p>
<p>The sound in music probably never gets any more opulent than it does here at the end of the nineteenth century.</p>
</li>
<li><p>Accommodating Orchestras: The Advent of Concert Halls</p>
<p>介绍现代的音乐厅Concert Halls。</p>
<p>Musikverein音乐厅：</p>
<blockquote>
<p>维也纳音乐协会大楼（德语：Haus des Wiener Musikvereins，简称：Musikverein）是位于奥地利维也纳内城的一座音乐演出建筑。</p>
<p>该楼内有多个大小不一的表演空间，其中面积最大的金色大厅（Großer Musikvereinssaal，即大音协厅，或称：Goldener Saal，金厅）因装修精美，且音响效果出色，是世界上最著名的音乐厅之一。</p>
</blockquote>
<p>Symphony Hall in Boston:</p>
<blockquote>
<p>波士顿交响大厅，位于美国马萨诸塞州波士顿市内。 它目前是波士顿交响乐团与波士顿流行乐团的驻地，与新英格兰音乐学院仅一个街区之隔。</p>
</blockquote>
<p>Woolsey Hall:</p>
<blockquote>
<p>耶鲁大学自己的音乐厅</p>
</blockquote>
<p>Carnegie Hall：</p>
<blockquote>
<p>卡内基音乐厅（也译作：卡耐基音乐厅）,该音乐厅是由美国钢铁大王兼慈善家安德鲁·卡内基于1891年在纽约市第57街建立的第一座大型音乐厅。</p>
</blockquote>
<p>教授提到 people absorb sound，这个倒是挺神奇的呢。原来人能消化声音，人体好似消音器。</p>
</li>
<li><p>Gustav Mahler, the Symphony Composer</p>
<p>介绍Gustav Mahler及其交响曲。</p>
<p>2 M: Mozart Mahler</p>
<p>For me these two M’s are very important, <strong>Mozart and Mahler</strong>. They write some <strong>really astonishing music</strong>, in different kinds of ways.</p>
<p>Introduction to Gustav Mahler:</p>
<blockquote>
<p>he was a Jew born in Moravia, which is a section of Czechoslovakia, got his musical education in Vienna, was a pianist and principally a conductor. He earned his living conducting. And he went all around the world conducting, And he composed mostly in the summertime. He would go out to the Alps in one of these mountain retreats in — where he could have solitude and he would compose. And in the course of time, he wrote principally nine symphonies.</p>
</blockquote>
<p>聆听 Gustav Mahler first symphony, 1888 第一交响曲</p>
<blockquote>
<p>《D大调第一交响曲》，是古斯塔夫·马勒的第一部交响曲作品。该作品创作于1884年到1888年之间，最初的版本被命名为“巨人”交响诗。该作品在1889年在布达佩斯首演，反响不佳，但现在已名列马勒最受欢迎的作品。首演时所发表的曲目，并不是交响曲，而是两篇交响诗。原来的详细曲目一直被沿用到1892年后，才标以简单的标题“巨人”.</p>
<p>该作品分为四个乐章，全长约55分钟。</p>
<ul>
<li>Langsam, schleppend（缓慢拖延地）——D大调。</li>
<li>Kräftig bewegt, doch nicht zu schnell（稳定前进地，但不太快）——A大调，一首连德勒舞曲。</li>
<li>Feierlich und gemessen, ohne zu schleppen（庄严准确、不拖延地）——d小调，一首葬礼进行曲。其旋律基于民歌《雅克弟兄》。</li>
<li>Stürmisch bewegt（暴风雨般冲动地）——f小调转D大调。</li>
</ul>
</blockquote>
</li>
<li><p>Conclusion</p>
<p>电子声音时代的到来。</p>
<p>「最近好像喜欢上阿柴了，看来离喜欢马勒不远了……」</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Yale《listening to music》刷课笔记</category>
      </categories>
      <tags>
        <tag>Music</tag>
      </tags>
  </entry>
  <entry>
    <title>Lecture 22 Modernism and Mahler</title>
    <url>/posts/notes-on-yale-courses-listening-to-music-lecture22/</url>
    <content><![CDATA[<p>Ich bin der Welt abhanden gekommen。「 我告别喧嚣的尘世。」</p>
<ul>
<li><p>Introduction to Modernism: Elements in Stravinsky’s Ballet Scores</p>
<p>介绍现代时期的两位器乐和声乐大师 Igor Stravinsky，Arnold Schoenberg.</p>
<p>Igor Stravinsky:</p>
<blockquote>
<p>伊戈尔·费奥多罗维奇·斯特拉文斯基（1882年6月17日－1971年4月6日），又译斯特拉温斯基，俄国-法国-美国作曲家、钢琴家及指挥，20世纪现代音乐的传奇人物，革新过三个不同的音乐流派：原始主义、新古典主义以及序列主义。被人们誉为是音乐界中的毕加索。</p>
<p>斯特拉文斯基作曲风格有许多的变化。他最早因为谢尔盖·达基列夫委托的<strong>三部芭蕾舞剧</strong>而出名，而首演是由佳吉列夫的俄派芭蕾舞团在巴黎首演：1910年的《火鸟》、1911年的《彼得鲁什卡》及1913年的《春之祭》。</p>
<p>其中的《春之祭》让往后的作曲者思考旋律的结构，也��为是让斯特拉文斯基有长久声誉的关键，革命性地拓展了音乐设计的边界。</p>
</blockquote>
<p>Arnold Schoenberg:</p>
<blockquote>
<p>阿诺尔德·勋伯格（德语：Arnold Schönberg，定居美国后改姓氏写法为Schoenberg，1874年9月13日－1951年7月13日），奥地利作曲家、音乐教育家、音乐理论家，作家，画家，曾向亚历山大·策姆林斯基学习作曲，其后并迎娶策氏之妹为妻。</p>
<p>勋伯格的方法，无论是在和声还是发展方面，都是20世纪最有影响力的音乐理念之一。</p>
</blockquote>
<p>相比Firebird， Petrushka 更能体现现代派音乐。</p>
<blockquote>
<p> It’s modern because of the new approach to rhythm. In the Romantic music that we have been listening to, we would hear these long, somewhat amorphous melodies, amorphous in terms of the rhythm. But now here with the advent of Modernism in the twentieth century we get a much more driving type of rhythm. <strong>It almost in some ways goes back to the driving rhythms of the Baroque except with one major difference, and that is that these modern rhythms are highly irregular</strong>. What we get oftentimes are irregular meters.</p>
</blockquote>
<p>聆听  Igor Stravinsky 的芭蕾舞剧《彼得鲁什卡》 1911, <em>Petrushka</em></p>
<p>《春之祭》The Rite of Spring 1913年5月在巴黎首演，即引起轰动。观众以为听到的是类似Tchaikovsky‘s Swan Lake, 舒缓而优雅，结果听到的春之祭充斥着刺耳的不规则音乐。【我这翻译……】</p>
<p>文化历史学者认为《春之祭》的首演，开启了现代音乐时期。</p>
<p>cultural historians to put their finger on the moment that constitutes the beginning of Modernism it would probably be this moment of the performance of The Rite of Spring.</p>
</li>
<li><p>Creating the Dissonance and Irregularities in <em>The Rite of Spring</em></p>
<p>《春之祭》是如何做到引起人们的不悦的？</p>
<p>五个方面：</p>
<ul>
<li>heavy dissonance 【重不和谐音】</li>
<li>much greater reliance on percussion【大量依赖打击乐器】</li>
<li>the use of stringed instruments as percussion instruments【弦乐器当打击乐器用】</li>
<li>an increased use of woodwinds.【增加对木管乐器的使用】</li>
<li>this idea of rhythm, driving rhythms【不规则的节奏】</li>
</ul>
<p>随后，教授讲述了他如何从不喜欢《春之祭》到喜欢它的经历。</p>
</li>
<li><p>Mahler’s “Ich bin der Welt abhanden gekommen”: An Exploration</p>
<p>到了教授非常喜欢的Mahler了。</p>
<p>有些音乐并不能教会你什么，但是就是让人愉悦，这就够了。</p>
<p>It’s just gorgeous, but we don’t really learn anything from it.</p>
<p>Gustav Mahler 除了写了9部交响曲，还写过两部歌集，管弦歌曲 orchestral Lieder 【教授推荐听Mahler从他的交响曲开始，嗯，Yes，Sir！】</p>
<p>I hope you will come to like Mahler.</p>
<p>【听了Gustav Mahler第五交响曲第四乐章，温柔到无法言表。】</p>
<p>聆听 Gustav Mahler orchestral Lieder “Ich bin der Welt abhanden gekommen”</p>
<p>《Ich bin der Welt abhanden gekommen》是德国诗人Friedrich Ruckert的作品， Mahler将诗人的诗谱成了五首歌。</p>
<p>全诗内容：</p>
<blockquote>
<p> Ich bin der Welt abhanden gekommen，    I am lost to the world，</p>
<p>Mit der ich sonst viele Zeit verdorben，  with which I used to waste so much time，</p>
<p>Sie hat so lange nichts von mir vernommen， It has heard nothing from me for so long</p>
<p>Sie mag wohl glauben, ich sei gestorben! that it may very well believe that I am dead!</p>
<p>Es ist mir auch gar nichts daran gelegen，   It is of no consequence to me</p>
<p>Ob sie mich für gestorben hält，        Whether it thinks me dead，</p>
<p>Ich kann auch gar nichts sagen dagegen，     I cannot deny it，</p>
<p>Denn wirklich bin ich gestorben der Welt。   for I really am dead to the world。</p>
<p>Ich bin gestorben dem Weltgetümmel，       I am dead to the world’s tumult,</p>
<p>Und ruh’ in einem stillen Gebiet!        And I rest in a quiet realm!</p>
<p>Ich leb’ allein in meinem Himmel，       I live alone in my heaven,</p>
<p>In meinem Lieben, in meinem Lied!        In my love and in my song!</p>
</blockquote>
<p>This is a metaphor for all of his music so this is an individual that has become detached from the world and simply wants to live in the world of music.</p>
<p>【Mahler也想要远离尘世，活着音乐的世界里？】</p>
<p>最后教授关了灯，播放了整个曲子，让学生们静下来，安静地听完整首。</p>
</li>
<li><p>The Values of Saving Classical Music and Conclusion</p>
<p>教授讲述了整个系列课程的意义，这段话很是喜欢。</p>
<blockquote>
<p>Now it’s time for you to do your part. What’s your part?</p>
<p>You have to do the following kinds of things.</p>
<ul>
<li> You have to continue to buy CDs and download classical music off of iTunes or whatever it is. <strong>Don’t steal that stuff.</strong> Why? If you take that stuff for nothing, what are you doing? You’re taking the livelihood away from Jacob and Santana and Lynda here, just the livelihood of musicians. They’ve put their labor into it and you’re taking it for nothing. So download these things. It doesn’t cost all that much.</li>
<li><strong>get involved</strong>. Get involved in informal singing groups, keep your piano lessons, if you’ve ever had those kinds of things going on, local choral groups, whatever.</li>
<li>give music lessons to your children. <strong>Teaches them hard work, teaches them to think sequentially, teaches them various forms of quantitative reasoning, teaches them also to be disciplined and teaches them to have a pride in the work product that they ultimately generate</strong>.</li>
</ul>
</blockquote>
<p>Thanks!!!</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Yale《listening to music》刷课笔记</category>
      </categories>
      <tags>
        <tag>Music</tag>
      </tags>
  </entry>
  <entry>
    <title>Lecture 03 Rhythm - Fundamentals</title>
    <url>/posts/notes-on-yale-courses-listening-to-music-lecture03/</url>
    <content><![CDATA[<p>【简直迷上了Ravel 的 Bolero。】</p>
<p>这节课两件事：</p>
<ul>
<li><p>Advantages and Disadvantages of Musical Notation</p>
<p>乐谱的优缺点。</p>
<p>Advantages：</p>
<ul>
<li>it allows the composer to specify rather precisely what he or she wants, to sort of write things out in the form of musical details. 【便于作曲家创作，也便于有才华的作曲家被认可，不致埋没】</li>
<li>It allows us to preserve the work of art.【we can bring it back to life】</li>
</ul>
<p>【想起《触不可及》里面，菲利普一脸严肃地说艺术是人作为生命的过客能在世上留下的唯一痕迹。】</p>
</li>
</ul>
<p>​        这里播放了一段伊斯兰教Islamic的Adhan 片段 和 Chuck Mangione 与乐队即兴发挥的sax solo。</p>
<p>​        【Adhan 部分，呃，建议白天听，晚上听可能需要点胆子，Youtube上有完整版】</p>
<ul>
<li><p>Beats and Meters</p>
<p>介绍音乐的脉搏，节拍 和 节奏。</p>
<p> the idea of pulse in music and the beat in the music and rhythms in music.</p>
<p>whole note = 4 * quarter notes</p>
<p>this whole note obviously can be subdivided into two half notes and each of the half notes into two quarter notes, each of these quarter notes into two eighth notes, and so on.</p>
<p>Rests： 休止符，represent the absence of sound。</p>
<p>Pulse: music theorists have said  that the pulse in music is basically at the same tempo as the human pulse. 【音乐的脉搏同人类的脉搏？72拍/分钟】</p>
<p>In this course,  only play with two types of meter, <strong>duple</strong> and <strong>triple</strong>.</p>
<p>Two things focus on:</p>
<ul>
<li>differentiate between duple and triple meter</li>
<li> recognize some very basic rhythmic patterns</li>
</ul>
</li>
</ul>
<ul>
<li><p>Exercises Distinguishing Duple and Triple Meters</p>
<p>Duple: strong, weak, strong, weak, strong, weak…….</p>
<p>Triple: strong, weak, weak, strong, weak, weak, strong, weak, weak…….</p>
<p>Exercises:</p>
<ul>
<li>Duple: Yale fight song: Bulldog [written by Cole Porter]</li>
<li>Triple: plays piano</li>
</ul>
</li>
</ul>
<ul>
<li><p>Conducting Basic Meter Patterns: Exercises with REM, Chopin, and Ravel  </p>
<p>Downbeat: The first part of the bar.【真的是很懵逼……】</p>
<p>在downbeat 之前有一小段音乐，叫做 pick-up，类似跳水运动员跳水前的准备动作。</p>
<p>all music has a downbeat, not all music starts with a downbeat. Sometimes when listening to music you have to wait. 【好了，连 downbeat 是啥都不清楚，怎么找？】</p>
<p>there are four principal ways that composers signal to us the where abouts of the downbeat.</p>
<ul>
<li>That has to do with duration.【short, long, long 拖的比较长】</li>
<li>through accent【Mozart’s Fortieth Symphony in G Minor, 第一乐章 2/2， 高pitch前的那段？】</li>
<li>through patterns of accompaniment【 waltz by Johann Strauss，懵逼ing…..】</li>
<li>by means of chord change 【一段 REM的 pop music， 彻底懵逼，不知道change的点在哪里……】</li>
</ul>
<p>rhythm practice： Chopin‘ piece</p>
<p>【change key后面那段，41:49 ～ 42:16，lovely, 感觉像是Nocturne  in E Flat Major Op. 9 No. 2，先Mark下】</p>
<p> 这里教授调侃了下自己，哈哈.</p>
<p>最后的练习曲目：Maurice Ravel’s Bolero.【真的是很特别，小白都被迷住了】</p>
<blockquote>
<p>Maurice Ravel was a French composer writing in the early twentieth century. <strong>It’s a unique piece because what he does is take some very basic patterns and simply repeats them over and over and over again for about fourteen and a half minutes</strong> depending upon the tempo that the conductor is taking the music.</p>
</blockquote>
<p>【感觉全程最苦的是鼓手：P】</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Yale《listening to music》刷课笔记</category>
      </categories>
      <tags>
        <tag>Music</tag>
      </tags>
  </entry>
  <entry>
    <title>Lecture 06 Melody - Mozart and Wagner</title>
    <url>/posts/notes-on-yale-courses-listening-to-music-lecture06/</url>
    <content><![CDATA[<ul>
<li><p>What Makes a Melody Beautiful?</p>
<p>教授回顾了下上节课的内容，后面提到了antecedent and consequent phrase structure【开头的句式和结束的句式？】</p>
<p>and, so, what makes a melody beautiful?</p>
<blockquote>
<p> It’s sort of like the definition of pornography: you know it when you see it, or you know it when you hear it.</p>
</blockquote>
</li>
<li><p>Puccini’s <em>Gianni Schicchi</em>: Cadences and Sequences</p>
<p> Giacomo Puccini的歌剧 Gianni Schicchi 贾尼·斯基基</p>
<blockquote>
<p>查了下<a href="https://zh.wikipedia.org/wiki/%E8%B4%BE%E7%A7%91%E8%8E%AB%C2%B7%E6%99%AE%E5%A5%91%E5%B0%BC">wiki</a>，呃，这个人全名真的是超级长：</p>
<p>贾科莫·安东尼奥·多米尼科·米凯莱·塞孔多·马利亚·普契尼（<strong>Giacomo Antonio Domenico Michele Secondo María Puccini</strong>）【老师点名的时候得多辛苦】</p>
<p>意大利作曲家，主要代表作：《波希米亚人》、《托斯卡》与《蝴蝶夫人》等歌剧，这些歌剧当中的一些歌曲已经成为了现代文化的一部分，其中包括了《贾尼·斯基基》的《亲爱的爸爸》与《图兰朵》中的《今夜无人入睡》在内。</p>
</blockquote>
<p>这里，教授选的就是《贾尼·斯基基》的《亲爱的爸爸》，是作品中的咏叹调。</p>
<p>【网易云上有完整的曲子，评论部分真的是笑死人，三个字总结了这段《亲爱的爸爸》：爸，打钱。】</p>
<p>deceptive cadence：假终止。Where you’re expecting to go this way, but we go that way.</p>
</li>
<li><p>Wagner’s <em>Tristan and Isolde</em>: Exploring Melodic Ascents and Descents</p>
<p>melodic sequence:</p>
<blockquote>
<p> simply the repetition of a musical motive at a successively higher or lower degree of the scale.</p>
</blockquote>
<p>two kinds:</p>
<ul>
<li>ascending melodic sequence[音越来越高，going up, tension]</li>
<li>descending melodic sequence [音越来越低，going down， relaxation]</li>
</ul>
<p>欣赏 Wagner 的歌剧<em>Tristan und Isolde</em> 的前奏曲 prelude 和咏叹调aria 伊索尔德之死  liebestod</p>
<p>摘自wiki上对于 特里斯坦与伊索尔德 Tristan und Isolde歌剧的介绍：</p>
<blockquote>
<p>一部三幕剧， 是瓦格纳和马蒂尔德·维森东克的恋情写照，马蒂尔德·维森东克是其赞助人维森东克的妻子。情节最早来源于凯尔特人的故事集中关于阿图斯国王与特里斯坦的传说。</p>
</blockquote>
<p> 教授似乎不喜欢Wagner，Richard Wagner — not a very nice man, needless to say.</p>
<p>前奏部分：ascending/rising  melodic sequence， highly chromatic music.</p>
<p>it uses this sequence to work up to a climax, hits a dissonance, resolves it into consonance.  each level gets higher and higher in the violins, the trumpets come in, almost kind of like <strong>a snake rising through it</strong>.</p>
<p>咏叹调 liebestod: This is not antecedent and consequent; <strong>this is a motive being pushed higher and higher each time to a climax</strong>. he used the dissonance. then he took it up two more degrees and folded it in to a consonance, so it was all very consonant at the end. 【从不和谐到和谐】We have deceptive cadences here, and we have another kind of cadence called an Amen cadence that brings an additional resonance — an additional symbolism to the conclusion.</p>
</li>
<li><p>Mozart’s <em>Marriage of Figaro</em>: Melodic Sequence Analysis</p>
<p>aria of Mozart’s <em>Marriage of Figaro</em>,we’re going to see an example of rising melodic sequence in it.</p>
<p>这次教授请来了一名大四学生Lauren Libaw， a very experienced singer, and a very, very good singer。</p>
<p>【很美很可爱的小姐姐】</p>
<p>歌唱的部分是童仆凯鲁比诺的咏叹调部分，此时凯鲁比诺十四岁，处于情窦初开的年龄，一看见女人就不知所措，这首是他为他心爱的女伯爵献歌，歌词大意：</p>
<blockquote>
<p>你们可知道，什么是爱情？</p>
<p>女士们，我心中的那个可是爱吗？</p>
<p>女士们，我心中的那个可是爱吗？</p>
<p>我想把一切讲给你们听，</p>
<p>它如此陌生，我对此一无所知，</p>
<p>只感到心中翻腾不定；</p>
<p>时而狂喜，时而消沉，</p>
<p>我心中充满火样热情，</p>
<p>一瞬间又感到寒冷如冰。</p>
<p>这是超越自我的感觉，</p>
<p>我无法自持，甚至不知它是什么，</p>
<p>不知道为什么终日叹息，</p>
<p>莫名其妙地颤抖心悸，</p>
<p>日日夜夜不得安宁，</p>
<p>但我竟沉醉于此无法自拔。</p>
<p>你们可知道，什么是爱情？</p>
<p>女士们，我心中的那个可是爱吗？</p>
<p>女士们，我心中的那个可是爱吗？</p>
<p>女士们，我心中的那个可是爱吗？</p>
</blockquote>
<p>赏析：【又名听不懂系列】</p>
<blockquote>
<p>Mozart starts out here with the <strong>antecedent and consequent phrase structure</strong>. it rises up through the <strong>rising melodic sequence</strong>.that’s the climax, the peak of the whole aria, and then the bass, And when we get back to the tonic, then it comes in. a <strong>deceptive cadence</strong>,  And then we have our <strong>flyover</strong>,And that’s the way it ends. So you come back to the tonic, okay? We’ve arrived. We’ve landed.</p>
<p>Lovely.</p>
</blockquote>
<p>Mozart is one of the guys that puts this whole idea of structure with melody on the map. Structure, symmetry are very important in his compositions.【在Mozart的作品中，结构和对称非常重要】</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Yale《listening to music》刷课笔记</category>
      </categories>
      <tags>
        <tag>Music</tag>
      </tags>
  </entry>
  <entry>
    <title>Lecture 07 Harmony - Chords and How to Build Them</title>
    <url>/posts/notes-on-yale-courses-listening-to-music-lecture07/</url>
    <content><![CDATA[<p>介绍和声harmony和三和弦</p>
<ul>
<li><p>Introduction to Harmony</p>
<p>Harmony is one of the two things that really distinguishes the music of Western civilization — Western classical music, Western pop music，区分西方古典和流行的另一个, 是曲谱。</p>
<p>Harmony:</p>
<blockquote>
<p>this concept of superimposing multiple pitches【多个音重叠，很多人同时弹一个调？】</p>
</blockquote>
</li>
<li><p>The Formation and Changing of Chords<br>chords：和弦</p>
</li>
</ul>
<blockquote>
<p>a chord is just a simultaneous sounding of two or more pitches.【同时进行的两个或多个音】</p>
</blockquote>
<p>  chord可以是和谐的，也可以是不和谐的。consonant or dissonant.</p>
<p>  This lesson is working with consonant chords【和谐的和弦】</p>
<p>  最基础的和弦是三和弦 triad。</p>
<p>  So what’s a triad?</p>
<blockquote>
<p>a set of three notes  that can be stacked vertically in thirds.【from wiki】</p>
<p><strong>三</strong>个音按<strong>三</strong>度关系叠置。</p>
<p>同时按住白键CEG。【有点像Vim里面同时按住多个键……】</p>
</blockquote>
<p>   dominant and sub-dominant: 【这一节完全懵逼】</p>
<blockquote>
<p>The tonic is very important and this dominant — what we call the dominant. It’s not really the most important. <strong>It sort of leads into, pulls into — particularly important setting up the tonic.</strong> It’s the next important. Right below that is the sub-dominant. <strong>It often pulls into the dominant which then pulls into the tonic in that fashion.</strong></p>
</blockquote>
<p>  练习曲目： Johnny Cash’s Streets of Laredo</p>
<p>  why do we change chords?</p>
<blockquote>
<p><strong>we change chords to make the harmony consonant or to make the harmony harmonious</strong>.</p>
</blockquote>
<p>  聆听时的两个问题：</p>
<ul>
<li><p> Is the harmony changing?</p>
</li>
<li><p>And if it is changing, is it changing at a regular or irregular rate?</p>
<p>「By regular rate, every time a chord sounds it will be holding for exactly the same amount of time.」</p>
</li>
</ul>
<p>  answer: changing in regular rate</p>
<p>  练习曲目：教授自弹 Jingle Bells</p>
<p>  harmony 出现在低音bass 部分</p>
<p>  一段DVD视频，引入了 mystery bass player Peter Salovey.</p>
<blockquote>
<p>How are they doing this? <strong>They’re hearing the chords. They’re hearing tonic, subdominant and dominant, and I think we can hear them too.</strong></p>
<p>【期待我哪天也能听出来tonic, subdominant and dominant……】</p>
</blockquote>
<ul>
<li><p>Harmonic Progressions</p>
<p>the bass note is sort of the foundation and then you add these other things up above it, and they produce these chords and the chords are tonic and dominant and so on.</p>
<p>【在低音的基础上，加入和弦，构成tonic，dominant】</p>
<p>arpeggio： 琶音，一般是用竖琴弹奏琶音。【会弹竖琴的都是仙女！】</p>
<blockquote>
<p>taking the notes of the triad and just spinning them out in succession.</p>
<p>just a chord with the notes played successively to create an arpeggio.</p>
<p> 一串和弦组成音从低到高或从高到低依次连续圆滑奏出，可视为分解和弦的一种.</p>
<p>【有种大珠小珠落玉盘的感觉】 </p>
</blockquote>
<p>Alberti bass：</p>
<blockquote>
<p>阿尔贝蒂低音, 指的是分解和弦的各个乐音按照特定顺序演奏，通常依“最低、最高、中等、最高”的顺序。</p>
<p>It’s a good way of harmonizing something.</p>
</blockquote>
<p>boogie-woogie bass:</p>
<blockquote>
<p> a piano blues style from the early 20th century.</p>
<p>【Youtube上有教学boogie-woogie的视频，看着感觉弹起来手很疼……】</p>
<p>Beethoven在协奏曲中用到过。</p>
</blockquote>
<p> 赏析 J.S.Bach  prelude  to the first book of his “ Well-Tempered Clavier”：</p>
<blockquote>
<p>a succession of chords played as arpeggios</p>
</blockquote>
<p>大约140年后，19世纪的法国作曲家 Charles Gounod 为巴赫的这段prelude配上了melody。</p>
<p>【大提琴cello真的是超美，真的被The Swan惊艳到了，怪不得教授说 I’ve always said if I ever come back as a musical instrument I want to come back as a cello.】</p>
<p>major triad and  minor triad:</p>
<p>练习：Franz Liszt’s Lugubrious Gondola， focus on the change from one triad to the next.</p>
<p>低音部分，为琶音， just an arpeggio underneath。</p>
<p>练习：the “Moonlight Sonata” of Beethoven【贝多芬的月光协奏曲】</p>
<p>distinction between a major triad and a minor triad【这段完全没听懂，补】</p>
</li>
<li><p>Major and Minor Harmonies in Popular Music</p>
<p>练习： U2‘s Love is Blindness</p>
<p>ostinato harmony: from the Italian word <em>ostinare</em>, stubborn。【任何持续重复的因素，称为固定反复】</p>
<blockquote>
<p>when that pattern repeats</p>
</blockquote>
</li>
<li><p>Modulation through Harmony</p>
<p>modulation: the change from one tonality (tonic, or tonal center) to another.</p>
<p>练习： Aaron Copland‘s Appalachian Spring</p>
<p>Modulations are hard to hear. The best you can do is that oftentimes is say, “This is unsettled. Maybe it’s modulating,”</p>
<p>练习：Beach Boys‘  these California airheads.</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Yale《listening to music》刷课笔记</category>
      </categories>
      <tags>
        <tag>Music</tag>
      </tags>
  </entry>
  <entry>
    <title>Lecture 08 Bass Patterns - Blues and Rock</title>
    <url>/posts/notes-on-yale-courses-listening-to-music-lecture08/</url>
    <content><![CDATA[<p>继续和声部分的理论知识，继续懵逼ing……</p>
<ul>
<li><p>Review of Chord Formation</p>
<p>三和弦 CEG，C 是 根音The root of the triad</p>
<p>tonic (I)</p>
<p>the dominant (V)</p>
<p>sub-dominant(IV): right next to and below the dominant</p>
<blockquote>
<p>a I chord built on the first degree of the scale,</p>
<p>a V chord built on the fifth degree of the scale,</p>
<p>a IV chord built on the fourth degree,</p>
<p>and a VI chord built on the sixth degree.</p>
</blockquote>
<p>When an orchestra plays or an ensemble plays and they’re  just playing individual notes that all together form a chord.</p>
<p>Question: Why do we change chords?</p>
<blockquote>
<p>Because the melody changes and not all harmonies are concordant with every note.</p>
</blockquote>
<p>这里，教授提到了pitch音高，感觉挺有意思。</p>
<p>什么情况下，pitch dissonant (音不和谐)？</p>
<p><strong>pitches that are right next to each other — very close to each other — are dissonant.</strong></p>
<p>The closer these pitches are together, the more likely they are to be dissonant.</p>
<p>所以弹CD会dissonant，弹CA就不会, because you allow a little separation between the two pitches, that makes them consonant, much better.</p>
</li>
<li><p>Chord Progressions and Harmonic Change</p>
<p>Chord Progressions： 和弦进行？</p>
<p>what is chord progression?</p>
<blockquote>
<p>A sequence of chords that sound good together, kind of make sense together.</p>
<p>They seem to be going somewhere and there’s this sort of force of pull or gravity in music having to do with some chords wanting to go to other chords.</p>
</blockquote>
<p>如何能听到这些chord？如何能听到chord progression？如何能听到和声？</p>
<blockquote>
<p>to get a sense of harmony we’re going to listen to the bass.</p>
<p>听低音部分，“下”到低音。</p>
</blockquote>
<p>听的时候，注意什么？</p>
<blockquote>
<p>figure out if the harmony is changing, and if it is changing whether it’s changing at a regular or irregular rate.</p>
<p>和声是否变化，变化是规律的还是不规律的？</p>
</blockquote>
<p>Almost all classical music involves irregular rates of harmonic change.</p>
<p>练习：Richard Wagner’s Ring Cycle 开头部分。</p>
<blockquote>
<p>Richard Wagner’s Ring Cycle： 尼伯龙根的指环，由瓦格纳作曲及编剧，整个于1848年开始创作，至1874年完成，历时共26年。</p>
<p>尼伯龙根的指环是一个由四部歌剧组成的系列，分别为：</p>
<ul>
<li><p>莱茵的黄金</p>
</li>
<li><p>女武神</p>
</li>
<li><p>齐格弗里德</p>
</li>
<li><p>诸神的黄昏</p>
</li>
</ul>
</blockquote>
<p>练习：Dave Matthews Ban的作品片段</p>
<p>练习：Mozart’s G Minor Symphony 【听起来应该是 Symphony no.40】</p>
<p>赏析：【不懂系列】</p>
<blockquote>
<p>At the beginning,  these chords are holding for four measures or a total of eight beats.</p>
<p>Then as it goes on,Then we’re getting two changes per beat.It’s getting faster and faster and faster.</p>
<p>The amount of time that each chord is holding is getting shorter and shorter and shorter as we drive into that cadence. cadence is simply the end of a musical phrase, particularly in this case the end of a chord progression, where we are at a point of arrival; the cadence brings us to a point of arrival. So that’s a piece of Mozart.</p>
</blockquote>
<p>练习：Beethoven‘s Symphony no.6, Pastoral Symphony【田园交响曲，田园牧歌】</p>
<p>赏析：</p>
<blockquote>
<p>He’s doing the opposite of what Mozart did. He’s trying to relax us here by slowing down the rate of harmonic change here. That held for about thirty seconds, that tonic chord.</p>
</blockquote>
</li>
<li><p>Popular and Classical Music Chord Progressions</p>
<p>流行音乐中的和弦进行。</p>
<p>What does pop music do for us that’s very helpful?</p>
<ul>
<li><p>regularity and repetition</p>
</li>
<li><p>most of the chords in rock music in particular tend to be <strong>root-position</strong> chords, and for that reason they’re easier to hear.</p>
</li>
</ul>
<p>练习：Badly Drawn Boy 的歌 【regular，two chords, 没听出来】</p>
<p>练习： Justin Timberlake 【regular，four chords, each chord was holding for two beats there in duple meter】</p>
<p>What’s the difference between pop and classical music?</p>
<blockquote>
<p>pop music tends to have simpler harmonies, and that those harmonies tend to be more repetitious, that they tend to have harmonies that have chords in root position.</p>
<p>We’ve got text in pop music that tells us what this music means. classical music, probably eighty-five percent of it, does not involve a text, and that’s a whole different ballgame because then <strong>you have to communicate meaning in a completely different sort of way</strong>.</p>
<p>pop music are much shorter.</p>
<p>Most classical music is written down.</p>
<p>The structure of a popular piece is often more predictable in pattern and verses and bridges and chorus whereas with classical music you really can’t predict what part of the movement you’re at.</p>
<p>classic music has the capacity for expansion.</p>
</blockquote>
</li>
<li><p>Three-Chord Progressions</p>
<p>练习：Beach Boys’s 歌片段，它是 Three-Chord Progressions， 和弦的顺序为 sub-dominant (IV), dominant (V), tonic (I)</p>
<p>练习：Beethoven‘s Symphony no.6 最后一个乐章</p>
<p>出场的乐器：单簧管Clarinet，法国号French horn</p>
<p>using the same three-chord chord progressions  in the Beach Boys.</p>
</li>
<li><p>Four-Chord Progressions</p>
<p>练习：Gene Chandler’s Duke of Earl</p>
<p>赏析：</p>
<blockquote>
<p>got four chords I, VI, IV, V, I, VI, IV, V  operating here and they’re changing regularly.</p>
<p>what happened in that middle section?</p>
<p>it went on and on and on, longer, longer, longer, then in that middle section each chord was changing at the rate of two measures. So the whole piece, then, would be a piece involving irregular rate of change.</p>
</blockquote>
<p>练习：Mozart’s Symphony No. 5 in B-flat, 低音部分同Gene Chandler’s Duke of Earl</p>
<p>练习：a passage of composer Gioachino Rossini‘s opera 【完全懵逼， 听懂的感觉一定很好玩吧？】</p>
<p>赏析：</p>
<blockquote>
<p>the first thing we got to do is sort of lock on to the tonic.</p>
<p>If you ever hear music rocking back and forth repeatedly between two chords, it’s probably tonic,  dominant, tonic, dominant.</p>
<p>It was  I, VI, IV, V, I progression.</p>
<p>what happened next was he then started to run that faster, twice as fast as it had been before, changing rate of harmonic pattern.</p>
<p>The end of that was all just the tonic. He just sat there on the tonic forever. It’s a good example of sort of real time and psychological time in music. You knew it was time to start clapping as soon as that chord hit that.</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>Yale《listening to music》刷课笔记</category>
      </categories>
      <tags>
        <tag>Music</tag>
      </tags>
  </entry>
  <entry>
    <title>Lecture 09 Sonata-Allegro Form - Mozart and Beethoven</title>
    <url>/posts/notes-on-yale-courses-listening-to-music-lecture09/</url>
    <content><![CDATA[<p>lecture 9~lecture 11， lecture13～lecture14 都是讲曲式的。</p>
<p>let’s  pursue the issue of musical form.</p>
<ul>
<li><p>Verse-Chorus Form in Popular Music</p>
<p>Form is particularly important in all types of music.</p>
<p>What’s the most common form that one encounters when dealing with pop songs?</p>
<blockquote>
<p>“verse and chorus” structure.  或教授的 “strophe and refrain” structure.</p>
</blockquote>
<p>Frederick Evans 举了NSYNC的“Bye Bye Bye” 说明流行音乐中的“verse and chorus” structure.</p>
<p>分析：</p>
<blockquote>
<p>It’s half of the chorus or so when it starts and then there’s verse, chorus, verse, chorus and then what I call the bridge, which is like an emotional climax. And then the last one is a really powerful chorus where they just bring it home and then the music fades away.</p>
</blockquote>
<p>这里，教授听“Bye Bye Bye” 后，提到了Lament bass悲叹低音。</p>
<blockquote>
<p>Google了下什么是Lament bass。【看不懂，先码上】</p>
<p>半音化四度（chromatic fourth，或 passus duriusculus）是一段横跨纯四度，并覆盖了这个四度中几乎所有半音程的旋律或旋律片段。</p>
<p>在巴洛克和古典主义时代的歌剧中，<strong>半音化四度常见于低音声部，被用在悲伤的咏叹调中</strong>。这种创作技法被称作“悲叹的低音（lament bass）”</p>
<p>在贝多芬的第9号交响曲第一乐章的倒数第二页的大提琴和低音提琴部分，可以找到半音化的四度。</p>
</blockquote>
<p>【byebyebye的bridge部分，感觉是竖琴弹出来的，Mark下。】</p>
</li>
<li><p>Introduction to Form in Classical Music</p>
<p>音乐中体裁genre和曲式form的区别：</p>
<p>genre 在音乐中，是simply musical type.</p>
<p>symphony，string quartet，concerto，ballet, opera，classical New Orleans jazz，Blues 等都属于 genre。</p>
<p>每一种体裁都是由乐章movement构成的，比如通常symphony有四个乐章，而concerto有三个乐章。</p>
<p>每一个movement 由特定的form构成。each of the movements is informed by a particular form。</p>
<p>以string quartet 弦乐四重奏为例：</p>
<blockquote>
<p>弦乐四重奏是一种音乐演奏形式，或是说一种音乐作品，由4把弦乐器负责，通常是2把小提琴，一把中提琴和一把大提琴。</p>
<p>通常是四乐章的作品，首尾两乐章通常是<strong>快板</strong>，中间的乐章，在古典四重奏中是慢板和舞曲（如小步舞曲或谐谑曲）。【快板- 慢板-舞曲-快板， fast, slow, minuet, scherzo, fast，有些类似交响曲】</p>
</blockquote>
<p>为什么音乐中需要form？</p>
<blockquote>
<p>When we’re hearing a piece of music and all this stuff is coming at us <strong>we want to make sense of it by knowing approximately where we are</strong>. Am I still toward the beginning? Am I in the middle of this thing? Am I getting anywhere near the end of it? How should I respond at this particular point?</p>
</blockquote>
<p>古典音乐中的6种form：</p>
<ul>
<li>ternary form 三段曲式</li>
<li>sonata allegro form 奏鸣曲式-快板</li>
<li>theme and variations 主题和变奏</li>
<li>rondo 回旋曲</li>
<li> fugue 赋格曲</li>
<li>ostinato 固定音型/固定低音</li>
</ul>
<p>其中， sonata-allegro is the hardest, the most complex, the most difficult of all of these forms.</p>
<p>通常奏鸣曲-快板 出现在 sonata, concerto, string quartet, symphony 等体裁作品的第一乐章。</p>
<p>slow movement， 则可能是 theme and variations 或者  rondo 或者  ternary form.</p>
<p>小步舞曲或谐谑曲几乎总是三段曲式 ternary form。</p>
<p>今天这堂课，我们学三段曲式和奏鸣曲-快板。</p>
</li>
<li><p>Ternary Form</p>
<p>以Beethoven’s “Für Elise”为例，介绍 Ternary Form。</p>
<p>三段式就是简单的ABA, statement, contrast, statement.</p>
<blockquote>
<p>simply the idea of presentation, diversion, re-presentation or statement, digression, restatement — anything like this.</p>
</blockquote>
<p>这里，介绍了一下  relative major and minor 的概念。【完全懵逼，后面过第二轮的时候，再好好理解下】</p>
</li>
<li><p>The Sonata-Allegro Form in Mozart’s “A Little Night Music”</p>
<p>奏鸣曲式-快板，主要包含三个部分：</p>
<ul>
<li><p>exposition 呈示部</p>
<p>细分为第一主题（主部）、连接部bridge、第二主题（副部）、結束部。</p>
</li>
<li><p>development 发展部</p>
<p>通常引申并进一步展开呈示部中的内容。</p>
<p>the most polyphonic of any section in the piece. There’s a lot of counterpoint usually to be found in the development section.</p>
</li>
<li><p>recapitulation 再现部</p>
</li>
</ul>
<p>另有：</p>
<p>结尾coda， 顾名思义，用来结束全曲。</p>
<p>Codas generally are very static harmonically.</p>
<p>Italian <em>coda</em> means tail, and these can be, like all tails, long or short. <strong>Mozart happened to like short codas. Beethoven liked longer codas.</strong></p>
<p>有的作曲家会在呈示部前面加上引子introduction。</p>
<p>以Mozart’s Eine kleine Nachtmusik 为例：</p>
<blockquote>
<p>又称“第13号小夜曲”，作品编号K.525</p>
<p>分四个乐章：</p>
<p>1    第一乐章：快板<br>2    第二乐章：浪漫曲（行板）<br>3    第三乐章：小步舞曲和中间乐段（稍快板）<br>4    第四乐章：回旋曲（快板）</p>
</blockquote>
<p>听第一乐章 奏鸣曲结构， a beautiful example of sonata-allegro form.</p>
<p>【赏析部分完全懵逼了，listening，just listening。】</p>
</li>
<li><p>The Sonata-Allegro Form in Beethoven’s Fifth Symphony</p>
<p>Beethoven’s Fifth Symphony 第五交响曲第一乐章。</p>
<p>赏析：【呈示部和发展部】</p>
<blockquote>
<p>exposition:</p>
<p>开头部分，没有引子no introduction.just starts off with his first motive there, a four-note motive.</p>
<p>随后bridge部分，连接部</p>
<p>You get a sense of moving from point A to point B or from first theme to second theme.</p>
<p>结束coda部分，法国号加入</p>
<p>随后，一个新的抒情主题加入，以小提琴开启。a new lyrical theme comes in</p>
<p>音越来越高，Building up dynamics and pitch.</p>
<p>在最后结束的时候，closing theme，用了 arpeggio 琶音。 是一个relative major，一个相对大三和弦。</p>
<p>注意听旋律，the closing theme ,  just a different configuration of that short, short, short long motive. 然后我们进入development。</p>
<p>development:</p>
<p>start with four-note motive.</p>
<p>then, modulates through different keys.</p>
<p>modulating to a higher key there.</p>
<p>then, begins to build up in terms of pitch, taking it up higher and higher and higher,  bring  full of tension, 贝多芬用了diminished triad来营造不安和紧张。</p>
<p>中间教授弹了一段 Mozart的K.545第一乐章的开头部分，哈哈，大饼练的那首，我竟然听出来了，开心！</p>
<p>then starts playing around with just two notes.</p>
<p>And then breaks it down to just one note, once again reaching for the essence here. That sounds like high, low, high, low.</p>
<p>and finally this sort of insistent motive  just breaks down the door and then the recapitulation can begin.</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>Yale《listening to music》刷课笔记</category>
      </categories>
      <tags>
        <tag>Music</tag>
      </tags>
  </entry>
  <entry>
    <title>Lecture 11 Form - Rondo, Sonata-Allegro and Theme and Variations</title>
    <url>/posts/notes-on-yale-courses-listening-to-music-lecture11/</url>
    <content><![CDATA[<p>这节课主要的内容依然是曲式，回旋曲式， 主题和变奏。</p>
<p>先来了解下Johannes Brahms：</p>
<blockquote>
<p>约翰内斯·勃拉姆斯:</p>
<p>浪漫主义中期德国作曲家。生于汉堡，逝于维也纳。</p>
<p>维也纳的音乐领袖人物，创作许多钢琴曲、室内乐、交响乐及合唱曲。勃拉姆斯本身是炫技钢琴家，首演过许多自己的作品。勃拉姆斯也和当时不少杰出的音乐家一起合作，包括钢琴演奏家克拉拉·舒曼以及小提琴演奏家约瑟夫·约阿希姆。勃拉姆斯的很多作品已成为现代音乐会的主要曲目之一。勃拉姆斯是不妥协的完美主义者，曾毁掉他的部分作品．也有一些未发表的作品。</p>
<p>3B之一。另外两个：Bach， Beethoven</p>
<p>He’s a very serious composer. He takes everything very seriously.</p>
</blockquote>
<ul>
<li><p>Introduction to the Concert Program</p>
<p>concert 音乐会：Saturday 8:00 p.m at Battell Chapel</p>
<p>教授讲了下有关音乐会的事情，顺带布置了下作业 write a review for the concert。</p>
<p>concert 的三个作品名单：</p>
<ul>
<li>Mozart‘s The Marriage of Figaro</li>
<li>Johannes Brahms’s  variations on a theme by Joseph Haydn</li>
<li>Beethoven’s Pastoral Symphony</li>
</ul>
</li>
<li><p>Analysis of Theme and Variations as a Form in Brahms’s Composition</p>
<p>练习的曲目：variations on a theme by Joseph Haydn</p>
<p>曲子遵循的曲式结构：A B C B， or <strong>Antecedent, Consequent, Extension, Consequent</strong></p>
<p>pedal point:</p>
<blockquote>
<p>This is a device that derives from organ technique where an organist would just put his foot or her foot on a particular key and just hold it for a long time.</p>
<p>【从管风琴师那里延伸出来】</p>
</blockquote>
<p>hemiola：</p>
<blockquote>
<p>when you’re rolling in one of these and you suddenly shift to the other, back and forth.</p>
</blockquote>
<p>variation one:   solo部分的乐器是双簧管 oboe</p>
<p>variation five： so much syncopation. very fast</p>
<p>variation seven：结构 A C A</p>
<p>last variation: 【一如既往的懵逼】</p>
<blockquote>
<p>He’s got a theme and then he’s got what we call an ostinato in music.</p>
<p>here he’s making this more complicated rhythmically by not only using hemiola and syncopation, but also threes against twos simultaneously. He’s throwing in some triplets in the melody up above.</p>
</blockquote>
<p>最后结束部分是一个coda，本来声音越来越低，感觉应该是结束了，结果一声响，重新来了一次主题，最后结束。</p>
<p>if you don’t give the audience a coda, they’re expecting the next variation to begin. <strong>So you got to throw in that coda so that everybody knows, hey, that really was the end</strong> — no fooling.</p>
</li>
<li><p>Introduction to the Rondo</p>
<p> 回旋曲式：one big theme coming back again and again and again.</p>
<p>练习： Jean-Joseph Mouret‘s Rondeau Suite De Symphonies No. 1 in D</p>
<p>B部分用管风琴弹奏</p>
</li>
<li><p>Rondo in Vivaldi’s Spring Concerto and Mozart’s Horn Concerto</p>
<ul>
<li> Vivaldi’s Spring Concerto</li>
</ul>
<p>  回旋曲式</p>
<ul>
<li><p>Mozart’s Horn Concerto</p>
<p> Notice: each time the French horn plays the theme; then the orchestra repeats it。</p>
</li>
</ul>
</li>
<li><p>Rondo Form in Sting’s Music and Conclusion</p>
<p>展示了教授自己拍的一张照片，In France at the Chateau de Chambord，建筑风格类似回旋曲 A, B, A, C, A, B, A form。</p>
<p>练习： The Police’s Every Breath You Take， 从wiki上摘录下The Police 乐队的介绍：</p>
<blockquote>
<p>1977年在英国伦敦成立的三人摇滚乐队，由主唱史汀Sting、鼓手科普兰和吉他手萨默斯组成，曾六次获格莱美奖。最热门的两首作品：《every breath you take》，《wrapped around your finger》</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>Yale《listening to music》刷课笔记</category>
      </categories>
      <tags>
        <tag>Music</tag>
      </tags>
  </entry>
  <entry>
    <title>Lecture 12 Guest Conductor - Saybrook Orchestra</title>
    <url>/posts/notes-on-yale-courses-listening-to-music-lecture12/</url>
    <content><![CDATA[<p>这节课请来了Saybrook Orchestra的首席指挥家 Bradley Naylor, the principal violist Katie Dryden 和 the principal flutist  Elana Kagan。</p>
<p>整节课是为了周六晚上的一场Saybrook Orchestra的音乐会做准备。</p>
<p>【挺好玩的一节课，哈哈，喜欢教授对自己的那段调侃。】</p>
<ul>
<li><p>Introduction</p>
<p>当我们去评价一场古典音乐会的时候，哪些该做哪些不该做？</p>
<p>You do the following:</p>
<ul>
<li>How well did the performance go?</li>
<li>How did the players do?</li>
</ul>
<p>You don’t do the following:</p>
<ul>
<li>who the composer is.</li>
<li>when the piece was written.</li>
<li>the history of the piece, the historical context.</li>
<li>the meaning of the piece.</li>
</ul>
</li>
<li><p>Writing a Concert Review</p>
<p>Beethoven’s Pastoral Symphony:</p>
<blockquote>
<p>sort of an introduction, then an introduction to the birds of the forest in the second movement, a peasant romp in the third movement, a storm gathers in the fourth movement. That — we have an extra movement in this particular symphony because we’ve got Beethoven writing a bit of pictorial music here in the form of a fourth movement that’s a storm — and then a hymn of thanksgiving that plays out in, basically, a rondo-variation form there at the end.</p>
</blockquote>
<p>听贝多芬的作品时，需要知道什么呢？了解贝多芬本人。</p>
<p>在音乐会之前，你可以将要演奏的所有曲目都听一遍。</p>
<p>在听音乐会的间隙，可以记录下你的感受。</p>
<p>在结束后，写下你的review。</p>
<p>教授的建议是：<strong>the sooner you write your review after a performance the better.</strong></p>
</li>
<li><p>Rehearsing and Leading an Orchestra</p>
<p>Bradley Naylor 和教授的互动。</p>
<p>Bradley Naylor 自小加入合唱团choirs，现在是一名conductor，很早开始学钢琴。</p>
<p>这段教授和Bradley Naylor的一问一答还挺有意思的。有一段提到了Helmuth Rilling，德国指挥家，指挥三小时，不看曲谱，牛！</p>
<blockquote>
<p>Last year Helmuth Rilling, who is a famous German conductor, came and worked with some of the ensembles and did Mendelssohn’s <em>Elijah</em>, which is a huge romantic oratorio about two and a half hours long. The dress rehearsal — He came to the dress rehearsal, put his score down on the music stand, <strong>conducted for three hours, never opened it,</strong> and we were like, “Wow, this guy knows the score.”</p>
</blockquote>
<p>随后一群人玩了一个辨音的小游戏。</p>
</li>
<li><p>Viola Excerpts from the Concert Program</p>
<p>一场小型的音乐会，演奏 The Marriage of Figaro。</p>
</li>
<li><p>Balancing Solos in the Performance and Conclusion</p>
<p>the principal flutist Elana Kagan 表演了一段solo，Beethoven Pastoral Symphony second movement.【贝多芬田园交响乐第二乐章】</p>
<p>one more question from professor Wright:</p>
<p>Where should we sit?【去音乐会，我们坐哪里好呢？哈哈】</p>
<blockquote>
<p>Well, my favorite place to sit in concerts is somewhere where I can see that interaction between the different, I guess, gears in the machine, as you put it. So I would sit <strong>somewhere not directly behind the conductor</strong>, so <strong>somewhere where you can see the players ‘cause they’re the ones actually making the music.</strong>   — Bradley Naylor</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>Yale《listening to music》刷课笔记</category>
      </categories>
      <tags>
        <tag>Music</tag>
      </tags>
  </entry>
  <entry>
    <title>Lecture 13 Fugue - Bach, Bizet and Bernstein</title>
    <url>/posts/notes-on-yale-courses-listening-to-music-lecture13/</url>
    <content><![CDATA[<p>这节课说赋格，牛逼闪闪的Bach, the master of the fugue.</p>
<p>Every educated person should know what a fugue is. 【I want to be an educated person😂】</p>
<ul>
<li><p>Introduction</p>
<p>教授介绍了fugue在文学，绘画等多个艺术领域的应用。</p>
<p>然后介绍了一本fugue方面的书，Douglas Hofstadter 的《 Gödel, Escher, Bach: an Eternal Golden Braid》  中文译名：《哥德尔、埃舍尔、巴赫：集异璧之大成》。</p>
<p>看了下，豆瓣评分9.5，该书获得普立兹奖。</p>
<p>看一下教授对这本书的读后感：</p>
<blockquote>
<p>I can follow about the first twenty-five or thirty pages or so. Then when it gets to the math it really gets over my head, but what it is is an attempt to <strong>use the fugue as a way of bringing a common mode of understanding to the visual arts, to mathematics and to music.</strong></p>
</blockquote>
</li>
<li><p>The Structure of Fugues</p>
<p>fugue的定义：</p>
<blockquote>
<p>A composition for two, three or four parts played or sung by voices or instruments which begins with a presentation of a subject in imitation in each part. The exposition continues with modulating passages of free counterpoint — the episodes — and further appearances of the subject, and ends with a strong affirmation of the tonic key.</p>
</blockquote>
<p>简单点的：</p>
<blockquote>
<p> they start out with one voice leading forward and then another voice imitates that voice exactly.</p>
</blockquote>
<p>如果 the following voice 从头到尾都跟 leading voice 一个调调的话，就不叫赋格，叫Canon,   one voice imitating the other exactly from beginning to end.</p>
<p>Fugue最少有两种voices，最多可有32种voices。</p>
<p>最知名的赋格集就是Bach的《The Well-Tempered Clavier》，Clavier 意为 keyboard，the well-tuned keyboard， 调好的键盘乐器？ 中文翻译成了《十二平均律》。</p>
<p>《The Well-Tempered Clavier》共有两本书，一本写于1722年，另一本完成于1742年，每一本中，都有24个 preludes 和 fugues 。</p>
<p>what’s a prelude?</p>
<blockquote>
<p>It’s just a warm-up piece, to just sort of get relaxed. You get to see your fingers, get a feel of the keyboard. <strong>a prelude, a pre play, a warm-up, and then we go on to the meat of the issue, which is the fugue.</strong></p>
<p>【有点类似运动前的热身，虽然懵逼，但不得不说，prelude真好听啊】</p>
</blockquote>
<p>fugue的结构：</p>
<blockquote>
<p>呈示部 exposition：</p>
<p>We have a leader and then a follower. And the follower duplicates the main idea, which we’re going to call th e subject, for a period of time, but then it kind of breaks off. So voices will come in and duplicate a certain amount of material and then break off and go their own way.</p>
<p>After all of the voices are in, we’re at the end of what we call the exposition of the fugue.</p>
<p>【注意区分奏鸣曲中的呈示部， 奏鸣曲中是 first theme and then second theme and closing theme， 而赋格则是只有一个主题，所有的voice都在各自的range 里 展示这个theme】</p>
<p>【从进程角度看，follower 是从 leader fork出来的，然后中断，开始了自己的旅途，能这么理解吗？】</p>
<p>After that we go to what’s called the “episode” of a fugue.【呈示部 结束后，便是episode 】</p>
<p><strong>Usually it modulates key</strong> and the vehicle through composers frequently modulate is melodic sequence, either up or down. You can kind of move around by using sequence. So it tends to be contrapuntal because it’s using little motives from the theme. It modulates, moves around a lot, goes to different keys, sounds a bit unsettled. <strong>these episodes in a fugue are sort of mini development sections.</strong></p>
<p>【类似奏鸣曲中的发展部】</p>
<p>Then the subject will come back in a new key because we’ve modulated in the episode, subject in just one voice, new key, then another episode in which there’s modulation, more counterpoint, more movement; another statement of the subject in a new key; another episode; another statement of the subject, and on it goes until  we have the sense, “oh, this is a very solid moment; yes, this fugue is ending.” And maybe they’ll throw upon one or — throw one or two chords on the end but that’s it.</p>
<p>【最后主题以发展部中modulated key返回，以一个或多个和弦结束】</p>
</blockquote>
<p>fugue 和 Canon都属于imitative polyphonic texture， 模仿的复调。</p>
<p> fugue 属于织体里面不那么严格的模仿的复调， 而卡农Canon 则是标准的模仿的复调，以一个主要声部开始，随后它被一个或更多的其他声部复制，跟随的声部完全准确地重复主要声部的主题。</p>
</li>
<li><p>Fugue Analysis in J. S. Bach’s Compositions</p>
<p>巴赫作品中的赋格分析。</p>
<p>作品：Bach fugue No.2 in C minor Well-Tempered Clavier Book I。</p>
<p>两种风格演绎 这段 fugue。Jazz 爵士 and Baroque 巴洛克风格</p>
<p>Jazz 版本里面，低音部分的乐器是低音提琴。</p>
</li>
<li><p>Fugue Structures in Excerpts of Bizet and Bernstein</p>
<p>通常情况下，fugue是单独的，独立的作品。但有时，赋格也可以加入到其他的曲式中，这种手法称之为fugato.</p>
<p>fugato：</p>
<blockquote>
<p>在另一种曲式中加入fugue，称之为fugato， a fugato is a fugue placed inside another form.</p>
<p>比如在奏鸣曲式的发展部中，加入一段fugue。</p>
</blockquote>
<p>这里，选取了Georges Bizet 和 Bernstein 的赋格片段。</p>
<p>Georges Bizet ：</p>
<blockquote>
<p>乔治·比才，法国作曲家。著名的作品包括歌剧《卡门》、戏剧配乐《阿莱城的姑娘》等。</p>
</blockquote>
<p>练习的曲子是Georges Bizet 的 Symphony in C Major 中的一部分。</p>
<p>教授对这段曲子的评价：There’s a lovely romantic string sound, <strong>sort of break-your-heart string sound</strong>.</p>
<p>赏析：</p>
<blockquote>
<p>We’ve got a four-voice fugue that’s going to start here.</p>
<p>辨别出四个voice the bass, tenor, soprano, alto 低音，次中音，高音，中音 的出场顺序。</p>
<p>˙正确的顺序：bass， alto，tenor，soprano 【低音，中音，次中音，高音】</p>
</blockquote>
<p>Leonard Bernstein：</p>
<blockquote>
<p>伦纳德·伯恩斯坦，犹太裔美国作曲家、指挥家、作家、音乐教育家、钢琴家。</p>
<p>1989年12月23日和12月25日是他永远被值得纪念的两天，伯恩斯坦在钢琴家尤斯图斯·弗朗茨的邀请下到柏林指挥贝多芬第九交响曲，地点分别是柏林爱乐厅和柏林音乐厅，由Unitel摄影。当时正值柏林墙倒下，伯恩斯坦将交响曲中席勒的《欢乐颂》改为《自由颂》。伯恩斯坦对此说道：“<strong>我肯定，贝多芬会同意咱们这么做的</strong>”。超过20个国家，一亿人通过电视转播收看了这场音乐会。</p>
<p>特意找了下，Youtube上有视频，不是高清，但不影响观看，贴上 <a href="https://www.youtube.com/watch?v=IInG5nY_wrU">The Berlin Celebration Concert - Beethoven, Symphony No 9 Bernstein 1989</a>.  Enjoy the Berlin Freedom concert.</p>
<p>【陡然觉得，生在这样的时代，真是莫大的幸福，那么多前人优质的作品，都触手可及，满满的感恩。】</p>
</blockquote>
<p>赏析Leonard Bernstein’s Prelude, Fugue, and Jazz Riff 的fugue部分：【除了萨克斯，其他继续懵逼……】</p>
<blockquote>
<p>演奏乐器：Saxophones 萨克斯</p>
<p>We have a moment of melodic inversion.【转位】</p>
<p>what we’re about to hear next is something of a surprise because <strong>we get a second fugue subject</strong>. And <strong>it’s a different fugue subject; it is not syncopated. It’s rather lyrical .</strong></p>
<p>So what we have here is called a <strong>double-fugue</strong>. He’s got one exposition with one fugue subject. Now he’s going to give us a completely different exposition with yet a second fugue subject, and then number one comes back.</p>
<p>You can design a fugue subject, not only that it could go upside down, but in which the intervals instead of coming in long succession could be piled right on top of one another.</p>
<p> The intervals back up on each other because they have been arranged to be consonant at key points and that’s called <em>stretto</em>, Italian word <em>stretto</em>, kind of tight — tight entries here. So here is fancy little bit of counterpoint by Leonard Bernstein that once again goes by very quickly.</p>
<p>Now he’s going to bring back the two subjects together.</p>
<p>So it’s a pretty nifty little fugue there by Leonard Bernstein with lots of intricate counterpoint involved in it.</p>
</blockquote>
<p>随后，是一段 Bach的fugue，3分22秒，用管风琴organ弹奏。</p>
<p>欣赏这段fugue的时候，教授把灯关了，要求学生们闭上双眼，放松去听，听到fugue里面的subject时，举手示意。【我很怀疑当时底下有没有学生睡着了，不过这么好听的管风琴，应该没人舍得睡……】</p>
<p>【呃，如果我没有听错，这里教授放的应该是Fugue in G Minor, BWV 578】</p>
<p>听fugue时，只要做一件事：</p>
<blockquote>
<p><strong>Differentiating between a passage in which you’ve got a statement of the subject and an episode where there ain’t no statement of the subject.</strong> 【找到subject和episode】</p>
</blockquote>
<p>赏析：</p>
<blockquote>
<p>we’ve gone soprano, alto, tenor and now bass.</p>
<p> It’s in one of those inner voices.</p>
<p> It’s a little bit disguised but it’s in there.</p>
<p>Yep, way down in the bass.</p>
<p> A nice, long sequence here.</p>
<p>so episode.</p>
<p>Yep, all the way up on top in the soprano.</p>
<p>Another episode, descending sequence this time.</p>
<p>Rising sequences here,  falling sequences in the bass.</p>
</blockquote>
<p>最后课堂的结尾，播放了由 Glenn Gould 格连·古尔德弹奏的巴赫的fugue，边唱边教你如何写fugue：P。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Yale《listening to music》刷课笔记</category>
      </categories>
      <tags>
        <tag>Music</tag>
      </tags>
  </entry>
  <entry>
    <title>Lecture 16 Baroque Music - The Vocal Music of Johann Sebastian Bach</title>
    <url>/posts/notes-on-yale-courses-listening-to-music-lecture16/</url>
    <content><![CDATA[<p>巴洛克时期的音乐。</p>
<ul>
<li> A Brief Biography of J. S. Bach</li>
</ul>
<p>  巴赫生平简介。</p>
<p>  巴赫家祖上十代都是音乐家，ten generations of Bachs were musicians.</p>
<p>   1685年，巴赫出生，9岁时，父母双亡，成为孤儿，由他的兄长Johann Christoph Bach抚养长大。</p>
<p>  巴赫的音乐教育基本来源于自学。**for the most part, J.S. Bach was self-taught.**【果然，大牛都爱自学】</p>
<p>  巴赫是如何自学的？</p>
<blockquote>
<p>he copied music.【这里的copy music 是手抄乐谱，嗯，这倒是跟苏东坡的方法挺像的】</p>
<p>He copied music for two reasons：</p>
<ul>
<li>to learn the musical style</li>
<li>to get music</li>
</ul>
<p>那么， Bach 抄谁的？</p>
<p>Corelli。【前面lecture11 提到过他的作品La Folia《福利亚变奏曲》】</p>
<p>小 Bach 有多勤奋呢？</p>
<p>oftentimes surreptitiously by moonlight when he was supposed to be in bed.</p>
<p>【别人睡觉的时侯他在学习……】</p>
<p>Bach 求学的时候，为了向一位著名的管风琴师及音乐家学习，会徒步往返于两个城市之间。</p>
<p>walked from Arnstadt in the center part of Germany all the way up to the Hanseatic city of Lubeck on the North Sea up there, a distance of about two hundred fifty miles, in order to be able to sit at the feet of a very famous organist and composer there in Lubeck, and then he walked back.</p>
<p>【有种武侠片里面，跋山涉水拜名师的感觉……】</p>
</blockquote>
<p>  1708～1717年，Bach在Weimar 做管风琴师。1717年他打算离开 Weimar时，因未得到公爵的允许而辞职， 被他的雇主Duke Wilhelm 送进了监狱，据说就是在狱中，Bach 开始了《Well-Tempered Clavier 》的创作。</p>
<p>  1723 年，Bach 去了Leipzig，然后在那里度过了余生。</p>
<p>  欣赏： Bach Sanctus of the B Minor Mass， B小调弥撒圣咏</p>
<p>  值得一提的是，Bach在他那个时代并没有受到如今这般的高度推崇。</p>
<p>  Bach in his day was recognized and valued not so much as a composer but as a performer.</p>
<ul>
<li><p>Bach’s Music and Characteristics of Baroque Style</p>
<p>Bach的主要作品：</p>
<p>J.S.Bach The Art of the Fugue《赋格的艺术》:</p>
<blockquote>
<p>BWV 1080，是巴赫(1685-1750)的一部未指定乐器的未完成杰作.</p>
<p>除了最后的赋格以外，全部的赋格都用到一个简单的D小调的主题.</p>
</blockquote>
<p>J.S.Bach Mass in B minor《B小调弥撒曲》：</p>
<blockquote>
<p>BWV232，是巴赫所写成的一首大篇幅拉丁弥撒套曲。创作时间经历25年。</p>
<p>最先完成的可追溯至1724年，最后于作曲家去世前一年（即1749年）才被编成现时的样式。</p>
<p>《B小调弥撒》被认为和《赋格的艺术》属于同一个范畴，即巴赫毕生对声乐的深刻探索的总结。它被认为是古典音乐的一个高峰。</p>
</blockquote>
<p>J.S.Bach Brandenburg Concertos 《勃兰登堡协奏曲》：</p>
<blockquote>
<p>德国作曲家约翰·塞巴斯蒂安·巴赫的一套管弦乐组曲，属于当时流行的大协奏曲体裁，一共六首。是作曲家最负盛名的管弦乐作品之一。</p>
<p>六首分别为：</p>
<ul>
<li>No.1 in F Major, BWV 1046</li>
<li>No.2 in F Major, BWV 1047</li>
<li>No.3 in G Major, BWV 1048</li>
<li>No.4 in G Major, BWV 1049</li>
<li>No.5 in D Major, BWV 1050</li>
<li>No.6 in B Flat Major, BWV 1051</li>
</ul>
</blockquote>
<p>J.S.Bach The Goldberg Variations 《哥德堡变奏曲》：</p>
<blockquote>
<p>是约翰·塞巴斯蒂安·巴赫晚期的一部键盘作品，1741年出版。全曲32段，全部演出40-80分钟。</p>
<p>1955年，加拿大钢琴家格伦·古尔德将其选作自己的第一张录音作品。</p>
<p>1981年，格伦·古尔德重录了《哥德堡变奏曲》。</p>
<p>1982年，古尔德在多伦多逝世。</p>
</blockquote>
<p>Bach 在Saint Thomas Church 圣托马斯教堂任职期间，完成了大约300首cantata 康塔塔。</p>
<p>康塔塔：</p>
<blockquote>
<p>一种包括独唱、重唱、合唱的声乐套曲，一般包含多个乐章，大都有管弦乐伴奏。</p>
<p>康塔塔包含许多个乐段，往往以序曲或者合唱开头，以合唱结尾，中间交错有伴奏的宣叙调，独唱或者重唱的咏叹调以及不同规模的合唱。</p>
<p>宗教康塔塔一般比叙事性的清唱剧（oratorio）规模小，内容偏重抒情或论述。世俗康塔塔则包罗万象。</p>
</blockquote>
<p>宣叙调(recitative):</p>
<blockquote>
<p>原指歌剧、清唱剧、康塔塔等大型声乐中类似朗诵的曲调，速度自由，旋律与节奏是依照言语自然的强弱，形成简单的朗诵或说话似的曲调，换言之是<strong>以歌唱方式说话</strong>。</p>
<p>It’s not much music, more sort of spoken dialogue accompanied a little bit by a basso continuo.</p>
</blockquote>
<p>咏叹调(Da Capo)：</p>
<blockquote>
<p>“Da Capo” means the head guy or in this case the beginning of the music, the head of the music.</p>
<p>It means you take it from the beginning of the music. So you do one section, an A section, and then you have a contrasting section and then you get this sign that says DC, “Da Capo,” and then you go back and do the A section all over again.</p>
<p>“Da Capo”的意思是“领头人”，在这里是指音乐的起始，意味着返到音乐的开头重新开始。比如你负责声部A，进入对照部B，然后看到符号DC即Da Capo，表示你要返回到开头，从A部重新开始。返始咏叹调运用了“三段式”曲式。</p>
</blockquote>
</li>
<li><p>Bach’s “Wachet auf, ruft uns die Stimme”: Discussion and Analysis</p>
<p>欣赏：赞美诗 Wachet auf, ruft uns die Stimme, Arise, a Voice is Calling《醒来吧，一个声音在呼唤》</p>
<blockquote>
<p>赞美诗的内容：</p>
<p>Awake, a voice is calling, from the watchman from high in the tower.</p>
<p>Awake Jerusalem; midnight is the hour.</p>
<p>They call us with a clarion voice.</p>
<p>Where are the wise virgins?</p>
<p>Get up.</p>
<p>The bridegroom cometh.</p>
<p>Stand up and take your lamps.</p>
<p>Alleluia. Provide yourself for the wedding. Go — you must go out — go forth to meet him.</p>
</blockquote>
<p>教授请一位学生读了一段福音书的内容。</p>
<p>聆听练习了第一乐章和第四乐章，第四乐章中有三个声部。</p>
<p>一个伟大的艺术家应该具备怎样的能力呢？</p>
<blockquote>
<p><strong>to be able to hear one thing and size up its implications</strong>, to know what it could become. I guess that’s what [being] a great creative artist is all about, <strong>to know what something can become.</strong></p>
</blockquote>
<p>巴赫的家中住着亲戚和朋友，还有他自己的大家庭，他们是以什么谋生的？</p>
<p>Well, they copied music for him. His wife, Anna Magdalena Bach, was his principal copyist.【亲戚和朋友们通过为他抄曲谱来谋生……他媳妇是他的首席抄谱师，搞得我也好想抄谱为生……】</p>
</li>
<li><p>Bach’s Legacy in Musical History</p>
<p>Bach 逝于1750年，也代表了巴洛克时期的结束。</p>
<p>Historians are profoundly grateful to him for that because it gives us a nice, clean cut-off by which to end the Baroque era — end of Bach, end of Baroque. 【教授挺幽默】</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Yale《listening to music》刷课笔记</category>
      </categories>
      <tags>
        <tag>Music</tag>
      </tags>
  </entry>
  <entry>
    <title>Lecture 21 Musical Impressionism and Exoticism - Debussy, Ravel and Monet</title>
    <url>/posts/notes-on-yale-courses-listening-to-music-lecture21/</url>
    <content><![CDATA[<p>印象派，Debussy &amp; Ravel,  lovely。</p>
<ul>
<li><p>Introduction to Musical Impressionism</p>
<p>1880 ～ 1920: 印象派时期的音乐</p>
<p>教授介绍了印象派画家Manet, Renoir, Alfred Sisley, Camille Pissarro 等 和 诗人Charles Baudelaire, Paul Verlaine, Arthur Rimbaud, and Stephane Mallarmé。【再次为自己没文化而惭愧……】</p>
<p>音乐领域中，印象派的作曲家，Claude Debussy，Maurice Ravel， Gabriel Fauré， Ottorino Respighi， Charles Griffes。</p>
<p>Claude Debussy：</p>
<blockquote>
<p>阿希尔-克洛德·德彪西（法语：Achille-Claude Debussy, 1862年8月22日－1918年3月25日），法国作曲家。</p>
<p>德彪西是19世纪末20世纪初最有影响力的作曲家之一，代表作品有管弦乐《大海》和《牧神午后前奏曲》，钢琴组曲《贝加马斯克组曲》、《意象集》、《版画集》等；而创作最高峰则是歌剧《佩利亚斯与梅丽桑德》。</p>
<p>知名的作品：</p>
<ul>
<li>《Clair de Lune》【moonlight】</li>
<li>《Prelude to the Afternoon of a Faun》【牧神的午后】</li>
</ul>
<p>其他作品如《Nocturnes》【夜曲】，《La Mer》【大海】，《Images》【意象】</p>
</blockquote>
<p>教授现场弹奏了《Clair de Lune》的片段。</p>
</li>
<li><p>Debussy’s Musical Responses to Mallarme’s Poetry</p>
<p>介绍了《Prelude to the Afternoon of a Faun》【牧神的午后】创作背景，选材于Debussy的美学导师Stephane Mallarmé的一首诗。</p>
<p>Google了这首诗，呃，比较长，截取部分：</p>
<blockquote>
<p>林泽的仙女们，我愿她们永生。<br>她们的肌肤，<br>是那样的光艳，粉红，在天光中熠烁，<br>带着迷离睡意，</p>
<p>莫非我爱的是个梦？<br>我的疑问有如一堆古夜的黑影<br>终结于无数细枝，而仍是真的树林，<br>证明孤独的我献给了我自身——<br>唉！一束祝捷玫瑰的理想的假象。<br>让咱们想想……</p>
</blockquote>
</li>
</ul>
<p>聆听 Debussy’s Prelude to the Afternoon of a Faun</p>
<p>赏析：</p>
<blockquote>
<p>the harp playing away there, arpeggios periodically, just little dabs of color underneath by way of a supporting accompaniment. So let’s listen to a little bit more here. 【竖琴低音，琶音】</p>
<p>Focus on the flute line. That’s got the melody but it’s a kind of different melody than the melodies that we have been listening to.【长笛，旋律】</p>
<p>Passed it to the oboe, okay, pausing it there. So that melody, is kind of like a roulade, kind of ill-formed in a way. It’s very beautiful, but it’s difficult to sing. It’s chromatic, it doesn’t have any regular structure to it, and this is typical of the Impressionists’ approach to melody.【印象派大概就是你哼不出来的调调吧？】</p>
</blockquote>
<p>聆听 Debussy’s Voiles</p>
<p>Voiles：</p>
<blockquote>
<p>Voiles is a composition by Claude Debussy for solo piano from 1909. <strong>It is the second piece in a set of twelve préludes published in 1910.</strong> The title of the piece may be translated to English as either veils or sails; both meanings can be connected to the musical structure. Except for some mild, localized chromaticism and a short pentatonic passage, the entire piece uses the whole tone scale.</p>
</blockquote>
<p>赏析：</p>
<blockquote>
<p>低音部分用了固定音型的曲式Ostinato。</p>
<p>Ostinato were there in Baroque music. They kind of went out of fashion in the Classical period and in the romantic period. Romantic is too expansive for ostinatos, but they come back in here in the Impressionist period and they’re really important in the Modernist period.</p>
<p>这里音阶部分，只用了five notes，而不是常规的7个notes.</p>
<p>We did have whole tone but now we get  a pentatonic scale, just using five notes.</p>
<p>还用了glissando 滑奏。</p>
<p>只弹白键或者黑键就是glissando。They use a lot in television and stuff.</p>
</blockquote>
<ul>
<li><p><em>La Cathedrale Engloutie</em> – Interactions between Impressionist Painters and Musicians</p>
<p>聆听 Debussy的前奏曲prelude  La Cathédrale Engloutie【沉没的教堂】</p>
</li>
<li><p>Ravel’s <em>Ondine</em>: A Violin Performance by Naomi Woo</p>
<p>Ravel’s Ondine：</p>
<blockquote>
<p>来自拉威尔的作品集<em><strong>Gaspard de la nuit</strong></em> 夜之幽灵 ， Ondine为第一乐章。</p>
<p>三个乐章：</p>
<ul>
<li>Ondine「水妖」</li>
<li>Le Gibet「绞刑架」</li>
<li>Scarbo「幻影」</li>
</ul>
</blockquote>
<p>邀请一名大一的新生小姐姐Naomi Woo弹奏Ravel’s Ondine， 小姐姐真的超厉害。</p>
<p>赏析：</p>
<blockquote>
<p> You should look at the score, and the other interesting thing is that the hand — the chord positionings change each time they go up an octave and that’s really hard. Rather than repetition of an arpeggio, up an octave, repeat it, same hand position, up an octave, the particular hand positions are changing as you go up octave to octave. Anything else — I — at the very beginning of this, I did notice — if you could play the left-hand part just so we can hear this melody at the beginning —  Okay. So there we have the outlines of a pentatonic scale at work here, and you’re going to hear that at the beginning and then you’ll hear at the end. So the general form here, as if often true with these Impressionist composers, is just ternary form, A, B, A with the second and final A slightly modified.</p>
</blockquote>
<p>惊艳，要粉Ravel的节奏。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Yale《listening to music》刷课笔记</category>
      </categories>
      <tags>
        <tag>Music</tag>
      </tags>
  </entry>
  <entry>
    <title>Yale《listening to music》刷课笔记</title>
    <url>/posts/notes-on-yale-courses-listening-to-music-backup/</url>
    <content><![CDATA[<p>按照课程大纲的顺序记录下。</p>
<ul>
<li><p>Introduction to Listening to music</p>
<p>Are you getting the most out of your listening experience?</p>
</li>
<li><p>Why listen to classical music?</p>
<p>National Public Radio 针对该问题的调查结果：</p>
<p>Why would we want to listen to classical music?</p>
<ul>
<li>It helps us relax and relieve stress</li>
<li>It helps us center the mind, allowing the listener to concentrate</li>
<li>classical music provides a vision of a better world</li>
</ul>
<p>对于 Professor Wright 本人来说：</p>
<blockquote>
<p>It suggests that there might be something out there. God or whatever , bigger than ourselves.</p>
<p>and it asks us to think sometimes, think about things. That’s what I think these great fine arts do, great literature, poetry, painting, music. **They show what human beings can be, the capacity of the human spirit. They suggest to us as indicated maybe there is something, a larger spirit out there than ourselves, and they get us to think. They get me to think frequently about what I’m doing on this earth. **</p>
</blockquote>
<p>So, what is professor trying to accomplish in here? :  P</p>
<p>Two things.</p>
<ul>
<li>change your personality</li>
<li>impart to you a love of classical music</li>
</ul>
<p>Pop music VS classical music</p>
<ul>
<li>pop music: reputation, rhythm and beat, strong pulsation,  while classical music has melody</li>
<li>their instruments are different</li>
</ul>
</li>
<li><p>Course Requirements and Pedagogy</p>
<p>介绍了下教授自己的那本书，第五版的《listening to music》，提到了一句：….about to come out in a Chinese edition for heaven’s sakes。笑喷。顺手查了下，这本书在amzon上的最新版本是第七版，已有中文版。</p>
<p>后面介绍了下 six-CD set.【want it……】</p>
<p>这里觉得重要的点：</p>
<ul>
<li>Music is an aurally perceived phenomenon.most of the music and language processing happens in these left and  right auditory cortex【音乐是一种听觉现象，大脑中处理语言和音乐的部分都在听觉皮层，懵逼ing……】</li>
<li>Daily participation in language labs required. <strong>So daily is the key thing here.</strong> You’ve got to do this gradual assimilation. So learning to listen to music is just like listening to language. We’ve got to do a little bit every day.</li>
</ul>
</li>
<li><p>Diagnositc Quiz</p>
<p>一个quiz，播放两首piece:</p>
<p>Beethoven’s Fifth Symphony「贝多芬的第五交响曲」「L group / Minor chords / disjunct music」</p>
<p>Beethoven’s Ninth Symphony「贝多芬的第九交响曲」 「R group / Major chords / conjunct music」</p>
<p>Beethoven’s Ninth Symphony  was the setting of a poem by Friedrich Schiller called Ode to Joy.</p>
<p>【我暂时还不能从这不安的曲子中听出Joy的味道……】</p>
<p>R group: positive, happy, secure.</p>
<p>L group: negative, anxious, unsettled.</p>
<p>为什么可以区分出一个曲子是R group 还是 L group？</p>
<p>它们有如下的不同：</p>
<ul>
<li><p>Major chords versus Minor chords: 大调 和 小调</p>
<blockquote>
<p>Major: bright</p>
<p>Minor: dark</p>
</blockquote>
</li>
<li><p>conjunct music versus disjunct music:  级进音乐 VS 跳进音乐</p>
</li>
<li><p>home pitch / tonic pitch: strongly felt tonal「音调」 key</p>
<blockquote>
<p>Beethoven’s Fifth Symphony 没有 home pitch,「 听教授的那句：bang!!! 感受下」</p>
<p>May be that’s why it sounds so disjunct and so unsettled.</p>
<p>而Beethoven’s Ninth Symphony 则 有home pitch, feel sort of secure in that home pitch.</p>
</blockquote>
</li>
<li><p>direction</p>
<blockquote>
<p>Beethoven’s Fifth Symphony 的方向是 down</p>
<p>Debussy 的 moonlight Clair de Lune 就是很典型的down.</p>
</blockquote>
</li>
</ul>
</li>
<li><p>pitch</p>
<p>音乐的两个维度：pitch, time/duration</p>
<p>这里举 Richard Strauss’s Also Sarach Zarathustra:</p>
<p>一个qiuz， what is the keyboard instrument is playing in it?</p>
<p>the brass instrument is a trumpet 「铜管乐器部分是一个小号」</p>
<p>the percussion instrument is timpani 「打击乐器部分是定音鼓」</p>
<p>【注意Richard Strauss’s Also Sarach Zarathustra的最后，可以听出有管风琴organ！还挺明显的】</p>
<p>「乐理这块完全听不懂，懵逼ing…….」</p>
<p>octave: 八度音阶</p>
</li>
<li><p>rhythm</p>
<p>duple meter:双拍子，one two, one two…. one strong beat, one weak beat,  strong weak, strong weak ….</p>
<p>triple meter: 三拍子, strong weak, weak, strong weak, weak, strong weak, weak ….</p>
</li>
</ul>
<h4 id="Lecture-02-Introduction-to-Instruments-and-Musical-Genres"><a href="#Lecture-02-Introduction-to-Instruments-and-Musical-Genres" class="headerlink" title="Lecture 02 Introduction to Instruments and Musical Genres"></a>Lecture 02 Introduction to Instruments and Musical Genres</h4><p>Lecture1的练习作业：</p>
<blockquote>
<p>Beethoven’s Fifth Symphony in C minor Op.67</p>
<p>Tchaikovsky’s Piano Concerto Number One in B flat minor Op.23</p>
<p> Richard Strauss‘s  Also Sprach Zarathustra</p>
</blockquote>
<ul>
<li><p>distinguishing songs from pieces</p>
<p>song with lyrics. eighty percent of classical music is purely instrumental music.</p>
<p>symphony【交响乐定义】</p>
<blockquote>
<p> Symphonies generally have four movements. 【四个乐章】</p>
<p>What’s a movement? Well, a movement is simply an independent piece that works oftentimes. They are independent yet they are complementary.</p>
<p> symphonies have these four movements and they usually operate in the following way:</p>
<ul>
<li>A fast opening movement;</li>
<li>a slower, more lyrical second movement;</li>
<li>then a third movement that’s derived from dance;</li>
<li>and then a fourth movement that’s sort of again “up tempo,” fast, emphatic conclusion.</li>
</ul>
</blockquote>
<p>Beethoven’s Fifth Symphony 有 4 个movement【四乐章交响曲】，总时长在30-40分钟。</p>
<blockquote>
<ol>
<li>有生气的快板（Allegro con brio）</li>
<li>稍快的行板（Andante con moto）</li>
<li>谐谑曲：快板（Scherzo: Allegro）</li>
<li>快板（Allegro）</li>
</ol>
</blockquote>
</li>
<li><p>Genres, Motives, and Themes</p>
<p>【Genre ：音乐体裁】</p>
<p>A motive is just a little cell, a germ, out of which the composer will build other musical material.【动机】</p>
<p>【聆听 Beethoven’s Fifth Symphony第一乐章开头部分，short, short, short, long】</p>
<p>Themes tend maybe a little bit more lyrical.</p>
<p>【聆听 Beethoven’s Fifth Symphony 第二乐章】</p>
<p> Beethoven’s Fifth Symphony第三乐章 呼应着 第一乐章的motive, 还挺明显的。</p>
<p> Beethoven’s Fifth Symphony第四乐章，小号trumpets 加入， sort of upbeat, positive.</p>
<blockquote>
<p>in this 40-minute interval we’ve gone sort of through an emotional musical journey here from despair, despondency, uncertainty, to whatever- to personal triumph, and in a way that mirrors some of the things that were going on in Beethoven’s life.</p>
</blockquote>
<p>concerto【协奏曲】</p>
<blockquote>
<p>three movements.</p>
</blockquote>
<p>Tchaikovsky’s Piano Concerto Number One【柴可夫斯基第一钢琴协奏曲】，总时长在30分钟左右。</p>
<blockquote>
<p>第1乐章：不太快的和极其庄严的快板—生气勃勃的快板（Allegro non troppo e molto maestoso - Allegro con spirito）</p>
<p>第2乐章：朴素的小行板—最急板—初速（Andantino simplice - Prestissimo）</p>
<p>第3乐章：火热的快板（Allegro con fuoco）</p>
</blockquote>
</li>
<li><p>Introduction to the French Horn and Partials</p>
<p>展示了乐器：French Horn, Eva Heater 老师吹了下 <em>Zarathustra</em> 开头的小号部分。</p>
</li>
<li><p>The Bassoon and the Viola</p>
<p>展示了巴松管和小提琴。</p>
</li>
<li><p>Mussorgsky and the Basic Principles of Acoustics</p>
<p>播放 Modest Musorgsky work  <em>Pictures at an Exhibition</em> 中的Polish Oxcart【牛车来了又去了……】</p>
<p>Doppler principle： 多普勒效应。</p>
</li>
<li><p>Dissonance and Consonance in Strauss’s <em>Death and Transfiguration</em></p>
<p>Richard Strauss’s Death and Transfiguration中的Dissonance and Consonance 【完全懵逼……】</p>
<p>With dissonant intervals they tend to be frequencies that are sounding right next to each other, very close-by frequencies [间隔很短？]</p>
<p>If you allow a little bit of spacing, a little more space between your frequencies, they’re a little bit farther apart, then you can move from closeness to  spacing and you get the consonance.</p>
<p>【这里Mark下，期待后期听多了可以 get 到点上】</p>
<p>[2020-02-03]</p>
<h4 id="Lecture-03-Rhythm-Fundamentals"><a href="#Lecture-03-Rhythm-Fundamentals" class="headerlink" title="Lecture 03 Rhythm: Fundamentals"></a>Lecture 03 Rhythm: Fundamentals</h4><p>【简直迷上了Ravel 的 Bolero。】</p>
<p>这节课两件事：</p>
<ul>
<li><p>Advantages and Disadvantages of Musical Notation</p>
<p>乐谱的优缺点。</p>
<p>Advantages：</p>
<ul>
<li>it allows the composer to specify rather precisely what he or she wants, to sort of write things out in the form of musical details. 【便于作曲家创作，也便于有才华的作曲家被认可，不致埋没】</li>
<li>It allows us to preserve the work of art.【we can bring it back to life】</li>
</ul>
<p>【想起《触不可及》里面，菲利普一脸严肃地说艺术是人作为生命的过客能在世上留下的唯一痕迹。】</p>
</li>
</ul>
<p>​        这里播放了一段伊斯兰教Islamic的Adhan 片段 和 Chuck Mangione 与乐队即兴发挥的sax solo。</p>
<p>​        【Adhan 部分，呃，建议白天听，晚上听可能需要点胆子，Youtube上有完整版】</p>
<ul>
<li><p>Beats and Meters</p>
<p>介绍音乐的脉搏，节拍 和 节奏。</p>
<p> the idea of pulse in music and the beat in the music and rhythms in music.</p>
<p>whole note = 4 * quarter notes</p>
<p>this whole note obviously can be subdivided into two half notes and each of the half notes into two quarter notes, each of these quarter notes into two eighth notes, and so on.</p>
<p>Rests： 休止符，represent the absence of sound。</p>
<p>Pulse: music theorists have said  that the pulse in music is basically at the same tempo as the human pulse. 【音乐的脉搏同人类的脉搏？72拍/分钟】</p>
<p>In this course,  only play with two types of meter, <strong>duple</strong> and <strong>triple</strong>.</p>
<p>Two things focus on:</p>
<ul>
<li>differentiate between duple and triple meter</li>
<li> recognize some very basic rhythmic patterns</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>Exercises Distinguishing Duple and Triple Meters</p>
<p>Duple: strong, weak, strong, weak, strong, weak…….</p>
<p>Triple: strong, weak, weak, strong, weak, weak, strong, weak, weak…….</p>
<p>Exercises:</p>
<ul>
<li>Duple: Yale fight song: Bulldog [written by Cole Porter]</li>
<li>Triple: plays piano</li>
</ul>
</li>
</ul>
<ul>
<li><p>Conducting Basic Meter Patterns: Exercises with REM, Chopin, and Ravel  </p>
<p>Downbeat: The first part of the bar.【真的是很懵逼……】</p>
<p>在downbeat 之前有一小段音乐，叫做 pick-up，类似跳水运动员跳水前的准备动作。</p>
<p>all music has a downbeat, not all music starts with a downbeat. Sometimes when listening to music you have to wait. 【好了，连 downbeat 是啥都不清楚，怎么找？】</p>
<p>there are four principal ways that composers signal to us the where abouts of the downbeat.</p>
<ul>
<li>That has to do with duration.【short, long, long 拖的比较长】</li>
<li>through accent【Mozart’s Fortieth Symphony in G Minor, 第一乐章 2/2， 高pitch前的那段？】</li>
<li>through patterns of accompaniment【 waltz by Johann Strauss，懵逼ing…..】</li>
<li>by means of chord change 【一段 REM的 pop music， 彻底懵逼，不知道change的点在哪里……】</li>
</ul>
<p>rhythm practice： Chopin‘ piece</p>
<p>【change key后面那段，41:49 ～ 42:16，lovely, 感觉像是Nocturne  in E Flat Major Op. 9 No. 2，先Mark下】</p>
<p> 这里教授调侃了下自己，哈哈.</p>
<p>最后的练习曲目：Maurice Ravel’s Bolero.【真的是很特别，小白都被迷住了】</p>
<blockquote>
<p>Maurice Ravel was a French composer writing in the early twentieth century. <strong>It’s a unique piece because what he does is take some very basic patterns and simply repeats them over and over and over again for about fourteen and a half minutes</strong> depending upon the tempo that the conductor is taking the music.</p>
</blockquote>
<p>【感觉全程最苦的是鼓手：P】</p>
</li>
</ul>
<p>[2020-02-04]</p>
<h4 id="Lecture-04-Rhythm-Jazz-Pop-and-Classical"><a href="#Lecture-04-Rhythm-Jazz-Pop-and-Classical" class="headerlink" title="Lecture 04  Rhythm: Jazz, Pop and Classical"></a>Lecture 04  Rhythm: Jazz, Pop and Classical</h4><p>【这一课估计要刷好几遍……I’ll be back】</p>
<ul>
<li><p>Introduction to Multiple Partials</p>
<p>一段热身，回顾 duple 和 triple。</p>
<p>后面教授讲了一段有关sound的问题。</p>
<blockquote>
<p>So when we hear any particular sound, again, we’re hearing an amalgam of many sounds, and the importance of each of these partials in the aggregate of sound is what gives it its particular color.    【不懂】</p>
</blockquote>
</li>
<li><p>Syncopation and Triplets</p>
<p>切分音和三连音。【懵逼ing……】</p>
<p> What’s tempo in music?</p>
<blockquote>
<p>It’s the pace or speed of the beat.</p>
</blockquote>
<p>节拍渐进增强：accelerando 【 fancy Italian term】</p>
<p>越来越慢的节拍：ritardando</p>
<p>What is Syncopation?</p>
<blockquote>
<p>It is simply the insertion of an impulse, a “hit” if you will, at a metrical place that we do not expect it to be.</p>
</blockquote>
<p>Scott Joplin 是在作品中运用 syncopation 的高手。【虽然还是听不出来syncopation到底在哪……】</p>
<p>practice：The Entertainer 【不得不说，前奏简直要跪！】</p>
<p>What is Triplets?</p>
<blockquote>
<p>a triplet is simply insertion of three notes in the place of two, not more complicated than that.</p>
</blockquote>
</li>
<li><p>Basics of Musical Texture</p>
<p>【这一章节彻底懵逼】</p>
<p>what is Texture?</p>
<blockquote>
<p>Texture in music is the dispositions of the musical lines.</p>
</blockquote>
<p>three fundamental textures:</p>
<ul>
<li><p>monophonic texture</p>
</li>
<li><p>homophonic texture</p>
<blockquote>
<p>it all lines up pretty much together; all the parts are changing together.</p>
</blockquote>
</li>
<li><p>polyphonic texture</p>
<blockquote>
<p>a lot of lines going their own way.</p>
<p>Two types:</p>
<ul>
<li><p> imitative polyphonic texture 【imitative：仿效的，模仿的】</p>
</li>
<li><p>free counterpoint</p>
<p>这里教授提到了巴赫喜欢的对位counterpoint，播放了一段 Louis Armstrong 的作品，来说明free counterpoint。</p>
<p>随后播放了一段Johnny Dodds的作品。</p>
</li>
</ul>
</blockquote>
</li>
</ul>
<p>Practice: rhythmic dictation 【听写节奏】</p>
<p>教授举了两个Mozart的例子来说明天才果然是天才……</p>
<p>练习的曲子来自：Great Gate of Kiev from Pictures at an Exhibition</p>
</li>
<li><p>Mozart’s <em>Requiem</em>: Insights on Varying Textures and Pitches</p>
<p>最后的压轴：the “Lacrimosa” out of the “Dies irae” out of the <em>Requiem Mass</em> of Wolfgang Amadeus Mozart written in Vienna seventeen 1791</p>
<p>Mozart’s <em>Requiem</em>: Mozart 安魂曲，1791，Mozart 因病离世，安魂曲尚未完成，由其学生补全。</p>
<p>mass【弥撒曲】 同 symphony 【交响乐】，concerto【协奏曲】一样，也是音乐体裁的一种。</p>
<p>the rhythm picture：</p>
<blockquote>
<p>the rhythm associates with the damned:</p>
<p>The bass rhythm is moving very quickly, it is also going up. It keeps rising up. This builds tension.</p>
<p>Pretty skippy music / Very dissonant music / Minor</p>
<p>the rhythm associates with the prayer:</p>
<p>It’s consonant, it’s in major, it’s high and, most important, the rhythm is very uncomplicated. The notes are long and slow.</p>
</blockquote>
<p>欣赏：</p>
<blockquote>
<p>Now the basses.</p>
<p>Now the quiet prayer.</p>
<p>Change to major.</p>
<p>Now the modulation — change of key from major to — back to minor as the cortege will start up again。[modulation]</p>
<p> A nice clarinet sound there and here comes our cortege with the bass. [单簧管响起，低音部分送葬乐队]</p>
<p>Now just a final close, a cadence.</p>
</blockquote>
<p>最后教授来了句，Dancing to heaven.  哈哈。</p>
</li>
</ul>
<p>[2020-02-05]</p>
<h4 id="Lecture-05-Melody-Notes-Scales-Nuts-and-Bolts"><a href="#Lecture-05-Melody-Notes-Scales-Nuts-and-Bolts" class="headerlink" title="Lecture 05 Melody: Notes, Scales, Nuts and Bolts"></a>Lecture 05 Melody: Notes, Scales, Nuts and Bolts</h4><ul>
<li><p>The Nature of Melody</p>
<p>melody shows up in the high range.</p>
<p>Reason:</p>
<blockquote>
<p>because the way sound waves operate.</p>
<p>The higher frequencies take a lot shorter time to clear.</p>
<p>melodies play faster notes because those sounds clear quickly and we can hear and enjoy the melody.</p>
</blockquote>
</li>
<li><p>The Development of Notes and the Scale</p>
<p>五线谱，每条线之间的frequency /space 是一样的。</p>
<p>重复八度：octave duplication。</p>
<p>很多国家的音乐中，都应用了octave duplication.</p>
<p>west: ABCDEFG，seven notes within the octave.</p>
<p>Indonesia: six notes within the octave.</p>
<p>Example: Ravi Shankar’s raga, 用的乐器 sitar 是一种类似吉他的印度弦乐器</p>
<p>China: five-note within the octave.</p>
<p>Example:  阿炳的《二泉映月》</p>
<p>简介古希腊人处理音乐的方式。</p>
<p>ancient Greeks were very much into mathematics as a way of explaining the world and explaining music in particular.</p>
<p>【这段暂时不懂，待消化书上的内容。】</p>
</li>
<li><p>Major, Minor, and Chromatic Scales in World Music</p>
<ul>
<li><p>seven notes within the scale of the major scale</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/imagesmajor.png"></p>
</li>
<li><p>seven notes within the scale of the minor scale</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/imagesminor.png"></p>
</li>
</ul>
<p>音阶：在八度之内，音的上行和下行的一种固定形式。可以把它想象成一个有八级的梯子，在固定的高和低的两个点之间，由八度形成，可以上或者下这个梯子。</p>
<p>其中，除了BC，EF之间是半级，其他的都是一级。</p>
<p>升号 sharp # VS 降号b flat【相当于键盘上的黑键音】</p>
<p>升调是升半个scale，降调是降半个scale</p>
<p>black notes,  can be called <strong>sharps or flats</strong>. flats are below, take you down  a half step, while sharps take you up a half step.</p>
<p>C大调音阶：按钢琴上的白键 CDEFGABC，正好对应着 1-1-1/2-1-1-1-1/2</p>
<p>C小调音阶：按钢琴上的白键CD，DE间的黑键降E，白键FG，GA间的黑键降A，AB间的黑键降B，白键C，正好对应着1-1/2-1-1-1/2-1-1, 即  C D E-flat F G A-flat B-flat C</p>
<p>同理：</p>
<p>A大调音阶：按钢琴上的白键AB，CD间的黑键升C，白键DE，FG间的黑键升F，GA间的黑键升G，白键A。即A B C-sharp D E F-sharp G-sharp A</p>
<p>A小调音阶：白键 ABCDEFGA</p>
<p>tonic note: the primary note</p>
<p>leading tone:pull into the tonic，引出 tonic note，it is always the seventh degree. It’s always a half step.</p>
<p>例子：Luciano Pavarotti 歌唱片段。</p>
<p><strong>Most of our popular music, folk songs and things like that, are written in duple meter and in a major key.</strong> Occasionally, you get things written in triple meter and in a minor key — minor key.</p>
<p>example：Gershwin Porgy and Bess，【感觉是duple，minor】</p>
<p>在古典音乐中，小调也是很少的，大部分都是大调。</p>
<p>这里教授举了Beethoven’s Third Symphony 第二乐章 minor部分和 Mozart 的作品片段 。</p>
<p>Major: happy, bright, optimistic.</p>
<p>Minor: somber. 【灰暗，昏暗】</p>
<p>大调和小调的形成历史介绍：</p>
<blockquote>
<p>back to  sixteenth century, people started writing these things called madrigals, that were tied to texts. And they got in this habit of, <strong>every time they had a bright, happy text, they’d set this in one kind of mode or key — a major mode — and every time they had a sad one, they’d set it in minor.</strong></p>
</blockquote>
<p>后面教授放了一段犹太人的音乐Traditional Jewish folk music【major  和 minor 之间的界线有点懵逼】</p>
<p>chromatic scale： 半音阶，chromatic 来自希腊语chroma色彩，附加的五个音高的确为音乐增加了色彩。</p>
<p>半音阶会增加紧张和不安。</p>
<p>chromaticism adds tension to music and especially chromaticism that’s pulling up.</p>
</li>
<li><p>Pitch and Rhythm in Beethoven’s Ninth Symphony</p>
<p>这一段完全就是应用前面的所学了。</p>
<p>Beethoven’s Ninth Symphony 第一乐章，前面部分。</p>
<p>乐器：低音提琴，巴松管，小提琴。</p>
<p>texture织体： polyphonic.复式</p>
<p>中间巴松管部分，是countpoint，【没听出来】</p>
<p>低音部分的低音提琴，和声。</p>
<p>后面加入了铜管乐器。</p>
</li>
</ul>
<p>[2020-02-06]</p>
<h4 id="Lecture-06-Melody-Mozart-and-Wagner"><a href="#Lecture-06-Melody-Mozart-and-Wagner" class="headerlink" title="Lecture 06 - Melody: Mozart and Wagner"></a>Lecture 06 - Melody: Mozart and Wagner</h4><ul>
<li><p>What Makes a Melody Beautiful?</p>
<p>教授回顾了下上节课的内容，后面提到了antecedent and consequent phrase structure【开头的句式和结束的句式？】</p>
<p>and, so, what makes a melody beautiful?</p>
<blockquote>
<p> It’s sort of like the definition of pornography: you know it when you see it, or you know it when you hear it.</p>
</blockquote>
</li>
<li><p>Puccini’s <em>Gianni Schicchi</em>: Cadences and Sequences</p>
<p> Giacomo Puccini的歌剧 Gianni Schicchi 贾尼·斯基基</p>
<blockquote>
<p>查了下<a href="https://zh.wikipedia.org/wiki/%E8%B4%BE%E7%A7%91%E8%8E%AB%C2%B7%E6%99%AE%E5%A5%91%E5%B0%BC">wiki</a>，呃，这个人全名真的是超级长：</p>
<p>贾科莫·安东尼奥·多米尼科·米凯莱·塞孔多·马利亚·普契尼（<strong>Giacomo Antonio Domenico Michele Secondo María Puccini</strong>）【老师点名的时候得多辛苦】</p>
<p>意大利作曲家，主要代表作：《波希米亚人》、《托斯卡》与《蝴蝶夫人》等歌剧，这些歌剧当中的一些歌曲已经成为了现代文化的一部分，其中包括了《贾尼·斯基基》的《亲爱的爸爸》与《图兰朵》中的《今夜无人入睡》在内。</p>
</blockquote>
<p>这里，教授选的就是《贾尼·斯基基》的《亲爱的爸爸》，是作品中的咏叹调。</p>
<p>【网易云上有完整的曲子，评论部分真的是笑死人，三个字总结了这段《亲爱的爸爸》：爸，打钱。】</p>
<p>deceptive cadence：假终止。Where you’re expecting to go this way, but we go that way.</p>
</li>
<li><p>Wagner’s <em>Tristan and Isolde</em>: Exploring Melodic Ascents and Descents</p>
<p>melodic sequence:</p>
<blockquote>
<p> simply the repetition of a musical motive at a successively higher or lower degree of the scale.</p>
</blockquote>
<p>two kinds:</p>
<ul>
<li>ascending melodic sequence[音越来越高，going up, tension]</li>
<li>descending melodic sequence [音越来越低，going down， relaxation]</li>
</ul>
<p>欣赏 Wagner 的歌剧<em>Tristan und Isolde</em> 的前奏曲 prelude 和咏叹调aria 伊索尔德之死  liebestod</p>
<p>摘自wiki上对于 特里斯坦与伊索尔德 Tristan und Isolde歌剧的介绍：</p>
<blockquote>
<p>一部三幕剧， 是瓦格纳和马蒂尔德·维森东克的恋情写照，马蒂尔德·维森东克是其赞助人维森东克的妻子。情节最早来源于凯尔特人的故事集中关于阿图斯国王与特里斯坦的传说。</p>
</blockquote>
<p> 教授似乎不喜欢Wagner，Richard Wagner — not a very nice man, needless to say.</p>
<p>前奏部分：ascending/rising  melodic sequence， highly chromatic music.</p>
<p>it uses this sequence to work up to a climax, hits a dissonance, resolves it into consonance.  each level gets higher and higher in the violins, the trumpets come in, almost kind of like <strong>a snake rising through it</strong>.</p>
<p>咏叹调 liebestod: This is not antecedent and consequent; <strong>this is a motive being pushed higher and higher each time to a climax</strong>. he used the dissonance. then he took it up two more degrees and folded it in to a consonance, so it was all very consonant at the end. 【从不和谐到和谐】We have deceptive cadences here, and we have another kind of cadence called an Amen cadence that brings an additional resonance — an additional symbolism to the conclusion.</p>
</li>
<li><p>Mozart’s <em>Marriage of Figaro</em>: Melodic Sequence Analysis</p>
<p>aria of Mozart’s <em>Marriage of Figaro</em>,we’re going to see an example of rising melodic sequence in it.</p>
<p>这次教授请来了一名大四学生Lauren Libaw， a very experienced singer, and a very, very good singer。</p>
<p>【很美很可爱的小姐姐】</p>
<p>歌唱的部分是童仆凯鲁比诺的咏叹调部分，此时凯鲁比诺十四岁，处于情窦初开的年龄，一看见女人就不知所措，这首是他为他心爱的女伯爵献歌，歌词大意：</p>
<blockquote>
<p>你们可知道，什么是爱情？</p>
<p>女士们，我心中的那个可是爱吗？</p>
<p>女士们，我心中的那个可是爱吗？</p>
<p>我想把一切讲给你们听，</p>
<p>它如此陌生，我对此一无所知，</p>
<p>只感到心中翻腾不定；</p>
<p>时而狂喜，时而消沉，</p>
<p>我心中充满火样热情，</p>
<p>一瞬间又感到寒冷如冰。</p>
<p>这是超越自我的感觉，</p>
<p>我无法自持，甚至不知它是什么，</p>
<p>不知道为什么终日叹息，</p>
<p>莫名其妙地颤抖心悸，</p>
<p>日日夜夜不得安宁，</p>
<p>但我竟沉醉于此无法自拔。</p>
<p>你们可知道，什么是爱情？</p>
<p>女士们，我心中的那个可是爱吗？</p>
<p>女士们，我心中的那个可是爱吗？</p>
<p>女士们，我心中的那个可是爱吗？</p>
</blockquote>
<p>赏析：【又名听不懂系列】</p>
<blockquote>
<p>Mozart starts out here with the <strong>antecedent and consequent phrase structure</strong>. it rises up through the <strong>rising melodic sequence</strong>.that’s the climax, the peak of the whole aria, and then the bass, And when we get back to the tonic, then it comes in. a <strong>deceptive cadence</strong>,  And then we have our <strong>flyover</strong>,And that’s the way it ends. So you come back to the tonic, okay? We’ve arrived. We’ve landed.</p>
<p>Lovely.</p>
</blockquote>
<p>Mozart is one of the guys that puts this whole idea of structure with melody on the map. Structure, symmetry are very important in his compositions.【在Mozart的作品中，结构和对称非常重要】</p>
</li>
</ul>
<p>[2020-02-08]</p>
<h4 id="Lecture-07-Harmony-Chords-and-How-to-Build-Them"><a href="#Lecture-07-Harmony-Chords-and-How-to-Build-Them" class="headerlink" title="Lecture 07 Harmony: Chords and How to Build Them"></a>Lecture 07 Harmony: Chords and How to Build Them</h4><p>介绍和声harmony和三和弦</p>
<ul>
<li><p>Introduction to Harmony</p>
<p>Harmony is one of the two things that really distinguishes the music of Western civilization — Western classical music, Western pop music，区分西方古典和流行的另一个, 是曲谱。</p>
<p>Harmony:</p>
<blockquote>
<p>this concept of superimposing multiple pitches【多个音重叠，很多人同时弹一个调？】</p>
</blockquote>
</li>
<li><p>The Formation and Changing of Chords<br>chords：和弦</p>
</li>
</ul>
<blockquote>
<p>a chord is just a simultaneous sounding of two or more pitches.【同时进行的两个或多个音】</p>
</blockquote>
<p>  chord可以是和谐的，也可以是不和谐的。consonant or dissonant.</p>
<p>  This lesson is working with consonant chords【和谐的和弦】</p>
<p>  最基础的和弦是三和弦 triad。</p>
<p>  So what’s a triad?</p>
<blockquote>
<p>a set of three notes  that can be stacked vertically in thirds.【from wiki】</p>
<p><strong>三</strong>个音按<strong>三</strong>度关系叠置。</p>
<p>同时按住白键CEG。【有点像Vim里面同时按住多个键……】</p>
</blockquote>
<p>   dominant and sub-dominant: 【这一节完全懵逼】</p>
<blockquote>
<p>The tonic is very important and this dominant — what we call the dominant. It’s not really the most important. <strong>It sort of leads into, pulls into — particularly important setting up the tonic.</strong> It’s the next important. Right below that is the sub-dominant. <strong>It often pulls into the dominant which then pulls into the tonic in that fashion.</strong></p>
</blockquote>
<p>  练习曲目： Johnny Cash’s Streets of Laredo</p>
<p>  why do we change chords?</p>
<blockquote>
<p><strong>we change chords to make the harmony consonant or to make the harmony harmonious</strong>.</p>
</blockquote>
<p>  聆听时的两个问题：</p>
<ul>
<li><p> Is the harmony changing?</p>
</li>
<li><p>And if it is changing, is it changing at a regular or irregular rate?</p>
<p>「By regular rate, every time a chord sounds it will be holding for exactly the same amount of time.」</p>
</li>
</ul>
<p>  answer: changing in regular rate</p>
<p>  练习曲目：教授自弹 Jingle Bells</p>
<p>  harmony 出现在低音bass 部分</p>
<p>  一段DVD视频，引入了 mystery bass player Peter Salovey.</p>
<blockquote>
<p>How are they doing this? <strong>They’re hearing the chords. They’re hearing tonic, subdominant and dominant, and I think we can hear them too.</strong></p>
<p>【期待我哪天也能听出来tonic, subdominant and dominant……】</p>
</blockquote>
<ul>
<li><p>Harmonic Progressions</p>
<p>the bass note is sort of the foundation and then you add these other things up above it, and they produce these chords and the chords are tonic and dominant and so on.</p>
<p>【在低音的基础上，加入和弦，构成tonic，dominant】</p>
<p>arpeggio： 琶音，一般是用竖琴弹奏琶音。【会弹竖琴的都是仙女！】</p>
<blockquote>
<p>taking the notes of the triad and just spinning them out in succession.</p>
<p>just a chord with the notes played successively to create an arpeggio.</p>
<p> 一串和弦组成音从低到高或从高到低依次连续圆滑奏出，可视为分解和弦的一种.</p>
<p>【有种大珠小珠落玉盘的感觉】 </p>
</blockquote>
<p>Alberti bass：</p>
<blockquote>
<p>阿尔贝蒂低音, 指的是分解和弦的各个乐音按照特定顺序演奏，通常依“最低、最高、中等、最高”的顺序。</p>
<p>It’s a good way of harmonizing something.</p>
</blockquote>
<p>boogie-woogie bass:</p>
<blockquote>
<p> a piano blues style from the early 20th century.</p>
<p>【Youtube上有教学boogie-woogie的视频，看着感觉弹起来手很疼……】</p>
<p>Beethoven在协奏曲中用到过。</p>
</blockquote>
<p> 赏析 J.S.Bach  prelude  to the first book of his “ Well-Tempered Clavier”：</p>
<blockquote>
<p>a succession of chords played as arpeggios</p>
</blockquote>
<p>大约140年后，19世纪的法国作曲家 Charles Gounod 为巴赫的这段prelude配上了melody。</p>
<p>【大提琴cello真的是超美，真的被The Swan惊艳到了，怪不得教授说 I’ve always said if I ever come back as a musical instrument I want to come back as a cello.】</p>
<p>major triad and  minor triad:</p>
<p>练习：Franz Liszt’s Lugubrious Gondola， focus on the change from one triad to the next.</p>
<p>低音部分，为琶音， just an arpeggio underneath。</p>
<p>练习：the “Moonlight Sonata” of Beethoven【贝多芬的月光协奏曲】</p>
<p>distinction between a major triad and a minor triad【这段完全没听懂，补】</p>
</li>
<li><p>Major and Minor Harmonies in Popular Music</p>
<p>练习： U2‘s Love is Blindness</p>
<p>ostinato harmony: from the Italian word <em>ostinare</em>, stubborn。【任何持续重复的因素，称为固定反复】</p>
<blockquote>
<p>when that pattern repeats</p>
</blockquote>
</li>
<li><p>Modulation through Harmony</p>
<p>modulation: the change from one tonality (tonic, or tonal center) to another.</p>
<p>练习： Aaron Copland‘s Appalachian Spring</p>
<p>Modulations are hard to hear. The best you can do is that oftentimes is say, “This is unsettled. Maybe it’s modulating,”</p>
<p>练习：Beach Boys‘  these California airheads.</p>
</li>
</ul>
<p>[2020-02-09]</p>
<h4 id="Lecture-08-Bass-Patterns-Blues-and-Rock"><a href="#Lecture-08-Bass-Patterns-Blues-and-Rock" class="headerlink" title="Lecture 08 Bass Patterns: Blues and Rock"></a>Lecture 08 Bass Patterns: Blues and Rock</h4><p>继续和声部分的理论知识，继续懵逼ing……</p>
<ul>
<li><p>Review of Chord Formation</p>
<p>三和弦 CEG，C 是 根音The root of the triad</p>
<p>tonic (I)</p>
<p>the dominant (V)</p>
<p>sub-dominant(IV): right next to and below the dominant</p>
<blockquote>
<p>a I chord built on the first degree of the scale,</p>
<p>a V chord built on the fifth degree of the scale,</p>
<p>a IV chord built on the fourth degree,</p>
<p>and a VI chord built on the sixth degree.</p>
</blockquote>
<p>When an orchestra plays or an ensemble plays and they’re  just playing individual notes that all together form a chord.</p>
<p>Question: Why do we change chords?</p>
<blockquote>
<p>Because the melody changes and not all harmonies are concordant with every note.</p>
</blockquote>
<p>这里，教授提到了pitch音高，感觉挺有意思。</p>
<p>什么情况下，pitch dissonant (音不和谐)？</p>
<p><strong>pitches that are right next to each other — very close to each other — are dissonant.</strong></p>
<p>The closer these pitches are together, the more likely they are to be dissonant.</p>
<p>所以弹CD会dissonant，弹CA就不会, because you allow a little separation between the two pitches, that makes them consonant, much better.</p>
</li>
<li><p>Chord Progressions and Harmonic Change</p>
<p>Chord Progressions： 和弦进行？</p>
<p>what is chord progression?</p>
<blockquote>
<p>A sequence of chords that sound good together, kind of make sense together.</p>
<p>They seem to be going somewhere and there’s this sort of force of pull or gravity in music having to do with some chords wanting to go to other chords.</p>
</blockquote>
<p>如何能听到这些chord？如何能听到chord progression？如何能听到和声？</p>
<blockquote>
<p>to get a sense of harmony we’re going to listen to the bass.</p>
<p>听低音部分，“下”到低音。</p>
</blockquote>
<p>听的时候，注意什么？</p>
<blockquote>
<p>figure out if the harmony is changing, and if it is changing whether it’s changing at a regular or irregular rate.</p>
<p>和声是否变化，变化是规律的还是不规律的？</p>
</blockquote>
<p>Almost all classical music involves irregular rates of harmonic change.</p>
<p>练习：Richard Wagner’s Ring Cycle 开头部分。</p>
<blockquote>
<p>Richard Wagner’s Ring Cycle： 尼伯龙根的指环，由瓦格纳作曲及编剧，整个于1848年开始创作，至1874年完成，历时共26年。</p>
<p>尼伯龙根的指环是一个由四部歌剧组成的系列，分别为：</p>
<ul>
<li><p>莱茵的黄金</p>
</li>
<li><p>女武神</p>
</li>
<li><p>齐格弗里德</p>
</li>
<li><p>诸神的黄昏</p>
</li>
</ul>
</blockquote>
<p>练习：Dave Matthews Ban的作品片段</p>
<p>练习：Mozart’s G Minor Symphony 【听起来应该是 Symphony no.40】</p>
<p>赏析：【不懂系列】</p>
<blockquote>
<p>At the beginning,  these chords are holding for four measures or a total of eight beats.</p>
<p>Then as it goes on,Then we’re getting two changes per beat.It’s getting faster and faster and faster.</p>
<p>The amount of time that each chord is holding is getting shorter and shorter and shorter as we drive into that cadence. cadence is simply the end of a musical phrase, particularly in this case the end of a chord progression, where we are at a point of arrival; the cadence brings us to a point of arrival. So that’s a piece of Mozart.</p>
</blockquote>
<p>练习：Beethoven‘s Symphony no.6, Pastoral Symphony【田园交响曲，田园牧歌】</p>
<p>赏析：</p>
<blockquote>
<p>He’s doing the opposite of what Mozart did. He’s trying to relax us here by slowing down the rate of harmonic change here. That held for about thirty seconds, that tonic chord.</p>
</blockquote>
</li>
<li><p>Popular and Classical Music Chord Progressions</p>
<p>流行音乐中的和弦进行。</p>
<p>What does pop music do for us that’s very helpful?</p>
<ul>
<li><p>regularity and repetition</p>
</li>
<li><p>most of the chords in rock music in particular tend to be <strong>root-position</strong> chords, and for that reason they’re easier to hear.</p>
</li>
</ul>
<p>练习：Badly Drawn Boy 的歌 【regular，two chords, 没听出来】</p>
<p>练习： Justin Timberlake 【regular，four chords, each chord was holding for two beats there in duple meter】</p>
<p>What’s the difference between pop and classical music?</p>
<blockquote>
<p>pop music tends to have simpler harmonies, and that those harmonies tend to be more repetitious, that they tend to have harmonies that have chords in root position.</p>
<p>We’ve got text in pop music that tells us what this music means. classical music, probably eighty-five percent of it, does not involve a text, and that’s a whole different ballgame because then <strong>you have to communicate meaning in a completely different sort of way</strong>.</p>
<p>pop music are much shorter.</p>
<p>Most classical music is written down.</p>
<p>The structure of a popular piece is often more predictable in pattern and verses and bridges and chorus whereas with classical music you really can’t predict what part of the movement you’re at.</p>
<p>classic music has the capacity for expansion.</p>
</blockquote>
</li>
<li><p>Three-Chord Progressions</p>
<p>练习：Beach Boys’s 歌片段，它是 Three-Chord Progressions， 和弦的顺序为 sub-dominant (IV), dominant (V), tonic (I)</p>
<p>练习：Beethoven‘s Symphony no.6 最后一个乐章</p>
<p>出场的乐器：单簧管Clarinet，法国号French horn</p>
<p>using the same three-chord chord progressions  in the Beach Boys.</p>
</li>
<li><p>Four-Chord Progressions</p>
<p>练习：Gene Chandler’s Duke of Earl</p>
<p>赏析：</p>
<blockquote>
<p>got four chords I, VI, IV, V, I, VI, IV, V  operating here and they’re changing regularly.</p>
<p>what happened in that middle section?</p>
<p>it went on and on and on, longer, longer, longer, then in that middle section each chord was changing at the rate of two measures. So the whole piece, then, would be a piece involving irregular rate of change.</p>
</blockquote>
<p>练习：Mozart’s Symphony No. 5 in B-flat, 低音部分同Gene Chandler’s Duke of Earl</p>
<p>练习：a passage of composer Gioachino Rossini‘s opera 【完全懵逼， 听懂的感觉一定很好玩吧？】</p>
<p>赏析：</p>
<blockquote>
<p>the first thing we got to do is sort of lock on to the tonic.</p>
<p>If you ever hear music rocking back and forth repeatedly between two chords, it’s probably tonic,  dominant, tonic, dominant.</p>
<p>It was  I, VI, IV, V, I progression.</p>
<p>what happened next was he then started to run that faster, twice as fast as it had been before, changing rate of harmonic pattern.</p>
<p>The end of that was all just the tonic. He just sat there on the tonic forever. It’s a good example of sort of real time and psychological time in music. You knew it was time to start clapping as soon as that chord hit that.</p>
</blockquote>
</li>
</ul>
<p>[2020-02-10]</p>
<h4 id="Lecture-09-Sonata-Allegro-Form-Mozart-and-Beethoven"><a href="#Lecture-09-Sonata-Allegro-Form-Mozart-and-Beethoven" class="headerlink" title="Lecture 09 Sonata-Allegro Form: Mozart and Beethoven"></a>Lecture 09 Sonata-Allegro Form: Mozart and Beethoven</h4><p>lecture 9~lecture 11， lecture13～lecture14 都是讲曲式的。</p>
<p>let’s  pursue the issue of musical form.</p>
<ul>
<li><p>Verse-Chorus Form in Popular Music</p>
<p>Form is particularly important in all types of music.</p>
<p>What’s the most common form that one encounters when dealing with pop songs?</p>
<blockquote>
<p>“verse and chorus” structure.  或教授的 “strophe and refrain” structure.</p>
</blockquote>
<p>Frederick Evans 举了NSYNC的“Bye Bye Bye” 说明流行音乐中的“verse and chorus” structure.</p>
<p>分析：</p>
<blockquote>
<p>It’s half of the chorus or so when it starts and then there’s verse, chorus, verse, chorus and then what I call the bridge, which is like an emotional climax. And then the last one is a really powerful chorus where they just bring it home and then the music fades away.</p>
</blockquote>
<p>这里，教授听“Bye Bye Bye” 后，提到了Lament bass悲叹低音。</p>
<blockquote>
<p>Google了下什么是Lament bass。【看不懂，先码上】</p>
<p>半音化四度（chromatic fourth，或 passus duriusculus）是一段横跨纯四度，并覆盖了这个四度中几乎所有半音程的旋律或旋律片段。</p>
<p>在巴洛克和古典主义时代的歌剧中，<strong>半音化四度常见于低音声部，被用在悲伤的咏叹调中</strong>。这种创作技法被称作“悲叹的低音（lament bass）”</p>
<p>在贝多芬的第9号交响曲第一乐章的倒数第二页的大提琴和低音提琴部分，可以找到半音化的四度。</p>
</blockquote>
<p>【byebyebye的bridge部分，感觉是竖琴弹出来的，Mark下。】</p>
</li>
<li><p>Introduction to Form in Classical Music</p>
<p>音乐中体裁genre和曲式form的区别：</p>
<p>genre 在音乐中，是simply musical type.</p>
<p>symphony，string quartet，concerto，ballet, opera，classical New Orleans jazz，Blues 等都属于 genre。</p>
<p>每一种体裁都是由乐章movement构成的，比如通常symphony有四个乐章，而concerto有三个乐章。</p>
<p>每一个movement 由特定的form构成。each of the movements is informed by a particular form。</p>
<p>以string quartet 弦乐四重奏为例：</p>
<blockquote>
<p>弦乐四重奏是一种音乐演奏形式，或是说一种音乐作品，由4把弦乐器负责，通常是2把小提琴，一把中提琴和一把大提琴。</p>
<p>通常是四乐章的作品，首尾两乐章通常是<strong>快板</strong>，中间的乐章，在古典四重奏中是慢板和舞曲（如小步舞曲或谐谑曲）。【快板- 慢板-舞曲-快板， fast, slow, minuet, scherzo, fast，有些类似交响曲】</p>
</blockquote>
<p>为什么音乐中需要form？</p>
<blockquote>
<p>When we’re hearing a piece of music and all this stuff is coming at us <strong>we want to make sense of it by knowing approximately where we are</strong>. Am I still toward the beginning? Am I in the middle of this thing? Am I getting anywhere near the end of it? How should I respond at this particular point?</p>
</blockquote>
<p>古典音乐中的6种form：</p>
<ul>
<li>ternary form 三段曲式</li>
<li>sonata allegro form 奏鸣曲式-快板</li>
<li>theme and variations 主题和变奏</li>
<li>rondo 回旋曲</li>
<li> fugue 赋格曲</li>
<li>ostinato 固定音型/固定低音</li>
</ul>
<p>其中， sonata-allegro is the hardest, the most complex, the most difficult of all of these forms.</p>
<p>通常奏鸣曲-快板 出现在 sonata, concerto, string quartet, symphony 等体裁作品的第一乐章。</p>
<p>slow movement， 则可能是 theme and variations 或者  rondo 或者  ternary form.</p>
<p>小步舞曲或谐谑曲几乎总是三段曲式 ternary form。</p>
<p>今天这堂课，我们学三段曲式和奏鸣曲-快板。</p>
</li>
<li><p>Ternary Form</p>
<p>以Beethoven’s “Für Elise”为例，介绍 Ternary Form。</p>
<p>三段式就是简单的ABA, statement, contrast, statement.</p>
<blockquote>
<p>simply the idea of presentation, diversion, re-presentation or statement, digression, restatement — anything like this.</p>
</blockquote>
<p>这里，介绍了一下  relative major and minor 的概念。【完全懵逼，后面过第二轮的时候，再好好理解下】</p>
</li>
<li><p>The Sonata-Allegro Form in Mozart’s “A Little Night Music”</p>
<p>奏鸣曲式-快板，主要包含三个部分：</p>
<ul>
<li><p>exposition 呈示部</p>
<p>细分为第一主题（主部）、连接部bridge、第二主题（副部）、結束部。</p>
</li>
<li><p>development 发展部</p>
<p>通常引申并进一步展开呈示部中的内容。</p>
<p>the most polyphonic of any section in the piece. There’s a lot of counterpoint usually to be found in the development section.</p>
</li>
<li><p>recapitulation 再现部</p>
</li>
</ul>
<p>另有：</p>
<p>结尾coda， 顾名思义，用来结束全曲。</p>
<p>Codas generally are very static harmonically.</p>
<p>Italian <em>coda</em> means tail, and these can be, like all tails, long or short. <strong>Mozart happened to like short codas. Beethoven liked longer codas.</strong></p>
<p>有的作曲家会在呈示部前面加上引子introduction。</p>
<p>以Mozart’s Eine kleine Nachtmusik 为例：</p>
<blockquote>
<p>又称“第13号小夜曲”，作品编号K.525</p>
<p>分四个乐章：</p>
<p>1    第一乐章：快板<br>2    第二乐章：浪漫曲（行板）<br>3    第三乐章：小步舞曲和中间乐段（稍快板）<br>4    第四乐章：回旋曲（快板）</p>
</blockquote>
<p>听第一乐章 奏鸣曲结构， a beautiful example of sonata-allegro form.</p>
<p>【赏析部分完全懵逼了，listening，just listening。】</p>
</li>
<li><p>The Sonata-Allegro Form in Beethoven’s Fifth Symphony</p>
<p>Beethoven’s Fifth Symphony 第五交响曲第一乐章。</p>
<p>赏析：【呈示部和发展部】</p>
<blockquote>
<p>exposition:</p>
<p>开头部分，没有引子no introduction.just starts off with his first motive there, a four-note motive.</p>
<p>随后bridge部分，连接部</p>
<p>You get a sense of moving from point A to point B or from first theme to second theme.</p>
<p>结束coda部分，法国号加入</p>
<p>随后，一个新的抒情主题加入，以小提琴开启。a new lyrical theme comes in</p>
<p>音越来越高，Building up dynamics and pitch.</p>
<p>在最后结束的时候，closing theme，用了 arpeggio 琶音。 是一个relative major，一个相对大三和弦。</p>
<p>注意听旋律，the closing theme ,  just a different configuration of that short, short, short long motive. 然后我们进入development。</p>
<p>development:</p>
<p>start with four-note motive.</p>
<p>then, modulates through different keys.</p>
<p>modulating to a higher key there.</p>
<p>then, begins to build up in terms of pitch, taking it up higher and higher and higher,  bring  full of tension, 贝多芬用了diminished triad来营造不安和紧张。</p>
<p>中间教授弹了一段 Mozart的K.545第一乐章的开头部分，哈哈，大饼练的那首，我竟然听出来了，开心！</p>
<p>then starts playing around with just two notes.</p>
<p>And then breaks it down to just one note, once again reaching for the essence here. That sounds like high, low, high, low.</p>
<p>and finally this sort of insistent motive  just breaks down the door and then the recapitulation can begin.</p>
</blockquote>
</li>
</ul>
<p>[2020-02-11]</p>
<h4 id="Lecture-10-Sonata-Allegro-and-Theme-and-Variations"><a href="#Lecture-10-Sonata-Allegro-and-Theme-and-Variations" class="headerlink" title="Lecture 10 Sonata-Allegro and Theme and Variations"></a>Lecture 10 Sonata-Allegro and Theme and Variations</h4><p>继续奏鸣曲式，主题和变奏。</p>
<p>这次请来了一位artist 做客，Kensho Watanabe，看出来教授很喜欢这个勤奋的小哥哥。</p>
<ul>
<li> Introduction</li>
</ul>
<p>  回顾上节课提到的，流行音乐中的 verse and chorus。</p>
<blockquote>
<p>basically, you have the same material; you have the same musical material coming back again and again and again. With the chorus we actually have the same text coming back again and again and again. But with the verses although the music is the same, the text keeps changing each time. We get new strophes — or new verses — of text. So keep that in mind: verse, chorus, verse, chorus. Sometimes this can start with the chorus. Sometimes there’s a harmonic change in here that we would call the bridge, but essentially it’s the repetition of the same material over and over again in terms of the music — but in terms of the text, you get new text each time for the verses.</p>
</blockquote>
<ul>
<li><p>Parts of the Sonata-Allegro Form</p>
<p>奏鸣曲式形成于18世纪，it’s something put together in some measure by Joseph Haydn and then passed on to his good friend, Wolfgang Amadeus Mozart.【由海顿传给他的忘年交Mozart】</p>
<p>因为后面教授计划安排学生们去听一场音乐会。第一个作品就是Mozart的，第一乐章便是奏鸣曲式，所以就继续讲奏鸣曲式。</p>
<p>【听音乐会之前，搞懂这些很有必要啊，不然真的是暴殄天物，而且大概率会听睡着了……】</p>
<p>继续上一个lecture，这里介绍了奏鸣曲的4个function types。</p>
<ul>
<li><p>thematic</p>
<p>开头presenting a theme，比如 Beethoven’s Fifth Symphony  开头，four-note motive后，呈现一个主题</p>
</li>
<li><p>transitional</p>
<p>从主题A 到主题 B，需要一个过渡。transition</p>
</li>
<li><p>developmental</p>
<p>对应着发展部</p>
</li>
<li><p>cadential</p>
<p>结束部。</p>
<p>where the composer will just throw on a lot of heavy, simple harmonic motion to slow the music down psychologically.</p>
</li>
</ul>
</li>
<li><p>Distinguishing Functional Types within the Sonata-Allegro</p>
<p>嗯，现学现用。在奏鸣曲中，区分四个functional types。</p>
<p>一段Mozart的pieces。</p>
<p>【这段值得反复听。】</p>
</li>
<li><p>Theme and Variations</p>
<p>主题和变奏。</p>
<p>主题一直在，只是有些变化而已。【归来仍是少年，哈哈】</p>
<blockquote>
<p> we will get that theme, get that theme again with something changed. Then we will get that material again with something changed. And again with something changed……</p>
</blockquote>
<p>教授给了一个隐喻来解释主题和变奏这种曲式。</p>
<p>类似铁路火车上的一系列棚车之类的东西，大小大致相同，但是每辆棚车的外观都会有些许不同。</p>
<p>一个主题越简单，就越有可能应用于主题和变奏曲式，也许是因为它使得作曲家拥有更多自由发挥的空间去进行变奏。</p>
<p>the simpler the theme, the more likely that theme is to become the basis of a set of theme and variations.Maybe it gives the composer more freedom to pursue variation.</p>
<p>来听 Beethoven’s  “God Save the King” 和 耶鲁自家的毕业生Charles Ives的作品Variations on America。</p>
<p>随后，练习 Mozart的小星星变奏曲。</p>
<p>赏析：</p>
<blockquote>
<p>in the first variation, Mozart is changing the theme. he’s sort of changing the theme by making the notes go quicker.</p>
<p>in the second variation, he is  changing the context.</p>
<p>And so on.</p>
<p>in the final variation, He’s just ornamenting a major triad so it’s a good — more cadential stuff — sort of very simple material at the end.</p>
</blockquote>
</li>
<li><p>Examining Theme and Variations in Corelli’s <em>La Folia</em></p>
<p> 邀请Kensho 一起合奏一曲。</p>
<p> Kensho Watanabe，the concert master of the YSO. also one of the conductors of the Berkeley Chamber Orchestra, 三岁开始拉小提琴，同时对绝对音高非常敏感【has a very keen sense of absolute pitch】，人群中万里挑一。【One person in ten thousand has this particular gift, statistically.】</p>
<p> 一段小提琴和钢琴的合奏， lovely。</p>
<p> 教授和Kensho 合奏的是 Corelli 的 La Folia,  Violin Sonata Op. 5 No. 12 in D Minor。</p>
<blockquote>
<p>Corelli：</p>
<p>是巴洛克时期最有影响力的意大利小提琴家和作曲家，他几乎只为弦乐器创作。在器乐领域里，占有很重要的地位，音乐史上人称“现代小提琴技巧创建者”及“大协奏曲之父”。</p>
<p>La Folia:</p>
<p>西班牙语，福利亚舞曲，一般以基础和弦进行上以变奏曲形式演奏。</p>
</blockquote>
<p> 共变奏13次。印象深刻的是教授让 Kensho 拉了一段用四指才能拉出来的和弦，说了一句：</p>
<p>  <strong>When he does it, you think it’s very simple, right, easy to do. It takes years to be able to do that.</strong></p>
<p> 【真正台上一分钟，台下十年功，敬佩】</p>
</li>
</ul>
<p>[2020-02-12]</p>
<h4 id="Lecture-11-Form-Rondo-Sonata-Allegro-and-Theme-and-Variations"><a href="#Lecture-11-Form-Rondo-Sonata-Allegro-and-Theme-and-Variations" class="headerlink" title="Lecture 11 Form: Rondo, Sonata-Allegro and Theme and Variations"></a>Lecture 11 Form: Rondo, Sonata-Allegro and Theme and Variations</h4><p>这节课主要的内容依然是曲式，回旋曲式， 主题和变奏。</p>
<p>先来了解下Johannes Brahms：</p>
<blockquote>
<p>约翰内斯·勃拉姆斯:</p>
<p>浪漫主义中期德国作曲家。生于汉堡，逝于维也纳。</p>
<p>维也纳的音乐领袖人物，创作许多钢琴曲、室内乐、交响乐及合唱曲。勃拉姆斯本身是炫技钢琴家，首演过许多自己的作品。勃拉姆斯也和当时不少杰出的音乐家一起合作，包括钢琴演奏家克拉拉·舒曼以及小提琴演奏家约瑟夫·约阿希姆。勃拉姆斯的很多作品已成为现代音乐会的主要曲目之一。勃拉姆斯是不妥协的完美主义者，曾毁掉他的部分作品．也有一些未发表的作品。</p>
<p>3B之一。另外两个：Bach， Beethoven</p>
<p>He’s a very serious composer. He takes everything very seriously.</p>
</blockquote>
<ul>
<li><p>Introduction to the Concert Program</p>
<p>concert 音乐会：Saturday 8:00 p.m at Battell Chapel</p>
<p>教授讲了下有关音乐会的事情，顺带布置了下作业 write a review for the concert。</p>
<p>concert 的三个作品名单：</p>
<ul>
<li>Mozart‘s The Marriage of Figaro</li>
<li>Johannes Brahms’s  variations on a theme by Joseph Haydn</li>
<li>Beethoven’s Pastoral Symphony</li>
</ul>
</li>
<li><p>Analysis of Theme and Variations as a Form in Brahms’s Composition</p>
<p>练习的曲目：variations on a theme by Joseph Haydn</p>
<p>曲子遵循的曲式结构：A B C B， or <strong>Antecedent, Consequent, Extension, Consequent</strong></p>
<p>pedal point:</p>
<blockquote>
<p>This is a device that derives from organ technique where an organist would just put his foot or her foot on a particular key and just hold it for a long time.</p>
<p>【从管风琴师那里延伸出来】</p>
</blockquote>
<p>hemiola：</p>
<blockquote>
<p>when you’re rolling in one of these and you suddenly shift to the other, back and forth.</p>
</blockquote>
<p>variation one:   solo部分的乐器是双簧管 oboe</p>
<p>variation five： so much syncopation. very fast</p>
<p>variation seven：结构 A C A</p>
<p>last variation: 【一如既往的懵逼】</p>
<blockquote>
<p>He’s got a theme and then he’s got what we call an ostinato in music.</p>
<p>here he’s making this more complicated rhythmically by not only using hemiola and syncopation, but also threes against twos simultaneously. He’s throwing in some triplets in the melody up above.</p>
</blockquote>
<p>最后结束部分是一个coda，本来声音越来越低，感觉应该是结束了，结果一声响，重新来了一次主题，最后结束。</p>
<p>if you don’t give the audience a coda, they’re expecting the next variation to begin. <strong>So you got to throw in that coda so that everybody knows, hey, that really was the end</strong> — no fooling.</p>
</li>
<li><p>Introduction to the Rondo</p>
<p> 回旋曲式：one big theme coming back again and again and again.</p>
<p>练习： Jean-Joseph Mouret‘s Rondeau Suite De Symphonies No. 1 in D</p>
<p>B部分用管风琴弹奏</p>
</li>
<li><p>Rondo in Vivaldi’s Spring Concerto and Mozart’s Horn Concerto</p>
<ul>
<li> Vivaldi’s Spring Concerto</li>
</ul>
<p>  回旋曲式</p>
<ul>
<li><p>Mozart’s Horn Concerto</p>
<p> Notice: each time the French horn plays the theme; then the orchestra repeats it。</p>
</li>
</ul>
</li>
<li><p>Rondo Form in Sting’s Music and Conclusion</p>
<p>展示了教授自己拍的一张照片，In France at the Chateau de Chambord，建筑风格类似回旋曲 A, B, A, C, A, B, A form。</p>
<p>练习： The Police’s Every Breath You Take， 从wiki上摘录下The Police 乐队的介绍：</p>
<blockquote>
<p>1977年在英国伦敦成立的三人摇滚乐队，由主唱史汀Sting、鼓手科普兰和吉他手萨默斯组成，曾六次获格莱美奖。最热门的两首作品：《every breath you take》，《wrapped around your finger》</p>
</blockquote>
</li>
</ul>
<p>[2020-02-14]</p>
<h4 id="Lecture-12-Guest-Conductor-Saybrook-Orchestra"><a href="#Lecture-12-Guest-Conductor-Saybrook-Orchestra" class="headerlink" title="Lecture 12 Guest Conductor: Saybrook Orchestra"></a>Lecture 12 Guest Conductor: Saybrook Orchestra</h4><p>这节课请来了Saybrook Orchestra的首席指挥家 Bradley Naylor, the principal violist Katie Dryden 和 the principal flutist  Elana Kagan。</p>
<p>整节课是为了周六晚上的一场Saybrook Orchestra的音乐会做准备。</p>
<p>【挺好玩的一节课，哈哈，喜欢教授对自己的那段调侃。】</p>
<ul>
<li><p>Introduction</p>
<p>当我们去评价一场古典音乐会的时候，哪些该做哪些不该做？</p>
<p>You do the following:</p>
<ul>
<li>How well did the performance go?</li>
<li>How did the players do?</li>
</ul>
<p>You don’t do the following:</p>
<ul>
<li>who the composer is.</li>
<li>when the piece was written.</li>
<li>the history of the piece, the historical context.</li>
<li>the meaning of the piece.</li>
</ul>
</li>
<li><p>Writing a Concert Review</p>
<p>Beethoven’s Pastoral Symphony:</p>
<blockquote>
<p>sort of an introduction, then an introduction to the birds of the forest in the second movement, a peasant romp in the third movement, a storm gathers in the fourth movement. That — we have an extra movement in this particular symphony because we’ve got Beethoven writing a bit of pictorial music here in the form of a fourth movement that’s a storm — and then a hymn of thanksgiving that plays out in, basically, a rondo-variation form there at the end.</p>
</blockquote>
<p>听贝多芬的作品时，需要知道什么呢？了解贝多芬本人。</p>
<p>在音乐会之前，你可以将要演奏的所有曲目都听一遍。</p>
<p>在听音乐会的间隙，可以记录下你的感受。</p>
<p>在结束后，写下你的review。</p>
<p>教授的建议是：<strong>the sooner you write your review after a performance the better.</strong></p>
</li>
<li><p>Rehearsing and Leading an Orchestra</p>
<p>Bradley Naylor 和教授的互动。</p>
<p>Bradley Naylor 自小加入合唱团choirs，现在是一名conductor，很早开始学钢琴。</p>
<p>这段教授和Bradley Naylor的一问一答还挺有意思的。有一段提到了Helmuth Rilling，德国指挥家，指挥三小时，不看曲谱，牛！</p>
<blockquote>
<p>Last year Helmuth Rilling, who is a famous German conductor, came and worked with some of the ensembles and did Mendelssohn’s <em>Elijah</em>, which is a huge romantic oratorio about two and a half hours long. The dress rehearsal — He came to the dress rehearsal, put his score down on the music stand, <strong>conducted for three hours, never opened it,</strong> and we were like, “Wow, this guy knows the score.”</p>
</blockquote>
<p>随后一群人玩了一个辨音的小游戏。</p>
</li>
<li><p>Viola Excerpts from the Concert Program</p>
<p>一场小型的音乐会，演奏 The Marriage of Figaro。</p>
</li>
<li><p>Balancing Solos in the Performance and Conclusion</p>
<p>the principal flutist Elana Kagan 表演了一段solo，Beethoven Pastoral Symphony second movement.【贝多芬田园交响乐第二乐章】</p>
<p>one more question from professor Wright:</p>
<p>Where should we sit?【去音乐会，我们坐哪里好呢？哈哈】</p>
<blockquote>
<p>Well, my favorite place to sit in concerts is somewhere where I can see that interaction between the different, I guess, gears in the machine, as you put it. So I would sit <strong>somewhere not directly behind the conductor</strong>, so <strong>somewhere where you can see the players ‘cause they’re the ones actually making the music.</strong>   — Bradley Naylor</p>
</blockquote>
</li>
</ul>
<p>[2020-02-15]</p>
<h4 id="Lecture-13-Fugue-Bach-Bizet-and-Bernstein"><a href="#Lecture-13-Fugue-Bach-Bizet-and-Bernstein" class="headerlink" title="Lecture 13 Fugue: Bach, Bizet and Bernstein"></a>Lecture 13 Fugue: Bach, Bizet and Bernstein</h4><p>这节课说赋格，牛逼闪闪的Bach, the master of the fugue.</p>
<p>Every educated person should know what a fugue is. 【I want to be an educated person😂】</p>
<ul>
<li><p>Introduction</p>
<p>教授介绍了fugue在文学，绘画等多个艺术领域的应用。</p>
<p>然后介绍了一本fugue方面的书，Douglas Hofstadter 的《 Gödel, Escher, Bach: an Eternal Golden Braid》  中文译名：《哥德尔、埃舍尔、巴赫：集异璧之大成》。</p>
<p>看了下，豆瓣评分9.5，该书获得普立兹奖。</p>
<p>看一下教授对这本书的读后感：</p>
<blockquote>
<p>I can follow about the first twenty-five or thirty pages or so. Then when it gets to the math it really gets over my head, but what it is is an attempt to <strong>use the fugue as a way of bringing a common mode of understanding to the visual arts, to mathematics and to music.</strong></p>
</blockquote>
</li>
<li><p>The Structure of Fugues</p>
<p>fugue的定义：</p>
<blockquote>
<p>A composition for two, three or four parts played or sung by voices or instruments which begins with a presentation of a subject in imitation in each part. The exposition continues with modulating passages of free counterpoint — the episodes — and further appearances of the subject, and ends with a strong affirmation of the tonic key.</p>
</blockquote>
<p>简单点的：</p>
<blockquote>
<p> they start out with one voice leading forward and then another voice imitates that voice exactly.</p>
</blockquote>
<p>如果 the following voice 从头到尾都跟 leading voice 一个调调的话，就不叫赋格，叫Canon,   one voice imitating the other exactly from beginning to end.</p>
<p>Fugue最少有两种voices，最多可有32种voices。</p>
<p>最知名的赋格集就是Bach的《The Well-Tempered Clavier》，Clavier 意为 keyboard，the well-tuned keyboard， 调好的键盘乐器？ 中文翻译成了《十二平均律》。</p>
<p>《The Well-Tempered Clavier》共有两本书，一本写于1722年，另一本完成于1742年，每一本中，都有24个 preludes 和 fugues 。</p>
<p>what’s a prelude?</p>
<blockquote>
<p>It’s just a warm-up piece, to just sort of get relaxed. You get to see your fingers, get a feel of the keyboard. <strong>a prelude, a pre play, a warm-up, and then we go on to the meat of the issue, which is the fugue.</strong></p>
<p>【有点类似运动前的热身，虽然懵逼，但不得不说，prelude真好听啊】</p>
</blockquote>
<p>fugue的结构：</p>
<blockquote>
<p>呈示部 exposition：</p>
<p>We have a leader and then a follower. And the follower duplicates the main idea, which we’re going to call th e subject, for a period of time, but then it kind of breaks off. So voices will come in and duplicate a certain amount of material and then break off and go their own way.</p>
<p>After all of the voices are in, we’re at the end of what we call the exposition of the fugue.</p>
<p>【注意区分奏鸣曲中的呈示部， 奏鸣曲中是 first theme and then second theme and closing theme， 而赋格则是只有一个主题，所有的voice都在各自的range 里 展示这个theme】</p>
<p>【从进程角度看，follower 是从 leader fork出来的，然后中断，开始了自己的旅途，能这么理解吗？】</p>
<p>After that we go to what’s called the “episode” of a fugue.【呈示部 结束后，便是episode 】</p>
<p><strong>Usually it modulates key</strong> and the vehicle through composers frequently modulate is melodic sequence, either up or down. You can kind of move around by using sequence. So it tends to be contrapuntal because it’s using little motives from the theme. It modulates, moves around a lot, goes to different keys, sounds a bit unsettled. <strong>these episodes in a fugue are sort of mini development sections.</strong></p>
<p>【类似奏鸣曲中的发展部】</p>
<p>Then the subject will come back in a new key because we’ve modulated in the episode, subject in just one voice, new key, then another episode in which there’s modulation, more counterpoint, more movement; another statement of the subject in a new key; another episode; another statement of the subject, and on it goes until  we have the sense, “oh, this is a very solid moment; yes, this fugue is ending.” And maybe they’ll throw upon one or — throw one or two chords on the end but that’s it.</p>
<p>【最后主题以发展部中modulated key返回，以一个或多个和弦结束】</p>
</blockquote>
<p>fugue 和 Canon都属于imitative polyphonic texture， 模仿的复调。</p>
<p> fugue 属于织体里面不那么严格的模仿的复调， 而卡农Canon 则是标准的模仿的复调，以一个主要声部开始，随后它被一个或更多的其他声部复制，跟随的声部完全准确地重复主要声部的主题。</p>
</li>
<li><p>Fugue Analysis in J. S. Bach’s Compositions</p>
<p>巴赫作品中的赋格分析。</p>
<p>作品：Bach fugue No.2 in C minor Well-Tempered Clavier Book I。</p>
<p>两种风格演绎 这段 fugue。Jazz 爵士 and Baroque 巴洛克风格</p>
<p>Jazz 版本里面，低音部分的乐器是低音提琴。</p>
</li>
<li><p>Fugue Structures in Excerpts of Bizet and Bernstein</p>
<p>通常情况下，fugue是单独的，独立的作品。但有时，赋格也可以加入到其他的曲式中，这种手法称之为fugato.</p>
<p>fugato：</p>
<blockquote>
<p>在另一种曲式中加入fugue，称之为fugato， a fugato is a fugue placed inside another form.</p>
<p>比如在奏鸣曲式的发展部中，加入一段fugue。</p>
</blockquote>
<p>这里，选取了Georges Bizet 和 Bernstein 的赋格片段。</p>
<p>Georges Bizet ：</p>
<blockquote>
<p>乔治·比才，法国作曲家。著名的作品包括歌剧《卡门》、戏剧配乐《阿莱城的姑娘》等。</p>
</blockquote>
<p>练习的曲子是Georges Bizet 的 Symphony in C Major 中的一部分。</p>
<p>教授对这段曲子的评价：There’s a lovely romantic string sound, <strong>sort of break-your-heart string sound</strong>.</p>
<p>赏析：</p>
<blockquote>
<p>We’ve got a four-voice fugue that’s going to start here.</p>
<p>辨别出四个voice the bass, tenor, soprano, alto 低音，次中音，高音，中音 的出场顺序。</p>
<p>˙正确的顺序：bass， alto，tenor，soprano 【低音，中音，次中音，高音】</p>
</blockquote>
<p>Leonard Bernstein：</p>
<blockquote>
<p>伦纳德·伯恩斯坦，犹太裔美国作曲家、指挥家、作家、音乐教育家、钢琴家。</p>
<p>1989年12月23日和12月25日是他永远被值得纪念的两天，伯恩斯坦在钢琴家尤斯图斯·弗朗茨的邀请下到柏林指挥贝多芬第九交响曲，地点分别是柏林爱乐厅和柏林音乐厅，由Unitel摄影。当时正值柏林墙倒下，伯恩斯坦将交响曲中席勒的《欢乐颂》改为《自由颂》。伯恩斯坦对此说道：“<strong>我肯定，贝多芬会同意咱们这么做的</strong>”。超过20个国家，一亿人通过电视转播收看了这场音乐会。</p>
<p>特意找了下，Youtube上有视频，不是高清，但不影响观看，贴上 <a href="https://www.youtube.com/watch?v=IInG5nY_wrU">The Berlin Celebration Concert - Beethoven, Symphony No 9 Bernstein 1989</a>.  Enjoy the Berlin Freedom concert.</p>
<p>【陡然觉得，生在这样的时代，真是莫大的幸福，那么多前人优质的作品，都触手可及，满满的感恩。】</p>
</blockquote>
<p>赏析Leonard Bernstein’s Prelude, Fugue, and Jazz Riff 的fugue部分：【除了萨克斯，其他继续懵逼……】</p>
<blockquote>
<p>演奏乐器：Saxophones 萨克斯</p>
<p>We have a moment of melodic inversion.【转位】</p>
<p>what we’re about to hear next is something of a surprise because <strong>we get a second fugue subject</strong>. And <strong>it’s a different fugue subject; it is not syncopated. It’s rather lyrical .</strong></p>
<p>So what we have here is called a <strong>double-fugue</strong>. He’s got one exposition with one fugue subject. Now he’s going to give us a completely different exposition with yet a second fugue subject, and then number one comes back.</p>
<p>You can design a fugue subject, not only that it could go upside down, but in which the intervals instead of coming in long succession could be piled right on top of one another.</p>
<p> The intervals back up on each other because they have been arranged to be consonant at key points and that’s called <em>stretto</em>, Italian word <em>stretto</em>, kind of tight — tight entries here. So here is fancy little bit of counterpoint by Leonard Bernstein that once again goes by very quickly.</p>
<p>Now he’s going to bring back the two subjects together.</p>
<p>So it’s a pretty nifty little fugue there by Leonard Bernstein with lots of intricate counterpoint involved in it.</p>
</blockquote>
<p>随后，是一段 Bach的fugue，3分22秒，用管风琴organ弹奏。</p>
<p>欣赏这段fugue的时候，教授把灯关了，要求学生们闭上双眼，放松去听，听到fugue里面的subject时，举手示意。【我很怀疑当时底下有没有学生睡着了，不过这么好听的管风琴，应该没人舍得睡……】</p>
<p>【呃，如果我没有听错，这里教授放的应该是Fugue in G Minor, BWV 578】</p>
<p>听fugue时，只要做一件事：</p>
<blockquote>
<p><strong>Differentiating between a passage in which you’ve got a statement of the subject and an episode where there ain’t no statement of the subject.</strong> 【找到subject和episode】</p>
</blockquote>
<p>赏析：</p>
<blockquote>
<p>we’ve gone soprano, alto, tenor and now bass.</p>
<p> It’s in one of those inner voices.</p>
<p> It’s a little bit disguised but it’s in there.</p>
<p>Yep, way down in the bass.</p>
<p> A nice, long sequence here.</p>
<p>so episode.</p>
<p>Yep, all the way up on top in the soprano.</p>
<p>Another episode, descending sequence this time.</p>
<p>Rising sequences here,  falling sequences in the bass.</p>
</blockquote>
<p>最后课堂的结尾，播放了由 Glenn Gould 格连·古尔德弹奏的巴赫的fugue，边唱边教你如何写fugue：P。</p>
</li>
</ul>
<p>[2020-02-16]</p>
<h4 id="Lecture-14-Ostinato-Form-in-the-Music-of-Purcell-Pachelbel-Elton-John-and-Vitamin-C"><a href="#Lecture-14-Ostinato-Form-in-the-Music-of-Purcell-Pachelbel-Elton-John-and-Vitamin-C" class="headerlink" title="Lecture 14 Ostinato Form in the Music of Purcell, Pachelbel, Elton John and Vitamin C"></a>Lecture 14 Ostinato Form in the Music of Purcell, Pachelbel, Elton John and Vitamin C</h4><p>最后一个曲式：ostinato form， 固定音型/固定反复/固定低音</p>
<ul>
<li><p>Review of Musical Forms</p>
<p>教授提了下下周二的考试。【嗯，我考肯定挂科……】</p>
<p>然后提了下，下周六的音乐会 The Jonathan Edwards Orchestra 。</p>
<p>The Jonathan Edwards Orchestra is going to be performing at Battell and they’ll be doing the Beethoven Eighth Symphony and when you go there you’re going to have four movements in the Beethoven Eighth Symphony. 【贝八交响曲】</p>
</li>
<li><p>Multiple Themes within Beethoven’s Third Symphony</p>
<p>Beethoven’s Third Symphony， 又称 Eroica Symphony，英雄交响曲。这里的英雄原型指的是拿破仑Napoleon。后面贝多芬知道拿破仑加冕成皇帝后，很生气，知道他将会和其他人一样，成为一名独裁者，他愤怒地把这个谱子撕破了。【哈哈，贝多芬挺可爱。】</p>
<blockquote>
<p>降E大调第三交响曲“英雄”:</p>
<p>该作品是交响曲历史上的里程碑式作品，规模宏大、充沛有力、情感丰富、结合了诗意和力量，极具独创性，在当时不受观众接受和欢迎；但却是贝多芬最为钟爱的作品之一。</p>
<p>贝多芬早在1789年时就有写作一部英雄气概交响曲的想法，但并没有落到笔头。贝多芬于1801年觉察到自己的耳聋，并在翌年夏搬至海利根斯塔特以躲避维也纳的气候。在那里贝多芬写下了著名的海利根斯塔特遗书。他甚至想自杀，但“我的艺术把我拉回来”。在这一阶段，贝多芬作出了该交响曲，也表达了其内心的奋斗历程。这首交响曲从1803年5月正式开始创作，作品完成是在1804年的年初。</p>
</blockquote>
<p>练习Beethoven’s Third Symphony finale 终曲中的主题和变奏，赋格。</p>
<p>赏析：</p>
<blockquote>
<p>Beethoven’s got a fugato in there, he’s got sections that sound like transition out of sonata-allegro form, and he’s working with two themes.</p>
<p>在fourth variation中，贝多芬加入了fugue，使用了 fugato，其中赋格部分，voice的出场顺序是soprano, alto, tenor and then bass.</p>
</blockquote>
</li>
<li><p>The Ostinato Form in Purcell’s Opera</p>
<p>Ostinato曲式：</p>
<blockquote>
<p>It’s something that happens again and again and again, just sort of obsessive-compulsive disorder applied to music.</p>
</blockquote>
<p>最典型的例子就是 Maurice Ravel‘s Bolero。</p>
<p>It’s <em>ostinato</em> in every way in the sense that the melody keeps repeating over and over again for fourteen minutes. 【melody一直不断重复，可是听的时候一点儿都不觉得枯燥，反而很舒服😌】</p>
<p>插播一段Maurice Ravel 的介绍：</p>
<blockquote>
<p>约瑟夫-莫里斯·拉威尔，法国作曲家和钢琴家。是法国乐坛中与克劳德·德彪西齐名的印象乐派作曲家。</p>
<p>他的音乐以<strong>纤细、丰富的情感和尖锐</strong>著称，同时也被认为是二十世纪的主要作曲家之一。</p>
<p>早年的拉威尔和德彪西有着密切的交往，德彪西的印象派作曲手法很自然就深入到拉威尔初期的创作中。到了后期，特别是第一次世界大战以后，拉威尔更倾向于明确的音乐语言，与那种晦暗的乐句划清界限。</p>
<p>拉威尔自评：“严格的说，我不是一个‘现代作曲家’，因为我的音乐远不是一场‘革命’，我只是一场‘进化’。虽然我对音乐中的新思潮一向是虚怀若谷、乐于接受的，但我从未企图屏弃已为人们公认的和声作曲规则。相反，<strong>我经常广泛地从一些大师身上吸取灵感（我从未中止对莫扎特的研究），我的音乐大部分建立在过去的传统上，并且是它的一个自然的结果。我不是一个擅长写那种过激的和声与乱七八糟的对位的‘现代作曲家’，因为我从来不是任何一种风格的奴隶，我也从未与任何特定的乐派结盟</strong>。”</p>
<p>【才知道 Maurice Ravel 原来同 Debussy一样，同属印象派啊，怪不得曲子听着那么舒服。】</p>
</blockquote>
<p><strong>every aspect of  melody, rhythm and harmony  is controlled by this ostinato procedure.</strong></p>
<p>从巴洛克时期开始 Ostinato曲式 的学习。</p>
<p>ostinato 总是出现在低音部分。when you get an <em>ostinato</em> it’s applied to the bass.</p>
<p>练习：巴赫的 passacaglia C Minor, BWV 582，这里选取了管风琴了片段。</p>
<p>随后的练习取自 Henry Purcell的歌剧 Dido and Aeneas 狄朵与埃涅阿斯。</p>
<p>Henry Purcell：</p>
<blockquote>
<p>亨利·珀塞尔, 巴洛克时期的英格兰作曲家，吸收法国与意大利音乐的特点，创作出独特的英国巴洛克音乐风格。</p>
<p>他被认为是英国最伟大的作曲家之一，独霸乐坛两百年。【江山代有才人出，各领风骚数百年……】</p>
</blockquote>
<p>Dido and Aeneas：</p>
<blockquote>
<p> 狄朵与埃涅阿斯:</p>
<p>三幕歌剧。</p>
<p>该歌剧取材于维吉尔的史诗“埃涅阿斯纪”，演绎了北非女王狄朵和特洛伊英雄埃涅阿斯的爱情悲剧。</p>
</blockquote>
<p>练习部分为Dido’s Lament， 是女主狄朵以为自己被埃涅阿斯抛弃而深感悲痛。</p>
<p>狄朵的唱段《当我躺在尘土之下时》（When I am laid in earth），是音乐历史上最著名的“哀歌” 之一。</p>
<blockquote>
<p>it’s built on an <em>ostinato</em> bass line. it just keeps recycling over and over and over again.  【低音部分反复】</p>
</blockquote>
</li>
<li><p>The Pachelbel Canon and Conclusion</p>
<p>引入 Elton John‘s Sorry Seems To Be The Hardest Word. 【好悲的曲子】</p>
<p>教授说， Elton John has stolen Pachelbel bass line。在《Sorry Seems To Be The Hardest Word》的副歌部分，Elton John  使用了Pachelbel bass line 帕赫贝尔卡农低音线。</p>
<p>What’s the most famous <em>ostinato</em> bass of all time?</p>
<p>最出名的固定低音是 The Pachelbel bass.</p>
<p>There’s an irony with the “Pachelbel Canon” and that is that you never hear the canon in the “Pachelbel Canon.”</p>
<p>Johann Pachelbel:</p>
<blockquote>
<p>约翰·帕赫贝尔，德国著名巴洛克时期作曲家、管风琴家，先后曾在许多地方担任过管风琴师的职位。巴赫的哥哥就曾在他门下学习。</p>
<p>《D大调卡农》是约翰·帕赫贝尔最著名的曲子之一。以三部小提琴间隔两小节演奏一首完全相同的曲调，工整精致，“卡农”并非曲名，而是一种曲式，字面上意思是“轮唱”，简单的讲，就是有数个声部的旋律依次出现，给人绵延不断的感觉。</p>
</blockquote>
<p>练习：Pachelbel Canon in D major</p>
<p>赏析：</p>
<blockquote>
<p>he’s got these three canonic lines — the three staves up above — all in the same register, and when people record this they always do it with the same instrument, usually just with a violin, so we have the violins up above, <strong>three violins all playing in the same register.</strong> You can’t pick out the canon. It just sounds like this unfolding jumble. It’s a very beautiful jumble but it’s indistinctive in that sense. 【一片混沌，无法分辨， You can’t pick out the canon，所以人们说在Pachelbel Canon中，听不到Canon】</p>
</blockquote>
<p>最后散场播放 Vitamin C 的Graduation，这首歌使用了帕赫贝尔卡农低音线。</p>
</li>
</ul>
<p>[好久没更了，2月走的真快]</p>
<p>[2020-02-28]</p>
<h4 id="Lecture-15-Gregorian-Chant-and-Music-in-the-Sistine-Chapel"><a href="#Lecture-15-Gregorian-Chant-and-Music-in-the-Sistine-Chapel" class="headerlink" title="Lecture 15 Gregorian Chant and Music in the Sistine Chapel"></a>Lecture 15 Gregorian Chant and Music in the Sistine Chapel</h4><p> 从 lecture 15开始，进入了这系列课程的第三部分，介绍各个时期的音乐历史。</p>
<p>总览：</p>
<p>Medieval：中世纪音乐（476～1450）</p>
<p>Renaissance：文艺复兴时期音乐（1450～1600）</p>
<p>Baroque：巴洛克时期音乐（1600～1750）</p>
<p>Classical：古典主义时期音乐（1750～1820）</p>
<p>Romantic：浪漫主义时期音乐（1820～1900）</p>
<p>Modernism：现代音乐（1880~至今），包括 Impressionist印象主义，代表人物 Debussy ，Ravel 和 Post-Modernist 后现代音乐/流行音乐。</p>
<p>lecture 15 介绍中世纪音乐。</p>
<blockquote>
<p>中世纪：</p>
<p>(公元5世纪-公元15世纪）始于西罗马帝国（公元476年）的灭亡，终于东罗马帝国（公元1453年）的灭亡。中世纪历史自身也可分为前、中、后期三段。</p>
<p>中世纪的社会主要是农业社会，宗教是以修道院和修女院为中心的。人们的生活限定在劳动和祷告上，为生存而劳动，为拯救灵魂而祷告。</p>
<p>宗教仪式通常从黎明前就开始，清晨做的叫“晨祷”，黄昏时做的叫“晚祷”，每天最重要的仪式是 弥撒（Mass)，大约在9:00 AM开始，是对耶稣最后的晚餐的一种象征性再现。</p>
<p>【那个时代的生活很平静啊】</p>
</blockquote>
<p>不得不说，看教授披着一身黑色袍子出现在课堂时，真的有些中世纪的味道……【后面知道教授原来是为万圣节而特意穿成这样的，哈哈】</p>
<p>好，开始穿越！</p>
<ul>
<li><p>Gregorian Chants in the Medieval Period</p>
<p>中世纪的音乐 Gregorian Chants 格里高利圣咏。</p>
<p>介绍罗马天主教堂音乐。</p>
<p>What is Gregorian chant?</p>
<blockquote>
<p>Gregorian chant is the <strong>monophonic, one-line music</strong> — monophonic, one-line music of the Roman Catholic Church as it existed from the time of the earliest church fathers up until the time of the Council of Trent.【织体为单声调】</p>
</blockquote>
<p>Gregorian chant 以 教皇格里高利命名，但格里高利圣咏与教皇格里高利没有毛线关系。「Gregorian chant had almost nothing to do with Gregory.」</p>
<p>What’s the purpose of Gregorian chant?</p>
<blockquote>
<p>two things.</p>
<ul>
<li>it communicated the message of the church.【传达教会的信息，即传递神的旨意】</li>
<li>Chant also allowed for a period of reflection upon the subject of the preceding reading.【对前一个主题进行反思，引发人们思考】</li>
</ul>
</blockquote>
<p>教授有一本梵蒂冈的歌集，唱了一段。</p>
</li>
<li><p>Religious Influence on Early Music: The Roles of Monks and Nuns</p>
<p>宗教对早期音乐的影响。</p>
<p>Where was chant sung? 【圣咏一般在哪里唱？】</p>
<blockquote>
<p>early on chant was sung not so much in what we would call public churches but more in sequestered — usually rural — monasteries, religious communities segregated by gender — what, specifically, we would call monasteries for men and convents or nunneries for women.</p>
<p>【修道院和修女院】</p>
</blockquote>
<p>教授介绍了一本书，好小好mini，《the Rule of Saint Benedict》《圣本笃院规》，内容是教导神职人员如何度过一天。【清教徒的生活】</p>
<p>Yale大学的社区也提供类似的服务，估计类似冥想的地方吧。</p>
<p>It’s just a lovely time for peace and quiet and reflection.</p>
<p>教授讲述了他曾在巴黎南边的Solesmes待过10天，学习Gregorian Chant的经历。</p>
<p>【整个经历让我想起之前看过一篇说禅修的。】</p>
<blockquote>
<p>You’re assigned a room, In that room you have a light bulb, you have a desk, you have a bed, some fruit. You have no radio. You have no clock, no television, and certainly no cell phone!</p>
<p>in order to be in this monastery you are required to attend all of these canonical hours.</p>
</blockquote>
<p>典型的中世纪教堂里面，教授推荐法国的沙特尔大教堂 Chartres。【码上！！】</p>
<blockquote>
<p><strong>沙特尔圣母主教座堂</strong>:</p>
<p>位于法国巴黎西南约70公里处的沙特尔市。据传圣母马利亚曾在此显灵，并保存了马利亚曾穿着的圣衣，沙特尔因此成为西欧重要的天主教圣母朝圣地之一。1979年10月26日世界遗产委员会第3届会议起列入世界文化遗产。</p>
</blockquote>
<p>教授的五星推荐：</p>
<blockquote>
<p>If you have one cathedral to go to, I strongly — and I think I’ve been to all — I know that I’ve been to all the big ones in France — urge you to go to Chartres for several reasons.</p>
<p>First of all, it has the most pristinely preserved town around the back of the church.</p>
<p>It has the widest nave of any of these gothic cathedrals.</p>
</blockquote>
</li>
<li><p>Chant Analysis of Hildegard von Bingen’s “O Greenest Branch”</p>
<p>介绍Hildegard：</p>
<blockquote>
<p>圣希尔德加德·冯·宾根（天主教译圣贺德佳，圣公会译圣希尔德格，德语：Hildegard von Bingen，拉丁文作Hildegardis Bingensis，1098年－1179年9月17日），又被称为莱茵河的女先知（Sibyl of the Rhine） 。</p>
<p>中世纪德国神学家、作曲家及作家。天主教圣人、教会圣师。她担任女修道院院长、修院领袖，同时也是个哲学家、科学家、医师、语言学家、社会活动家及博物学家。</p>
<p>希尔德加德约有80首音乐作品留存下来，数量远超过绝大多数的中世纪作曲家，其中最为人熟知的是宗教剧（liturgical drama）〈美德典律〉（Ordo Virtutum）。</p>
<p>希尔德加德逝世后被教廷封为圣人，2012年又被追赠教会圣师称号，是天主教会史上第四位女性圣师。</p>
</blockquote>
<p>看得出来，教授很欣赏她。</p>
<blockquote>
<p>Her texts are the most startling, her imagery the most vivid, the most graphic, <strong>indeed the most beautiful.</strong></p>
<p>In her own musical creation, with regard to them, she styles herself simply a breath — a “feather on the breath of God.” What an interesting metaphor but very appropriate for this very modest individual.【呃，上帝气息上的一根羽毛？！】</p>
</blockquote>
<p>练习：Hildegard’s “O Greenest Branch”</p>
<p>聆听 Anonymous Four 演唱的Hildegard 的作品，圣咏歌词如下：</p>
<blockquote>
<p>拉丁文：</p>
<p>O rubor sanguinis,</p>
<p>qui de excelso illo fluxisti,</p>
<p>quod divinitas tetegit,</p>
<p>Tu flos est,</p>
<p>quod hyems de flatu serpentis numquam lesit.</p>
<p>英文翻译：</p>
<p>O redness of blood, 【鲜红的圣血】</p>
<p>that flow down from heaven, 【从天堂落下】</p>
<p> which divinity touched, 【犹如神性的触碰】</p>
<p>You are the flower,【你似花般绚烂】</p>
<p>the wintry breath of the servant — serpent will never wound. 【似诡诈之人的呼吸般冷漠，谁也伤不了你】</p>
</blockquote>
<p>【歌很空灵，很好听，不过穿一身黑袍的教授让人觉得很出戏，好像魔法学院……】</p>
<p>在现代，格里高利圣咏并没有衰落，反而焕发生机。</p>
<p>Chant 圣咏和 Beethoven 的音乐非常不同：</p>
<blockquote>
<p>Chant is the very opposite of the music of Beethoven.</p>
<p><strong>Beethoven tries to convince you to feel a particular way about every moment, every measure, in his music.</strong> It is very much rhetorical music.</p>
<p>Chant, on the other hand, you can take on your own terms. It is non-authoritarian. It is non-assertive, non-aggressive. It floats unfettered.</p>
<p>【不强势，不绝对，不侵略，自由自在，无拘束】</p>
</blockquote>
</li>
<li><p>From Monophony to Polyphony: A Cappella of the Sistine Chapel</p>
<p>从单声调到复调。</p>
<p>早期的复调音乐，教堂音乐，称为organum [平行复音]， 起源于法国的哥特式大教堂，特别是巴黎圣母院Notre-Dame of Paris。</p>
<blockquote>
<p> all cathedral organum was built upward above a pre-existing chant, above a pre-existing Gregorian chant.【建构在已有的圣咏上】</p>
<p>The composer took the chant and placed it in the bottom voice and then added other voices up on top of it to form a counterpoint against it.</p>
</blockquote>
<p>练习：一段中世纪的平行复音 medieval organum。</p>
<p>来看文艺复兴古罗马时期的音乐，特别是The Sistine Chapel 西斯廷教堂的音乐。</p>
<blockquote>
<p>The Sistine Chapel was the most famous of all churches in the late fifteenth and early sixteenth centuries, the core of the Renaissance. 【西斯廷教堂是15世纪晚期到十六世纪早期最出名的教堂，文艺复兴时期的中心】</p>
</blockquote>
<p>米开朗基罗参与了圣彼得教堂的设计，不是西斯廷，西斯廷教堂的旁边就是圣彼得教堂。</p>
<p>为建造西斯廷教堂，教皇请来了当时最好的画家，最好的作曲家。</p>
<p>当时请的作曲家为 Josquin des 和  Giovanni Pierluigi da Palestrina.</p>
<blockquote>
<p>Josquin des:</p>
<p>若斯坎·德普雷（1450年到1455年之间－1521年8月27日），又作Josquin Desprez，简称常作Josquin（若斯坎），法国-弗莱芒作曲家，文艺复兴时期最杰出的音乐家之一。</p>
<p>Giovanni Pierluigi da Palestrina:</p>
<p>乔瓦尼·皮耶路易吉·达·帕莱斯特里纳（1525年－1594年2月2日），为意大利文艺复兴后期的作曲家，也是十六世纪罗马乐派的代表音乐家。由于帕莱斯特里纳在教会音乐中有很深的造诣，因此称为“<strong>教会音乐之父</strong>”，后来也认为是文艺复兴时期最杰出的作曲家之一，其作品是文艺复兴时期复音音乐的经典之一。</p>
</blockquote>
<p>没有任何乐器伴奏的歌唱，称为清唱，又称为西斯廷教堂唱法<em>a cappella Sistina</em>。</p>
<p>呃，教授介绍了中世纪为了解决一类为了保持尖细高音，而年幼被阉割的男性，最热衷此行为的是天主教会，还好还好，1903年，这种行为已经被禁止。</p>
<p>然后放了一段由 最后的阉伶歌手 Alessandro Moreschi 歌唱圣母颂 Ave Maria 的片段。</p>
<p>随后的练习来自 Palestrina 在1590年左右为西斯廷教堂写的弥撒。</p>
<blockquote>
<p>Palestrina has taken a piece of chant, slightly — indeed what it was an old hymn, a monophonic hymn — slightly animated the line through the addition of simple rhythmic values, and placed it in four voices so as to amplify the sense. Four voices could do more to amplify the sense of the chant.</p>
</blockquote>
</li>
<li><p>Conclusion</p>
<p>回到沙特尔大教堂（幻灯片），播放由 Bishop Fulbertus 福伯图斯主教 作曲的曲子，Sit back, relax。</p>
</li>
</ul>
<p>[2020-03-03]</p>
<h4 id="Lecture-16-Baroque-Music-The-Vocal-Music-of-Johann-Sebastian-Bach"><a href="#Lecture-16-Baroque-Music-The-Vocal-Music-of-Johann-Sebastian-Bach" class="headerlink" title="Lecture 16 Baroque Music: The Vocal Music of Johann Sebastian Bach"></a>Lecture 16 Baroque Music: The Vocal Music of Johann Sebastian Bach</h4><p>巴洛克时期的音乐。</p>
<ul>
<li> A Brief Biography of J. S. Bach</li>
</ul>
<p>  巴赫生平简介。</p>
<p>  巴赫家祖上十代都是音乐家，ten generations of Bachs were musicians.</p>
<p>   1685年，巴赫出生，9岁时，父母双亡，成为孤儿，由他的兄长Johann Christoph Bach抚养长大。</p>
<p>  巴赫的音乐教育基本来源于自学。**for the most part, J.S. Bach was self-taught.**【果然，大牛都爱自学】</p>
<p>  巴赫是如何自学的？</p>
<blockquote>
<p>he copied music.【这里的copy music 是手抄乐谱，嗯，这倒是跟苏东坡的方法挺像的】</p>
<p>He copied music for two reasons：</p>
<ul>
<li>to learn the musical style</li>
<li>to get music</li>
</ul>
<p>那么， Bach 抄谁的？</p>
<p>Corelli。【前面lecture11 提到过他的作品La Folia《福利亚变奏曲》】</p>
<p>小 Bach 有多勤奋呢？</p>
<p>oftentimes surreptitiously by moonlight when he was supposed to be in bed.</p>
<p>【别人睡觉的时侯他在学习……】</p>
<p>Bach 求学的时候，为了向一位著名的管风琴师及音乐家学习，会徒步往返于两个城市之间。</p>
<p>walked from Arnstadt in the center part of Germany all the way up to the Hanseatic city of Lubeck on the North Sea up there, a distance of about two hundred fifty miles, in order to be able to sit at the feet of a very famous organist and composer there in Lubeck, and then he walked back.</p>
<p>【有种武侠片里面，跋山涉水拜名师的感觉……】</p>
</blockquote>
<p>  1708～1717年，Bach在Weimar 做管风琴师。1717年他打算离开 Weimar时，因未得到公爵的允许而辞职， 被他的雇主Duke Wilhelm 送进了监狱，据说就是在狱中，Bach 开始了《Well-Tempered Clavier 》的创作。</p>
<p>  1723 年，Bach 去了Leipzig，然后在那里度过了余生。</p>
<p>  欣赏： Bach Sanctus of the B Minor Mass， B小调弥撒圣咏</p>
<p>  值得一提的是，Bach在他那个时代并没有受到如今这般的高度推崇。</p>
<p>  Bach in his day was recognized and valued not so much as a composer but as a performer.</p>
<ul>
<li><p>Bach’s Music and Characteristics of Baroque Style</p>
<p>Bach的主要作品：</p>
<p>J.S.Bach The Art of the Fugue《赋格的艺术》:</p>
<blockquote>
<p>BWV 1080，是巴赫(1685-1750)的一部未指定乐器的未完成杰作.</p>
<p>除了最后的赋格以外，全部的赋格都用到一个简单的D小调的主题.</p>
</blockquote>
<p>J.S.Bach Mass in B minor《B小调弥撒曲》：</p>
<blockquote>
<p>BWV232，是巴赫所写成的一首大篇幅拉丁弥撒套曲。创作时间经历25年。</p>
<p>最先完成的可追溯至1724年，最后于作曲家去世前一年（即1749年）才被编成现时的样式。</p>
<p>《B小调弥撒》被认为和《赋格的艺术》属于同一个范畴，即巴赫毕生对声乐的深刻探索的总结。它被认为是古典音乐的一个高峰。</p>
</blockquote>
<p>J.S.Bach Brandenburg Concertos 《勃兰登堡协奏曲》：</p>
<blockquote>
<p>德国作曲家约翰·塞巴斯蒂安·巴赫的一套管弦乐组曲，属于当时流行的大协奏曲体裁，一共六首。是作曲家最负盛名的管弦乐作品之一。</p>
<p>六首分别为：</p>
<ul>
<li>No.1 in F Major, BWV 1046</li>
<li>No.2 in F Major, BWV 1047</li>
<li>No.3 in G Major, BWV 1048</li>
<li>No.4 in G Major, BWV 1049</li>
<li>No.5 in D Major, BWV 1050</li>
<li>No.6 in B Flat Major, BWV 1051</li>
</ul>
</blockquote>
<p>J.S.Bach The Goldberg Variations 《哥德堡变奏曲》：</p>
<blockquote>
<p>是约翰·塞巴斯蒂安·巴赫晚期的一部键盘作品，1741年出版。全曲32段，全部演出40-80分钟。</p>
<p>1955年，加拿大钢琴家格伦·古尔德将其选作自己的第一张录音作品。</p>
<p>1981年，格伦·古尔德重录了《哥德堡变奏曲》。</p>
<p>1982年，古尔德在多伦多逝世。</p>
</blockquote>
<p>Bach 在Saint Thomas Church 圣托马斯教堂任职期间，完成了大约300首cantata 康塔塔。</p>
<p>康塔塔：</p>
<blockquote>
<p>一种包括独唱、重唱、合唱的声乐套曲，一般包含多个乐章，大都有管弦乐伴奏。</p>
<p>康塔塔包含许多个乐段，往往以序曲或者合唱开头，以合唱结尾，中间交错有伴奏的宣叙调，独唱或者重唱的咏叹调以及不同规模的合唱。</p>
<p>宗教康塔塔一般比叙事性的清唱剧（oratorio）规模小，内容偏重抒情或论述。世俗康塔塔则包罗万象。</p>
</blockquote>
<p>宣叙调(recitative):</p>
<blockquote>
<p>原指歌剧、清唱剧、康塔塔等大型声乐中类似朗诵的曲调，速度自由，旋律与节奏是依照言语自然的强弱，形成简单的朗诵或说话似的曲调，换言之是<strong>以歌唱方式说话</strong>。</p>
<p>It’s not much music, more sort of spoken dialogue accompanied a little bit by a basso continuo.</p>
</blockquote>
<p>咏叹调(Da Capo)：</p>
<blockquote>
<p>“Da Capo” means the head guy or in this case the beginning of the music, the head of the music.</p>
<p>It means you take it from the beginning of the music. So you do one section, an A section, and then you have a contrasting section and then you get this sign that says DC, “Da Capo,” and then you go back and do the A section all over again.</p>
<p>“Da Capo”的意思是“领头人”，在这里是指音乐的起始，意味着返到音乐的开头重新开始。比如你负责声部A，进入对照部B，然后看到符号DC即Da Capo，表示你要返回到开头，从A部重新开始。返始咏叹调运用了“三段式”曲式。</p>
</blockquote>
</li>
<li><p>Bach’s “Wachet auf, ruft uns die Stimme”: Discussion and Analysis</p>
<p>欣赏：赞美诗 Wachet auf, ruft uns die Stimme, Arise, a Voice is Calling《醒来吧，一个声音在呼唤》</p>
<blockquote>
<p>赞美诗的内容：</p>
<p>Awake, a voice is calling, from the watchman from high in the tower.</p>
<p>Awake Jerusalem; midnight is the hour.</p>
<p>They call us with a clarion voice.</p>
<p>Where are the wise virgins?</p>
<p>Get up.</p>
<p>The bridegroom cometh.</p>
<p>Stand up and take your lamps.</p>
<p>Alleluia. Provide yourself for the wedding. Go — you must go out — go forth to meet him.</p>
</blockquote>
<p>教授请一位学生读了一段福音书的内容。</p>
<p>聆听练习了第一乐章和第四乐章，第四乐章中有三个声部。</p>
<p>一个伟大的艺术家应该具备怎样的能力呢？</p>
<blockquote>
<p><strong>to be able to hear one thing and size up its implications</strong>, to know what it could become. I guess that’s what [being] a great creative artist is all about, <strong>to know what something can become.</strong></p>
</blockquote>
<p>巴赫的家中住着亲戚和朋友，还有他自己的大家庭，他们是以什么谋生的？</p>
<p>Well, they copied music for him. His wife, Anna Magdalena Bach, was his principal copyist.【亲戚和朋友们通过为他抄曲谱来谋生……他媳妇是他的首席抄谱师，搞得我也好想抄谱为生……】</p>
</li>
<li><p>Bach’s Legacy in Musical History</p>
<p>Bach 逝于1750年，也代表了巴洛克时期的结束。</p>
<p>Historians are profoundly grateful to him for that because it gives us a nice, clean cut-off by which to end the Baroque era — end of Bach, end of Baroque. 【教授挺幽默】</p>
</li>
</ul>
<p>[2020-03-07]</p>
<h4 id="Lecture-17-Mozart-and-His-Operas"><a href="#Lecture-17-Mozart-and-His-Operas" class="headerlink" title="Lecture 17 Mozart and His Operas"></a>Lecture 17 Mozart and His Operas</h4><p>这堂课，教授腰间配了一柄剑上场，起初还觉得挺奇怪，后面才知道是安排了一场非常精彩的歌剧，老师真的很用心，很好玩的一节课，大半夜被逗笑了，哈哈。</p>
<ul>
<li><p>From Baroque to Classical Music – An Introduction</p>
<p>教授讲述了自己在 Nashville度过了一个愉快的周末，提到自己去的地方。果然，一个人的兴趣爱好决定了TA在一个新的环境里，会对哪些感兴趣。</p>
<blockquote>
<p>Friday night, went to this spectacular concert of Mozart.</p>
<p>The next afternoon, Saturday afternoon, I walked across the street. I could have gone two blocks to watch a hockey game — they have a hockey team in Nashville — or three blocks in the other direction to watch the Titans play in the football stadium, but I went just one block to the Country Music Hall of Fame.</p>
</blockquote>
<p>教授讲述的经历基本都是跟Mozart有关，比如机场播放的音乐和广告。</p>
<p>古典时期的音乐 与 巴洛克时期音乐的不同。</p>
<p>Baroque music：</p>
<blockquote>
<p>it will carry through from beginning to end of a particular movement or a particular piece. It doesn’t change, generally speaking. 【基本不变化， the same general tenor, the same general mood, the same general feeling】</p>
</blockquote>
<p>classical music：</p>
<blockquote>
<p>We get change within a particular movement. Change might be from regular to irregular rhythm, for example, or from very loud to very quiet.</p>
</blockquote>
</li>
<li><p>Glimpses of Mozart’s Life in Letters</p>
<p>Mozart留下的大量的手稿，信件，大部分是与他父亲的通信。</p>
<p>欣赏：Mozart Symphony No. 25 in G Minor。</p>
<blockquote>
<p> we begin minor key, lots of syncopation, agitation, and within about forty seconds Mozart has morphed into a completely different mood, a major key, oboe solo. The music is very lyrical. The meter now is — or the rhythms are all lined up to come on the beat rather than off the beat. <strong>Watch how we have this transformation of mood within a rather short period of time.</strong> 【很短的时间里，情绪由不安到舒缓】</p>
</blockquote>
<p>这里，教授推荐了电影《莫扎特传》Amadeus 【码下，ToDoList 真越来越长……】</p>
<p>随后教授讲述了Mozart的一些天才事迹，比如凭记忆写下西斯廷教堂的曲谱。</p>
<p>比较喜欢教授朗读的那段Mozart在1787年写给他父亲的信，当时他的一位朋友过世了，信中讲述了他对于死亡的理解：</p>
<blockquote>
<p>Death is the true goal of our lives and I have made myself so well acquainted with it during the past two years that I see it as the true and best friend of mankind. Indeed, the idea of it no longer holds any terror for me but rather much that is tranquil and comforting, and <strong>I thank God that he has granted me the good fortune to obtain the opportunity of regarding death as the key to our true happiness</strong>. I never retire at night without considering that, as young as I am, perhaps I may be no more on the morrow, yet not one of those who knows me could say that I am morose or melancholy, and for this I thank my creator daily and wish heartily the same happiness may be given to my fellow man. I clearly explained my way of looking at the matter on the occasion of the death of my very dear best friend, Count von Hatzfeld. He was just thirty-one like myself. I do not grieve for him but from the bottom of my heart for myself and for all who knew him as well as I.</p>
</blockquote>
</li>
<li><p>Musical Balance and Genius in Mozart’s Compositional Sketches</p>
<p>What’s special about Mozart’s music? 【Mozart 音乐的独特魅力】</p>
<blockquote>
<p>four things.</p>
<ul>
<li>this infallible sense of balance and proportion. 【balance, shaping, perfect proportion. 不多不少刚刚好】</li>
<li>The capacity to make something very beautiful out of the simplest of materials.【教授以  Elvira Madigan 为例】</li>
<li>wild swings of mood with Mozart</li>
<li>Inexhaustible melodic supply, fecundity of imagination when it comes to melody.【永不枯竭的才思】</li>
</ul>
</blockquote>
<p>Mozart在《唐璜》首演后，跟 Joseph II 皇帝的对话蛮有意思的，自信得一逼：</p>
<blockquote>
<p>Joseph II: Too much meat for the teeth of my Viennese, dear Mozart.</p>
<p>Mozart: Well, let them chew on it a while. They’ll get used to it.</p>
</blockquote>
<p>教授又一次提到的艺术的价值：</p>
<blockquote>
<p>Isn’t this what art is supposed to all be about?  Why do we have art? What does it do for us?</p>
<p>It gives us a sense of something better, <strong>a vision of something better than the stupid, mundane and the vernacular crap that we have to deal with on a quotidian basis out here.</strong></p>
<p>There could be something better; there’s something bigger and better out there than we are.</p>
<p>That, in essence, is what art is all about and sometimes you can see it and — I think you can see it, or you just seem to be getting nearer to it.</p>
<p>……………</p>
<p> this idea of tapping into who you are, the whole who you are as a person, through getting you back in touch with your inner memories, and also perhaps giving you hope that there is something out there better than what we deal with on a daily basis.</p>
</blockquote>
<p>也顺带提到了开普勒 Kepler 的一段话：</p>
<blockquote>
<p>Man, the ape of his creator, has discovered the art of music so that he might play the everlastingness of all created time in some short part of an hour by means of an artistic concord of many voices and instruments, that he might to some extent taste the satisfaction of God the workman through music.</p>
</blockquote>
</li>
<li><p>Mozart’s Don Giovanni and Conclusion</p>
<p>莫扎特写了三部伟大的歌剧：《费加罗的婚礼》，《唐璜》， 《魔笛》，其中《费加罗的婚礼》，《唐璜》 的脚本都是由  Lorenzo da Ponte 完成。</p>
<p>Lorenzo da Ponte：</p>
<blockquote>
<p>洛伦佐·达·彭特（1749年03月10日－1838年08月17日），原名伊曼纽·科内利亚诺（Emanuele Conegliano），意大利裔美国人，18世纪及19世纪著名歌剧填词家、诗人。他因和作曲家莫札特合作完成了三部著名意大利语歌剧而著名，包括《费加洛婚礼》、《唐·乔望尼》、《女人皆如此》。</p>
<p>【教授说这个人的一生比小说还精彩……】</p>
</blockquote>
<p>随后教授邀请了Richard Lalli 教授，和一些学生一起，演了《唐璜》的部分，一头白发的教授和一个牵着狗的同校教授一起舞剑，也是很用心了。</p>
</li>
</ul>
<p>[2020-03-08]</p>
<h4 id="Lecture-18-Piano-Music-of-Mozart-and-Beethoven"><a href="#Lecture-18-Piano-Music-of-Mozart-and-Beethoven" class="headerlink" title="Lecture 18 Piano Music of Mozart and Beethoven"></a>Lecture 18 Piano Music of Mozart and Beethoven</h4><p>钢琴音乐发展的历史。</p>
<ul>
<li><p>The History of the Piano – The Harpsichord</p>
<p>从巴洛克时期的大键琴到现代的三角钢琴。</p>
<p>Mozart 是第一个从大键琴替换到钢琴的作曲家。</p>
<p>为什么Mozart 会抛弃Harpsichord 拥抱 piano？</p>
<blockquote>
<p>harpsichord is not dynamics, you can’t reach for a climax.</p>
</blockquote>
</li>
<li><p>Mozart’s Exploration of the Pianoforte</p>
<p>最初的钢琴长得和大键琴很像。</p>
<p>教授展示了几张Mozart 和 Haydn 的钢琴以及他们工作时的样子。</p>
<p>1781年，Mozart 成为 freelance musician 自由音乐人，以 teacher和 performer身份来谋生。</p>
<p>Mozart 完成了23个钢琴协奏曲，这些 piano concerto 是他作为performer为自己写的。「which he wrote principally for himself as a kind of showpiece for public concerts.」</p>
<p>Mozart 的钢琴协奏曲要比他的奏鸣曲 sonata 难得多。</p>
<p>这里放了一段用 Mozart 的钢琴弹奏的钢琴协奏曲。【嗯，应该是K.545。】</p>
</li>
<li><p>Beethoven’s Music for His Broadwood Piano</p>
<p>1791年 Mozart 离世，钢琴曲的棒子传到了Beethoven这里。【感觉Beethoven相比Mozart，苦逼了很多，一个杜甫，一个李白的感觉……】</p>
<p>中间教授提到了Beethoven 被两个钢琴制造商赠送了钢琴的故事，并显示了相应的钢琴图片。</p>
<p>相比Mozart，Beethoven 完成了5部钢琴协奏曲 和 32 部钢琴奏鸣曲。</p>
<p>Beethoven wrote five piano concertos, thirty-two piano sonatas.</p>
</li>
<li><p>Increasing Range and Power – The Graf Piano, Liszt, and Wagner</p>
<p>After Beethoven, pianos only continued to get larger and more powerful.</p>
<p>介绍了Graf piano.</p>
<p>这段有点懵逼，提到了如何选购钢琴，延音踏板和弱音踏板等。</p>
<p>顺带插播了下Chopin，教授最喜欢的音乐家之一。</p>
<p>介绍了Franz Liszt 弹的那架钢琴 以及Franz Liszt 的女婿Richard Wagner。</p>
<p>Franz Liszt:</p>
<blockquote>
<p>弗兰茨·李斯特（德语：Franz Liszt), 匈牙利作曲家、钢琴演奏家，浪漫主义音乐的主要代表人物之一。其所创作的钢琴曲以难度极高而闻名。</p>
</blockquote>
<p>最后是Steinway 施坦威钢琴的历史。</p>
</li>
<li><p>Guest Piano Performance by Daniel Schlossberg, Jr.</p>
<p>邀请了一位大三的小哥哥 Daniel Schlossberg Jr 弹奏了两个钢琴曲。</p>
<p>分别是Beethoven 的奏鸣曲 和 Scarlatti 的奏鸣曲。【希望以后能听出来具体是哪个作品】</p>
<p>Scarlatti：</p>
<blockquote>
<p>朱塞佩·多梅尼科·斯卡拉蒂（意大利语：Giuseppe Domenico Scarlatti，1685年10月25日－1757年7月23日），意大利那不勒斯王国作曲家、羽管键琴演奏家。他被认为是一位巴洛克作曲家，但其音乐风格已受到了古典主义音乐发展的影响。他的555首奏鸣曲的绝大部分为羽管键琴而作，另外还有少量的弦乐合奏和管风琴作品。</p>
</blockquote>
<p>开场部分，教授问了下Daniel 小哥哥，演奏的时候是不是很紧张？</p>
<blockquote>
<p>Professor： Do you ever get nervous when you play, Dan?</p>
<p>Daniel： Yes. All the time.【哈哈，看来紧张是通的……】</p>
</blockquote>
<p>a wonderful piece and a wonderful performance.</p>
</li>
</ul>
<p>[2020-03-11]</p>
<h4 id="Lecture-19-Romantic-Opera-Verdi’s-La-Traviata-Bocelli-Pavarotti-and-Domingo"><a href="#Lecture-19-Romantic-Opera-Verdi’s-La-Traviata-Bocelli-Pavarotti-and-Domingo" class="headerlink" title="Lecture 19 Romantic Opera: Verdi’s La Traviata, Bocelli, Pavarotti and Domingo"></a>Lecture 19 Romantic Opera: Verdi’s La Traviata, Bocelli, Pavarotti and Domingo</h4><p>Way back to Opera.</p>
<p>主要是歌剧《茶花女》，基于小仲马的作品《茶花女》后面介绍了声乐方面的知识，真真是一头雾水。</p>
<ul>
<li><p>Introduction to Opera</p>
<p>回顾之前说过的歌剧。</p>
<p>介绍Giuseppe Verdi 及他的作品歌剧《茶花女》。</p>
<p>Giuseppe Verdi：</p>
<blockquote>
<p>朱塞佩·福图尼诺·弗朗切斯科·威尔第, 意大利作曲家，出生于帕尔马附近的勒朗科勒（Le Roncole），逝世于米兰。</p>
<p>威尔第和理查德·瓦格纳一起被认为是19世纪最有影响力的歌剧创作者。</p>
</blockquote>
<p>La traviata:</p>
<blockquote>
<p>《茶花女》（La traviata）是由朱塞佩·威尔第作曲的三幕歌剧。</p>
<p>改编自小仲马于1848年出版的小说《茶花女》（The Lady of the Camellias，La dame aux Camélias）。歌剧于1853年3月6日在威尼斯凤凰歌剧院首演。作品名称“La traviata”解作“迷途妇人”，或“失落的人”。</p>
</blockquote>
</li>
</ul>
<p>-Verdi’s <em>La Traviata</em>: The First Aria</p>
<p>  歌剧《茶花女》第一咏叹调</p>
<p>  介绍了第一幕并播放了咏叹调。</p>
<ul>
<li><p>The <em>Scena</em> in Opera</p>
<p>继续介绍《茶花女》。【很悲伤的故事……】</p>
<p>一段Violetta 的咏叹调：</p>
<blockquote>
<p>Ah, perhaps he is the one that I have been waiting for. Maybe this is finally the great true love of my life.</p>
</blockquote>
<p>【古今中外都一样啊，多少女子怀着“愿得一心人”的期许，最终空余恨。】</p>
</li>
<li><p>Critical Assessment of Vocal Performance</p>
<p>后面的部分，说的都是声乐，完全懵逼。</p>
<p>教授介绍了如何像聆听音乐一样聆听歌剧中的歌手的声音，比如男高音，女低音。</p>
</li>
<li><p>Major Opera Singers of the 20th and 21st Centuries</p>
<p>介绍20世纪，21世纪的重量级两位男高音 Luciano Pavarotti and Placido Domingo。</p>
<p>一位女高音Nellie Melba</p>
<p> Luciano Pavarotti:</p>
<blockquote>
<p>鲁契亚诺·帕瓦罗蒂（義大利語：Luciano Pavarotti，1935年10月12日－2007年9月6日），義大利男高音歌唱家，也是20世紀后半叶的世界三大男高音之一，別號「高音C之王」。</p>
</blockquote>
<p>Luciano Pavarotti 的代表作：Nessun Dorma 今夜无人入眠</p>
<p>Placido Domingo:</p>
<blockquote>
<p>何塞·普拉西多·多明戈·恩比尔（西班牙语：José Plácido Domingo Embil，1941年1月21日－），西班牙歌唱家，20世纪后半叶的世界三大男高音之一，以响亮、清晰和强而有力的嗓音闻名于世。除了演唱以外，多明戈近年开始接触指挥和歌剧院管理工作，现时是美国华盛顿国家歌剧院总监。2019年8月《美联社》报导指出他遭9位女性指控性骚扰，试图透过安排工作逼迫她们跟他发生性关系，若遭拒绝，多明戈会以职务之便报复，虽然多明戈发表声明指这些内容“并不准确”，但洛杉矶歌剧院和其他2家主要剧院均取消他接下来的演出，同时多明戈辞去洛杉矶歌剧院总监职务。</p>
</blockquote>
<p>Nellie Melba：</p>
<blockquote>
<p>内莉·梅尔巴女爵士，GBE（Dame Nellie Melba，1861年5月19日－1931年2月23日），澳大利亚女高音。她是澳大利亚第一位获得国际声誉的女高音，也是当时世界上最著名的歌剧演员之一。</p>
</blockquote>
<p>教授建议不要买Pavarotti 1980后的作品，呃，因为他从那时开始走下坡了「Don’t buy anything of Pavarotti after 1980」，最好的作品时期是78，79，80.</p>
</li>
</ul>
<p>[2020-03-12]</p>
<h4 id="Lecture-20-The-Colossal-Symphony-Beethoven-Berlioz-Mahler-and-Shostakovich"><a href="#Lecture-20-The-Colossal-Symphony-Beethoven-Berlioz-Mahler-and-Shostakovich" class="headerlink" title="Lecture 20 The Colossal Symphony: Beethoven, Berlioz, Mahler and Shostakovich"></a>Lecture 20 The Colossal Symphony: Beethoven, Berlioz, Mahler and Shostakovich</h4><p>这节课讲交响乐Symphony。</p>
<ul>
<li><p>Introduction to Symphonies</p>
<p>开篇，教授先来了一顿调侃。</p>
<p> I can tell you at the beginning of this semester which of these lectures will have the lowest attendance rate. And it’s this one.</p>
<p>【原来Yale也会有出勤率低的课程，这么好的课，这么好的教授，怎么会舍得缺席？】</p>
<p>在之前的课堂中已经接触过的交响乐有哪些？</p>
<blockquote>
<ul>
<li>Beethoven’s Fifth Symphony</li>
<li>Beethoven’s Sixth 【田园交响曲】</li>
<li>Beethoven’s Ninth 【ode to Joy】</li>
<li> Joseph Haydn’s Surprise Symphony【海顿的“惊愕” Symphony No.94】</li>
<li>Mozart’s G Minor Symphony【Symphony No. 25 in G Minor】</li>
</ul>
</blockquote>
<p>聆听 Mozart 的Eine kleine Nachtmusik 【小夜曲】</p>
<p>赏析：</p>
<blockquote>
<p>It’s very patterned. It’s very symmetrical. It’s balanced. We have antecedent and consequent phrases and they come in the music wth the classical period.</p>
<p>It’s homophonic. Basically, you got a melody plus accompaniment.【织体主调，伴奏围绕着主旋律】</p>
<p>this music has a kind of rhetorical strategy to it.【不知要多久我才能听出这里面的道道】</p>
<p>It sounds like a melody, it sounds like a theme, or music that sounds like it’s coming between themes, of leading us somewhere, transitional music, music that may be a contrasting theme, music that ends a section. So it’s music that does something, music that’s trying to get us from point A to point B and point C and so on.</p>
</blockquote>
<p>聆听浪漫主义时期的音乐，来自Tchaikovsky‘s overture to《Romeo and Juliet》【柴可夫斯基《罗密欧与朱丽叶幻想序曲》】</p>
<p>Tchaikovsky：</p>
<blockquote>
<p>彼得·伊里奇·柴可夫斯基（1840年5月7日－1893年11月6日），俄罗斯浪漫乐派作曲家，其作品有民族乐派特征，但仍以浪漫风格为基准。其风格直接和间接地影响了很多后来者。</p>
<p>在音乐创作上，柴可夫斯基很崇拜莫扎特，尤其他对旋律性的重视。对于瓦格纳音乐中的一些特性他却很反感，认为瓦格纳过于重视管弦乐队而忽略了声乐，柴可夫斯基主张用现实主义手法来表现歌剧，主导动机只用以描写心理感情等内在方面。</p>
</blockquote>
<p>Romeo and Juliet:</p>
<blockquote>
<p>《罗密欧与朱丽叶幻想序曲》是俄罗斯作曲家柴可夫斯基的一部管弦乐作品，以莎士比亚同名戏剧为题材，创作于1869年末到1880年。这部作品是柴科夫斯基早期的代表作品之一（当时作者只有29岁），也是他流传最广泛的作品之一。</p>
</blockquote>
<p>赏析浪漫主义时期的音乐特征：</p>
<blockquote>
<p>qualities:</p>
<p>it has a long, sweeping melody here in romantic music, a long, sweeping melody that is rather asymmetrical in shape. Instead of having neat units of two plus two plus two, it could go on over bars or maybe it’ll be a seven-bar phrase, something like that. So the melodies tend to be long; they tend to be asymmetrical.</p>
<p>Rhythm:</p>
<p>When we get into the classical period, rhythm is somewhat more relaxed but it is still a pattern,  but here, with this music in the romantic period, the themes are not only long and asymmetrical; the rhythms don’t seem to shake out in patterns that allow us to tap our feet or allow us to conduct it easily.</p>
<p>Tempo:</p>
<p>In romantic music, we get wild swings of tempo in that it can be coming along at a regular pace and then slow way, way down and then speed up to get back on track and slow down and so on. And this is part and parcel of the romantic aesthetic in the sense that it tends to swing wildly from one extreme to another, wildly in terms of rhythm and wildly in terms of dynamics.</p>
</blockquote>
<p>Gustav Mahler：</p>
<blockquote>
<p>古斯塔夫·马勒（1860年7月7日－1911年5月18日），奥地利作曲家、指挥家。作为作曲家，他是19世纪德奥传统和20世纪早期的现代主义音乐之间承前启后的桥梁。马勒之后，十二音和无调性音乐等先锋理念崛起，传统调性音乐的辉煌时代走向终结。</p>
</blockquote>
</li>
<li><p>Historical Changes in Strings and Woodwind Instruments</p>
<p>古典音乐的四个乐器组：</p>
<ul>
<li><p>strings ：violin, viola, cello and double bass 【弦乐器：小提琴，中提琴，大提琴，低音提琴】</p>
<p>Jacob 用一把十九世纪的中提琴拉了一小段音乐。</p>
</li>
<li><p>woodwinds：piccolo， bassoon ， English Horn， flute【木管乐器：短笛，巴松管，英国号，长笛】</p>
<p>英国号 是双簧管的一种，聆听 Dvorak’s New World Symphony 第二乐章，很舒缓， 感受英国号。</p>
<p>New World Symphony：</p>
<blockquote>
<p>E小调第9号交响曲《来自新大陆》，作品95，为捷克作曲家德沃夏克（Antonín Dvořák）于1893年在美国时所谱写，因此一般被称为《自新大陆交响曲》（New World Symphony）。</p>
<p>第二乐章最缓版（Largo）</p>
<p>缓板，降D大调，这个乐章以“念故乡”的黑人灵歌风格旋律为主题的乐章，一开始管乐器持续和弦著，之后由英国管所奏出“念故乡”哀愁的抒情旋律，接着木管乐器在弦乐伴奏下奏出强而有力的旋律，最后英国管再次主奏出哀愁的气氛。</p>
<p>美国名曲〈念故乡〉（GOIN’ HOME）是本交响曲第二乐章的歌唱版。</p>
</blockquote>
</li>
<li><p>brass： trumpet， trombone，French horn，tuba【铜管乐器：小号，长号，法国号/圆号，大号】</p>
<p>聆听 Beethoven‘s Fifth Symphony 最后乐章的开头部分，感受French horn。</p>
<p>聆听 Hector Berlioz‘s Symphonie Fantastique 【柏辽兹《幻想交响曲》】, 感受大号tuba</p>
<p>Hector Berlioz:</p>
<blockquote>
<p>埃克托·路易·柏辽兹（1803年12月11日－1869年3月8日），法国作曲家，以1830年写的《幻想交响曲》闻名。</p>
</blockquote>
<p>Symphonie Fantastique:</p>
<blockquote>
<p>埃克托·柏辽兹于1830年间所作的交响曲作品。</p>
<p>习惯上被认知的名称事实上是作品的副标题，柏辽兹为作品所起的正式名称为：“一位艺术家一生的插曲”。</p>
<p>作曲家创作灵感来源于他倾注以狂热爱情的爱尔兰籍的莎士比亚戏剧女演员哈莉叶特·康斯坦斯·史密逊。作为标题音乐完美而明晰的范例，该作品在早期浪漫主义音乐当中被推崇为最重要及最具代表性的交响曲之一，时至今日仍广受全球各地的音乐演奏会听众欢迎。</p>
<p>本交响曲是一首标题音乐，描绘一个具奔放想像力的艺术家，由于对渺茫的爱情深刻感到绝望，吞食鸦片自杀的故事。虽然在当时交响曲普遍以四个乐章组成，本曲却含有以下五个具有独立标题的乐章。凭借详细的情节，本曲经常被称为标题音乐最优秀，可能也是最早的范例之一。</p>
<ul>
<li>梦与热情（Rêveries - Passions）</li>
<li>一场舞会（Un bal）</li>
<li>园林美景（Scène aux champs）</li>
<li>断头台进行曲（La marche au supplice）</li>
<li>女巫安息日的夜梦（Songe d’une nuit de sabbat）</li>
</ul>
</blockquote>
<p>再次聆听 Dvorak “New World Symphony” second movement 第二乐章，感受铜管乐器tuba</p>
<p>聆听 Brahms’s First Symphony，感受铜管乐器 French horn</p>
<p>Brahms’s First Symphony：</p>
<blockquote>
<p>《C小调第1号交响曲》，作品68，是约翰内斯·勃拉姆斯创作的四乐章交响曲。由于该作品的风格与贝多芬交响曲类似，因而被彪罗称为“贝多芬第十”。</p>
<p>该作品的创作至少花了14年，而勃拉姆斯自称从草稿到最终完结长达21年。</p>
<p>该作品共四个乐章：</p>
<ul>
<li><p>稍微持绩的—快板—稍慢的快版（c小调）</p>
</li>
<li><p>持续的行板（E大调）</p>
</li>
<li><p>略快且优雅的稍快板（降A大调）</p>
</li>
<li><p>慢板—很慢的行板—不太快的快板，有精神的—很快的快版（c小调转C大调）</p>
<p>全长约45至50分钟。</p>
</li>
</ul>
</blockquote>
</li>
<li><p>keyboard：organ，harpsichord，piano 【键盘乐器：管风琴，大键琴，钢琴】</p>
</li>
</ul>
</li>
<li><p>The Development of the Brass Family</p>
<p>承接上面的四个乐器组，介绍铜管乐器。</p>
</li>
<li><p>The Growing Orchestra: Capacities and Limits in the 19th Century</p>
<p>聆听 Wagner’s overture to <em>The Flying Dutchman</em> 【歌剧《漂泊的荷兰人》序曲】</p>
<p>The Flying Dutchman:</p>
<blockquote>
<p>漂泊的荷兰人，又译作徬徨的荷兰人或飞行的荷兰人，是一部歌剧作品，1843年于德国德累斯頓的森柏歌剧院首演，由 Wagner 本人担任指挥。剧情描述一个因触怒天神而受到诅咒，在海上漂流多年的幽灵船长寻得真爱而获得救赎的经历。</p>
</blockquote>
<p> Wagner 拥有的乐团人数远大于Mozart，所以即便他没有great musical idea，他有terrific orchestra 可以来弥补。</p>
<p>The sound in music probably never gets any more opulent than it does here at the end of the nineteenth century.</p>
</li>
<li><p>Accommodating Orchestras: The Advent of Concert Halls</p>
<p>介绍现代的音乐厅Concert Halls。</p>
<p>Musikverein音乐厅：</p>
<blockquote>
<p>维也纳音乐协会大楼（德语：Haus des Wiener Musikvereins，简称：Musikverein）是位于奥地利维也纳内城的一座音乐演出建筑。</p>
<p>该楼内有多个大小不一的表演空间，其中面积最大的金色大厅（Großer Musikvereinssaal，即大音协厅，或称：Goldener Saal，金厅）因装修精美，且音响效果出色，是世界上最著名的音乐厅之一。</p>
</blockquote>
<p>Symphony Hall in Boston:</p>
<blockquote>
<p>波士顿交响大厅，位于美国马萨诸塞州波士顿市内。 它目前是波士顿交响乐团与波士顿流行乐团的驻地，与新英格兰音乐学院仅一个街区之隔。</p>
</blockquote>
<p>Woolsey Hall:</p>
<blockquote>
<p>耶鲁大学自己的音乐厅</p>
</blockquote>
<p>Carnegie Hall：</p>
<blockquote>
<p>卡内基音乐厅（也译作：卡耐基音乐厅）,该音乐厅是由美国钢铁大王兼慈善家安德鲁·卡内基于1891年在纽约市第57街建立的第一座大型音乐厅。</p>
</blockquote>
<p>教授提到 people absorb sound，这个倒是挺神奇的呢。原来人能消化声音，人体好似消音器。</p>
</li>
<li><p>Gustav Mahler, the Symphony Composer</p>
<p>介绍Gustav Mahler及其交响曲。</p>
<p>2 M: Mozart Mahler</p>
<p>For me these two M’s are very important, <strong>Mozart and Mahler</strong>. They write some <strong>really astonishing music</strong>, in different kinds of ways.</p>
<p>Introduction to Gustav Mahler:</p>
<blockquote>
<p>he was a Jew born in Moravia, which is a section of Czechoslovakia, got his musical education in Vienna, was a pianist and principally a conductor. He earned his living conducting. And he went all around the world conducting, And he composed mostly in the summertime. He would go out to the Alps in one of these mountain retreats in — where he could have solitude and he would compose. And in the course of time, he wrote principally nine symphonies.</p>
</blockquote>
<p>聆听 Gustav Mahler first symphony, 1888 第一交响曲</p>
<blockquote>
<p>《D大调第一交响曲》，是古斯塔夫·马勒的第一部交响曲作品。该作品创作于1884年到1888年之间，最初的版本被命名为“巨人”交响诗。该作品在1889年在布达佩斯首演，反响不佳，但现在已名列马勒最受欢迎的作品。首演时所发表的曲目，并不是交响曲，而是两篇交响诗。原来的详细曲目一直被沿用到1892年后，才标以简单的标题“巨人”.</p>
<p>该作品分为四个乐章，全长约55分钟。</p>
<ul>
<li>Langsam, schleppend（缓慢拖延地）——D大调。</li>
<li>Kräftig bewegt, doch nicht zu schnell（稳定前进地，但不太快）——A大调，一首连德勒舞曲。</li>
<li>Feierlich und gemessen, ohne zu schleppen（庄严准确、不拖延地）——d小调，一首葬礼进行曲。其旋律基于民歌《雅克弟兄》。</li>
<li>Stürmisch bewegt（暴风雨般冲动地）——f小调转D大调。</li>
</ul>
</blockquote>
</li>
<li><p>Conclusion</p>
<p>电子声音时代的到来。</p>
<p>「最近好像喜欢上阿柴了，看来离喜欢马勒不远了……」</p>
</li>
</ul>
<p>[2020-03-13]</p>
<h4 id="Lecture-21-Musical-Impressionism-and-Exoticism-Debussy-Ravel-and-Monet"><a href="#Lecture-21-Musical-Impressionism-and-Exoticism-Debussy-Ravel-and-Monet" class="headerlink" title="Lecture 21 Musical Impressionism and Exoticism: Debussy, Ravel and Monet"></a>Lecture 21 Musical Impressionism and Exoticism: Debussy, Ravel and Monet</h4><p>印象派，Debussy &amp; Ravel,  lovely。</p>
<ul>
<li><p>Introduction to Musical Impressionism</p>
<p>1880 ～ 1920: 印象派时期的音乐</p>
<p>教授介绍了印象派画家Manet, Renoir, Alfred Sisley, Camille Pissarro 等 和 诗人Charles Baudelaire, Paul Verlaine, Arthur Rimbaud, and Stephane Mallarmé。【再次为自己没文化而惭愧……】</p>
<p>音乐领域中，印象派的作曲家，Claude Debussy，Maurice Ravel， Gabriel Fauré， Ottorino Respighi， Charles Griffes。</p>
<p>Claude Debussy：</p>
<blockquote>
<p>阿希尔-克洛德·德彪西（法语：Achille-Claude Debussy, 1862年8月22日－1918年3月25日），法国作曲家。</p>
<p>德彪西是19世纪末20世纪初最有影响力的作曲家之一，代表作品有管弦乐《大海》和《牧神午后前奏曲》，钢琴组曲《贝加马斯克组曲》、《意象集》、《版画集》等；而创作最高峰则是歌剧《佩利亚斯与梅丽桑德》。</p>
<p>知名的作品：</p>
<ul>
<li>《Clair de Lune》【moonlight】</li>
<li>《Prelude to the Afternoon of a Faun》【牧神的午后】</li>
</ul>
<p>其他作品如《Nocturnes》【夜曲】，《La Mer》【大海】，《Images》【意象】</p>
</blockquote>
<p>教授现场弹奏了《Clair de Lune》的片段。</p>
</li>
<li><p>Debussy’s Musical Responses to Mallarme’s Poetry</p>
<p>介绍了《Prelude to the Afternoon of a Faun》【牧神的午后】创作背景，选材于Debussy的美学导师Stephane Mallarmé的一首诗。</p>
<p>Google了这首诗，呃，比较长，截取部分：</p>
<blockquote>
<p>林泽的仙女们，我愿她们永生。<br>她们的肌肤，<br>是那样的光艳，粉红，在天光中熠烁，<br>带着迷离睡意，</p>
<p>莫非我爱的是个梦？<br>我的疑问有如一堆古夜的黑影<br>终结于无数细枝，而仍是真的树林，<br>证明孤独的我献给了我自身——<br>唉！一束祝捷玫瑰的理想的假象。<br>让咱们想想……</p>
</blockquote>
</li>
</ul>
<p>聆听 Debussy’s Prelude to the Afternoon of a Faun</p>
<p>赏析：</p>
<blockquote>
<p>the harp playing away there, arpeggios periodically, just little dabs of color underneath by way of a supporting accompaniment. So let’s listen to a little bit more here. 【竖琴低音，琶音】</p>
<p>Focus on the flute line. That’s got the melody but it’s a kind of different melody than the melodies that we have been listening to.【长笛，旋律】</p>
<p>Passed it to the oboe, okay, pausing it there. So that melody, is kind of like a roulade, kind of ill-formed in a way. It’s very beautiful, but it’s difficult to sing. It’s chromatic, it doesn’t have any regular structure to it, and this is typical of the Impressionists’ approach to melody.【印象派大概就是你哼不出来的调调吧？】</p>
</blockquote>
<p>聆听 Debussy’s Voiles</p>
<p>Voiles：</p>
<blockquote>
<p>Voiles is a composition by Claude Debussy for solo piano from 1909. <strong>It is the second piece in a set of twelve préludes published in 1910.</strong> The title of the piece may be translated to English as either veils or sails; both meanings can be connected to the musical structure. Except for some mild, localized chromaticism and a short pentatonic passage, the entire piece uses the whole tone scale.</p>
</blockquote>
<p>赏析：</p>
<blockquote>
<p>低音部分用了固定音型的曲式Ostinato。</p>
<p>Ostinato were there in Baroque music. They kind of went out of fashion in the Classical period and in the romantic period. Romantic is too expansive for ostinatos, but they come back in here in the Impressionist period and they’re really important in the Modernist period.</p>
<p>这里音阶部分，只用了five notes，而不是常规的7个notes.</p>
<p>We did have whole tone but now we get  a pentatonic scale, just using five notes.</p>
<p>还用了glissando 滑奏。</p>
<p>只弹白键或者黑键就是glissando。They use a lot in television and stuff.</p>
</blockquote>
<ul>
<li><p><em>La Cathedrale Engloutie</em> – Interactions between Impressionist Painters and Musicians</p>
<p>聆听 Debussy的前奏曲prelude  La Cathédrale Engloutie【沉没的教堂】</p>
</li>
<li><p>Ravel’s <em>Ondine</em>: A Violin Performance by Naomi Woo</p>
<p>Ravel’s Ondine：</p>
<blockquote>
<p>来自拉威尔的作品集<em><strong>Gaspard de la nuit</strong></em> 夜之幽灵 ， Ondine为第一乐章。</p>
<p>三个乐章：</p>
<ul>
<li>Ondine「水妖」</li>
<li>Le Gibet「绞刑架」</li>
<li>Scarbo「幻影」</li>
</ul>
</blockquote>
<p>邀请一名大一的新生小姐姐Naomi Woo弹奏Ravel’s Ondine， 小姐姐真的超厉害。</p>
<p>赏析：</p>
<blockquote>
<p> You should look at the score, and the other interesting thing is that the hand — the chord positionings change each time they go up an octave and that’s really hard. Rather than repetition of an arpeggio, up an octave, repeat it, same hand position, up an octave, the particular hand positions are changing as you go up octave to octave. Anything else — I — at the very beginning of this, I did notice — if you could play the left-hand part just so we can hear this melody at the beginning —  Okay. So there we have the outlines of a pentatonic scale at work here, and you’re going to hear that at the beginning and then you’ll hear at the end. So the general form here, as if often true with these Impressionist composers, is just ternary form, A, B, A with the second and final A slightly modified.</p>
</blockquote>
<p>惊艳，要粉Ravel的节奏。</p>
</li>
</ul>
<p>[2020-03-14]</p>
<h4 id="Lecture-22-Modernism-and-Mahler"><a href="#Lecture-22-Modernism-and-Mahler" class="headerlink" title="Lecture 22 Modernism and Mahler"></a>Lecture 22 Modernism and Mahler</h4><p>Ich bin der Welt abhanden gekommen。「 我告别喧嚣的尘世。」</p>
<ul>
<li><p>Introduction to Modernism: Elements in Stravinsky’s Ballet Scores</p>
<p>介绍现代时期的两位器乐和声乐大师 Igor Stravinsky，Arnold Schoenberg.</p>
<p>Igor Stravinsky:</p>
<blockquote>
<p>伊戈尔·费奥多罗维奇·斯特拉文斯基（1882年6月17日－1971年4月6日），又译斯特拉温斯基，俄国-法国-美国作曲家、钢琴家及指挥，20世纪现代音乐的传奇人物，革新过三个不同的音乐流派：原始主义、新古典主义以及序列主义。被人们誉为是音乐界中的毕加索。</p>
<p>斯特拉文斯基作曲风格有许多的变化。他最早因为谢尔盖·达基列夫委托的<strong>三部芭蕾舞剧</strong>而出名，而首演是由佳吉列夫的俄派芭蕾舞团在巴黎首演：1910年的《火鸟》、1911年的《彼得鲁什卡》及1913年的《春之祭》。</p>
<p>其中的《春之祭》让往后的作曲者思考旋律的结构，也��为是让斯特拉文斯基有长久声誉的关键，革命性地拓展了音乐设计的边界。</p>
</blockquote>
<p>Arnold Schoenberg:</p>
<blockquote>
<p>阿诺尔德·勋伯格（德语：Arnold Schönberg，定居美国后改姓氏写法为Schoenberg，1874年9月13日－1951年7月13日），奥地利作曲家、音乐教育家、音乐理论家，作家，画家，曾向亚历山大·策姆林斯基学习作曲，其后并迎娶策氏之妹为妻。</p>
<p>勋伯格的方法，无论是在和声还是发展方面，都是20世纪最有影响力的音乐理念之一。</p>
</blockquote>
<p>相比Firebird， Petrushka 更能体现现代派音乐。</p>
<blockquote>
<p> It’s modern because of the new approach to rhythm. In the Romantic music that we have been listening to, we would hear these long, somewhat amorphous melodies, amorphous in terms of the rhythm. But now here with the advent of Modernism in the twentieth century we get a much more driving type of rhythm. <strong>It almost in some ways goes back to the driving rhythms of the Baroque except with one major difference, and that is that these modern rhythms are highly irregular</strong>. What we get oftentimes are irregular meters.</p>
</blockquote>
<p>聆听  Igor Stravinsky 的芭蕾舞剧《彼得鲁什卡》 1911, <em>Petrushka</em></p>
<p>《春之祭》The Rite of Spring 1913年5月在巴黎首演，即引起轰动。观众以为听到的是类似Tchaikovsky‘s Swan Lake, 舒缓而优雅，结果听到的春之祭充斥着刺耳的不规则音乐。【我这翻译……】</p>
<p>文化历史学者认为《春之祭》的首演，开启了现代音乐时期。</p>
<p>cultural historians to put their finger on the moment that constitutes the beginning of Modernism it would probably be this moment of the performance of The Rite of Spring.</p>
</li>
<li><p>Creating the Dissonance and Irregularities in <em>The Rite of Spring</em></p>
<p>《春之祭》是如何做到引起人们的不悦的？</p>
<p>五个方面：</p>
<ul>
<li>heavy dissonance 【重不和谐音】</li>
<li>much greater reliance on percussion【大量依赖打击乐器】</li>
<li>the use of stringed instruments as percussion instruments【弦乐器当打击乐器用】</li>
<li>an increased use of woodwinds.【增加对木管乐器的使用】</li>
<li>this idea of rhythm, driving rhythms【不规则的节奏】</li>
</ul>
<p>随后，教授讲述了他如何从不喜欢《春之祭》到喜欢它的经历。</p>
</li>
<li><p>Mahler’s “Ich bin der Welt abhanden gekommen”: An Exploration</p>
<p>到了教授非常喜欢的Mahler了。</p>
<p>有些音乐并不能教会你什么，但是就是让人愉悦，这就够了。</p>
<p>It’s just gorgeous, but we don’t really learn anything from it.</p>
<p>Gustav Mahler 除了写了9部交响曲，还写过两部歌集，管弦歌曲 orchestral Lieder 【教授推荐听Mahler从他的交响曲开始，嗯，Yes，Sir！】</p>
<p>I hope you will come to like Mahler.</p>
<p>【听了Gustav Mahler第五交响曲第四乐章，温柔到无法言表。】</p>
<p>聆听 Gustav Mahler orchestral Lieder “Ich bin der Welt abhanden gekommen”</p>
<p>《Ich bin der Welt abhanden gekommen》是德国诗人Friedrich Ruckert的作品， Mahler将诗人的诗谱成了五首歌。</p>
<p>全诗内容：</p>
<blockquote>
<p> Ich bin der Welt abhanden gekommen，    I am lost to the world，</p>
<p>Mit der ich sonst viele Zeit verdorben，  with which I used to waste so much time，</p>
<p>Sie hat so lange nichts von mir vernommen， It has heard nothing from me for so long</p>
<p>Sie mag wohl glauben, ich sei gestorben! that it may very well believe that I am dead!</p>
<p>Es ist mir auch gar nichts daran gelegen，   It is of no consequence to me</p>
<p>Ob sie mich für gestorben hält，        Whether it thinks me dead，</p>
<p>Ich kann auch gar nichts sagen dagegen，     I cannot deny it，</p>
<p>Denn wirklich bin ich gestorben der Welt。   for I really am dead to the world。</p>
<p>Ich bin gestorben dem Weltgetümmel，       I am dead to the world’s tumult,</p>
<p>Und ruh’ in einem stillen Gebiet!        And I rest in a quiet realm!</p>
<p>Ich leb’ allein in meinem Himmel，       I live alone in my heaven,</p>
<p>In meinem Lieben, in meinem Lied!        In my love and in my song!</p>
</blockquote>
<p>This is a metaphor for all of his music so this is an individual that has become detached from the world and simply wants to live in the world of music.</p>
<p>【Mahler也想要远离尘世，活着音乐的世界里？】</p>
<p>最后教授关了灯，播放了整个曲子，让学生们静下来，安静地听完整首。</p>
</li>
<li><p>The Values of Saving Classical Music and Conclusion</p>
<p>教授讲述了整个系列课程的意义，这段话很是喜欢。</p>
<blockquote>
<p>Now it’s time for you to do your part. What’s your part?</p>
<p>You have to do the following kinds of things.</p>
<ul>
<li> You have to continue to buy CDs and download classical music off of iTunes or whatever it is. <strong>Don’t steal that stuff.</strong> Why? If you take that stuff for nothing, what are you doing? You’re taking the livelihood away from Jacob and Santana and Lynda here, just the livelihood of musicians. They’ve put their labor into it and you’re taking it for nothing. So download these things. It doesn’t cost all that much.</li>
<li><strong>get involved</strong>. Get involved in informal singing groups, keep your piano lessons, if you’ve ever had those kinds of things going on, local choral groups, whatever.</li>
<li>give music lessons to your children. <strong>Teaches them hard work, teaches them to think sequentially, teaches them various forms of quantitative reasoning, teaches them also to be disciplined and teaches them to have a pride in the work product that they ultimately generate</strong>.</li>
</ul>
</blockquote>
<p>Thanks!!!</p>
</li>
</ul>
<p>[2020-03-15]</p>
<h4 id="Lecture-23-Review-of-Musical-Style"><a href="#Lecture-23-Review-of-Musical-Style" class="headerlink" title="Lecture 23 Review of Musical Style"></a>Lecture 23 Review of Musical Style</h4><p>最后一课了，检验学习成果的时刻到了。</p>
<p>我铁定是挂科的，我要重修很多次，哈哈。</p>
<ul>
<li><p>Introduction</p>
<p>对前面所学的音乐风格进行测试，听一段音乐，然后辨别它是属于哪个时期的音乐。</p>
<p>期末考试的时候，是放一段音乐，然后识别出它是什么，作曲家是谁。「you’re responsible for identifying the name of the composer and the name of the piece.」</p>
</li>
<li><p>Identifying Different Musical Styles</p>
<p>识别不同时期的音乐风格。</p>
<p>What’s the most important thing when trying to identify style? 【识别音乐风格中，最主要的因素是什么？】</p>
<blockquote>
<p>Instruments.【乐器】</p>
<p>if you hear lots of percussion and xylophones and things such as that banging away in a dissonant fashion, those instruments just weren’t there in time of Mozart, for example, so you know it’s got to be probably late nineteenth-century and on. 【如果有大量的打击乐器，可能是19世纪以后的音乐】</p>
<p>some instruments are common to many different periods.if you hear a piano, it can’t be Renaissance or medieval; it can’t be Baroque. It could be Classical, Romantic, Impressionist, or Modern, and then on the basis of other things you would come to a conclusion about the style period.【钢琴自Mozart始，所以如果曲子中有钢琴，则可以排除中世纪和巴洛克时期】</p>
</blockquote>
<p>另一些要点：</p>
<ul>
<li>volume，反映出乐队orchestra的大小，19世纪末20世纪初的乐队阵容很大，如果音量很大，可能是浪漫主义后期的音乐。「Mahler wrote a “Symphony of a Thousand,” he called it. He had almost a thousand performers in it.」</li>
<li>harmony 和声。the more unexpected it becomes probably the later you are, the more into the Romantic period you are.【和声越出人意料，越可能是浪漫主义时期的音乐】</li>
<li>the element of consonance versus dissonance 【和谐音与不和谐音】a little bit of dissonance in the Impressionist period and then heavy in the Modernist period, and then it actually backs down in the Post-modern period.【不和谐音越多，越靠后】</li>
</ul>
<p>练习一段浪漫主义时期的音乐，Ravel’s Daphnis and Chloe，拉威尔的芭蕾舞剧《达夫尼与克罗埃》，识别要点：</p>
<ul>
<li><p>large, colorful orchestra</p>
</li>
<li><p>consonant</p>
</li>
<li><p>Parallel motion， Those woodwinds were all going up and down in the same direction。【木管乐器沿着相同的方向上升和下降】</p>
</li>
<li><p>A glissando 【滑奏，这个确实很明显】</p>
</li>
</ul>
<p>插播下《达夫尼与克罗埃》的介绍：</p>
<blockquote>
<p>以古希腊诗人朗高斯（Longus）的‘达夫尼与克罗埃’全三场组成作品为基础，并由俄罗斯芭蕾舞团于1912年在萨特蕾歌剧院作巴黎首演。而拉威尔本人亦从芭蕾舞音乐摘录了一部分，并分别在1911年及1913年首演第一组曲与第二组曲。</p>
<p>大纲分三部分，全曲约50至55分钟。</p>
<ul>
<li>第一部分：面包神与众美少女们之祭坛前</li>
<li>第二部分：海盗布鲁艾希斯之阵营</li>
<li>第三部分（与第一部分相同）：祭坛前方</li>
</ul>
</blockquote>
</li>
<li><p>Review of Gregorian Chants</p>
<p>练习一段中世纪和文艺复兴时期的音乐，格里高利圣咏， written by Thomas Tallis， 识别要点：</p>
<ul>
<li>multiple unaccompanied voices 【多重独立的声部】</li>
<li>Mostly polyphonic，imitative.【复调，模仿的复调】</li>
</ul>
</li>
<li><p>Listening Exercises for Modernist and Classical Music</p>
<p>练习识别一段现代时期的音乐，Ellen Zwilich‘s Celebration,  识别要点：</p>
<ul>
<li>A lot of percussion， particularly the tympani. 【打击乐器，特别是定音鼓】</li>
<li>A lot of dissonance【大量不和谐音】</li>
<li>A lot of brass</li>
<li>lots of ostinatos【大量固定反复】</li>
</ul>
<p>练习识别 Mozart’s Bassoon Concerto 【巴松管协奏曲】，识别要点：</p>
<ul>
<li>Regular meter</li>
<li>strings in the foreground</li>
<li>solo instrument：Bassoon</li>
<li>the solo instrument is playing something kind of simple, kind of  impressive</li>
<li>You should hear lots of little trills and weeping all over the place 【听到颤音】</li>
</ul>
</li>
<li><p>Distinguishing Classical and Romantic Music</p>
<p>古典主义音乐和浪漫主义音乐的不同：</p>
<ul>
<li><p>the size of the orchestra</p>
<blockquote>
<p>in Romantic music the orchestra has many more and many varied instruments in it ranging from top piccolo down to middle English horn down to bottom contrabass, bassoon, tuba and things like that.【浪漫主义时期的管弦乐队，元素更多元更丰富】</p>
</blockquote>
</li>
<li><p>the themes and the melodies etc.</p>
<blockquote>
<p>The regularity of the themes and the balance and symmetry is part and parcel of the Classical period.</p>
<p>You move into the Romantic. You have expansive themes, but by way of contradistinction there, then the rhythm becomes not necessarily more flaccid, but more loose, and we talked about this phenomenon of rubato, for example. So flexible rhythms, flexible tempos, less clear meters in the Romantic period.【浪漫主义时期，主题明朗，节奏松弛舒缓】</p>
<p>this warm, rich melody, is very important in Romantic music.</p>
</blockquote>
</li>
</ul>
</li>
<li><p>Final Exercise and Conclusion</p>
<p>最后一首练习曲，是巴洛克时期 Baroque period 的音乐，使用了乐器大键琴harpsichord，使用了fugue。</p>
<p>大键琴只在巴洛克时期才流行使用。</p>
<p>最后教授请学生们帮忙给一位生病的朋友写康复卡，很有爱的教授。</p>
</li>
</ul>
<h4 id="A-long-long-long-journey"><a href="#A-long-long-long-journey" class="headerlink" title="A long long long journey"></a>A long long long journey</h4><p>终于刷完了。</p>
<p>这一路刷过来，懵逼居多，但更是感恩，从最开始刷一个lecture都觉得无法消化，到后面慢慢开始熟悉，告诉自己，心态摆正，正是因为自己懵逼， 所以才要啃它，所以不懂不会是正常的，抱着不求甚解的态度，反而更能enjoy这门课程。</p>
<p>我心里明白，要完全消化这门课的内容，需要好些年的时间，但也不觉得有什么，余生不长也不短，多一件值得去做的事情，也会平添很多乐趣。</p>
<p>教授第一节课说，他要做两件事，一是change your personality， 二是impart to you a love of classical music，我想他做到了。任何一个刷完整套课程的人，一定在某种程度上被改变了，虽然这种改变现在看来可能并不那么明显。</p>
<p>真的很喜欢这个白发的老爷子，像是引路人，耐心地，引导你去一窥新世界的样子。</p>
<p>感谢互联网，让生在这个时代的人，可以以极低的成本就能接触到那么多优质的资源。</p>
<p>也很感谢大饼，分享他的古典歌单，像是一棵种子，让我开始反思自己在听什么，这才有了了解古典乐的念想。</p>
<p>也谢谢自己，坚持听完了整套课程，没错过这么美好的事物，嗯，以后记得要反复回来听很多次，直到消化才可以哦。</p>
<p>最后，想说：Bravo！</p>
]]></content>
      <tags>
        <tag>Music</tag>
      </tags>
  </entry>
  <entry>
    <title>Lecture 23 Review of Musical Style</title>
    <url>/posts/notes-on-yale-courses-listening-to-music-lecture23/</url>
    <content><![CDATA[<p>最后一课了，检验学习成果的时刻到了。</p>
<p>我铁定是挂科的，我要重修很多次，哈哈。</p>
<ul>
<li><p>Introduction</p>
<p>对前面所学的音乐风格进行测试，听一段音乐，然后辨别它是属于哪个时期的音乐。</p>
<p>期末考试的时候，是放一段音乐，然后识别出它是什么，作曲家是谁。「you’re responsible for identifying the name of the composer and the name of the piece.」</p>
</li>
<li><p>Identifying Different Musical Styles</p>
<p>识别不同时期的音乐风格。</p>
<p>What’s the most important thing when trying to identify style? 【识别音乐风格中，最主要的因素是什么？】</p>
<blockquote>
<p>Instruments.【乐器】</p>
<p>if you hear lots of percussion and xylophones and things such as that banging away in a dissonant fashion, those instruments just weren’t there in time of Mozart, for example, so you know it’s got to be probably late nineteenth-century and on. 【如果有大量的打击乐器，可能是19世纪以后的音乐】</p>
<p>some instruments are common to many different periods.if you hear a piano, it can’t be Renaissance or medieval; it can’t be Baroque. It could be Classical, Romantic, Impressionist, or Modern, and then on the basis of other things you would come to a conclusion about the style period.【钢琴自Mozart始，所以如果曲子中有钢琴，则可以排除中世纪和巴洛克时期】</p>
</blockquote>
<p>另一些要点：</p>
<ul>
<li>volume，反映出乐队orchestra的大小，19世纪末20世纪初的乐队阵容很大，如果音量很大，可能是浪漫主义后期的音乐。「Mahler wrote a “Symphony of a Thousand,” he called it. He had almost a thousand performers in it.」</li>
<li>harmony 和声。the more unexpected it becomes probably the later you are, the more into the Romantic period you are.【和声越出人意料，越可能是浪漫主义时期的音乐】</li>
<li>the element of consonance versus dissonance 【和谐音与不和谐音】a little bit of dissonance in the Impressionist period and then heavy in the Modernist period, and then it actually backs down in the Post-modern period.【不和谐音越多，越靠后】</li>
</ul>
<p>练习一段浪漫主义时期的音乐，Ravel’s Daphnis and Chloe，拉威尔的芭蕾舞剧《达夫尼与克罗埃》，识别要点：</p>
<ul>
<li><p>large, colorful orchestra</p>
</li>
<li><p>consonant</p>
</li>
<li><p>Parallel motion， Those woodwinds were all going up and down in the same direction。【木管乐器沿着相同的方向上升和下降】</p>
</li>
<li><p>A glissando 【滑奏，这个确实很明显】</p>
</li>
</ul>
<p>插播下《达夫尼与克罗埃》的介绍：</p>
<blockquote>
<p>以古希腊诗人朗高斯（Longus）的‘达夫尼与克罗埃’全三场组成作品为基础，并由俄罗斯芭蕾舞团于1912年在萨特蕾歌剧院作巴黎首演。而拉威尔本人亦从芭蕾舞音乐摘录了一部分，并分别在1911年及1913年首演第一组曲与第二组曲。</p>
<p>大纲分三部分，全曲约50至55分钟。</p>
<ul>
<li>第一部分：面包神与众美少女们之祭坛前</li>
<li>第二部分：海盗布鲁艾希斯之阵营</li>
<li>第三部分（与第一部分相同）：祭坛前方</li>
</ul>
</blockquote>
</li>
<li><p>Review of Gregorian Chants</p>
<p>练习一段中世纪和文艺复兴时期的音乐，格里高利圣咏， written by Thomas Tallis， 识别要点：</p>
<ul>
<li>multiple unaccompanied voices 【多重独立的声部】</li>
<li>Mostly polyphonic，imitative.【复调，模仿的复调】</li>
</ul>
</li>
<li><p>Listening Exercises for Modernist and Classical Music</p>
<p>练习识别一段现代时期的音乐，Ellen Zwilich‘s Celebration,  识别要点：</p>
<ul>
<li>A lot of percussion， particularly the tympani. 【打击乐器，特别是定音鼓】</li>
<li>A lot of dissonance【大量不和谐音】</li>
<li>A lot of brass</li>
<li>lots of ostinatos【大量固定反复】</li>
</ul>
<p>练习识别 Mozart’s Bassoon Concerto 【巴松管协奏曲】，识别要点：</p>
<ul>
<li>Regular meter</li>
<li>strings in the foreground</li>
<li>solo instrument：Bassoon</li>
<li>the solo instrument is playing something kind of simple, kind of  impressive</li>
<li>You should hear lots of little trills and weeping all over the place 【听到颤音】</li>
</ul>
</li>
<li><p>Distinguishing Classical and Romantic Music</p>
<p>古典主义音乐和浪漫主义音乐的不同：</p>
<ul>
<li><p>the size of the orchestra</p>
<blockquote>
<p>in Romantic music the orchestra has many more and many varied instruments in it ranging from top piccolo down to middle English horn down to bottom contrabass, bassoon, tuba and things like that.【浪漫主义时期的管弦乐队，元素更多元更丰富】</p>
</blockquote>
</li>
<li><p>the themes and the melodies etc.</p>
<blockquote>
<p>The regularity of the themes and the balance and symmetry is part and parcel of the Classical period.</p>
<p>You move into the Romantic. You have expansive themes, but by way of contradistinction there, then the rhythm becomes not necessarily more flaccid, but more loose, and we talked about this phenomenon of rubato, for example. So flexible rhythms, flexible tempos, less clear meters in the Romantic period.【浪漫主义时期，主题明朗，节奏松弛舒缓】</p>
<p>this warm, rich melody, is very important in Romantic music.</p>
</blockquote>
</li>
</ul>
</li>
<li><p>Final Exercise and Conclusion</p>
<p>最后一首练习曲，是巴洛克时期 Baroque period 的音乐，使用了乐器大键琴harpsichord，使用了fugue。</p>
<p>大键琴只在巴洛克时期才流行使用。</p>
<p>最后教授请学生们帮忙给一位生病的朋友写康复卡，很有爱的教授。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Yale《listening to music》刷课笔记</category>
      </categories>
      <tags>
        <tag>Music</tag>
      </tags>
  </entry>
  <entry>
    <title>Lecture 04  Rhythmi - Jazz, Pop and Classical</title>
    <url>/posts/notes-on-yale-courses-listening-to-music-lecture04/</url>
    <content><![CDATA[<p>【这一课估计要刷好几遍……I’ll be back】</p>
<ul>
<li><p>Introduction to Multiple Partials</p>
<p>一段热身，回顾 duple 和 triple。</p>
<p>后面教授讲了一段有关sound的问题。</p>
<blockquote>
<p>So when we hear any particular sound, again, we’re hearing an amalgam of many sounds, and the importance of each of these partials in the aggregate of sound is what gives it its particular color.    【不懂】</p>
</blockquote>
</li>
<li><p>Syncopation and Triplets</p>
<p>切分音和三连音。【懵逼ing……】</p>
<p> What’s tempo in music?</p>
<blockquote>
<p>It’s the pace or speed of the beat.</p>
</blockquote>
<p>节拍渐进增强：accelerando 【 fancy Italian term】</p>
<p>越来越慢的节拍：ritardando</p>
<p>What is Syncopation?</p>
<blockquote>
<p>It is simply the insertion of an impulse, a “hit” if you will, at a metrical place that we do not expect it to be.</p>
</blockquote>
<p>Scott Joplin 是在作品中运用 syncopation 的高手。【虽然还是听不出来syncopation到底在哪……】</p>
<p>practice：The Entertainer 【不得不说，前奏简直要跪！】</p>
<p>What is Triplets?</p>
<blockquote>
<p>a triplet is simply insertion of three notes in the place of two, not more complicated than that.</p>
</blockquote>
</li>
<li><p>Basics of Musical Texture</p>
<p>【这一章节彻底懵逼】</p>
<p>what is Texture?</p>
<blockquote>
<p>Texture in music is the dispositions of the musical lines.</p>
</blockquote>
<p>three fundamental textures:</p>
<ul>
<li><p>monophonic texture</p>
</li>
<li><p>homophonic texture</p>
<blockquote>
<p>it all lines up pretty much together; all the parts are changing together.</p>
</blockquote>
</li>
<li><p>polyphonic texture</p>
<blockquote>
<p>a lot of lines going their own way.</p>
<p>Two types:</p>
<ul>
<li><p> imitative polyphonic texture 【imitative：仿效的，模仿的】</p>
</li>
<li><p>free counterpoint</p>
<p>这里教授提到了巴赫喜欢的对位counterpoint，播放了一段 Louis Armstrong 的作品，来说明free counterpoint。</p>
<p>随后播放了一段Johnny Dodds的作品。</p>
</li>
</ul>
</blockquote>
</li>
</ul>
<p>Practice: rhythmic dictation 【听写节奏】</p>
<p>教授举了两个Mozart的例子来说明天才果然是天才……</p>
<p>练习的曲子来自：Great Gate of Kiev from Pictures at an Exhibition</p>
</li>
<li><p>Mozart’s <em>Requiem</em>: Insights on Varying Textures and Pitches</p>
<p>最后的压轴：the “Lacrimosa” out of the “Dies irae” out of the <em>Requiem Mass</em> of Wolfgang Amadeus Mozart written in Vienna seventeen 1791</p>
<p>Mozart’s <em>Requiem</em>: Mozart 安魂曲，1791，Mozart 因病离世，安魂曲尚未完成，由其学生补全。</p>
<p>mass【弥撒曲】 同 symphony 【交响乐】，concerto【协奏曲】一样，也是音乐体裁的一种。</p>
<p>the rhythm picture：</p>
<blockquote>
<p>the rhythm associates with the damned:</p>
<p>The bass rhythm is moving very quickly, it is also going up. It keeps rising up. This builds tension.</p>
<p>Pretty skippy music / Very dissonant music / Minor</p>
<p>the rhythm associates with the prayer:</p>
<p>It’s consonant, it’s in major, it’s high and, most important, the rhythm is very uncomplicated. The notes are long and slow.</p>
</blockquote>
<p>欣赏：</p>
<blockquote>
<p>Now the basses.</p>
<p>Now the quiet prayer.</p>
<p>Change to major.</p>
<p>Now the modulation — change of key from major to — back to minor as the cortege will start up again。[modulation]</p>
<p> A nice clarinet sound there and here comes our cortege with the bass. [单簧管响起，低音部分送葬乐队]</p>
<p>Now just a final close, a cadence.</p>
</blockquote>
<p>最后教授来了句，Dancing to heaven.  哈哈。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Yale《listening to music》刷课笔记</category>
      </categories>
      <tags>
        <tag>Music</tag>
      </tags>
  </entry>
  <entry>
    <title>Lecture 05 Melody - Notes, Scales, Nuts and Bolts</title>
    <url>/posts/notes-on-yale-courses-listening-to-music-lecture05/</url>
    <content><![CDATA[<ul>
<li><p>The Nature of Melody</p>
<p>melody shows up in the high range.</p>
<p>Reason:</p>
<blockquote>
<p>because the way sound waves operate.</p>
<p>The higher frequencies take a lot shorter time to clear.</p>
<p>melodies play faster notes because those sounds clear quickly and we can hear and enjoy the melody.</p>
</blockquote>
</li>
<li><p>The Development of Notes and the Scale</p>
<p>五线谱，每条线之间的frequency /space 是一样的。</p>
<p>重复八度：octave duplication。</p>
<p>很多国家的音乐中，都应用了octave duplication.</p>
<p>west: ABCDEFG，seven notes within the octave.</p>
<p>Indonesia: six notes within the octave.</p>
<p>Example: Ravi Shankar’s raga, 用的乐器 sitar 是一种类似吉他的印度弦乐器</p>
<p>China: five-note within the octave.</p>
<p>Example:  阿炳的《二泉映月》</p>
<p>简介古希腊人处理音乐的方式。</p>
<p>ancient Greeks were very much into mathematics as a way of explaining the world and explaining music in particular.</p>
<p>【这段暂时不懂，待消化书上的内容。】</p>
</li>
<li><p>Major, Minor, and Chromatic Scales in World Music</p>
<ul>
<li><p>seven notes within the scale of the major scale</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/imagesmajor.png"></p>
</li>
<li><p>seven notes within the scale of the minor scale</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/imagesminor.png"></p>
</li>
</ul>
<p>音阶：在八度之内，音的上行和下行的一种固定形式。可以把它想象成一个有八级的梯子，在固定的高和低的两个点之间，由八度形成，可以上或者下这个梯子。</p>
<p>其中，除了BC，EF之间是半级，其他的都是一级。</p>
<p>升号 sharp # VS 降号b flat【相当于键盘上的黑键音】</p>
<p>升调是升半个scale，降调是降半个scale</p>
<p>black notes,  can be called <strong>sharps or flats</strong>. flats are below, take you down  a half step, while sharps take you up a half step.</p>
<p>C大调音阶：按钢琴上的白键 CDEFGABC，正好对应着 1-1-1/2-1-1-1-1/2</p>
<p>C小调音阶：按钢琴上的白键CD，DE间的黑键降E，白键FG，GA间的黑键降A，AB间的黑键降B，白键C，正好对应着1-1/2-1-1-1/2-1-1, 即  C D E-flat F G A-flat B-flat C</p>
<p>同理：</p>
<p>A大调音阶：按钢琴上的白键AB，CD间的黑键升C，白键DE，FG间的黑键升F，GA间的黑键升G，白键A。即A B C-sharp D E F-sharp G-sharp A</p>
<p>A小调音阶：白键 ABCDEFGA</p>
<p>tonic note: the primary note</p>
<p>leading tone:pull into the tonic，引出 tonic note，it is always the seventh degree. It’s always a half step.</p>
<p>例子：Luciano Pavarotti 歌唱片段。</p>
<p><strong>Most of our popular music, folk songs and things like that, are written in duple meter and in a major key.</strong> Occasionally, you get things written in triple meter and in a minor key — minor key.</p>
<p>example：Gershwin Porgy and Bess，【感觉是duple，minor】</p>
<p>在古典音乐中，小调也是很少的，大部分都是大调。</p>
<p>这里教授举了Beethoven’s Third Symphony 第二乐章 minor部分和 Mozart 的作品片段 。</p>
<p>Major: happy, bright, optimistic.</p>
<p>Minor: somber. 【灰暗，昏暗】</p>
<p>大调和小调的形成历史介绍：</p>
<blockquote>
<p>back to  sixteenth century, people started writing these things called madrigals, that were tied to texts. And they got in this habit of, <strong>every time they had a bright, happy text, they’d set this in one kind of mode or key — a major mode — and every time they had a sad one, they’d set it in minor.</strong></p>
</blockquote>
<p>后面教授放了一段犹太人的音乐Traditional Jewish folk music【major  和 minor 之间的界线有点懵逼】</p>
<p>chromatic scale： 半音阶，chromatic 来自希腊语chroma色彩，附加的五个音高的确为音乐增加了色彩。</p>
<p>半音阶会增加紧张和不安。</p>
<p>chromaticism adds tension to music and especially chromaticism that’s pulling up.</p>
</li>
<li><p>Pitch and Rhythm in Beethoven’s Ninth Symphony</p>
<p>这一段完全就是应用前面的所学了。</p>
<p>Beethoven’s Ninth Symphony 第一乐章，前面部分。</p>
<p>乐器：低音提琴，巴松管，小提琴。</p>
<p>texture织体： polyphonic.复式</p>
<p>中间巴松管部分，是countpoint，【没听出来】</p>
<p>低音部分的低音提琴，和声。</p>
<p>后面加入了铜管乐器。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Yale《listening to music》刷课笔记</category>
      </categories>
      <tags>
        <tag>Music</tag>
      </tags>
  </entry>
  <entry>
    <title>Final</title>
    <url>/posts/notes-on-yale-courses-listening-to-music-final/</url>
    <content><![CDATA[<p>A long long long journey.</p>
<p>终于刷完了。</p>
<p>这一路刷过来，懵逼居多，但更是感恩，从最开始刷一个lecture都觉得无法消化，到后面慢慢开始熟悉，告诉自己，心态摆正，正是因为自己懵逼， 所以才要啃它，所以不懂不会是正常的，抱着不求甚解的态度，反而更能enjoy这门课程。</p>
<p>我心里明白，要完全消化这门课的内容，需要好些年的时间，但也不觉得有什么，余生不长也不短，多一件值得去做的事情，也会平添很多乐趣。</p>
<p>教授第一节课说，他要做两件事，一是change your personality， 二是impart to you a love of classical music，我想他做到了。任何一个刷完整套课程的人，一定在某种程度上被改变了，虽然这种改变现在看来可能并不那么明显。</p>
<p>真的很喜欢这个白发的老爷子，像是引路人，耐心地，引导你去一窥新世界的样子。</p>
<p>感谢互联网，让生在这个时代的人，可以以极低的成本就能接触到那么多优质的资源。</p>
<p>也很感谢大饼，分享他的古典歌单，像是一棵种子，让我开始反思自己在听什么，这才有了了解古典乐的念想。</p>
<p>也谢谢自己，坚持听完了整套课程，没错过这么美好的事物，嗯，以后记得要反复回来听很多次，直到消化才可以哦。</p>
<p>最后，想说：Bravo！</p>
]]></content>
      <categories>
        <category>Yale《listening to music》刷课笔记</category>
      </categories>
      <tags>
        <tag>Music</tag>
      </tags>
  </entry>
  <entry>
    <title>editing your vimrc</title>
    <url>/posts/vimscript-learning-on-edit-your-vimrc/</url>
    <content><![CDATA[<p>这一章结合前面所学的, 实现了两个功能: edit and source your vimrc.</p>
<p>当你编辑文件时, 如果想要修改 <code>.vimrc</code> 文件, 并使刚刚修改的配置生效, 有什么快捷的方式?</p>
<p>作者给了如下解决方法.</p>
<p>编辑<code>.vimrc</code>, 添加如下代码:</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;Leader&gt;</span>ev :<span class="keyword">vsplit</span> $MYVIMRC<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;Leader&gt;</span><span class="keyword">sv</span> :<span class="keyword">source</span> $MYVIMRC<span class="symbol">&lt;CR&gt;</span></span><br></pre></td></tr></table></figure>

<p>其中, MYVIMRC 是Vim 提供的环境变量, 指的是 <code>.vimrc</code> 文件的位置, 可通过<code>:echo $MYVIMRC</code> 查看 MYVIMRC 的值.</p>
<p>这里提供了两个 mappings, 按<code>&lt;Leader&gt;ev</code> , 会打开一个新的split, 编辑  <code>.vimrc</code>  文件. 按<code>&lt;Leader&gt;sv</code> , source   <code>.vimrc</code>文件 .</p>
<p>不得不说, 真的超方便.</p>
<p>有了范例, 我也倒腾了一个编辑 <code>.tmux.conf</code> 的mapping.</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;Leader&gt;</span>et :<span class="keyword">vsplit</span> $HOME/.tmux.<span class="keyword">conf</span><span class="symbol">&lt;CR&gt;</span></span><br></pre></td></tr></table></figure>

<p>按<code>&lt;Leader&gt;et</code> , 编辑  <code>.tmux.conf</code>  文件.</p>
<p>同样也可以来个source:</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;Leader&gt;</span><span class="keyword">st</span> :!tmux <span class="keyword">source</span>-<span class="keyword">file</span> $HOME/.tmux.<span class="keyword">conf</span><span class="symbol">&lt;CR&gt;</span></span><br></pre></td></tr></table></figure>

<p> 但是通常需要 source  <code>.tmux.conf</code> 的场合, 也多是在 tmux 中, 直接快捷键 <code>Crtl-b + r</code> 就可以了.所以  source <code>.tmux.conf</code> 的这个 mapping 也可以不配置.</p>
<p>OK,  本章结束, 你也来配置个玩一玩吧^_^</p>
]]></content>
      <categories>
        <category>VimScript 学习笔记</category>
      </categories>
      <tags>
        <tag>Vim</tag>
      </tags>
  </entry>
  <entry>
    <title>Abbreviations</title>
    <url>/posts/vimscript-learning-on-abbrev/</url>
    <content><![CDATA[<p>Vim 的 Abbreviations 特性, 同 mappings 有些相似, 但是主要用于插入, 替换.</p>
<p>这里按照原书的思路简单说一下应用.</p>
<p>先来看个例子.</p>
<p>在命令行模式下, 输入:</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">:<span class="keyword">iabbrev</span> ned end</span><br></pre></td></tr></table></figure>

<p>然后在insert 模式下, 输入 ned 后回车或者退出insert 模式, 会发现 ned 已经变成了 end. [多嘴一句: 为什么是insert 模式下呢? 因为iabbrev 前面有个i….]</p>
<p>这个功能可以很方便纠正一些拼写错误.</p>
<p>鉴于我常常容易打出 ned, 所以我把这个 iabbrev 放在了 <code>.vimrc</code> 中. 哈哈.</p>
<p>不过需要注意的是, 用 abbreviation 替换的, 不可以是关键字 keyword, 包括所有的 ASCII 字符, 下划线(_)等.</p>
<p>可以通过<code>:h isfname</code> 来查看 Vim 中的所有关键字.</p>
<p>为了省去大伙看文档懵逼的时间, 作者在文中贴心地给了一个简单的记忆方法: 用 abbreviation 来替换的, 不可以是单个字母, 数字或者下划线.</p>
<p>说到这里, 你大概会猜, 支持扩展缩略的插件, 比如 <a href="https://github.com/mattn/emmet-vim">mattn/emmet-vim</a> 应该是 Abbreviations 的一个典型应用吧.</p>
<p>我当时就是这么想的, 屁颠屁颠跑去看 <a href="https://github.com/mattn/emmet-vim">mattn/emmet-vim</a> 的源代码想验证下猜想, 结果发现没有 iabbrev 的身影, 取而代之的是 substitute() 函数.🤪 [核心代码都是autoload目录下, 如果你也好奇的话….]</p>
<p>切回 Abbreviations.</p>
<p>如果想要清除刚刚的缩写设置, 可以使用:</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="symbol">:iunabbrev</span> ned</span><br></pre></td></tr></table></figure>

<p>如果想要清除所有的缩写设置, 可以使用:</p>
<figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line"><span class="symbol">:abclear</span></span><br></pre></td></tr></table></figure>

<p>其中, <code>ab</code> 是 <code>abbrev</code> 的缩写形式….</p>
<p>上面 ned 那个例子里, 用mapping 也可以实现一样的功能.</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="symbol">:inoremap</span> ned <span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p>那为什么不用 mapping呢?</p>
<p>因为 mappings 不会考虑需要替换的字符的上下文情况.[Mappings don’t take into account what characters come before or after the map]</p>
<p>作者在书中给了个例子. 但是这个例子很奇怪, inoremap 无效.</p>
<p>所以, 我来整了个简单点的.</p>
<p>在命令行模式下, 输入:</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">:<span class="keyword">inoremap</span> <span class="built_in">log</span> logger.<span class="keyword">debug</span></span><br></pre></td></tr></table></figure>

<p>在 insert 模式下, 输入 log, log会自动更换成 logger.debug, 但是当你输入 blog 时, 发现也被自动替换成了blogger.debug.</p>
<p>这显然不是我们想要的.</p>
<p>换成 <code>iabbrev</code> 就可以避免这个坑.</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">:<span class="keyword">iunmap</span> <span class="built_in">log</span></span><br><span class="line">:<span class="keyword">iabbrev</span> <span class="built_in">log</span> logger.<span class="keyword">debug</span></span><br></pre></td></tr></table></figure>

<p>此处用 <code>iunmap</code> 来清除刚刚设置的mapping.</p>
<p>这时在 insert 模式下, 输入 blog, 发现不会被替换了.</p>
<p>Bravo~</p>
<p>OK, Abbreviations 可以告一段落. 自己试着写几个 abbrev 来帮助更正拼写吧😄️</p>
]]></content>
      <categories>
        <category>VimScript 学习笔记</category>
      </categories>
      <tags>
        <tag>Vim</tag>
      </tags>
  </entry>
  <entry>
    <title>Buffer-Local</title>
    <url>/posts/vimscript-learning-on-buffer-local/</url>
    <content><![CDATA[<p>这一章的内容结合了前面学到的知识.</p>
<p>Buffer-Local, 顾名思义, 基于 Buffer,  只针对当前 Buffer 有效.</p>
<p>前面遇到的 mappings, options , abbreviations, 当需要只对当前 Buffer 生效时, 命令分别是什么呢?</p>
<p>来逐个说明下.</p>
<ul>
<li><p>mappings</p>
<p>打开任意文件, 在命令行模式下, 输入:</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">:<span class="keyword">nnoremap</span> <span class="symbol">&lt;buffer&gt;</span> <span class="symbol">&lt;Leader&gt;</span><span class="keyword">x</span> dd</span><br></pre></td></tr></table></figure>

<p>normal 模式下, 按<code>&lt;Leader&gt;x</code>, 等同于dd, 删除当前行.</p>
<p>此时, 另开一个文件, 执行同样的操作, 按<code>&lt;Leader&gt;x</code> , 没有变化.</p>
<p>Buffer-Local mappings 跟通用的 mappings 不一样的地方, 就是多了一个<code>&lt;buffer&gt;</code>, 也很好记.</p>
<p>需要稍稍注意的是, 当 buffer 与<code>&lt;Leader&gt;</code> 结合时, 建议使用 <code>&lt;LocalLeader&gt;</code> 来代替 <code>&lt;Leader&gt;</code>, 这样避免覆盖了他人的 <code>&lt;leader&gt;</code> mapping.</p>
<p>上面的例子建议改成:</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">:<span class="keyword">nnoremap</span> <span class="symbol">&lt;buffer&gt;</span> <span class="symbol">&lt;LocalLeader&gt;</span><span class="keyword">x</span> dd</span><br></pre></td></tr></table></figure>

<p>再看个例子:</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">:<span class="keyword">nnoremap</span> <span class="symbol">&lt;buffer&gt;</span> Q <span class="keyword">x</span></span><br><span class="line">:<span class="keyword">nnoremap</span>          Q dd</span><br></pre></td></tr></table></figure>

<p>normal 模式下, 按 Q, 发现执行的操作等同 x. 第二个 mapping 配置无效.</p>
<p>Buffer-Local mappings 会覆盖对应的通用的 mappings 配置.这点同 set options 不大一样, 待会会提到.</p>
</li>
<li><p>set options</p>
<p>基于 Buffer-Local 的设置, 用命令 <code>setlocal</code>.</p>
<p> 打开任意文件, 在命令行模式下, 输入:</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">:<span class="keyword">set</span> <span class="keyword">number</span></span><br><span class="line">:<span class="keyword">setlocal</span> nonumber</span><br></pre></td></tr></table></figure>

<p>会发现行号已经消失.</p>
<p>需要注意的是, 如果 setlocal option 后, 又 set 了同一个 option, 则 setlocal 所做的改变会被覆盖.</p>
<p>比如:</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">:<span class="keyword">setlocal</span> nonumber</span><br><span class="line">:<span class="keyword">set</span> <span class="keyword">number</span></span><br><span class="line">:<span class="keyword">setlocal</span> <span class="keyword">number</span>?</span><br></pre></td></tr></table></figure>

<p>此时输出的结果是 number.</p>
</li>
<li><p>abbreviations</p>
<p>同 mappings, Buffer-Local abbreviations 也只需要在<code>abbrev</code> 后, 添加一个<code>&lt;buffer&gt;</code>, 看个例子:</p>
<p>在当前打开的文件下, 命令行模式输入:</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">:<span class="keyword">iabbrev</span> <span class="symbol">&lt;buffer&gt;</span> <span class="built_in">log</span> logger.<span class="keyword">debug</span></span><br></pre></td></tr></table></figure>

<p>切换到 insert 模式, 输入log, 会替换成 logger.debug.</p>
<p>此时, 更换另一个文件, 再次在 insert 模式下, 输入log, 发现没有变化.</p>
<p>同 mappings 一样, Buffer-Local abbreviations 会覆盖通用的 abbreviations.</p>
<p>刚刚设置的文件中, 命令行模式输入:</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">:iabbrev <span class="keyword">log</span> logger.<span class="keyword">info</span></span><br></pre></td></tr></table></figure>

<p>切换到 insert 模式, 输入log, 替换的仍然是 Buffer-local 设置的 logger.debug.</p>
</li>
</ul>
<p>OK. Buffer-Local 基本缕完, 下一章来点不一样的.</p>
]]></content>
      <categories>
        <category>VimScript 学习笔记</category>
      </categories>
      <tags>
        <tag>Vim</tag>
      </tags>
  </entry>
  <entry>
    <title>Welcome Back</title>
    <url>/posts/welcome-back/</url>
    <content><![CDATA[<p>半个月前搭起这个网站的时候，我在想，我的第一篇要写什么？第一篇应该写点特别的吧？至少不能是煽情地发泄个人情绪，写点对他人有用的。嗯，那应该写什么呢？我在纠结与所谓的准备中迟迟不愿开始，大概给自己找借口是所有拖延症患者的通病吧？</p>
<span id="more"></span>

<p>后来，实在是受不了这首页，我想，管他呢，与其在纠结中虚耗生命，不如走出第一步，take baby step。嗯，反正这是自己的领地，随便瞎搞都可以。 ：P</p>
<p>翻出五年前的文字，换成现在，是写不出来的，不禁感叹这些年退步得真是快。</p>
<p>以此文鼓励自己再度踏入文字的世界。</p>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>在门外犹豫了很久，还是推开了，迎面而来的是阵风，里面有久违的味道。</p>
<p>“还是来了？”</p>
<p>“终究逃不过这一劫……”</p>
<p>“呵……”轻笑，嘴角上扬，顿顿，静了一会，“长途而来，喝杯水，昨日刚汲的。”</p>
<p>“甚好。”</p>
<p>井水进入快要干枯的躯体，骨子里每个血管似在喊着畅快，多么久违的重逢，别来无恙？</p>
<p>“别急，慢慢来，绝对够你喝。”末了，加一句“不会是担心等会它从眼中流走？”</p>
<p>“哈哈……”</p>
<p>止杯，笑笑，见窗外. 许久, 吐出一句“你是好，美景伴余生，羡煞。” 环视一周，“倒是勤快，屋里干净。”</p>
<p>“尘不到，时时自有春风扫。”</p>
<p>良久，无声，有风，缓缓的风，空中有秋末收获的清香。</p>
<p>日暮，残阳如血，二人在山边静坐。</p>
<p>“等月上柳枝？”</p>
<p>“不，等霜染青丝。”</p>
<p>“哈哈……”</p>
<p>黄粱一梦。</p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>Life</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么要编程？</title>
    <url>/posts/why-I-choose-to-be-a-programmer/</url>
    <content><![CDATA[<p>整理文档的时候，翻到了17年年末写的一篇小复盘，决定贴上，他日若有悔意，可做打脸凭证。</p>
<span id="more"></span> 

<h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><p>这一篇写给自己。</p>
<p>关于为什么我要编程。</p>
<p>记得几年前有篇很火的文章，why everyone should learn programming? 呼吁着人人都应该学一点编程技能。</p>
<p>编程将会在不久的未来成为一个必备技能。</p>
<p>所以你必须学习编程。</p>
<p>可这是别人的版本，不是我的版本。</p>
<p>我为什么要学？</p>
<p>也许是大学四年那少有的几次熬夜coding？我早已不记得当时敲的具体是什么了，只记得宿舍的灯已经熄了，室友们已经睡了，安静得只听到键盘的敲击声，而我盯着电脑屏幕，看到那个C++程序运行成功，那一刻，满满的快乐与知足。</p>
<p>也许是在我脑抽地报了C#选修课？记得第一天去上课，老师点名的时候，我才发现我是唯一一个外班的学生，其他同学都是计算机专业的，但是这并不妨碍我去跟着瞎倒腾。虽然那个学期课堂上的很多知识点我早已忘了，但这一段特别的学习经历却在记忆中留下了痕迹。</p>
<p>也许是大三时那次Matlab期末考？我还记得有一题作图大题，那题老师曾在实验室解过，代码很长。课后我用了两个for循环，运行结果无误，但是整个代码块简化了很多，看着特别清爽，所以考试时，我继续照着自己的想法来，后面竟然拿到了满分。现在想来，那时候我做的应该算是refactoring。</p>
<p>乔帮主曾说“  You can’t connect the dots looking forward; you can only connect them looking backwards. So you have to trust that the dots will somehow connect in your future. ”</p>
<p>也许这些便是后来那些事情发生的引子。</p>
<p>毕业后， 我做的是市调数据分析的工作，能跟coding搭上边的就是设计网络问卷，可以玩玩JS特效，那时候啥也不懂，只是单纯喜欢看那些英文docs，跟着文档实作，出现预期效果便会欢喜，更多的是图个乐。</p>
<p>14年，利用下班时间和周末，一个月把VBA学了个大概，然后就开始自顾自地玩起来，把工作中遇到的重复劳动简化，自动化报表，后续被老大发现我竟然还有这技能，索性给我安排coding的工作，然后就是做些小插件，认识了visual studio。</p>
<p>16年，看了Linus Torvalds的那本《Just for fun》，然后心里痒痒地想着要玩一次Linux系统，给Mac装虚拟机，倒腾Ubuntu，在Edx上刷《Intro to Linux》，看《Linux command line》, 注册cloud9， 我还记得7月的时候，cloud9被Amazon收购了，cloud9的CEO写了封信，结尾处happy coding，莫名觉得激动。</p>
<p>刷了点Linux，半懂不懂，但也觉得没什么，just for fun，当然也没闲着，瞎逛过多个学习平台，刷了Edx的《Introduction to Computer Science and Programming Using Python》，在Udacity刷了《Introduction to java programming》，安装BlueJ各种玩……</p>
<p>这么瞎倒腾的结果是，我把bashprofile玩坏了，后来不得不拿着Mac到店里重装系统。</p>
<p>而对于ROR，最开始的接触是看了Michael Hartl的learn enough to be dangerous 系列，后来在Amazon上买了本原版的《Eloquent Ruby》，这应该是我二十多年来买的最贵的一本书。不过那时候更多的是小打小闹，完全野路子，没有任何目标性地自学，多浅尝辄止，后来机缘巧合，看到了Fullstack线上培训，报名，随后便是几个月的投入，第一次在机场候机时敲代码，第一次参加meetup，第一次用hexo+github搭建了自己的个人网站，第一次与人协作并成功部署了一个乐器售卖平台，第一次按照自己的想法做了个线下meetup的召集令，第一次租阿里云，买域名，买SSL凭证，第一次开始以编程谋生……</p>
<p>太多的第一次。</p>
<p>当年那个不小心瞥了一眼C++的大二女孩，一定不会想到多年后她会成为一名程序员。</p>
<p>Welcome to the new world。</p>
<p>这个新世界很大，路很长，所以呢？</p>
<p>可以看很多很多的风景。</p>
<p>也不是没有顾忌。</p>
<p>这是个新东西层出不穷的时代，特别是技术领域，很多我们今天习以为常的技术，不久可能就会被丢弃。</p>
<p>但那又如何？进步不就是推陈出新？科技在进步的同时，人也在进步。</p>
<p>拥抱变化，努力成为其中的一部分。</p>
<p>Enjoy。</p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>Life</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo 主题魔改记录</title>
    <url>/posts/custom-hexo-next-theme/</url>
    <content><![CDATA[<p>自己折腾了下 Hexo 的 next 主题. 给 post 添加了字段 type. 为了避免下次崩了的时候, 我会对着自己写的代码一脸懵逼, 简单记录下……</p>
<span id="more"></span>

<p>本文基于 hexo-theme-next version 5.</p>
<h4 id="首页分页"><a href="#首页分页" class="headerlink" title="首页分页"></a>首页分页</h4><p>预期效果: 在首页不显示 post 中 type 为 book 的文章</p>
<p>思路: 修改首页的分页, 过滤掉 type 为 book 的文章.</p>
<p>具体实现:</p>
<p>参考 <a href="https://github.com/hexojs/hexo-generator-index">hexo-generator-index</a> ,  在 next 的 scripts 下, 添加文件 customIndexPagination.js, 内容如下:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> pagination = <span class="built_in">require</span>(<span class="string">&#x27;hexo-pagination&#x27;</span>);</span><br><span class="line"></span><br><span class="line">hexo.extend.generator.register(<span class="string">&#x27;customIndexPagination&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">locals</span>)</span>&#123;</span><br><span class="line">  locals.posts.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">post</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//  set post default type as post, 设置默认值</span></span><br><span class="line">    <span class="keyword">if</span> (post.type == <span class="literal">undefined</span>) &#123;</span><br><span class="line">      post.type = <span class="string">&quot;post&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> config = <span class="built_in">this</span>.config;</span><br><span class="line">  <span class="keyword">const</span> posts = locals.posts.sort(config.index_generator.order_by);</span><br><span class="line">  <span class="comment">// filter posts with type == &quot;post&quot;, 过滤</span></span><br><span class="line">  <span class="keyword">const</span> postsWithoutbook = posts.find(&#123; <span class="string">&quot;type&quot;</span>: <span class="string">&quot;post&quot;</span> &#125;)</span><br><span class="line"></span><br><span class="line">  posts.data.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> (b.sticky || <span class="number">0</span>) - (a.sticky || <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> paginationDir = config.pagination_dir || <span class="string">&#x27;page&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> path = config.index_generator.path || <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> pagination(path, postsWithoutbook, &#123;</span><br><span class="line">    <span class="attr">perPage</span>: config.index_generator.per_page,</span><br><span class="line">    <span class="attr">layout</span>: [<span class="string">&#x27;index&#x27;</span>, <span class="string">&#x27;archive&#x27;</span>],</span><br><span class="line">    <span class="attr">format</span>: paginationDir + <span class="string">&#x27;/%d/&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="attr">__index</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="分类排序"><a href="#分类排序" class="headerlink" title="分类排序"></a>分类排序</h4><p>预期效果: 同一个 category 中, 所有 type 为 book 的 post 按照指定字段排序后再分页.这里按照 ranked 字段来排序 posts.</p>
<p>思路: 找到 page下对应的category, 按照 ranked 字段排序后, 调用 slice 实现分页.</p>
<p>具体实现:</p>
<p>next version 5 的模板用的是swig 语法, <a href="https://github.com/paularmstrong/swig">swig</a>已经多年不维护, 这个用起来还是折腾的.很多ES6语法不支持. 等后续有时间再折腾, 目前凑合用用swig….</p>
<p>修改 layout/category.swig, 在 Section部分, 添加如下代码:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;section id=&quot;posts&quot; class=&quot;posts-collapse&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;collection-title&quot;&gt;</span><br><span class="line">    &lt;h2 &gt;&#123;&#123; page.category &#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">...........</span><br><span class="line"></span><br><span class="line">  &#123;% set current = page.current %&#125;</span><br><span class="line">  &#123;% set pre = current - 1 %&#125;</span><br><span class="line">  &#123;% set perPage = config.per_page %&#125;</span><br><span class="line">  &#123;% set category = site.categories.findOne(&#123; &quot;name&quot;: page.category &#125;) %&#125;</span><br><span class="line">  &#123;% set posts = category.posts.sort(&#x27;ranked&#x27;) %&#125;</span><br><span class="line">  &#123;% set bookPost = posts.find(&#123; type: &#x27;book&#x27; &#125;) %&#125;</span><br><span class="line">  &#123;% set hasBookPost = bookPost.length &gt; 0 %&#125;</span><br><span class="line">  &#123;% if hasBookPost %&#125;</span><br><span class="line">    &#123;% set posts = posts.slice(perPage * pre, perPage * current) %&#125;</span><br><span class="line">  &#123;% else %&#125;</span><br><span class="line">    &#123;% set posts = page.posts %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">  &#123;% for post in posts %&#125;</span><br><span class="line">    &#123;&#123; post_template.render(post) &#125;&#125;</span><br><span class="line">  &#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">  ..........</span><br></pre></td></tr></table></figure>

<p>逻辑很简单, 主要调用 slice 来得到当前分页中的posts.</p>
<p>其中 site.categories 调用了findOne来查找当前页面的category, 参考的是 <a href="https://hexojs.github.io/warehouse/index.html">warehouse</a>.</p>
<p>OK.</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://github.com/hexojs/hexo-pagination">hexo-pagination</a></p>
<p><a href="https://github.com/hexojs/hexo-generator-index">hexo-generator-index</a></p>
<p><a href="https://hexojs.github.io/warehouse/index.html">warehouse</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>autocmd</title>
    <url>/posts/vimscript-learning-on-autocmd/</url>
    <content><![CDATA[<p>autocmd 用于配置当某个确定事件发生时, 要执行的命令.</p>
<p>借用书中的例子, 看一下 autocmd 的基本结构:</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="meta">:autocmd BufWritePre,BufRead *.html :normal</span> gg=G</span><br><span class="line"><span class="code">         ^                   ^      ^</span></span><br><span class="line"><span class="code">         |                   |      |</span></span><br><span class="line"><span class="code">         |                   |      需要执行的命令</span></span><br><span class="line"><span class="code">         |                   |</span></span><br><span class="line"><span class="code">         |                   模式, 用来过滤事件</span></span><br><span class="line"><span class="code">         |</span></span><br><span class="line"><span class="code">         监听的事件</span></span><br></pre></td></tr></table></figure>

<p>这里 BufWritePre, BufRead 都是需要监听的事件, *.html 是需要过滤的模式, 整个命令的含义就是, 当开始写入 html 类型文件或者编辑 html 类型文件之前, 自动执行<code>:normal gg=G</code>, 也就是缩进代码.</p>
<p>[此处, BufWritePre 指的是开始将整个 Buffer 写入文件 , BufRead 指的是读文件后, 开始编辑. ]</p>
<p>通过<code>:h autocmd-events</code> 可以查看所有可以绑定 Autocommands 的事件列表.</p>
<p>其中, 最常用的 Event 是 FileType.</p>
<p>比如:</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">:<span class="keyword">autocmd</span> FileType javascript <span class="keyword">nnoremap</span> <span class="symbol">&lt;buffer&gt;</span> <span class="symbol">&lt;LocalLeader&gt;</span><span class="keyword">c</span> I//<span class="symbol">&lt;esc&gt;</span></span><br></pre></td></tr></table></figure>

<p>当打开一个javascript (.js)文件时, 执行<code>nnoremap &lt;buffer&gt; &lt;LocalLeader&gt;c I//&lt;esc&gt;</code>, 也就是按 <code>&lt;LocalLeader&gt;c</code>  会添加注释.</p>
<p>这里提一个简单的应用.</p>
<p>Vim中编辑 json 文件的时候, 默认是没有格式化的, 如何实现打开JSON文件时, 自动格式化内容, 方便阅读?</p>
<p>这里说一下我的做法.</p>
<p>安装 jq, 附上链接<a href="https://stedolan.github.io/jq/download/">download</a></p>
<p>修改 <code>.vimrc </code>, 添加:</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">autocmd <span class="keyword">BufRead </span>*.<span class="keyword">json </span>%!<span class="keyword">jq </span><span class="string">&#x27;.&#x27;</span></span><br></pre></td></tr></table></figure>

<p>source 后, 打开 json 格式文件时, 可以看到已经格式化了.</p>
<p>autocmd 有一个兄弟 augroup. 可以把相近的 autocmd 放在一个group 中:</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">augroup</span> testgroup</span><br><span class="line">  autocmd!</span><br><span class="line">  <span class="keyword">autocmd</span> BufWrite * :<span class="keyword">echom</span> <span class="string">&quot;Cats&quot;</span></span><br><span class="line"><span class="keyword">augroup</span> END</span><br></pre></td></tr></table></figure>

<p>这里使用<code>autocmd!</code>  来清理之前的 autocmd 设置.</p>
<p>augroup 的作用, 是用来避免重复定义 autocmd. 官网文档给到的解释是:</p>
<blockquote>
<p>This prevents having the autocommands defined twice (e.g., after sourcing the .vimrc file again).</p>
</blockquote>
<p>书中使用了一个 BufWrite + echom 的例子来说明使用 augroup 可以避免的问题, 同文档提到的一致, 这里就不细说了.</p>
<p>附上一个小小的tips. 如果你有执行 augroup 的例子, 会发现 messages 有些多,  想要清理的话, 可以使用<code>:messages clear</code></p>
<p>OK, 本章结束.</p>
<p>Bye 2021.</p>
]]></content>
      <categories>
        <category>VimScript 学习笔记</category>
      </categories>
      <tags>
        <tag>Vim</tag>
      </tags>
  </entry>
  <entry>
    <title>status lines</title>
    <url>/posts/vimscript-learning-on-statusline/</url>
    <content><![CDATA[<p>来看看如何自定义状态栏显示.</p>
<p>Statusline 是 Vim 的一个 option, 可通过:</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">:<span class="builtin-name">set</span> statusline?</span><br></pre></td></tr></table></figure>

<p>查看当前的 statusline 配置.</p>
<p>当然, 我们也可以自定义状态栏的显示内容.</p>
<p>打开一个Markdown 文件,  命令行模式下, 输入:</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="meta">:set statusline=%f\ -\ FileType:\</span> %y</span><br></pre></td></tr></table></figure>

<p>会看到状态栏显示如下类似内容:</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">foo<span class="selector-class">.md</span> - FileType: <span class="selector-attr">[markdown]</span></span><br></pre></td></tr></table></figure>

<p>这里的 <code>%f</code>表示当前文件的相对路径, <code>%y </code> 表示文件的类型.</p>
<p>statusline 的设置, 有些类似 C 里面的 printf.</p>
<p>它的通用格式如下:</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml">%-0</span><span class="template-variable">&#123;minwid&#125;</span><span class="xml">.</span><span class="template-variable">&#123;maxwid&#125;</span><span class="template-variable">&#123;item&#125;</span></span><br></pre></td></tr></table></figure>

<p>其中, 除了<code>%</code>  和 <code>&#123;item&#125;</code>, 其他都是可选的. 而 minwd, maxwid 分别指的是最小和最大宽度.</p>
<p>看几个简单的例子就清楚了.</p>
<p>显示行号:</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="meta">:set statusline=Current:\</span> %4l\ Total:\ %4L</span><br></pre></td></tr></table></figure>

<p>会看到状态栏显示如下类似内容:</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Current</span>:    <span class="number">9</span> Total:   <span class="number">66</span></span><br></pre></td></tr></table></figure>

<p>这里设置了最短长度4, 默认用空格来补全.</p>
<p>可以设置为用0来补全:</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="meta">:set statusline=Current:\</span> %04l\ Total:\ %04L</span><br></pre></td></tr></table></figure>

<p>状态栏显示如下:</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Current</span>: <span class="number">0009</span> Total: <span class="number">0066</span></span><br></pre></td></tr></table></figure>

<p>再比如, 显示文件的绝对路径:</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">:<span class="builtin-name">set</span> <span class="attribute">statusline</span>=%.20F</span><br></pre></td></tr></table></figure>

<p>此处, 最大宽度设置为20, 状态栏显示如下:</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;-<span class="keyword">on</span>-buffer-<span class="keyword">local</span>.md</span><br></pre></td></tr></table></figure>

<p>通过 <code>:h statusline</code> , 可以查看所有可用的 item 及其对应含义.</p>
<p>此外, 如果 statusline 是以 <code>%!</code> 开头, 比如 <code>:set statusline=%!MyStatusLine()</code> , 则表示<code>MyStatusLine()</code> 是个表达式, 这个表达式的结果才是 statusline 对应的值.</p>
<p>如果你安装了airline, 命令模式输入:</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">:<span class="builtin-name">set</span> statusline?</span><br></pre></td></tr></table></figure>

<p>会看到输出结果:</p>
<figure class="highlight leaf"><table><tr><td class="code"><pre><span class="line">statusline=%!airline<span class="function"><span class="keyword">#</span><span class="title">statusline</span><span class="params">(1)</span></span></span><br></pre></td></tr></table></figure>

<p>这里就是使用了<code>%!</code>.</p>
<p>书中还介绍了<code>%=</code>, 用于对齐, 这里就略过了.</p>
<p>OK, 本节结束, 我去吃点好吃的奖励下自己还没弃坑😋</p>
]]></content>
      <categories>
        <category>VimScript 学习笔记</category>
      </categories>
      <tags>
        <tag>Vim</tag>
      </tags>
  </entry>
  <entry>
    <title>Operator Pending Mappings</title>
    <url>/posts/vimscript-learning-on-operator-pending-mappings/</url>
    <content><![CDATA[<p>前面介绍 mapping 的时候, 留了个operator-pending 的坑, 现在来填. </p>
<p>官方文档中, 对 Operator-pending mappings 的解释是:</p>
<blockquote>
<p>Operator-pending mappings can be used to define a movement command that can be<br>used with any operator. </p>
</blockquote>
<p>Operator-pending mappings 可以用于定义会被执行的移动指令.[我这翻译的…]</p>
<p>看个简单的例子来理解.</p>
<p>打开文件test.txt, 内容如下:</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">This <span class="keyword">is</span> (<span class="keyword">some</span>) <span class="built_in">text</span> <span class="keyword">about</span> topic one.</span><br><span class="line"></span><br><span class="line">It has multiple (<span class="built_in">paragraphs</span>).</span><br><span class="line">part1(<span class="built_in">paragraph</span>) content.</span><br><span class="line">part2(<span class="built_in">paragraph</span>) content.</span><br><span class="line">part3(<span class="built_in">paragraph</span>) content.</span><br><span class="line">.....</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p>命令模式下, 执行:</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line">:<span class="selector-tag">onoremap</span> <span class="selector-tag">p</span> <span class="selector-tag">i</span>(</span><br></pre></td></tr></table></figure>

<p>这时, 在 normal 模式下, 按<code>dp</code>, 等同于<code>di(</code>, 即删除<code>()</code> 里的内容.</p>
<p>这里默认从当前光标所在位置, 往下查找第一个<code>()</code>, 然后执行操作.</p>
<p>比如, 我们把光标移动到第三行 It has……, 按<code>dp</code>,  会发现 paragraphs 被删除了.</p>
<p>当光标停留在最后一行 end, 按<code>dp</code>, 发现无效.</p>
<p>如果想要消除光标所在位置, 就需要使用<code>&lt;C-u&gt;</code> CTRL-u.</p>
<p>来看个例子:</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="meta">:onoremap i( :&lt;C-u&gt;normal!</span> 0f)vi(&lt;CR&gt;</span><br></pre></td></tr></table></figure>

<p>此时, 按<code>di(</code>, 不管光标在哪里, 会删除光标所在行的第一个<code>()</code> 中的内容.</p>
<p>鉴于 Operator-pending mappings 我平时用到的很少, 也没有细细研究, 目前就不多扯了.</p>
<p>想要了解更多, 可以看官方文档:</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">:h omap-<span class="meta">info</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>VimScript 学习笔记</category>
      </categories>
      <tags>
        <tag>Vim</tag>
      </tags>
  </entry>
  <entry>
    <title>electron 代理配置</title>
    <url>/posts/set-proxy-for-electron/</url>
    <content><![CDATA[<p>踩了两次坑, 记录下.</p>
<span id="more"></span>

<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>node version: v12.22.3<br>yarn version: 1.22.10</p>
<p>终端执行:</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">yarn <span class="built_in">add</span> <span class="comment">--dev electron</span></span><br></pre></td></tr></table></figure>

<p>一直报错:</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">Output:</span></span><br><span class="line"><span class="symbol">RequestError:</span> read ETIMEDOUT</span><br></pre></td></tr></table></figure>

<p>已经设置了代理, 无效:</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">https_proxy=http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">7890</span></span><br><span class="line">http_proxy=http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">7890</span></span><br><span class="line">all_proxy=socks5:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">7891</span></span><br></pre></td></tr></table></figure>

<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>参考 <a href="https://www.electronjs.org/docs/latest/tutorial/installation#proxies">Advanced Installation Instructions</a>, node 10+需要设置环境变量.<br><code>GLOBAL_AGENT_ENVIRONMENT_VARIABLE_NAMESPACE</code> 采用默认值<code>GLOBAL_AGENT_</code></p>
<p>分别设置 <code>HTTP_PROXY</code>, <code>HTTPS_PROXY</code>:</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">GLOBAL_AGENT_HTTP_PROXY</span>=http://127.0.0.1:7890</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">GLOBAL_AGENT_HTTPS_PROXY</span>=http://127.0.0.1:7890</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">ELECTRON_GET_USE_PROXY</span>=1</span><br></pre></td></tr></table></figure>

<p>重新执行:</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">yarn <span class="built_in">add</span> <span class="comment">--dev electron</span></span><br></pre></td></tr></table></figure>
<p>OK.</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.electronjs.org/docs/latest/tutorial/installation#proxies">Advanced Installation Instructions</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>ErrorTracking</tag>
        <tag>Electron</tag>
      </tags>
  </entry>
  <entry>
    <title>As I began to love myself</title>
    <url>/posts/as-I-began-to-love-myself/</url>
    <content><![CDATA[<p>读到一首不错的现代诗, 分享下 ^_^</p>
<span id="more"></span>


<p>As I began to love myself,<br>I found that anguish and emotional suffering are only warning signs that I was living against my own truth.<br>Today, I know, this is “authenticity”.</p>
<p>As I began to love myself,<br>I understood how much it can offend somebody,<br>As I try to force my desires on this person, even though I knew the time was not right and the person was not ready for it, and even though this person was me.<br>Today I call it “respect”.</p>
<p>As I began to love myself,<br>I stopped craving for a different life, and I could see that everything that surrounded me was inviting me to grow.<br>Today I call it “maturity”.</p>
<p>As I began to love myself,<br>I understood that at any circumstance, I am in the right place at the right time, and everything happens at the exactly right moment.<br>So I could be calm.<br>Today I call it “self-confidence”.</p>
<p>As I began to love myself,<br>I quit steeling my own time, and I stopped designing huge projects for the future.<br>Today, I only do what brings me joy and happiness, things I love to do and that make my heart cheer, and I do them in my own way and in my own rhythm.<br>Today I call it “simplicity”.</p>
<p>As I began to love myself,<br>I freed myself of anything that is no good for my health – food, people, things, situations, and everything that drew me down and away from myself.<br>At first I called this attitude a healthy egoism.<br>Today I know it is “love of oneself”.</p>
<p>As I began to love myself,<br>I quit trying to always be right, and ever since I was wrong less of the time.<br>Today I discovered that is “modesty”.</p>
<p>As I began to love myself,<br>I refused to go on living in the past and worry about the future.<br>Now, I only live for the moment, where everything is happening.<br>Today I live each day, day by day, and I call it “fulfillment”.</p>
<p>As I began to love myself,<br>I recognized that my mind can disturb me and it can make me sick.<br>But as I connected it to my heart, my mind became a valuable ally.<br>Today I call this connection “wisdom of the heart”.</p>
<p>We no longer need to fear arguments, confrontations or any kind of problems with ourselves or others.<br>Even stars collide, and out of their crashing new worlds are born.<br>Today I know “that is life”.</p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>Life</tag>
        <tag>Poem</tag>
      </tags>
  </entry>
  <entry>
    <title>Using Puppeteer with executablePath in Electron</title>
    <url>/posts/using-puppeteer-with-executablePath-in-electron/</url>
    <content><![CDATA[<p>记录 Electron 踩坑过程.</p>
<span id="more"></span> 

<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>使用 Electron 创建桌面应用, 程序中调用了 <a href="https://github.com/puppeteer/puppeteer">puppeteer</a>,  开发环境下一切正常, 使用 electron-builder 在Mac上打包成 Windows下的可执行文件后, 程序在Windows上跑时一直卡着不动.</p>
<p>Debug后发现一直卡在 <code>puppeteer.launch</code> .</p>
<p>环境:</p>
<p>puppeteer: 13.0.1</p>
<p>electron: 17.0.0</p>
<p>electron-builder: 22.10.4</p>
<p>node: 12.22.3</p>
<p>yarn: 1.22.10</p>
<h4 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h4><p>Debug后发现问题的根源在于 MacOS 上打包时,  node_module 中 puppeteer 的Chrome, 是适配MacOS系统版本的, 这个Chrome 在 Windows下肯定是无法正常运行的.</p>
<p>参考<a href="https://github.com/puppeteer/puppeteer/issues/2134">puppeteer issue: run from electron</a> 中, scriptify 的回复:</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/imagespuppeteer.jpg"></p>
<p>自己写一个脚本, 本地下载个Windows版本的chrome, 然后打包进去, <code>puppeteer.launch</code> 时指定 executablePath.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 下载 chrome.</span></span><br><span class="line"><span class="keyword">const</span> puppeteer = <span class="built_in">require</span>(<span class="string">&#x27;puppeteer&#x27;</span>);</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span>() =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> browserFetcher = puppeteer.createBrowserFetcher(&#123; <span class="attr">platform</span>: <span class="string">&quot;win32&quot;</span> &#125;);</span><br><span class="line">  <span class="keyword">const</span> revisionInfo = <span class="keyword">await</span> browserFetcher.download(<span class="string">&#x27;533271&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(revisionInfo)</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<p>按照 scriptify 给的方法, 修改package.json:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;build&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;asar&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;asarUnpack&quot;</span>: <span class="string">&quot;node_modules/puppeteer/.local-chromium/win32-533271/**/*&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改调用 <code>puppeteer.launch</code> 的地方:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> homeDir = puppeteer.executablePath().split(<span class="string">&#x27;app.asar&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">const</span> executablePath = homeDir.concat(<span class="string">&quot;app.asar.unpacked\\node_modules\\puppeteer\\.local-chromium\\win32-533271\\chrome-win32\\chrome.exe&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> browser = <span class="keyword">await</span> puppeteer.launch(&#123; <span class="attr">executablePath</span>: executablePath, <span class="attr">args</span>: [ <span class="string">&quot;--disable-gpu&quot;</span>, <span class="string">&quot;--disable-dev-shm-usage&quot;</span>, <span class="string">&quot;--disable-setuid-sandbox&quot;</span>, <span class="string">&quot;--no-sandbox&quot;</span> ] &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>诡异的是, 打包后扔进 Windows里面运行, 发现 Chrome.exe 文件是存在的. 但是 puppeteer 依然没有成功运行.</p>
<p>最后无奈, 直接换成 在Windows下打包, 同时指定 executablePath.问题解决.</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://github.com/puppeteer/puppeteer/issues/2134">puppeteer issue: run from electron</a></p>
<p><a href="https://yrq110.me/post/front-end/the-right-way-to-use-puppeteer-in-electron/">配置Electron中Puppeteer executablePath的正确姿势</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>ErrorTracking</tag>
        <tag>Electron</tag>
      </tags>
  </entry>
  <entry>
    <title>Traefik 改用 acme.sh 为域名生成证书</title>
    <url>/posts/using-acme-sh-to-generate-certs-for-tls-in-traefik/</url>
    <content><![CDATA[<p>Traefik 踩坑记录.</p>
<span id="more"></span> 

<p>Traefik 可以配置自动生成证书的 ACME 供应商, 比如Let’s Encrypt.</p>
<p>官方文档提到会自动更新证书. 但实际情况是, 到期了证书有时并没有更新, 导致出现证书过期的情况. </p>
<p>这里记录下在服务器上配置 Traefik 时, 改用 acme.sh 来签证书并自动更新的步骤. </p>
<h4 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h4><p>默认服务器为Ubuntu, traefik 已启用, 对应的docker-compose.yml 存放在/opt/global目录下.</p>
<p>其中<code>/opt/global/docker-compose.yml</code> 的具体内容如下.</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">traefik:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">traefik:v2.2</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">&quot;traefik&quot;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8080:8080&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;80:80&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;443:443&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">my_proxy</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./traefik.toml:/traefik.toml</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./providers:/providers</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./acme.json:/acme.json</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">my_proxy:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>我们挂载了/opt/global 目录下的 <code>traefik.toml</code>, 该文件存放了一些默认的配置, 内容如下:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line">[<span class="string">entryPoints</span>]</span><br><span class="line">  [<span class="string">entryPoints.web</span>]</span><br><span class="line">    <span class="string">address</span> <span class="string">=</span> <span class="string">&quot;:80&quot;</span></span><br><span class="line"></span><br><span class="line">  [<span class="string">entryPoints.websecure</span>]</span><br><span class="line">    <span class="string">address</span> <span class="string">=</span> <span class="string">&quot;:443&quot;</span></span><br><span class="line"></span><br><span class="line">  [<span class="string">entryPoints.traefik</span>]</span><br><span class="line">    <span class="string">address</span> <span class="string">=</span> <span class="string">&quot;:8080&quot;</span></span><br><span class="line"></span><br><span class="line">[<span class="string">api</span>]</span><br><span class="line">  <span class="string">insecure</span> <span class="string">=</span> <span class="literal">true</span></span><br><span class="line">  <span class="string">dashboard</span> <span class="string">=</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[<span class="string">log</span>]</span><br><span class="line">  <span class="string">level=</span> <span class="string">&quot;DEBUG&quot;</span></span><br><span class="line"></span><br><span class="line">[<span class="string">certificatesResolvers</span>]</span><br><span class="line">  [<span class="string">certificatesResolvers.lets-encrypt</span>]</span><br><span class="line">    [<span class="string">certificatesResolvers.lets-encrypt.acme</span>]</span><br><span class="line">      <span class="string">email</span> <span class="string">=</span> <span class="string">&quot;myEmail@gmail.com&quot;</span></span><br><span class="line">      <span class="string">storage</span> <span class="string">=</span> <span class="string">&quot;acme.json&quot;</span></span><br><span class="line">    [<span class="string">certificatesResolvers.lets-encrypt.acme.tlsChallenge</span>]</span><br><span class="line"></span><br><span class="line">[<span class="string">providers.docker</span>]</span><br><span class="line">  <span class="string">watch</span> <span class="string">=</span> <span class="literal">true</span></span><br><span class="line">  <span class="string">exposedByDefault=false</span></span><br><span class="line">  <span class="string">network</span> <span class="string">=</span> <span class="string">&quot;my_proxy&quot;</span></span><br><span class="line"></span><br><span class="line">[<span class="string">providers.file</span>]</span><br><span class="line">  <span class="string">watch</span> <span class="string">=</span> <span class="literal">true</span></span><br><span class="line">  <span class="string">directory=&quot;/providers&quot;</span></span><br></pre></td></tr></table></figure>

<p>可以看到我们声明了一个证书解析器 (certificatesResolvers)  lets-encrypt. </p>
<p>而 我们需要使用 acme.sh 生成证书的 Web项目, 存放在/opt/web/ 下, 其 <code>docker-compose.yml</code> 内容如下:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">my-web:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">my-docker-image</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="string">......</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;traefik.enable=true&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;traefik.http.routers.my-web-http.rule=Host(`example.com`, `api.example.com`) &amp;&amp; PathPrefix(`/`)&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;traefik.http.routers.my-web-http.entrypoints=web&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;traefik.http.routers.my-web-http.middlewares=my-web-https&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;traefik.http.middlewares.my-web-https.redirectscheme.scheme=https&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;traefik.http.routers.my-web.rule=Host(`example.com`, `api.example.com`) &amp;&amp; PathPrefix(`/`)&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;traefik.http.routers.my-web.entrypoints=websecure&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;traefik.http.routers.my-web.tls.certresolver=lets-encrypt&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;traefik.http.services.my-web-http.loadbalancer.server.port=80&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">my_proxy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">my_proxy:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>这里可以看到, 我们给 web 配置的 certresolver 配置为之前定义的 lets-encrypt. </p>
<p> 如果查看 <code>acme.json</code> 文件, 你会看到类似如下内容, Certificates 部分有我们的 <code>example.com</code> 及子域名<code>api.example.com</code>  :</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;lets-encrypt&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;Account&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;Email&quot;</span>: <span class="string">&quot;myEmail@gmail.com&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;Registration&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;body&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;status&quot;</span>: <span class="string">&quot;valid&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;contact&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;mailto:myEmail@gmail.com&quot;</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;uri&quot;</span>: <span class="string">&quot;https://acme-v02.api.letsencrypt.org/acme/acct/xxxxx&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;PrivateKey&quot;</span>: <span class="string">&quot;xxxx&quot;</span>,</span><br><span class="line">       <span class="attr">&quot;KeyType&quot;</span>: <span class="string">&quot;4096&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;Certificates&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;domain&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;main&quot;</span>: <span class="string">&quot;example.com&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;sans&quot;</span>: [<span class="string">&quot;api.example.com&quot;</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;certificate&quot;</span>:<span class="string">&quot;xxxx&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;key&quot;</span>: <span class="string">&quot;xxxxxx&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;store&quot;</span>: <span class="string">&quot;default&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;domain&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;main&quot;</span>: <span class="string">&quot;example1.com&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;certificate&quot;</span>:<span class="string">&quot;xxxx&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;key&quot;</span>: <span class="string">&quot;xxxxxx&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;store&quot;</span>: <span class="string">&quot;default&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      .........</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<p>此时, 网站正常访问.</p>
<p>现在我们来更改 <code>example.com</code> 的 tls 配置, 证书改用 acme.sh 来签发.</p>
<h4 id="改用-acme-sh"><a href="#改用-acme-sh" class="headerlink" title="改用 acme.sh"></a>改用 acme.sh</h4><p>acme 验证的主要方式是 standalone 和 webroot.</p>
<p>鉴于 standalone 需要占用80或者443端口, 导致需要暂停服务器,这里我们使用 webroot 方式来验证域名.</p>
<p> webroot 模式下, acme 会在网站根目录下生成一个临时子目录 <code>.well-known/acme-challenge</code>，然后服务器会向这个路径发请求，如果请求成功，则验证通过, 随后会删除掉这个临时目录. </p>
<p>我们将根目录web root 默认为 /var/www, 同时在当前目录下, 新增两个文件夹, 用来分别挂载 /var/www 和 /acme.sh 目录.</p>
<p>/opt/global/ 目录下, 新建文件 <code>docker-compose.acme.sh.yml</code>, 内容如下:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">acme.sh:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">neilpang/acme.sh:3.0.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">acme.sh</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./nginx:/var/www</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./acme.sh:/acme.sh</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">daemon</span></span><br></pre></td></tr></table></figure>

<p>新增文件夹:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir nginx acme.sh</span><br></pre></td></tr></table></figure>

<p>生成的证书会存放在acme.sh 目录中, 而 nginx 目录用于验证域名.</p>
<p>这里我们起一个nginx 服务, 使得 traefik 将所有匹配 <code>/.well-known</code> 的路径请求都转发到这个nginx 上. 同时, 将当前目录下的 nginx 目录挂载到 nginx 服务的静态文件默认地址 <code>/usr/share/nginx/html</code> . </p>
<p>这样, 当使用 webroot 模式验证域名时, acme.sh 就会在 <code>/opt/global/nginx</code> 目录下,生成临时子目录 <code>.well-known/acme-challenge</code>, 而验证时, 访问 <code>/usr/share/nginx/html</code>, 也就是访问我们的 <code>/opt/global/nginx</code> 目录.</p>
<p>我们新增文件 <code>/opt/global/docker-compose.nginx.yml</code> , 添加如下内容:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:latest</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;traefik.enable=true&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;traefik.http.routers.global-nginx.rule=HostRegexp(`&#123;catch_all:.*&#125;`) &amp;&amp; PathPrefix(`/.well-known`)&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;traefik.http.routers.global-nginx.priority=999&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;traefik.http.services.global-nginx.loadbalancer.server.port=80&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./nginx:/usr/share/nginx/html</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">my_proxy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">my_proxy:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>这里有一点需要提一下.</p>
<p>我们给 nginx 服务配置 traefik 时,  设置了priority的值为999. 默认情况下,  traefik 中路径的 priority是根据rule的长度来决定的. 这里我们希望所有带有 <code>/.well-known</code> 的请求都转发到这个 nginx 上, 所以手动设置了999.</p>
<p>启动 nginx:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose --file docker-compose.nginx.yml up -d</span><br></pre></td></tr></table></figure>

<p>nginx 启动后, 我们启动 acme.sh.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose --file docker-compose.acme.sh.yml up -d</span><br></pre></td></tr></table></figure>

<p>开始签证书啦.</p>
<p>第一次使用acme.sh时, 需要注册用户邮箱:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it acme.sh sh -l</span><br><span class="line">acme.sh --register-account -m myEmail@gmail.com</span><br><span class="line">acme.sh --issue -d example.com -d api.example.com --webroot /var/www</span><br></pre></td></tr></table></figure>

<p>正常情况下, 会一切顺利. 默认CA是ZeroSSL.com</p>
<p>如果 acme.sh 签发证书时 Timeout了, 请设置代理. </p>
<h4 id="更新配置"><a href="#更新配置" class="headerlink" title="更新配置"></a>更新配置</h4><p>证书签发成功后, 我们查看 <code>/opt/global/acme.sh/example.com</code> 目录, 会看到刚刚生成的证书.</p>
<p>现在, 我们把新鲜出炉的证书用起来.</p>
<p>修改 <code>/opt/global/docker-compose.yml</code> , 将 <code>/opt/global/acme.sh</code> 目录挂载到 traefik 中:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">traefik:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">traefik:v2.2</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">&quot;traefik&quot;</span></span><br><span class="line">    <span class="string">......</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./traefik.toml:/traefik.toml</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./providers:/providers</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./acme.json:/acme.json</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./acme.sh:/acme.sh</span></span><br></pre></td></tr></table></figure>

<p>然后我们在traefik 的动态配置中把证书放进去.</p>
<p>在 <code>/opt/global/providers</code> 目录下, 新增 <code>example_com_certs.toml</code> 文件, 写入我们的证书路径:</p>
<figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="section">[[tls.certificates]]</span></span><br><span class="line">  <span class="attr">certFile</span> = <span class="string">&quot;/acme.sh/example.com/fullchain.cer&quot;</span></span><br><span class="line">  <span class="attr">keyFile</span> = <span class="string">&quot;/acme.sh/example.com/example.com.key&quot;</span></span><br></pre></td></tr></table></figure>

<p>同时, 我们需要将 <code>/opt/global/acme.json</code> 文件中 Certificates 部分, 有关 example.com 的证书内容删除.</p>
<p>最后, 修改 <code>/opt/web/docker-compose.yml</code>, 把tls 部分的配置, 改为options=default.</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">my-web:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">my-docker-image</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="string">......</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">    <span class="string">......</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;traefik.http.routers.my-web.entrypoints=websecure&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;traefik.http.routers.my-web.tls.options=default&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;traefik.http.services.my-web-http.loadbalancer.server.port=80&quot;</span></span><br></pre></td></tr></table></figure>

<p>重启 traefik.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker restart traefik</span><br></pre></td></tr></table></figure>

<p>再次请求 <a href="https://example.com/">https://example.com</a>, 会发现证书已经签成由ZeroSSL 颁发的证书. </p>
<p>替换完成. 撒花! 🥳</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://doc.traefik.io/traefik/">traefik doc</a></p>
<p><a href="https://doc.traefik.io/traefik/https/acme/">traefick: let’s Encrypt</a></p>
<p><a href="https://github.com/acmesh-official/acme.sh">acme.sh</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Acme</tag>
        <tag>Traefik</tag>
      </tags>
  </entry>
  <entry>
    <title>深入解析CID</title>
    <url>/posts/what-is-cid/</url>
    <content><![CDATA[<p>这是 IPFS 相关内容的第一篇, 打算花点时间把之前自己刷 <a href="https://proto.school/tutorials">ProtoSchool</a> 系列课程所学到的知识梳理下.</p>
<p>第一篇就从 CID 开始吧. </p>
<span id="more"></span> 

<p>当然, 又一次, 强烈推荐刷原文 ,妥妥真香系列.</p>
<h4 id="是什么与为什么"><a href="#是什么与为什么" class="headerlink" title="是什么与为什么"></a>是什么与为什么</h4><p>CID 是 Content Identifier 的缩写, 中文可以译成内容标识符.</p>
<p>CID是用来做什么的呢?    </p>
<p>我们知道, 网络中用于标识资源的方式是统一资源标识符URI(Uniform Resource Identifier). </p>
<p>URI主要有两种类型: URL(Uniform Resource Locator) 和 URN( Uniform Resource Name).</p>
<p>在Web2.0中,  我们最常用的是URL. 即统一资源定位符, 资源基于数据存储的位置来寻址. 这种标识资源的方式, 可以称之为 Location addressing.</p>
<p>比如一张图片的URL 为<code>https://www.puppies.com/cute_cat.jpg</code> .我们会预设, 这是一个有关小猫照片的URL. 访问该URL后, 会看到一张猫咪的萌照.</p>
<p>那么URLs这种标识资源的方式会有什么问题呢?</p>
<blockquote>
<p>最主要的就是安全问题.</p>
<p>我们无法通过一个URL, 来验证这个URL给到我们的是我们想要的内容. 比如上面的URL, 可能打开后, 不是一张猫咪的萌照, 而是一张小狗的照片, 甚至可能会是一个木马病毒.</p>
<p>也就是说, 托管在中心化网络上的文件, 它们的内容与它们基于位置的地址 URLs 是没有直接关系的. 我们不能通过URLs或者文件名来确定资源的内容.</p>
<p>另一个存在的问题是大量重复的资源文件存储在相同或者不同的服务器上. 用户看到的是不同的URLs, 但这些URLs 所标识的都是完全一样的资源文件, 这就造成空间上不必要的浪费.</p>
</blockquote>
<p>那么, 能否有一种基于文件内容的标识符呢? 我们能否从 location-based addressing 转向 content-based addressing?</p>
<blockquote>
<p>答案当然是Yes : P</p>
<p>在去中心化的网络中, 资源的标识就是基于内容的.</p>
<p>针对任意给定的资源文件, 我们可以通过特定的算法, 为其生成唯一的识别码. 即Content addressing. </p>
<p>这里要介绍的CID, 就是一种特殊形式的内容寻址. </p>
<p>这种基于内容的资源标识方式, 相比URLs, 除了更安全, 避免资源冗余外,  还有一个优势.</p>
<p>在中心化的网络中, 当我们基于某个URLs去获取数据时, 如果该服务点挂了, 那我们就无法获取到数据了, 但是在去中心化的网络中, 我们只要有所需要资源的内容地址, 比如CID, 就可以向全网的节点发送请求.</p>
</blockquote>
<p>了解了是什么和为什么后, 我们来看看CID具体是怎么生成的.</p>
<h4 id="基本构成及演进"><a href="#基本构成及演进" class="headerlink" title="基本构成及演进"></a>基本构成及演进</h4><p>CID 由IPFS 开发. 一个常见的CID 长这样:</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">QmY<span class="number">7</span>Yh<span class="number">4</span>UquoXHLPF<span class="meta">o2</span>XbhXkhBvFoPwmQUSa<span class="number">92</span>px<span class="symbol">nxjQuPU</span></span><br></pre></td></tr></table></figure>

<p>CID的大致创建过程, 是使用一种加密算法(cryptographic algorithm)，将任意大小的输入（数据或文件）映射到固定大小的输出。这种对于输入数据的转换, 称为加密哈希摘要(cryptographic hash digest)。</p>
<p>IPFS目前大部分CID是使用  <code>sha2-256</code> 算法, 也就是 256 bits, 32bytes. </p>
<p>从这里也可以看出, CID的长度, 是由 <strong>cryptographic hash</strong> 加密哈希算法来决定的, 而跟文件本身的大小无关. 任意长度的输入通过相同的哈希函数进行处理, 会得到固定长度的输出.</p>
<p>但鉴于哈希算法可能会被证明是不安全的,  比如 sha1 , 所以CID需要支持多种哈希算法.</p>
<p>既然要支持多种加密算法，那我们怎么知道这个特定的哈希值是使用哪种算法生成的呢?</p>
<p>CID 使用 multihash 来标识所用的加密算法.</p>
<p>具体就是<strong>将长度和使用的算法, 作为Hash值的唯一识别前缀</strong>.</p>
<h5 id="Multihash"><a href="#Multihash" class="headerlink" title="Multihash"></a>Multihash</h5><p>Multihash 遵循 TLV 模式, 即 <strong>T</strong>ype, <strong>L</strong>ength, <strong>V</strong>alue:</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/imagesT0006L02-multihash.jpeg"></p>
<p>Type</p>
<blockquote>
<p>标识所使用的加密算法 cryptographic algorithm. </p>
<p>通过 <a href="https://github.com/multiformats/multicodec/blob/master/table.csv">multicodec table</a> 可以查看对应的算法, 比如, <code>sha2-256</code>  的code 为 18, 用16进制表示则是 <code>0x12</code> </p>
</blockquote>
<p>Length</p>
<blockquote>
<p> 长度, 如果用的是<code>sha2-256</code> 算法, 则是32 bytes</p>
</blockquote>
<p>Value</p>
<blockquote>
<p>生成的哈希值</p>
</blockquote>
<p>当我们通过加密哈希摘要得到一个固定大小的输出时, 这个输出是二进制格式的. 对受众来说, 不是那么友好, 因此需要将其编码成字符串, 用字符串表示CID.</p>
<p>IPFS 最初是使用 base58btc 将二进制格式的哈希值, 进行编码压缩, 得到类似这样的结果:</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">QmY<span class="number">7</span>Yh<span class="number">4</span>UquoXHLPF<span class="meta">o2</span>XbhXkhBvFoPwmQUSa<span class="number">92</span>px<span class="symbol">nxjQuPU</span></span><br></pre></td></tr></table></figure>

<p>以 Qm开头, 这也就是第一代CID v0.</p>
<p>但随之问题也就来了.</p>
<ul>
<li><p>我们如何得知程序是用什么方法对原数据本身进行了编码? 我们知道文件内保存数据的形式是二进制, 将二进制数据序列化用的是 protobuf 还是JSON, 抑或是其他 ？</p>
</li>
<li><p>我们如何得知程序是用什么方法来创建CID的字符串表示的? CIDv0 版本使用了 base58btc , 但是如果我们想要使用 base32 或者 base64 怎么办呢?</p>
</li>
</ul>
<p>为了解决这两个问题, CID不得不演进, 由此, CIDv1应运而生.</p>
<p>针对第一个问题,  CIDv1 引入了另外的前缀, 用来标识针对文件数据所使用的编码方式. 也就是 Multicodec Prefix.</p>
<p>这样, 我们的CID 就扩展成了这样:</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/imagesT0006L03-multicodec.png"></p>
<p>这里 Multicodec Prefix 的值是 01110000, 即 0x70, 查看<a href="https://github.com/multiformats/multicodec/blob/master/table.csv">codec identifier table</a>, 对应的就是 dag-pb. </p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images20220303145823.png"></p>
<p>dag-pb 表示 MerkleDAG protobuf, 是 <a href="https://ipld.io/">IPLD</a> (<strong>I</strong>nter<strong>P</strong>lanetary <strong>L</strong>inked <strong>D</strong>ata)的一种. [不懂 IPLD? 没事, 我暂时也没整明白, 先把 dag-pb 当作是一种特殊的 protobuf 看待, 不影响整体理解]</p>
<p>为了区分版本, CIDv1 还添加了 version prefix.</p>
<p>所以整个 CID 的构成就变成这样:</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="section">&lt;cid-version&gt;</span><span class="section">&lt;multicodec&gt;</span><span class="section">&lt;multihash-algorithm&gt;</span><span class="section">&lt;multihash-length&gt;</span><span class="section">&lt;multihash-hash&gt;</span></span><br></pre></td></tr></table></figure>

<p>其中, cid-version 表示CID的版本.</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/imagesT0006L04-version-prefix.png"></p>
<p>针对第二个问题, 我们已经知道, CIDv0 中, 默认使用base58btc.</p>
<p>那么在CIDv1及之后的版本中, 如果我们使用了其他的编码方式, 如何让他人知道你使用的是哪种编码方法呢?</p>
<p>大概你也猜到了, 继续用前缀. [不得不叹一句: 前缀大法好]</p>
<p>Multibase prefix 就是用来表示在字符串和二进制格式之间转换CID时所使用的基础编码。</p>
<p>与前面Multicodec prefix 不同的是,  它不是放在二进制格式的输出结果中, 而是放在了转换后的字符串中.</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/imagesT0006L05-multibase-prefix.png"></p>
<p>来看两个字符串格式的CID:</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">QmbWqxBEKC3P8tqsKc98xmWNzrzDtRLMiMPL8wBuTGsMnR</span></span><br><span class="line">bafybeigdyrzt5sfp7udm7hu76uh7y26nf3efuylqabf3oclgtqy55fbzdi</span><br></pre></td></tr></table></figure>

<p>我们知道第一个CID是CIDv0, 因为它以Qm开头, 第二个以b开头, 表示编码方法为 base32.</p>
<p>通过查看完整的 <a href="https://github.com/multiformats/multibase/blob/master/multibase.csv">multibase</a> 表, 可以知道CID具体所采用的基础编码方法.</p>
<p>至此, 我们基本把CID的构成和演进理得差不多了.</p>
<p>如果你本地安装了ipfs,  通过命令行, 可以查看CID 的相关内容, 比如支持的base encoding:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ipfs cid bases</span><br></pre></td></tr></table></figure>

<p>支持的 Cryptographic hashing  算法:</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ipfs cid hashes</span></span><br></pre></td></tr></table></figure>

<p>目前ipfs (0.11.0) 的CID, 依然默认是 v0 版本.</p>
<h4 id="在线解析"><a href="#在线解析" class="headerlink" title="在线解析"></a>在线解析</h4><p>考虑到CID的构成复杂,  IPFS提供了<a href="https://cid.ipfs.io/">CID inspector</a> 来帮助我们解析CID结果. </p>
<p>以 QmbWqxBEKC3P8tqsKc98xmWNzrzDtRLMiMPL8wBuTGsMnR 为例:</p>
<p>结果如下:</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/imagesimage-20220205151801443.png"></p>
<p>这里我们可以分别看到 multibase, version, muticodec, multihash对应的值.</p>
<p>稍稍提一下, 因为 multibase和 muticodec 是CIDv1后提出的, 而我们的CID 是v0版本的,  所以解析后, 这两部分显示了 implicit.</p>
<p>我们将解析后得到的CIDv1, 继续解析, 得到如下的结果:</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/imagesXnip2022-02-05_15-21-18.jpg"></p>
<p>此时, 我们看到multibase 为base32.</p>
<p>不管是 v0 还是 v1 的CID, 它们的摘要值都是C3C4…31DE94391A, 表示着同一份文件.</p>
<p>OK, 基本算是缕得差不多了, CID的内容就先到这啦.</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://en.wikipedia.org/wiki/Uniform_Resource_Identifier">URI  wiki</a></p>
<p><a href="https://github.com/ipfs/go-ipfs">go-ipfs</a></p>
<p><a href="https://proto.school/anatomy-of-a-cid">Anatomy of a CID</a></p>
<p><a href="https://proto.school/content-addressing">content addressing</a></p>
<p><a href="https://github.com/multiformats/multicodec">multicodec</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>IPFS</tag>
      </tags>
  </entry>
  <entry>
    <title>Variables</title>
    <url>/posts/vimscript-learning-on-variables/</url>
    <content><![CDATA[<p>时隔一个多月没更了, 这频率委实慢了些😄️</p>
<p>虽慢但不弃坑, 来继续填坑😉.</p>
<p>从这一节开始, 我们正式来学 VimScript 的语法知识啦.</p>
<p>先从变量开始. 来看下变量的声明, 赋值及作用域.</p>
<h4 id="声明与赋值"><a href="#声明与赋值" class="headerlink" title="声明与赋值"></a>声明与赋值</h4><p>VimScript 使用 let 来声明变量.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:<span class="built_in">let</span> foo=<span class="string">&#x27;bar&#x27;</span></span><br><span class="line">:<span class="built_in">echo</span> foo</span><br><span class="line">:<span class="built_in">let</span> foo=2</span><br><span class="line">:<span class="built_in">echo</span> foo</span><br></pre></td></tr></table></figure>

<p>会分别输出:</p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line"><span class="built_in">bar</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>之前我们提到 option, option 可以通过 <code>&amp;&#123;option&#125;</code> 来做为变量进行读写操作.</p>
<p>看个例子:</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">:<span class="keyword">set</span> textwidth=80</span><br><span class="line">:echo <span class="comment">&amp;textwidth</span></span><br><span class="line">:let <span class="comment">&amp;textwidth = &amp;textwidth + 10</span></span><br><span class="line">:echo <span class="comment">&amp;textwidth</span></span><br><span class="line">:<span class="keyword">set</span> <span class="comment">textwidth?</span></span><br></pre></td></tr></table></figure>

<p>会依次输出:</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">80</span><br><span class="line">90</span><br><span class="line"><span class="attribute">textwidth</span>=90</span><br></pre></td></tr></table></figure>

<p>这里也可以看出, 把 option 转为变量, 使用 let 来更新 option 的值, 比 <code>set option=&#123;value&#125;</code> 要灵活一些.</p>
<p>如果只想针对当前 Window 的 option 进行写操作而不修改全局的 option, 只需要给变量添加相应的 namespace 即可.[其实是变量的作用域, 待会会提到]</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="meta">:let &amp;l:textwidth</span> = 10</span><br><span class="line">:echo &amp;textwidth</span><br></pre></td></tr></table></figure>

<p>此时输出是10. [我们也可以使用<code>:setlocal textwidth = 10</code> 来设置 local textwidth]</p>
<p>开一个新的 Window, 继续输出:</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="symbol">:e</span> text.txt</span><br><span class="line"><span class="symbol">:echo</span> &amp;textwidth</span><br></pre></td></tr></table></figure>

<p>此时输出是 90.</p>
<p>说明刚刚针对 textwidth 的修改, 只对前一个 Window 有效.</p>
<p>[ 这里需要在不同的 Windows 下进行上面的操作, 因为同一个 Window 下的 buffers 共享相同的 option,  如果在同一个 Window 下的不同 buffer 中执行 <code>:echo &amp;textwidth </code> , 输出都是10.]</p>
<p>除了 option 外, registers 也可以作为变量来进行读写. 格式为 <code>@&#123;register&#125;</code></p>
<p>比如, 我们设置寄存器 a 的值为 hello.</p>
<figure class="highlight ceylon"><table><tr><td class="code"><pre><span class="line">:<span class="keyword">let</span> <span class="meta">@a</span>=<span class="string">&quot;hello&quot;</span></span><br></pre></td></tr></table></figure>

<p>Normal 模式下, 在文件的任何位置, 按<code>&quot;ap</code>,  Vim 会把 寄存器 a 的值 hello, 粘贴在光标处.</p>
<p>也可以读取寄存器的值. 在文件中, 选中某个单词, 比如 world, 按 <code>y</code> 后, 在命令行执行:</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">:<span class="keyword">echo</span> @<span class="comment">&quot;</span></span><br></pre></td></tr></table></figure>

<p>会输出 world.</p>
<p>使用<code>:help registers</code> , 可以查看所有可以读写的寄存器.</p>
<p>除了声明变量外, 当我们想要删除某个变量时, 可以使用 <code>unlet</code>.</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="symbol">:unlet</span> foo</span><br><span class="line"><span class="symbol">:echo</span> foo</span><br></pre></td></tr></table></figure>

<p>此时会输出错误信息:  Undefined variable: foo.</p>
<p>注意, unlet 不能用于 <code>&amp;&#123;option&#125;</code>, <code>@&#123;register&#125;</code>.</p>
<h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4><p>在设置 local option 时, 我们已经提到了作用域.</p>
<p>现在以 buffer 为例, 我们来定义一个 buffer-variable:</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="meta">:let b:hello</span> = &quot;world&quot;</span><br><span class="line"><span class="meta">:echo b:hello</span></span><br></pre></td></tr></table></figure>

<p>输出: world.</p>
<p>在另一个 buffer 中, 执行:</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">:<span class="keyword">echo</span> <span class="variable">b:hello</span></span><br></pre></td></tr></table></figure>

<p>输出: Undefined variable: b:hello.</p>
<p>因为声明的 b:hello 只对前一个 buffer 有效.</p>
<p>可以通过 <code>:help internal-variables</code> , 来查看内部变量的 scope 列表.</p>
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">|<span class="type">buffer</span>-variable|    <span class="type">b</span>:	  <span class="keyword">Local</span> to the current buffer.</span><br><span class="line">|<span class="type">window</span>-variable|    <span class="type">w</span>:	  <span class="keyword">Local</span> to the current window.</span><br><span class="line">|<span class="type">tabpage</span>-variable|   <span class="type">t</span>:	  <span class="keyword">Local</span> to the current tab page.</span><br><span class="line">|<span class="type">global</span>-variable|    <span class="type">g</span>:	  <span class="keyword">Global</span>.</span><br><span class="line">|<span class="type">local</span>-variable|     <span class="type">l</span>:	  <span class="keyword">Local</span> to a function.</span><br><span class="line">|<span class="type">script</span>-variable|    <span class="type">s</span>:	  <span class="keyword">Local</span> to a |<span class="type">:source</span>|<span class="type">&#x27;ed</span> Vim script.</span><br><span class="line">|<span class="type">function</span>-argument|  <span class="type">a</span>:	  <span class="keyword">Function</span> argument (only inside a function).</span><br><span class="line">|<span class="type">vim</span>-variable|       <span class="type">v</span>:	  <span class="keyword">Global</span>, predefined <span class="built_in">by</span> Vim.</span><br></pre></td></tr></table></figure>

<p>这里可以看出, 刚刚我们通过<code>&amp;l:textwidth=&#123;value&#125;</code> 设置了textwidth, 我们可以猜 Vim 中的 <code>&#123;option&#125;</code>, <code>&#123;option&#125;=</code> 本质上应该是个函数.</p>
<p>上述列表中的 script-variable,  function-argument 大量存在plugin中，随意选择一个Vim 插件，查看其源代码，就会看到<code>s:var</code>, <code>a:var</code> 的身影.</p>
<p>OK, 变量的介绍就到这啦, 下一篇来说说 if.</p>
]]></content>
      <categories>
        <category>VimScript 学习笔记</category>
      </categories>
      <tags>
        <tag>Vim</tag>
      </tags>
  </entry>
  <entry>
    <title>读《费马大定理》</title>
    <url>/posts/notes-of-fermat-s-last-theorem/</url>
    <content><![CDATA[<p>感谢这本书, 让我从封城的焦虑中，莫名其妙的平静了下来.</p>
<span id="more"></span>
<p>整本书围绕着费马大定理讲了很多个小故事, 这些故事里, 出现了很多熟悉的名字, 熟悉的定理或猜想, 有些甚至唤起了我久远的记忆, 看得时候时不时思路跳跃下, 哦, 原来以前中学课本上的这个人, 他在那个时代做了这么多事啊…….</p>
<p>鉴于书中穿插了一些数学方面较艰深的知识, 我也深知我这理解能力, 就不丢人了. 所以这里不打算细细缕一遍数学家安德鲁怀尔斯(Andrew Wiles)是如何在1993年证明了费马大定理的. 感兴趣的小伙伴可以看看2016年教授在哈佛的一场分享. [YouTube: <a href="https://www.youtube.com/watch?v=4t1mgEBx1nQ&list=WL">Andrew Wiles: Fermat’s Last theorem: abelian and non-abelian approaches</a> ]</p>
<p>这里就简单过一下整本书的主要内容, 然后再扯一扯书中提到的让我印象深刻的一些内容.</p>
<p>开始吧.</p>
<h4 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h4><p>全书共８章, 采取了倒序的方式, 先简单描述了1993年那场费马大定理的证明, 随后从公元前6世纪的毕达哥拉斯学派开始, 作者讲述了费马大定理所基于的毕达哥拉斯定理的提出和证明, 然后娓娓道来古希腊最后一位数学卫士丢番图的著作《算术》是如何历经浩劫, 来到了17世纪的法国, 出现在了费马的书桌上, 至此, 故事才正式进入了正题. </p>
<p>17世纪的”业余数学家”费马在看《算术》时, 喜欢在书的页边处写写画画, 记录自己的思考. 而费马的这些注记在他过世后, 被数学家们注意到, 人们发现这些看似随意的注记, 包含了一系列的定理.</p>
<p>几个世纪后, 费马的这些评注一个接一个地被证明了, 只有费马大定理却固执地拒绝被征服。由于它是需要被证明的评注中的最后一个, 故称为 Fermat’s <strong>Last</strong> theorem. 中文译作费马大定理.</p>
<p>费马大定理的表述很简单:</p>
<pre><code>                      x^n + y^n = z^n, 当 n &gt; 2 时没有正整数解
</code></pre>
<p>这个出谜的人, 还恶作剧地在书页中写下了这样的评注:</p>
<blockquote>
<p>Cuius rei demonstrationem mirabilem sane detexi hanc marginis exiguitas non caperet.<br>对这个命题, 我有一个十分美妙的证明，这里空白太小，写不下。</p>
</blockquote>
<p>随后的三个多世纪里, 无数的数学家为了证明费马大定理, 耗尽心力, 经历了从入门到放弃的心酸历程….</p>
<p>最先打破僵局的是18世纪的天才莱昂哈德·欧拉. </p>
<p>欧拉采用费马的无穷递降法, 通过将虚数引入到他的证明中, 成功地证明了n=3的情况. </p>
<p>随后的两个多世纪里, 数学家热尔曼, 柯西和拉梅,  库默尔都间接或者直接推动了费马大定理的证明. </p>
<p>20世纪中后期, 两位来自日本的数学家, 谷山丰和志村五郎, 在一次国际研讨会上提出了谷山志村猜想,  后经数学家弗赖的推理, 发现证明谷山志村猜想与证明费马大定理有着直接的关联. 1993年, 安德鲁怀尔斯通过证明谷山志村猜想, 证明了费马大定理.</p>
<p>整个故事到这也就讲完了.</p>
<p>事后怀尔斯讲述了这个从儿时就让他痴迷的定理, 对于他个人的意义:</p>
<blockquote>
<p>对我来说再也没有别的问题具有与费马大定理相同的意义，这是我童年时代的恋情，没有东西能取代它。 </p>
<p>我着迷于这个问题已经8年了，无时无刻——从早晨醒来到晚上入睡——我都在思考它。对于思考一件事那是一段太长的时光。那段特殊的漫长的探索现在结束了，我的心灵归于平静。 </p>
</blockquote>
<p>大概, 对于怀尔斯而言, 最大的收获不是名利, 而是心灵终于可以归于平静.</p>
<h4 id="质数加密和欧拉"><a href="#质数加密和欧拉" class="headerlink" title="质数加密和欧拉"></a>质数加密和欧拉</h4><p>书中涉及了数论, 几何, 概率论, 甚至群论等领域的专业知识, 很干货…….</p>
<p>写得很好, 我都没怎么看懂.</p>
<p>这里提一下比较惊喜的质数.</p>
<p>先来看看书中一段针对质数在密码学上的应用的描述, 涉及了公钥和私钥的生成逻辑.</p>
<blockquote>
<p>为了制成我自己的私人密钥，我会取两个大质数，每一个多达80个数字，然后将它们乘起来得到一个大得多的非质数。为了打乱信息所需要的一切，就是知道这个大的非质数，然而要整理信息则需要知道已经被乘在一起的原来的两个质数，它们称为质因数。现在我可以公开大的非质数，也即密钥中打乱信息的那一半，而自己保存那两个质因数，即密钥中整理信息的那一半。重要的是，即使人人都知道这个大的非质数，他们要判断出那两个质因数却仍然非常困难。</p>
</blockquote>
<p>这里提到的大的非质数, 构成了公钥, 而自己保存的那两个质因数, 构成了私钥.</p>
<p>是不是很熟悉?</p>
<p>著名的 RSA 非对称加密算法就是基于这个逻辑来的.</p>
<p>RSA 算法中通常选用512位的大质数p,q , 生成 1024 位的 n,  满足 n =  pq.</p>
<p>公钥是公开的, 含有 n,  私钥中包含仅自己知道的 { p, q }.</p>
<p>如果想要破解私钥, 就需要在已知 n 的情况下, 求解出大质数 p, q, 满足 n = pq, 这在数学上是非常难求解的. 甚至目前可以认为是不可能的.</p>
<p>我之前对RSA的实现并不理解, 现在再来看, 莫名觉得超级合理, 算是意外的惊喜.</p>
<p>书中后半部分涉及到了椭圆曲线，当时看得时候也挺意外的, 觉得BlockChain的那些开拓者们, 真是牛逼, 用的技术都是很前沿的数学方面的研究成果. 这里就不展开写了, 毕竟对椭圆曲线, 我是一脸懵逼…..</p>
<p>书中还提到了很多伟大的科学家, 不仅限于数学家, 也提及了计算机领域的冯诺伊曼和密码学方面的阿兰图灵. 但是让我印象深刻的, 却是欧拉.</p>
<p>如果说音乐大师中, 无法绕开失聪后依然高产的贝多芬, 那么在科学领域里, 不得不提天赋型选手欧拉, 他在失明后的17年里, 依然以惊人的速度产出学术论文, 在他的那个时代, 其产量之多, 无人能及. 据说彼得堡科学院为了整理他的著作, 足足忙碌了47年.</p>
<p>1707年, 欧拉生于瑞士巴塞尔, 其父为牧师, 欧拉最初服从他父亲的意愿, 研究神学并从事神职工作. 当时盛产数学家的伯努利家族也在巴塞尔, 欧拉的一位朋友来自伯努利家族, 他发现了欧拉在数学方面展现出来的天赋, 因为朋友的极力劝说, 欧拉最终选择从事数学研究. </p>
<blockquote>
<p>欧拉有着令人难以置信的直觉和超人的记忆力，据说他能够在头脑中详细列出一大堆完整无缺的演算式而无须用笔写在纸上。在整个欧洲他被誉为“分析的化身”，法国科学院院士弗朗索瓦·阿拉戈说，“欧拉计算时就像人呼吸或者鹰乘风飞翔一样无需明显的努力.”</p>
</blockquote>
<p>就这样, 这位半路出道的少年全身心投入到了数学的研究中, 并在随后的人生里持续高产, 在数学界留下了浓墨重彩的一笔.</p>
<p>值得一提的是, 与历史上一些终身未婚的科学家(柏拉图, 牛顿)不同, 欧拉27岁时,  迎娶了一位美术老师, 婚后两人育有十多个儿女. 暮年时儿孙绕膝.</p>
<p>真妥妥人生赢家.</p>
<h4 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h4><p>因为上海封城，我体验了一把上一辈人被饥荒支配的恐慌,  加之时不时满屏的负面消息, 搞得整个人一度情绪低落，没想到刷完这本书后, 内心竟平静了许多, 算是意外的收获.</p>
<p>书中提到20世纪的希尔伯特, 一位一生致力于建立一个相容的数学体系的践行者, 他为了激励后来的数学家们, 在自己的墓碑上铭刻了这么一段话:</p>
<blockquote>
<p>Wir nüsssen wissen,<br>Wir werden wissen.</p>
<p>我们必须知道,</p>
<p>我们将会知道.</p>
</blockquote>
<p>不由得肃然起敬.</p>
<p>致敬所有在追寻真理的路上勇于开拓的人们, 是你们, 给了人类终将知道的底气.</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://book.douban.com/subject/1322358/">费马大定理</a></p>
<p><a href="https://zh.wikipedia.org/wiki/%E8%90%8A%E6%98%82%E5%93%88%E5%BE%B7%C2%B7%E6%AD%90%E6%8B%89">wiki 莱昂哈德·欧拉</a></p>
]]></content>
      <categories>
        <category>Reading</category>
      </categories>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>今日宜出门</title>
    <url>/posts/the-right-to-walk-out/</url>
    <content><![CDATA[<p>被困了40多天, 小区终于熬成了防范区. 趁着门口一时无人看守, 溜了出去.</p>
<span id="more"></span>

<p>出门前, 在美团上看了下附近能送货的店, 先朝着不远的一家绝味鸭脖奔去.</p>
<p>沿路基本没什么人, 大部分店都关了.</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images61651217381_.pic.jpg"></p>
<p>路过一个小区, 看到有人在理发.[后面那位黑衣大哥本来在排队, 看我在拍, 躲了过去, 理发师应该是骑车过来的, 袋里装了工具]</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images11651217376_.pic.jpg"></p>
<p>到店后, 店员说鸭脖没了, 要了锁骨, 问了下附近哪里有营业的超市, 告诉我说附近有家全家.</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images41651217379_.pic.jpg"></p>
<p>去了最近的全家, 但是门上贴着暂停营业, 手机上查了下, 附近有家喜士多, 改奔喜士多.</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images316512173781_.pic.jpg"></p>
<p>喜士多店门前放了两把椅子, 不让进店, 走近发现里面有店员.</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images71651217382_.pic.jpg"></p>
<p>店里堆了不少纸箱, 店员直接从纸箱里拿商品.</p>
<p>买了薯片, 可乐之类, 店里的小哥问: 再给你来两袋花生? 好, 要得.</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images51651217380_.pic.jpg"></p>
<p>拿到袋子的那一刻, 有一种”我真富有”的错觉…..</p>
<p>回去的路上, 偶遇了一顶帐篷, 帐篷里传出粗旷的男声, 在打电话.</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images216512173771_.pic.jpg"></p>
<p>一路基本没什么行人, 马路上多数是开着电动车的外卖小哥,  偶尔会看到一些警车和120开过.</p>
<p>从来没有见到过这样的上海.</p>
<p>回去后, 开了瓶可乐, 听到了久违的气泡声.</p>
<p>恍如隔世.</p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>Life</tag>
      </tags>
  </entry>
  <entry>
    <title>deoplete failed to init in Vim8</title>
    <url>/posts/deoplete-fail-to-init-in-vim8/</url>
    <content><![CDATA[<p>踩了两次坑, 记录下.</p>
<span id="more"></span>

<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>执行<code>brew upgrade </code> 后, 终端打开 <code>.vimrc</code> 文件一直报错:</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images20220507151533.png"></p>
<p>显示 [vim-hug-neovim-rpc] requires one of  <code>:pythonx import [pynvm|neovim]</code>.</p>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p><a href="https://github.com/roxma/vim-hug-neovim-rpc">vim-hug-neovim-rpc</a> 的 Issues  <a href="https://github.com/roxma/vim-hug-neovim-rpc/issues/47">Error Every time I load in vim8 (not neovim)</a> 提到了这个.</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images20220507152627.png"></p>
<p>Vim 跑了下<code>:pythonx import sys; print(sys.path)</code>,  发现Vim里面用的Python是3.10. </p>
<p>而我本地的 python3 版本却是 3.7.9.  猜测<code>brew upgrade</code> 后,  relink了3.7.9?</p>
<p>参考上面的解法, 终端执行:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/local/opt/python@3.10/bin/pip3 install pynvim</span><br></pre></td></tr></table></figure>

<p>再次打开<code>.vimrc</code>, 无报错. OK.</p>
<p>最后, 为了避免下次 brew upgrade 又出问题, 建议更新<code>zshrc</code>:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &#x27;export PATH=&quot;/usr/local/opt/python@3.10/bin:$PATH&quot;&#x27; &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure>

<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://github.com/roxma/vim-hug-neovim-rpc/issues/47">Error Every time I load in vim8 (not neovim)</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Vim</tag>
      </tags>
  </entry>
  <entry>
    <title>Install Command Line Developer Tools stuck on finding software</title>
    <url>/posts/install-command-line-developer-tools-stuck-in-finding-software/</url>
    <content><![CDATA[<p>还是记录下,  虽然大概率是不会遇到这种情况的.</p>
<span id="more"></span> 

<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>拿到新机Mac, 第一次安装Homebrew 时, 一直卡在了 installing Command Line Developer Tools. 于是改用:</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">xcode-<span class="keyword">select</span> <span class="comment">--install</span></span><br></pre></td></tr></table></figure>

<p>安装时, 一直卡在了 finding Software.</p>
<p><img src="https://raw.githubusercontent.com/Lupeipei/blogImages/master/images20220512082710.png"></p>
<p>环境:</p>
<p>MacOS Big Sur 11.6</p>
<p>xcode-select version 2384</p>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>改用手动安装.</p>
<p>去官方 <a href="https://developer.apple.com/support/xcode/">support Xcode</a> 查看对应 OS 需要安装的 Xcode 和 Command line tools for Xcode.</p>
<p>以MacOS Big Sur 11.6为例, Xcode 11 ~ 13.2 都可以. 但如果选择安装 version 11/12 后, 在最后会弹出报错 OS version too new. 建议直接安装可适配的最新版本. </p>
<p>这里选择 Xcode 13.2.1, 对应的下载 Command line tools for Xcode 13.2.</p>
<p>手动安装后, 重新 install homebrew, OK.</p>
<h4 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h4><p>现在来看, 这个问题很简单, 但是当时我在这里卡了好几个小时. </p>
<p>我去 App Store 下载 Xcode, 提示OS 需要升级到Monterey 12. 于是改去升级系统, 但是升级 OS 时, 一直卡在 finding update. 然后Google了下, 把相关的 .plist 文件删除, 重启电脑. 再次打开. OS升级依然卡在 finding update….</p>
<p>于是陷入了一个chain里, 为了解决A, 需要解决B, 为了解决B, 需要解决C, 然后卡在C….</p>
<p>后面觉得不对,  为什么一定要升级系统? 为了安装 Xcode.那 Xcode一定要从 App Store 安装?  不必, 去官方下载页面找适配的就行.</p>
<p>换个思路容易多了.</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://developer.apple.com/support/xcode/">support Xcode</a></p>
<p><a href="https://www.reddit.com/r/MacOSBeta/comments/hgub53/install_command_line_developer_tools_is_stuck_on/">“Install Command Line Developer Tools” is stuck on “Finding software”</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>暂停播放</title>
    <url>/posts/lying-flat/</url>
    <content><![CDATA[<p>距离上次Blog更新, 已4月有余.</p>
<span id="more"></span> 

<p>妥妥摆烂的节奏.</p>
<p>像是给自己放了双倍的暑假一样.</p>
<p>这段时间做了什么呢?</p>
<p>种花种菜. 培植豆芽, 刷剧闲逛…..</p>
<p>兴致冲冲去网上买青椒, 小番茄, 生菜, 香芹之类的嫩苗, 栽种, 浇水, 幻想过不了多久, 我的小阳台就会硕果累累. 但青椒仅开了几次花, 从未结果, 而小番茄, 生菜基本全军覆没, 香芹还剩一两棵在苦苦撑着.</p>
<p>不过开心的是, 买到了一棵很不错的柠檬树, 很健康, 长势可喜, 期待明年枝头能挂上小小的柠檬.</p>
<p>再说培植豆芽, 这个真的蛮奇特的.</p>
<p>绿豆芽培植很简单, 基本4~5天就能发好. 往往第3/4天时, 猛涨, 掀开纱布, 看到窜出来大批大批的豆芽, 冒着尖尖, 心喜, 真心好看.</p>
<p>培植花生芽就不那么顺利了.</p>
<p>培植花生芽时, 正值酷暑, 避光后, 容易发霉, 后来我索性改成了种花生, 发芽后, 都扔进花盆里. 好在最近花生苗开花了, 也算是个意外收获.</p>
<p>另一个意外收获则是紫薯, 买来的紫薯因保存不当, 发了芽, 长出很多深紫色的嫩芽,  随手扔土里, 不定时浇些水, 它们便肆意生长, 藤叶攀爬着, 占了大半个窗户, 现在就坐等着秋末的时候收割.</p>
<p>不得不说, 有心栽种的大部分都挂了, 无心栽种的倒个个长得贼壮实.</p>
<p>这样看, 似乎这段时间过得还不错.</p>
<p>但好像并不是.</p>
<p>这几个月来, 感觉我基本开启了躺平模式.</p>
<p>刚进新公司时, 学了一些 Lua, Elixir 的知识, 后面没用上, 也基本全忘了.</p>
<p>之前定下的计划, 想要做的事情, 也全部搁浅.</p>
<p>日常上班, 下班后, 就出门溜达溜达, 回来刷刷剧. 没事就倒腾倒腾绿植.</p>
<p>但是看到他人很努力去学习新的知识, 去提升自己时, 又会不自觉陷入了焦虑, 告诫自己不能躺平, 但是内心想要躺平, 结果弄得很拧巴.</p>
<p>归根究底, 还是没有那么的喜欢.</p>
<p>若真的喜欢, 他人眼中的”努力勤奋”, 在当事人看来, 不过是在”玩”而已. 不是吗?</p>
<p>可谁又不喜欢进步呢?</p>
<p>自己学会了从前不会的技能, 理解了之前不能理解的事物, 完成了曾经以为不可能完成的事情,  这种喜悦, 这种快乐, 远远不是刷刷短视频逛吃逛吃之类的活动所能比的.</p>
<p>这样想来, 进步确实是刚需.而且是永恒的刚需.</p>
<p>嗯, 得换下模式, 毕竟一直躺平的话, 容易退化.</p>
<p>假期暂时结束, 带上小铲子, 填坑填坑.</p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>Life</tag>
      </tags>
  </entry>
</search>
